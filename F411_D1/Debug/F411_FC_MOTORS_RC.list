
F411_FC_MOTORS_RC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007944  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08007adc  08007adc  00017adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c04  08007c04  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08007c04  08007c04  00017c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c0c  08007c0c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c0c  08007c0c  00017c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c10  08007c10  00017c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08007c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fcc  2000008c  08007ca0  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001058  08007ca0  00021058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a740  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a34  00000000  00000000  0003a83f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  0003e278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001269  00000000  00000000  0003fa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d7f  00000000  00000000  00040c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d79a  00000000  00000000  000599f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c12f  00000000  00000000  00077192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000066c0  00000000  00000000  001132c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00119984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000008c 	.word	0x2000008c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007ac4 	.word	0x08007ac4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000090 	.word	0x20000090
 80001d4:	08007ac4 	.word	0x08007ac4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b970 	b.w	80004e0 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	460f      	mov	r7, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4694      	mov	ip, r2
 800022c:	d965      	bls.n	80002fa <__udivmoddi4+0xe2>
 800022e:	fab2 f382 	clz	r3, r2
 8000232:	b143      	cbz	r3, 8000246 <__udivmoddi4+0x2e>
 8000234:	fa02 fc03 	lsl.w	ip, r2, r3
 8000238:	f1c3 0220 	rsb	r2, r3, #32
 800023c:	409f      	lsls	r7, r3
 800023e:	fa20 f202 	lsr.w	r2, r0, r2
 8000242:	4317      	orrs	r7, r2
 8000244:	409c      	lsls	r4, r3
 8000246:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024a:	fa1f f58c 	uxth.w	r5, ip
 800024e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000252:	0c22      	lsrs	r2, r4, #16
 8000254:	fb0e 7711 	mls	r7, lr, r1, r7
 8000258:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800025c:	fb01 f005 	mul.w	r0, r1, r5
 8000260:	4290      	cmp	r0, r2
 8000262:	d90a      	bls.n	800027a <__udivmoddi4+0x62>
 8000264:	eb1c 0202 	adds.w	r2, ip, r2
 8000268:	f101 37ff 	add.w	r7, r1, #4294967295
 800026c:	f080 811c 	bcs.w	80004a8 <__udivmoddi4+0x290>
 8000270:	4290      	cmp	r0, r2
 8000272:	f240 8119 	bls.w	80004a8 <__udivmoddi4+0x290>
 8000276:	3902      	subs	r1, #2
 8000278:	4462      	add	r2, ip
 800027a:	1a12      	subs	r2, r2, r0
 800027c:	b2a4      	uxth	r4, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028a:	fb00 f505 	mul.w	r5, r0, r5
 800028e:	42a5      	cmp	r5, r4
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x90>
 8000292:	eb1c 0404 	adds.w	r4, ip, r4
 8000296:	f100 32ff 	add.w	r2, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x294>
 800029e:	42a5      	cmp	r5, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x294>
 80002a4:	4464      	add	r4, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11e      	cbz	r6, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40dc      	lsrs	r4, r3
 80002b4:	2300      	movs	r3, #0
 80002b6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0xbc>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80ed 	beq.w	80004a2 <__udivmoddi4+0x28a>
 80002c8:	2100      	movs	r1, #0
 80002ca:	e9c6 0500 	strd	r0, r5, [r6]
 80002ce:	4608      	mov	r0, r1
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	fab3 f183 	clz	r1, r3
 80002d8:	2900      	cmp	r1, #0
 80002da:	d149      	bne.n	8000370 <__udivmoddi4+0x158>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	d302      	bcc.n	80002e6 <__udivmoddi4+0xce>
 80002e0:	4282      	cmp	r2, r0
 80002e2:	f200 80f8 	bhi.w	80004d6 <__udivmoddi4+0x2be>
 80002e6:	1a84      	subs	r4, r0, r2
 80002e8:	eb65 0203 	sbc.w	r2, r5, r3
 80002ec:	2001      	movs	r0, #1
 80002ee:	4617      	mov	r7, r2
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d0e2      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	e9c6 4700 	strd	r4, r7, [r6]
 80002f8:	e7df      	b.n	80002ba <__udivmoddi4+0xa2>
 80002fa:	b902      	cbnz	r2, 80002fe <__udivmoddi4+0xe6>
 80002fc:	deff      	udf	#255	; 0xff
 80002fe:	fab2 f382 	clz	r3, r2
 8000302:	2b00      	cmp	r3, #0
 8000304:	f040 8090 	bne.w	8000428 <__udivmoddi4+0x210>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2101      	movs	r1, #1
 8000314:	fbb2 f5f7 	udiv	r5, r2, r7
 8000318:	fb07 2015 	mls	r0, r7, r5, r2
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000322:	fb0e f005 	mul.w	r0, lr, r5
 8000326:	4290      	cmp	r0, r2
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x124>
 800032a:	eb1c 0202 	adds.w	r2, ip, r2
 800032e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4290      	cmp	r0, r2
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2b8>
 800033a:	4645      	mov	r5, r8
 800033c:	1a12      	subs	r2, r2, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb2 f0f7 	udiv	r0, r2, r7
 8000344:	fb07 2210 	mls	r2, r7, r0, r2
 8000348:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x14e>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 32ff 	add.w	r2, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x14c>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2c2>
 8000364:	4610      	mov	r0, r2
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036e:	e79f      	b.n	80002b0 <__udivmoddi4+0x98>
 8000370:	f1c1 0720 	rsb	r7, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa05 f401 	lsl.w	r4, r5, r1
 8000382:	fa20 f307 	lsr.w	r3, r0, r7
 8000386:	40fd      	lsrs	r5, r7
 8000388:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038c:	4323      	orrs	r3, r4
 800038e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	fb09 5518 	mls	r5, r9, r8, r5
 800039a:	0c1c      	lsrs	r4, r3, #16
 800039c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a0:	fb08 f50e 	mul.w	r5, r8, lr
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	fa00 f001 	lsl.w	r0, r0, r1
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2b4>
 80003bc:	42a5      	cmp	r5, r4
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2b4>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4464      	add	r4, ip
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	b29d      	uxth	r5, r3
 80003cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d0:	fb09 4413 	mls	r4, r9, r3, r4
 80003d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2ac>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2ac>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fba3 9502 	umull	r9, r5, r3, r2
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	42ac      	cmp	r4, r5
 8000400:	46c8      	mov	r8, r9
 8000402:	46ae      	mov	lr, r5
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x29c>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x298>
 8000408:	b156      	cbz	r6, 8000420 <__udivmoddi4+0x208>
 800040a:	ebb0 0208 	subs.w	r2, r0, r8
 800040e:	eb64 040e 	sbc.w	r4, r4, lr
 8000412:	fa04 f707 	lsl.w	r7, r4, r7
 8000416:	40ca      	lsrs	r2, r1
 8000418:	40cc      	lsrs	r4, r1
 800041a:	4317      	orrs	r7, r2
 800041c:	e9c6 7400 	strd	r7, r4, [r6]
 8000420:	4618      	mov	r0, r3
 8000422:	2100      	movs	r1, #0
 8000424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000428:	f1c3 0120 	rsb	r1, r3, #32
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	fa20 f201 	lsr.w	r2, r0, r1
 8000434:	fa25 f101 	lsr.w	r1, r5, r1
 8000438:	409d      	lsls	r5, r3
 800043a:	432a      	orrs	r2, r5
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb1 f0f7 	udiv	r0, r1, r7
 8000448:	fb07 1510 	mls	r5, r7, r0, r1
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000452:	fb00 f50e 	mul.w	r5, r0, lr
 8000456:	428d      	cmp	r5, r1
 8000458:	fa04 f403 	lsl.w	r4, r4, r3
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x258>
 800045e:	eb1c 0101 	adds.w	r1, ip, r1
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 8000468:	428d      	cmp	r5, r1
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800046c:	3802      	subs	r0, #2
 800046e:	4461      	add	r1, ip
 8000470:	1b49      	subs	r1, r1, r5
 8000472:	b292      	uxth	r2, r2
 8000474:	fbb1 f5f7 	udiv	r5, r1, r7
 8000478:	fb07 1115 	mls	r1, r7, r5, r1
 800047c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000480:	fb05 f10e 	mul.w	r1, r5, lr
 8000484:	4291      	cmp	r1, r2
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x282>
 8000488:	eb1c 0202 	adds.w	r2, ip, r2
 800048c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 8000492:	4291      	cmp	r1, r2
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000496:	3d02      	subs	r5, #2
 8000498:	4462      	add	r2, ip
 800049a:	1a52      	subs	r2, r2, r1
 800049c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0xfc>
 80004a2:	4631      	mov	r1, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e708      	b.n	80002ba <__udivmoddi4+0xa2>
 80004a8:	4639      	mov	r1, r7
 80004aa:	e6e6      	b.n	800027a <__udivmoddi4+0x62>
 80004ac:	4610      	mov	r0, r2
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x90>
 80004b0:	4548      	cmp	r0, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004bc:	3b01      	subs	r3, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004c0:	4645      	mov	r5, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x282>
 80004c4:	462b      	mov	r3, r5
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x258>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004d0:	3d02      	subs	r5, #2
 80004d2:	4462      	add	r2, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x124>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e70a      	b.n	80002f0 <__udivmoddi4+0xd8>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x14e>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <transmit>:

BRIDGE_COMMON_t fc_port =
		{ .signalStatusTransmit = 0, .signalStatusReceive = 0 };
static BRIDGE_t fc_bridge = { .port = &fc_port };

static HAL_StatusTypeDef transmit() {
 80004e4:	b5b0      	push	{r4, r5, r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	return HAL_UART_Transmit_IT(fc_bridge.fc_uart,
 80004e8:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <transmit+0x30>)
 80004ea:	681c      	ldr	r4, [r3, #0]
			(const uint8_t*) fc_bridge.port->data_out,
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <transmit+0x30>)
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	685d      	ldr	r5, [r3, #4]
			strlen(fc_bridge.port->data_out));
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <transmit+0x30>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff fe6d 	bl	80001d8 <strlen>
 80004fe:	4603      	mov	r3, r0
	return HAL_UART_Transmit_IT(fc_bridge.fc_uart,
 8000500:	b29b      	uxth	r3, r3
 8000502:	461a      	mov	r2, r3
 8000504:	4629      	mov	r1, r5
 8000506:	4620      	mov	r0, r4
 8000508:	f006 f91e 	bl	8006748 <HAL_UART_Transmit_IT>
 800050c:	4603      	mov	r3, r0
}
 800050e:	4618      	mov	r0, r3
 8000510:	bdb0      	pop	{r4, r5, r7, pc}
 8000512:	bf00      	nop
 8000514:	20000000 	.word	0x20000000

08000518 <receive>:

static HAL_StatusTypeDef receive() {
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	return HAL_UART_Receive_IT(fc_bridge.fc_uart, fc_bridge.rx_data,
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <receive+0x18>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2223      	movs	r2, #35	; 0x23
 8000522:	4904      	ldr	r1, [pc, #16]	; (8000534 <receive+0x1c>)
 8000524:	4618      	mov	r0, r3
 8000526:	f006 f954 	bl	80067d2 <HAL_UART_Receive_IT>
 800052a:	4603      	mov	r3, r0
			sizeof(fc_bridge.rx_data));
}
 800052c:	4618      	mov	r0, r3
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000000 	.word	0x20000000
 8000534:	2000000c 	.word	0x2000000c

08000538 <bridge_signal_transmit_handler>:

inline static void bridge_signal_transmit_handler(int status) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	fc_bridge.port->signalStatusTransmit = status;
 8000540:	4b14      	ldr	r3, [pc, #80]	; (8000594 <bridge_signal_transmit_handler+0x5c>)
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef status_transmit = fc_bridge.port->transmit(); // try retransmission
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <bridge_signal_transmit_handler+0x5c>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	4798      	blx	r3
 8000550:	4603      	mov	r3, r0
 8000552:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != status_transmit && !get_imu()->running) {
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d018      	beq.n	800058c <bridge_signal_transmit_handler+0x54>
 800055a:	f000 faa9 	bl	8000ab0 <get_imu>
 800055e:	4603      	mov	r3, r0
 8000560:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8000564:	b2db      	uxtb	r3, r3
 8000566:	f083 0301 	eor.w	r3, r3, #1
 800056a:	b2db      	uxtb	r3, r3
 800056c:	2b00      	cmp	r3, #0
 800056e:	d00d      	beq.n	800058c <bridge_signal_transmit_handler+0x54>
		// Initialize recovery ACCEL + GYRO
		if (BMI160_OK == imu_init(fc_bridge.imu_i2c)) {
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <bridge_signal_transmit_handler+0x5c>)
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	4618      	mov	r0, r3
 8000576:	f000 f97f 	bl	8000878 <imu_init>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d105      	bne.n	800058c <bridge_signal_transmit_handler+0x54>
			get_imu()->running = true;
 8000580:	f000 fa96 	bl	8000ab0 <get_imu>
 8000584:	4603      	mov	r3, r0
 8000586:	2201      	movs	r2, #1
 8000588:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
		}
	}
}
 800058c:	bf00      	nop
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000000 	.word	0x20000000

08000598 <bridge_signal_receive_handler>:

inline static void bridge_signal_receive_handler(int status) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	fc_bridge.port->signalStatusReceive = status;
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <bridge_signal_receive_handler+0x5c>)
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	611a      	str	r2, [r3, #16]
	HAL_StatusTypeDef status_receive = fc_bridge.port->receive(); // try retransmission
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <bridge_signal_receive_handler+0x5c>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	4798      	blx	r3
 80005b0:	4603      	mov	r3, r0
 80005b2:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != status_receive && !get_imu()->running) {
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d018      	beq.n	80005ec <bridge_signal_receive_handler+0x54>
 80005ba:	f000 fa79 	bl	8000ab0 <get_imu>
 80005be:	4603      	mov	r3, r0
 80005c0:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	f083 0301 	eor.w	r3, r3, #1
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d00d      	beq.n	80005ec <bridge_signal_receive_handler+0x54>
		// Initialize recovery ACCEL + GYRO
		if (BMI160_OK == imu_init(fc_bridge.imu_i2c)) {
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <bridge_signal_receive_handler+0x5c>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 f94f 	bl	8000878 <imu_init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d105      	bne.n	80005ec <bridge_signal_receive_handler+0x54>
			get_imu()->running = true;
 80005e0:	f000 fa66 	bl	8000ab0 <get_imu>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2201      	movs	r2, #1
 80005e8:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
		}
	}
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000000 	.word	0x20000000

080005f8 <bridge_rc_motor_rx_callback>:

static void bridge_rc_motor_rx_callback(UART_HandleTypeDef *huart) {
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	bool data_valid = bridge_validate_data((char*) fc_bridge.rx_data,
 8000600:	2123      	movs	r1, #35	; 0x23
 8000602:	481b      	ldr	r0, [pc, #108]	; (8000670 <bridge_rc_motor_rx_callback+0x78>)
 8000604:	f002 f88a 	bl	800271c <bridge_validate_data>
 8000608:	4603      	mov	r3, r0
 800060a:	73fb      	strb	r3, [r7, #15]
	BRIDGE_DATA_SIZE);
	if (data_valid) {
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d00c      	beq.n	800062c <bridge_rc_motor_rx_callback+0x34>
		fc_bridge.port->data_in = bridge_format_string(
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <bridge_rc_motor_rx_callback+0x7c>)
 8000614:	689c      	ldr	r4, [r3, #8]
 8000616:	4816      	ldr	r0, [pc, #88]	; (8000670 <bridge_rc_motor_rx_callback+0x78>)
 8000618:	f002 f898 	bl	800274c <bridge_format_string>
 800061c:	4603      	mov	r3, r0
 800061e:	6023      	str	r3, [r4, #0]
				(char*) fc_bridge.rx_data); // allocate memory
		// TODO 2 set to motors
		free(fc_bridge.port->data_in); // deallocate memory
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <bridge_rc_motor_rx_callback+0x7c>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f007 f882 	bl	8007730 <free>
	}
	// TODO 1 get radio data from queues

	// TODO process Servo channel GEAR
	HAL_StatusTypeDef status_transmit = fc_bridge.port->transmit(); // send radio data of motors to flight controller D2
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <bridge_rc_motor_rx_callback+0x7c>)
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	4798      	blx	r3
 8000634:	4603      	mov	r3, r0
 8000636:	73bb      	strb	r3, [r7, #14]
	if (HAL_OK != status_transmit) {
 8000638:	7bbb      	ldrb	r3, [r7, #14]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d005      	beq.n	800064a <bridge_rc_motor_rx_callback+0x52>
		raise(bridge_get_transmit_sigint());
 800063e:	f002 f8d7 	bl	80027f0 <bridge_get_transmit_sigint>
 8000642:	4603      	mov	r3, r0
 8000644:	4618      	mov	r0, r3
 8000646:	f007 f983 	bl	8007950 <raise>
	}
	HAL_StatusTypeDef status_receive = fc_bridge.port->receive();
 800064a:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <bridge_rc_motor_rx_callback+0x7c>)
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	4798      	blx	r3
 8000652:	4603      	mov	r3, r0
 8000654:	737b      	strb	r3, [r7, #13]
	if (HAL_OK != status_receive) {
 8000656:	7b7b      	ldrb	r3, [r7, #13]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d005      	beq.n	8000668 <bridge_rc_motor_rx_callback+0x70>
		raise(bridge_get_receive_sigint());
 800065c:	f002 f8d1 	bl	8002802 <bridge_get_receive_sigint>
 8000660:	4603      	mov	r3, r0
 8000662:	4618      	mov	r0, r3
 8000664:	f007 f974 	bl	8007950 <raise>
	}
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	2000000c 	.word	0x2000000c
 8000674:	20000000 	.word	0x20000000

08000678 <bridge_init>:
	if (queue_data_available(get_speed_queue_rc())) {
		queue_dequeue(get_speed_queue_rc(), &data);
	}
}

HAL_StatusTypeDef bridge_init(UART_HandleTypeDef *uart, I2C_HandleTypeDef *i2c) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
	signal(bridge_get_receive_sigint(), &bridge_signal_receive_handler);
 8000682:	f002 f8be 	bl	8002802 <bridge_get_receive_sigint>
 8000686:	4603      	mov	r3, r0
 8000688:	4912      	ldr	r1, [pc, #72]	; (80006d4 <bridge_init+0x5c>)
 800068a:	4618      	mov	r0, r3
 800068c:	f007 f968 	bl	8007960 <signal>
	signal(bridge_get_transmit_sigint(), &bridge_signal_transmit_handler);
 8000690:	f002 f8ae 	bl	80027f0 <bridge_get_transmit_sigint>
 8000694:	4603      	mov	r3, r0
 8000696:	4910      	ldr	r1, [pc, #64]	; (80006d8 <bridge_init+0x60>)
 8000698:	4618      	mov	r0, r3
 800069a:	f007 f961 	bl	8007960 <signal>
	fc_bridge.fc_uart = uart;
 800069e:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <bridge_init+0x64>)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6013      	str	r3, [r2, #0]
	fc_bridge.imu_i2c = i2c;
 80006a4:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <bridge_init+0x64>)
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	6053      	str	r3, [r2, #4]
	fc_bridge.port->transmit = &transmit;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <bridge_init+0x64>)
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	4a0c      	ldr	r2, [pc, #48]	; (80006e0 <bridge_init+0x68>)
 80006b0:	609a      	str	r2, [r3, #8]
	fc_bridge.port->receive = &receive;
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <bridge_init+0x64>)
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <bridge_init+0x6c>)
 80006b8:	60da      	str	r2, [r3, #12]
	return HAL_UART_RegisterCallback(fc_bridge.fc_uart,
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <bridge_init+0x64>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <bridge_init+0x70>)
 80006c0:	2103      	movs	r1, #3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f005 ff98 	bl	80065f8 <HAL_UART_RegisterCallback>
 80006c8:	4603      	mov	r3, r0
			HAL_UART_RX_COMPLETE_CB_ID, bridge_rc_motor_rx_callback);
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	08000599 	.word	0x08000599
 80006d8:	08000539 	.word	0x08000539
 80006dc:	20000000 	.word	0x20000000
 80006e0:	080004e5 	.word	0x080004e5
 80006e4:	08000519 	.word	0x08000519
 80006e8:	080005f9 	.word	0x080005f9

080006ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_DMA_Init+0x3c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <MX_DMA_Init+0x3c>)
 80006fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_DMA_Init+0x3c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	200f      	movs	r0, #15
 8000714:	f002 faf1 	bl	8002cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000718:	200f      	movs	r0, #15
 800071a:	f002 fb0a 	bl	8002d32 <HAL_NVIC_EnableIRQ>

}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <flight_recovery>:

	ahrs_fusion_ag(&accel, &gyro, &ahrsState);
	quaternion_to_euler(&ahrsState.q, &ahrsState.ea);
}

void flight_recovery() {
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
	...

0800073c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_GPIO_Init+0x4c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <MX_GPIO_Init+0x4c>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <MX_GPIO_Init+0x4c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_GPIO_Init+0x4c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a08      	ldr	r2, [pc, #32]	; (8000788 <MX_GPIO_Init+0x4c>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_GPIO_Init+0x4c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800

0800078c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_I2C1_Init+0x50>)
 8000792:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <MX_I2C1_Init+0x54>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_I2C1_Init+0x50>)
 8000798:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x58>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_I2C1_Init+0x50>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_I2C1_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_I2C1_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_I2C1_Init+0x50>)
 80007ca:	f002 ffe5 	bl	8003798 <HAL_I2C_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d4:	f000 fa26 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000c0 	.word	0x200000c0
 80007e0:	40005400 	.word	0x40005400
 80007e4:	00061a80 	.word	0x00061a80

080007e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a19      	ldr	r2, [pc, #100]	; (800086c <HAL_I2C_MspInit+0x84>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d12b      	bne.n	8000862 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <HAL_I2C_MspInit+0x88>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a17      	ldr	r2, [pc, #92]	; (8000870 <HAL_I2C_MspInit+0x88>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <HAL_I2C_MspInit+0x88>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8000826:	23c0      	movs	r3, #192	; 0xc0
 8000828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800082a:	2312      	movs	r3, #18
 800082c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000832:	2303      	movs	r3, #3
 8000834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000836:	2304      	movs	r3, #4
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <HAL_I2C_MspInit+0x8c>)
 8000842:	f002 fe0d 	bl	8003460 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <HAL_I2C_MspInit+0x88>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	4a08      	ldr	r2, [pc, #32]	; (8000870 <HAL_I2C_MspInit+0x88>)
 8000850:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_I2C_MspInit+0x88>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000862:	bf00      	nop
 8000864:	3728      	adds	r7, #40	; 0x28
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40005400 	.word	0x40005400
 8000870:	40023800 	.word	0x40023800
 8000874:	40020400 	.word	0x40020400

08000878 <imu_init>:
I2C_HandleTypeDef *imu_i2c;

static IMU_t imu = { .running = false };

//IMU
int8_t imu_init(I2C_HandleTypeDef *iic) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	imu_i2c = iic;
 8000880:	4a2f      	ldr	r2, [pc, #188]	; (8000940 <imu_init+0xc8>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6013      	str	r3, [r2, #0]
	imu.bmi = &bmi_ref;
 8000886:	4b2f      	ldr	r3, [pc, #188]	; (8000944 <imu_init+0xcc>)
 8000888:	4a2f      	ldr	r2, [pc, #188]	; (8000948 <imu_init+0xd0>)
 800088a:	601a      	str	r2, [r3, #0]

	bmi_ref.id = BMI160_I2C_ADDR;
 800088c:	4b2e      	ldr	r3, [pc, #184]	; (8000948 <imu_init+0xd0>)
 800088e:	2268      	movs	r2, #104	; 0x68
 8000890:	705a      	strb	r2, [r3, #1]
	bmi_ref.chip_id = BMI160_CHIP_ID;
 8000892:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <imu_init+0xd0>)
 8000894:	22d1      	movs	r2, #209	; 0xd1
 8000896:	701a      	strb	r2, [r3, #0]
	bmi_ref.intf = BMI160_I2C_INTF;
 8000898:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <imu_init+0xd0>)
 800089a:	2200      	movs	r2, #0
 800089c:	709a      	strb	r2, [r3, #2]
	bmi_ref.read = &imu_i2c_read;
 800089e:	4b2a      	ldr	r3, [pc, #168]	; (8000948 <imu_init+0xd0>)
 80008a0:	4a2a      	ldr	r2, [pc, #168]	; (800094c <imu_init+0xd4>)
 80008a2:	61da      	str	r2, [r3, #28]
	bmi_ref.write = &imu_i2c_write;
 80008a4:	4b28      	ldr	r3, [pc, #160]	; (8000948 <imu_init+0xd0>)
 80008a6:	4a2a      	ldr	r2, [pc, #168]	; (8000950 <imu_init+0xd8>)
 80008a8:	621a      	str	r2, [r3, #32]
	bmi_ref.delay_ms = &imu_delay_ms;
 80008aa:	4b27      	ldr	r3, [pc, #156]	; (8000948 <imu_init+0xd0>)
 80008ac:	4a29      	ldr	r2, [pc, #164]	; (8000954 <imu_init+0xdc>)
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24

	imu.result = bmi160_init(imu.bmi);
 80008b0:	4b24      	ldr	r3, [pc, #144]	; (8000944 <imu_init+0xcc>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f001 fadc 	bl	8001e72 <bmi160_init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461a      	mov	r2, r3
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <imu_init+0xcc>)
 80008c0:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	if (BMI160_OK != imu.result) {
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <imu_init+0xcc>)
 80008c6:	f993 30f4 	ldrsb.w	r3, [r3, #244]	; 0xf4
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d003      	beq.n	80008d6 <imu_init+0x5e>
		return imu.result;
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <imu_init+0xcc>)
 80008d0:	f993 30f4 	ldrsb.w	r3, [r3, #244]	; 0xf4
 80008d4:	e030      	b.n	8000938 <imu_init+0xc0>
	}

	bmi_ref.accel_cfg.odr = BMI160_ACCEL_ODR_1600HZ;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <imu_init+0xd0>)
 80008d8:	220c      	movs	r2, #12
 80008da:	715a      	strb	r2, [r3, #5]
	bmi_ref.accel_cfg.range = BMI160_ACCEL_RANGE_16G;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <imu_init+0xd0>)
 80008de:	220c      	movs	r2, #12
 80008e0:	719a      	strb	r2, [r3, #6]
	bmi_ref.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <imu_init+0xd0>)
 80008e4:	2202      	movs	r2, #2
 80008e6:	71da      	strb	r2, [r3, #7]
	bmi_ref.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <imu_init+0xd0>)
 80008ea:	2211      	movs	r2, #17
 80008ec:	711a      	strb	r2, [r3, #4]

	bmi_ref.gyro_cfg.odr = BMI160_GYRO_ODR_1600HZ;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <imu_init+0xd0>)
 80008f0:	220c      	movs	r2, #12
 80008f2:	735a      	strb	r2, [r3, #13]
	bmi_ref.gyro_cfg.range = BMI160_GYRO_RANGE_1000_DPS;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <imu_init+0xd0>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	739a      	strb	r2, [r3, #14]
	bmi_ref.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <imu_init+0xd0>)
 80008fc:	2202      	movs	r2, #2
 80008fe:	73da      	strb	r2, [r3, #15]
	bmi_ref.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <imu_init+0xd0>)
 8000902:	2215      	movs	r2, #21
 8000904:	731a      	strb	r2, [r3, #12]

	imu.result = bmi160_set_sens_conf(&bmi_ref);
 8000906:	4810      	ldr	r0, [pc, #64]	; (8000948 <imu_init+0xd0>)
 8000908:	f001 fb3c 	bl	8001f84 <bmi160_set_sens_conf>
 800090c:	4603      	mov	r3, r0
 800090e:	461a      	mov	r2, r3
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <imu_init+0xcc>)
 8000912:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	if (BMI160_OK != imu.result) {
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <imu_init+0xcc>)
 8000918:	f993 30f4 	ldrsb.w	r3, [r3, #244]	; 0xf4
 800091c:	2b00      	cmp	r3, #0
 800091e:	d003      	beq.n	8000928 <imu_init+0xb0>
		return imu.result;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <imu_init+0xcc>)
 8000922:	f993 30f4 	ldrsb.w	r3, [r3, #244]	; 0xf4
 8000926:	e007      	b.n	8000938 <imu_init+0xc0>
	}
	HAL_Delay(10); //The device is powering up in less then 10ms. Page 13. 2.2 Power modes.
 8000928:	200a      	movs	r0, #10
 800092a:	f002 f8e7 	bl	8002afc <HAL_Delay>
	imu.running = true;
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <imu_init+0xcc>)
 8000930:	2201      	movs	r2, #1
 8000932:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
	return BMI160_OK;
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000140 	.word	0x20000140
 8000944:	20000144 	.word	0x20000144
 8000948:	20000114 	.word	0x20000114
 800094c:	08000959 	.word	0x08000959
 8000950:	080009d5 	.word	0x080009d5
 8000954:	08000a99 	.word	0x08000a99

08000958 <imu_i2c_read>:
		return imu.result_data;
	}
	return BMI160_OK;
}

int8_t imu_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af02      	add	r7, sp, #8
 800095e:	603a      	str	r2, [r7, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
 8000966:	460b      	mov	r3, r1
 8000968:	71bb      	strb	r3, [r7, #6]
 800096a:	4613      	mov	r3, r2
 800096c:	80bb      	strh	r3, [r7, #4]
	int8_t rslt = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(imu_i2c, (uint8_t) (id << 1), &reg_addr, 1,
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <imu_i2c_read+0x78>)
 8000978:	6818      	ldr	r0, [r3, #0]
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	b2db      	uxtb	r3, r3
 8000980:	b299      	uxth	r1, r3
 8000982:	1dba      	adds	r2, r7, #6
 8000984:	2364      	movs	r3, #100	; 0x64
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2301      	movs	r3, #1
 800098a:	f003 f849 	bl	8003a20 <HAL_I2C_Master_Transmit>
 800098e:	4603      	mov	r3, r0
 8000990:	73bb      	strb	r3, [r7, #14]
			100);
	if (status != HAL_OK) {
 8000992:	7bbb      	ldrb	r3, [r7, #14]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <imu_i2c_read+0x44>
		rslt = status;
 8000998:	7bbb      	ldrb	r3, [r7, #14]
 800099a:	73fb      	strb	r3, [r7, #15]
	}
	status = HAL_I2C_Master_Receive(imu_i2c, (uint8_t) (id << 1), data, len,
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <imu_i2c_read+0x78>)
 800099e:	6818      	ldr	r0, [r3, #0]
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	b299      	uxth	r1, r3
 80009a8:	88bb      	ldrh	r3, [r7, #4]
 80009aa:	2264      	movs	r2, #100	; 0x64
 80009ac:	9200      	str	r2, [sp, #0]
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	f003 f934 	bl	8003c1c <HAL_I2C_Master_Receive>
 80009b4:	4603      	mov	r3, r0
 80009b6:	73bb      	strb	r3, [r7, #14]
			100);
	if (status != HAL_OK) {
 80009b8:	7bbb      	ldrb	r3, [r7, #14]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <imu_i2c_read+0x6a>
		rslt = status;
 80009be:	7bbb      	ldrb	r3, [r7, #14]
 80009c0:	73fb      	strb	r3, [r7, #15]
	}
	return rslt;
 80009c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000140 	.word	0x20000140

080009d4 <imu_i2c_write>:

int8_t imu_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 80009d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009d8:	b089      	sub	sp, #36	; 0x24
 80009da:	af02      	add	r7, sp, #8
 80009dc:	603a      	str	r2, [r7, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	4603      	mov	r3, r0
 80009e2:	71fb      	strb	r3, [r7, #7]
 80009e4:	460b      	mov	r3, r1
 80009e6:	71bb      	strb	r3, [r7, #6]
 80009e8:	4613      	mov	r3, r2
 80009ea:	80bb      	strh	r3, [r7, #4]
 80009ec:	466b      	mov	r3, sp
 80009ee:	461e      	mov	r6, r3
	int8_t rslt = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status = HAL_OK;
 80009f4:	2300      	movs	r3, #0
 80009f6:	75bb      	strb	r3, [r7, #22]
	uint8_t tx_buffer[len + 1];
 80009f8:	88bb      	ldrh	r3, [r7, #4]
 80009fa:	1c59      	adds	r1, r3, #1
 80009fc:	1e4b      	subs	r3, r1, #1
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	460a      	mov	r2, r1
 8000a02:	2300      	movs	r3, #0
 8000a04:	4690      	mov	r8, r2
 8000a06:	4699      	mov	r9, r3
 8000a08:	f04f 0200 	mov.w	r2, #0
 8000a0c:	f04f 0300 	mov.w	r3, #0
 8000a10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a1c:	460a      	mov	r2, r1
 8000a1e:	2300      	movs	r3, #0
 8000a20:	4614      	mov	r4, r2
 8000a22:	461d      	mov	r5, r3
 8000a24:	f04f 0200 	mov.w	r2, #0
 8000a28:	f04f 0300 	mov.w	r3, #0
 8000a2c:	00eb      	lsls	r3, r5, #3
 8000a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a32:	00e2      	lsls	r2, r4, #3
 8000a34:	460b      	mov	r3, r1
 8000a36:	3307      	adds	r3, #7
 8000a38:	08db      	lsrs	r3, r3, #3
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	ebad 0d03 	sub.w	sp, sp, r3
 8000a40:	ab02      	add	r3, sp, #8
 8000a42:	3300      	adds	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
	tx_buffer[0] = reg_addr;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	79ba      	ldrb	r2, [r7, #6]
 8000a4a:	701a      	strb	r2, [r3, #0]
	memcpy(&tx_buffer[1], data, len);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	88ba      	ldrh	r2, [r7, #4]
 8000a52:	6839      	ldr	r1, [r7, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f006 ffdb 	bl	8007a10 <memcpy>
	status = HAL_I2C_Master_Transmit(imu_i2c, (uint8_t) (id << 1), tx_buffer,
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <imu_i2c_write+0xc0>)
 8000a5c:	6818      	ldr	r0, [r3, #0]
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	b299      	uxth	r1, r3
 8000a66:	88bb      	ldrh	r3, [r7, #4]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	2264      	movs	r2, #100	; 0x64
 8000a6e:	9200      	str	r2, [sp, #0]
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	f002 ffd5 	bl	8003a20 <HAL_I2C_Master_Transmit>
 8000a76:	4603      	mov	r3, r0
 8000a78:	75bb      	strb	r3, [r7, #22]
			len + 1, 100);
	if (status != HAL_OK) {
 8000a7a:	7dbb      	ldrb	r3, [r7, #22]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <imu_i2c_write+0xb0>
		rslt = status;
 8000a80:	7dbb      	ldrb	r3, [r7, #22]
 8000a82:	75fb      	strb	r3, [r7, #23]
	}
	return rslt;
 8000a84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a88:	46b5      	mov	sp, r6
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	371c      	adds	r7, #28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a94:	20000140 	.word	0x20000140

08000a98 <imu_delay_ms>:

void imu_delay_ms(uint32_t period) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f002 f82b 	bl	8002afc <HAL_Delay>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <get_imu>:

inline IMU_t* get_imu() {
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
	return &imu;
 8000ab4:	4b02      	ldr	r3, [pc, #8]	; (8000ac0 <get_imu+0x10>)
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	20000144 	.word	0x20000144

08000ac4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000aca:	f001 ffa5 	bl	8002a18 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ace:	f000 f841 	bl	8000b54 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ad2:	f7ff fe33 	bl	800073c <MX_GPIO_Init>
	MX_DMA_Init();
 8000ad6:	f7ff fe09 	bl	80006ec <MX_DMA_Init>
	MX_TIM1_Init();
 8000ada:	f000 fb6b 	bl	80011b4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000ade:	f000 fc11 	bl	8001304 <MX_TIM2_Init>
	MX_TIM5_Init();
 8000ae2:	f000 fcd3 	bl	800148c <MX_TIM5_Init>
	MX_TIM3_Init();
 8000ae6:	f000 fc75 	bl	80013d4 <MX_TIM3_Init>
	MX_TIM9_Init();
 8000aea:	f000 fd33 	bl	8001554 <MX_TIM9_Init>
	MX_TIM10_Init();
 8000aee:	f000 fd71 	bl	80015d4 <MX_TIM10_Init>
	MX_TIM11_Init();
 8000af2:	f000 fdb7 	bl	8001664 <MX_TIM11_Init>
	MX_USART1_UART_Init();
 8000af6:	f001 f863 	bl	8001bc0 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 8000afa:	f7ff fe47 	bl	800078c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

// STATUS
	HAL_StatusTypeDef status = HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	71fb      	strb	r3, [r7, #7]

// PRE-INIT
	pre_init();
 8000b02:	f001 fecd 	bl	80028a0 <pre_init>

// Initialize Bridge
	if (HAL_OK != (status = bridge_init(&huart1, &hi2c1))) {
 8000b06:	4911      	ldr	r1, [pc, #68]	; (8000b4c <main+0x88>)
 8000b08:	4811      	ldr	r0, [pc, #68]	; (8000b50 <main+0x8c>)
 8000b0a:	f7ff fdb5 	bl	8000678 <bridge_init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <main+0x58>
		return status;
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	e013      	b.n	8000b44 <main+0x80>
	}

// Initialize RADIO
	if (HAL_OK != (status = rc_init_all())) { //tim 2,9,10,11
 8000b1c:	f000 f9c6 	bl	8000eac <rc_init_all>
 8000b20:	4603      	mov	r3, r0
 8000b22:	71fb      	strb	r3, [r7, #7]
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <main+0x6a>
		return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00a      	b.n	8000b44 <main+0x80>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
		if (get_imu()->running) { // RECOVERY MODE
 8000b2e:	f7ff ffbf 	bl	8000ab0 <get_imu>
 8000b32:	4603      	mov	r3, r0
 8000b34:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0f7      	beq.n	8000b2e <main+0x6a>
			flight_recovery();
 8000b3e:	f7ff fdf5 	bl	800072c <flight_recovery>
		if (get_imu()->running) { // RECOVERY MODE
 8000b42:	e7f4      	b.n	8000b2e <main+0x6a>
//	status = motor_deinit(get_M_EDF_R1());
//
// Deinitialize SERVO
//	status = servo_deinit(); //if initialized deinitialize
	/* USER CODE END 3 */
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200000c0 	.word	0x200000c0
 8000b50:	20000878 	.word	0x20000878

08000b54 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	; 0x50
 8000b58:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b5a:	f107 0320 	add.w	r3, r7, #32
 8000b5e:	2230      	movs	r2, #48	; 0x30
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f006 fe98 	bl	8007898 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <SystemClock_Config+0xc8>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	4a26      	ldr	r2, [pc, #152]	; (8000c1c <SystemClock_Config+0xc8>)
 8000b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b86:	6413      	str	r3, [r2, #64]	; 0x40
 8000b88:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <SystemClock_Config+0xc8>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <SystemClock_Config+0xcc>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a20      	ldr	r2, [pc, #128]	; (8000c20 <SystemClock_Config+0xcc>)
 8000b9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <SystemClock_Config+0xcc>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb8:	2310      	movs	r3, #16
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 200;
 8000bc8:	23c8      	movs	r3, #200	; 0xc8
 8000bca:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000bd4:	f107 0320 	add.w	r3, r7, #32
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 fd73 	bl	80046c4 <HAL_RCC_OscConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0x94>
		Error_Handler();
 8000be4:	f000 f81e 	bl	8000c24 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000be8:	230f      	movs	r3, #15
 8000bea:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bec:	2302      	movs	r3, #2
 8000bee:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	2103      	movs	r1, #3
 8000c04:	4618      	mov	r0, r3
 8000c06:	f003 ffd5 	bl	8004bb4 <HAL_RCC_ClockConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0xc0>
		Error_Handler();
 8000c10:	f000 f808 	bl	8000c24 <Error_Handler>
	}
}
 8000c14:	bf00      	nop
 8000c16:	3750      	adds	r7, #80	; 0x50
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40007000 	.word	0x40007000

08000c24 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
}
 8000c2a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c2c:	e7fe      	b.n	8000c2c <Error_Handler+0x8>

08000c2e <rc_control_defaults>:
const uint32_t TIM_FACTOR_US = RC_TIMCLOCK / RC_PRESCALER / 1000000;

static RemoteControl_t controls_rc[6];

static void rc_control_defaults(RemoteControl_t *control, TIM_TypeDef *timer,
		uint32_t channel, GPIO_TypeDef *port, uint16_t pin) {
 8000c2e:	b480      	push	{r7}
 8000c30:	b085      	sub	sp, #20
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	603b      	str	r3, [r7, #0]
	control->rc_timer_instance = timer;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	601a      	str	r2, [r3, #0]
	control->rc_channel = channel;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	605a      	str	r2, [r3, #4]
	control->rc_channel_port = port;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	609a      	str	r2, [r3, #8]
	control->rc_channel_pin = pin;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	8b3a      	ldrh	r2, [r7, #24]
 8000c52:	819a      	strh	r2, [r3, #12]
	control->captured = false;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2200      	movs	r2, #0
 8000c58:	739a      	strb	r2, [r3, #14]
	control->frame_width_us = 0;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	625a      	str	r2, [r3, #36]	; 0x24
	control->rise = 0;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
	control->fall = 0;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	615a      	str	r2, [r3, #20]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <rc_calculate>:

//65535 16 bit 4 channels 4 values one by one
void rc_calculate(uint32_t capturedValue, RemoteControl_t *control,
		TIM_HandleTypeDef *htim, Queue_t *queue) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	603b      	str	r3, [r7, #0]
	bool rising_edge = HAL_GPIO_ReadPin(control->rc_channel_port,
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	689a      	ldr	r2, [r3, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	899b      	ldrh	r3, [r3, #12]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4610      	mov	r0, r2
 8000c92:	f002 fd69 	bl	8003768 <HAL_GPIO_ReadPin>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	bf0c      	ite	eq
 8000c9c:	2301      	moveq	r3, #1
 8000c9e:	2300      	movne	r3, #0
 8000ca0:	74fb      	strb	r3, [r7, #19]
			control->rc_channel_pin) == GPIO_PIN_SET;
	if (!control->captured && rising_edge) { // is the first value captured ?
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	7b9b      	ldrb	r3, [r3, #14]
 8000ca6:	f083 0301 	eor.w	r3, r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d02b      	beq.n	8000d08 <rc_calculate+0x90>
 8000cb0:	7cfb      	ldrb	r3, [r7, #19]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d028      	beq.n	8000d08 <rc_calculate+0x90>
		control->rise = capturedValue; // capture the first value
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	611a      	str	r2, [r3, #16]
		control->captured = true; // set the first value captured as true
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	739a      	strb	r2, [r3, #14]
		if (control->fall != 0) {
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d06a      	beq.n	8000da0 <rc_calculate+0x128>
			control->frame_width_us = capturedValue + control->difference;
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	699a      	ldr	r2, [r3, #24]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	441a      	add	r2, r3
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
			if (control->frame_width_us > RC_FRAME_MIN
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cda:	f245 2208 	movw	r2, #21000	; 0x5208
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d90b      	bls.n	8000cfa <rc_calculate+0x82>
					&& control->frame_width_us < RC_FRAME_MAX) {
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce6:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d205      	bcs.n	8000cfa <rc_calculate+0x82>
				queue_enqueue(queue, control->width_us);
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	6a1b      	ldr	r3, [r3, #32]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	6838      	ldr	r0, [r7, #0]
 8000cf6:	f001 fe1f 	bl	8002938 <queue_enqueue>
			}
			control->fall = 0; 				// reset fall
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
			control->frame_width_us = 0;	// reset frame width
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
		if (control->fall != 0) {
 8000d06:	e04b      	b.n	8000da0 <rc_calculate+0x128>
		}
	} else if (control->captured && !rising_edge) { // if the first is captured
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	7b9b      	ldrb	r3, [r3, #14]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d047      	beq.n	8000da0 <rc_calculate+0x128>
 8000d10:	7cfb      	ldrb	r3, [r7, #19]
 8000d12:	f083 0301 	eor.w	r3, r3, #1
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d041      	beq.n	8000da0 <rc_calculate+0x128>
		uint32_t diff = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
		control->fall = capturedValue; // capture the second value
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	615a      	str	r2, [r3, #20]
		if (control->fall > control->rise) {
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	695a      	ldr	r2, [r3, #20]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	691b      	ldr	r3, [r3, #16]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d906      	bls.n	8000d40 <rc_calculate+0xc8>
			diff = control->fall - control->rise; // calculate the difference
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	695a      	ldr	r2, [r3, #20]
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	691b      	ldr	r3, [r3, #16]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	e00e      	b.n	8000d5e <rc_calculate+0xe6>
		} else if (control->fall < control->rise) {
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	695a      	ldr	r2, [r3, #20]
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d208      	bcs.n	8000d5e <rc_calculate+0xe6>
			diff = control->fall + (0xFFFF - control->rise); //0xffff
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	695a      	ldr	r2, [r3, #20]
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000d5a:	33ff      	adds	r3, #255	; 0xff
 8000d5c:	617b      	str	r3, [r7, #20]
		}
		if (diff > RC_VALUE_MIN && diff < RC_VALUE_MAX) {
 8000d5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d913      	bls.n	8000d90 <rc_calculate+0x118>
 8000d68:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d20e      	bcs.n	8000d90 <rc_calculate+0x118>
			control->width_us = diff * TIM_FACTOR_US; // calculate pulse width
 8000d72:	2201      	movs	r2, #1
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fb03 f202 	mul.w	r2, r3, r2
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	621a      	str	r2, [r3, #32]
			control->frequency = RC_TIMCLOCK / diff; 	// calculate frequency
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <rc_calculate+0x130>)
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	61da      	str	r2, [r3, #28]
			control->difference = diff;
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	619a      	str	r2, [r3, #24]
		}
		control->captured = false; // reset to first captured
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	2200      	movs	r2, #0
 8000d94:	739a      	strb	r2, [r3, #14]
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8000d9e:	e7ff      	b.n	8000da0 <rc_calculate+0x128>
 8000da0:	bf00      	nop
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	05f5e100 	.word	0x05f5e100

08000dac <rc_throttle_gear_speed_callback>:

void rc_throttle_gear_speed_callback(TIM_HandleTypeDef *htim) {
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	switch (htim->Channel) {
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7f1b      	ldrb	r3, [r3, #28]
 8000db8:	2b08      	cmp	r3, #8
 8000dba:	d01e      	beq.n	8000dfa <rc_throttle_gear_speed_callback+0x4e>
 8000dbc:	2b08      	cmp	r3, #8
 8000dbe:	dc28      	bgt.n	8000e12 <rc_throttle_gear_speed_callback+0x66>
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d002      	beq.n	8000dca <rc_throttle_gear_speed_callback+0x1e>
 8000dc4:	2b04      	cmp	r3, #4
 8000dc6:	d00c      	beq.n	8000de2 <rc_throttle_gear_speed_callback+0x36>
		break;
	}
	default: {
	}
	}
}
 8000dc8:	e023      	b.n	8000e12 <rc_throttle_gear_speed_callback+0x66>
		rc_calculate(htim->Instance->CCR1, &controls_rc[0], htim,
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8000dd0:	f001 fd20 	bl	8002814 <get_throttle_queue_rc>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	4910      	ldr	r1, [pc, #64]	; (8000e1c <rc_throttle_gear_speed_callback+0x70>)
 8000dda:	4620      	mov	r0, r4
 8000ddc:	f7ff ff4c 	bl	8000c78 <rc_calculate>
		break;
 8000de0:	e017      	b.n	8000e12 <rc_throttle_gear_speed_callback+0x66>
		rc_calculate(htim->Instance->CCR3, &controls_rc[4], htim,
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000de8:	f001 fd3c 	bl	8002864 <get_gear_queue_rc>
 8000dec:	4603      	mov	r3, r0
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	490b      	ldr	r1, [pc, #44]	; (8000e20 <rc_throttle_gear_speed_callback+0x74>)
 8000df2:	4620      	mov	r0, r4
 8000df4:	f7ff ff40 	bl	8000c78 <rc_calculate>
		break;
 8000df8:	e00b      	b.n	8000e12 <rc_throttle_gear_speed_callback+0x66>
		rc_calculate(htim->Instance->CCR4, &controls_rc[5], htim,
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8000e00:	f001 fd3a 	bl	8002878 <get_speed_queue_rc>
 8000e04:	4603      	mov	r3, r0
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	4906      	ldr	r1, [pc, #24]	; (8000e24 <rc_throttle_gear_speed_callback+0x78>)
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	f7ff ff34 	bl	8000c78 <rc_calculate>
		break;
 8000e10:	bf00      	nop
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd90      	pop	{r4, r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2000023c 	.word	0x2000023c
 8000e20:	200002dc 	.word	0x200002dc
 8000e24:	20000304 	.word	0x20000304

08000e28 <rc_pitch_callback>:

void rc_pitch_callback(TIM_HandleTypeDef *htim) {
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	rc_calculate(htim->Instance->CCR1, &controls_rc[1], htim,
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8000e36:	f001 fcf7 	bl	8002828 <get_pitch_queue_rc>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	4904      	ldr	r1, [pc, #16]	; (8000e50 <rc_pitch_callback+0x28>)
 8000e40:	4620      	mov	r0, r4
 8000e42:	f7ff ff19 	bl	8000c78 <rc_calculate>
			get_pitch_queue_rc());
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd90      	pop	{r4, r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000264 	.word	0x20000264

08000e54 <rc_roll_callback>:

void rc_roll_callback(TIM_HandleTypeDef *htim) {
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	rc_calculate(htim->Instance->CCR1, &controls_rc[2], htim,
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8000e62:	f001 fceb 	bl	800283c <get_roll_queue_rc>
 8000e66:	4603      	mov	r3, r0
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	4904      	ldr	r1, [pc, #16]	; (8000e7c <rc_roll_callback+0x28>)
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f7ff ff03 	bl	8000c78 <rc_calculate>
			get_roll_queue_rc());
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd90      	pop	{r4, r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2000028c 	.word	0x2000028c

08000e80 <rc_yaw_callback>:

void rc_yaw_callback(TIM_HandleTypeDef *htim) {
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	rc_calculate(htim->Instance->CCR1, &controls_rc[3], htim,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8000e8e:	f001 fcdf 	bl	8002850 <get_yaw_queue_rc>
 8000e92:	4603      	mov	r3, r0
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	4904      	ldr	r1, [pc, #16]	; (8000ea8 <rc_yaw_callback+0x28>)
 8000e98:	4620      	mov	r0, r4
 8000e9a:	f7ff feed 	bl	8000c78 <rc_calculate>
			get_yaw_queue_rc());
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd90      	pop	{r4, r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200002b4 	.word	0x200002b4

08000eac <rc_init_all>:

HAL_StatusTypeDef rc_init_all() {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af02      	add	r7, sp, #8
	rc_control_defaults(&controls_rc[0], TIM2, TIM_CHANNEL_1,
 8000eb2:	2320      	movs	r3, #32
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	4b56      	ldr	r3, [pc, #344]	; (8001010 <rc_init_all+0x164>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000ebe:	4855      	ldr	r0, [pc, #340]	; (8001014 <rc_init_all+0x168>)
 8000ec0:	f7ff feb5 	bl	8000c2e <rc_control_defaults>
	THROTTLE_GPIO_Port, THROTTLE_Pin);
	rc_control_defaults(&controls_rc[1], TIM9, TIM_CHANNEL_1, PITCH_GPIO_Port,
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	4b51      	ldr	r3, [pc, #324]	; (8001010 <rc_init_all+0x164>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	4952      	ldr	r1, [pc, #328]	; (8001018 <rc_init_all+0x16c>)
 8000ece:	4853      	ldr	r0, [pc, #332]	; (800101c <rc_init_all+0x170>)
 8000ed0:	f7ff fead 	bl	8000c2e <rc_control_defaults>
	PITCH_Pin);
	rc_control_defaults(&controls_rc[2], TIM10, TIM_CHANNEL_1, ROLL_GPIO_Port,
 8000ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	4b51      	ldr	r3, [pc, #324]	; (8001020 <rc_init_all+0x174>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	4951      	ldr	r1, [pc, #324]	; (8001024 <rc_init_all+0x178>)
 8000ee0:	4851      	ldr	r0, [pc, #324]	; (8001028 <rc_init_all+0x17c>)
 8000ee2:	f7ff fea4 	bl	8000c2e <rc_control_defaults>
	ROLL_Pin);
	rc_control_defaults(&controls_rc[3], TIM11, TIM_CHANNEL_1, YAW_GPIO_Port,
 8000ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	4b4c      	ldr	r3, [pc, #304]	; (8001020 <rc_init_all+0x174>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	494e      	ldr	r1, [pc, #312]	; (800102c <rc_init_all+0x180>)
 8000ef2:	484f      	ldr	r0, [pc, #316]	; (8001030 <rc_init_all+0x184>)
 8000ef4:	f7ff fe9b 	bl	8000c2e <rc_control_defaults>
	YAW_Pin);
	rc_control_defaults(&controls_rc[4], TIM2, TIM_CHANNEL_3,
 8000ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	4b48      	ldr	r3, [pc, #288]	; (8001020 <rc_init_all+0x174>)
 8000f00:	2208      	movs	r2, #8
 8000f02:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000f06:	484b      	ldr	r0, [pc, #300]	; (8001034 <rc_init_all+0x188>)
 8000f08:	f7ff fe91 	bl	8000c2e <rc_control_defaults>
	GEAR_GPIO_Port, GEAR_Pin);
	rc_control_defaults(&controls_rc[5], TIM2, TIM_CHANNEL_4,
 8000f0c:	2308      	movs	r3, #8
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	4b3f      	ldr	r3, [pc, #252]	; (8001010 <rc_init_all+0x164>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000f18:	4847      	ldr	r0, [pc, #284]	; (8001038 <rc_init_all+0x18c>)
 8000f1a:	f7ff fe88 	bl	8000c2e <rc_control_defaults>
	SPEED_GPIO_Port, SPEED_Pin);

	HAL_StatusTypeDef status = HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	71fb      	strb	r3, [r7, #7]
	status = HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID,
 8000f22:	4a46      	ldr	r2, [pc, #280]	; (800103c <rc_init_all+0x190>)
 8000f24:	2112      	movs	r1, #18
 8000f26:	4846      	ldr	r0, [pc, #280]	; (8001040 <rc_init_all+0x194>)
 8000f28:	f004 fd3c 	bl	80059a4 <HAL_TIM_RegisterCallback>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	71fb      	strb	r3, [r7, #7]
			rc_throttle_gear_speed_callback);
	if (HAL_OK != status) {
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <rc_init_all+0x8e>
		return status;
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	e066      	b.n	8001008 <rc_init_all+0x15c>
	}
	status = HAL_TIM_RegisterCallback(&htim9, HAL_TIM_IC_CAPTURE_CB_ID,
 8000f3a:	4a42      	ldr	r2, [pc, #264]	; (8001044 <rc_init_all+0x198>)
 8000f3c:	2112      	movs	r1, #18
 8000f3e:	4842      	ldr	r0, [pc, #264]	; (8001048 <rc_init_all+0x19c>)
 8000f40:	f004 fd30 	bl	80059a4 <HAL_TIM_RegisterCallback>
 8000f44:	4603      	mov	r3, r0
 8000f46:	71fb      	strb	r3, [r7, #7]
			rc_pitch_callback);
	if (HAL_OK != status) {
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <rc_init_all+0xa6>
		return status;
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	e05a      	b.n	8001008 <rc_init_all+0x15c>
	}
	status = HAL_TIM_RegisterCallback(&htim10, HAL_TIM_IC_CAPTURE_CB_ID,
 8000f52:	4a3e      	ldr	r2, [pc, #248]	; (800104c <rc_init_all+0x1a0>)
 8000f54:	2112      	movs	r1, #18
 8000f56:	483e      	ldr	r0, [pc, #248]	; (8001050 <rc_init_all+0x1a4>)
 8000f58:	f004 fd24 	bl	80059a4 <HAL_TIM_RegisterCallback>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	71fb      	strb	r3, [r7, #7]
			rc_roll_callback);
	if (HAL_OK != status) {
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <rc_init_all+0xbe>
		return status;
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	e04e      	b.n	8001008 <rc_init_all+0x15c>
	}
	status = HAL_TIM_RegisterCallback(&htim11, HAL_TIM_IC_CAPTURE_CB_ID,
 8000f6a:	4a3a      	ldr	r2, [pc, #232]	; (8001054 <rc_init_all+0x1a8>)
 8000f6c:	2112      	movs	r1, #18
 8000f6e:	483a      	ldr	r0, [pc, #232]	; (8001058 <rc_init_all+0x1ac>)
 8000f70:	f004 fd18 	bl	80059a4 <HAL_TIM_RegisterCallback>
 8000f74:	4603      	mov	r3, r0
 8000f76:	71fb      	strb	r3, [r7, #7]
			rc_yaw_callback);
	if (HAL_OK != status) {
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <rc_init_all+0xd6>
		return status;
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	e042      	b.n	8001008 <rc_init_all+0x15c>
	}

	status = HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // throttle
 8000f82:	2100      	movs	r1, #0
 8000f84:	482e      	ldr	r0, [pc, #184]	; (8001040 <rc_init_all+0x194>)
 8000f86:	f004 f909 	bl	800519c <HAL_TIM_IC_Start_IT>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	if (HAL_OK != status) {
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <rc_init_all+0xec>
		return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	e037      	b.n	8001008 <rc_init_all+0x15c>
	}
	status = HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_1); // pitch
 8000f98:	2100      	movs	r1, #0
 8000f9a:	482b      	ldr	r0, [pc, #172]	; (8001048 <rc_init_all+0x19c>)
 8000f9c:	f004 f8fe 	bl	800519c <HAL_TIM_IC_Start_IT>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	71fb      	strb	r3, [r7, #7]
	if (HAL_OK != status) {
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <rc_init_all+0x102>
		return status;
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	e02c      	b.n	8001008 <rc_init_all+0x15c>
	}
	status = HAL_TIM_IC_Start_IT(&htim10, TIM_CHANNEL_1); // roll
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4827      	ldr	r0, [pc, #156]	; (8001050 <rc_init_all+0x1a4>)
 8000fb2:	f004 f8f3 	bl	800519c <HAL_TIM_IC_Start_IT>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	if (HAL_OK != status) {
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <rc_init_all+0x118>
		return status;
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	e021      	b.n	8001008 <rc_init_all+0x15c>
	}
	status = HAL_TIM_IC_Start_IT(&htim11, TIM_CHANNEL_1); // yaw
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4824      	ldr	r0, [pc, #144]	; (8001058 <rc_init_all+0x1ac>)
 8000fc8:	f004 f8e8 	bl	800519c <HAL_TIM_IC_Start_IT>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	71fb      	strb	r3, [r7, #7]
	if (HAL_OK != status) {
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <rc_init_all+0x12e>
		return status;
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	e016      	b.n	8001008 <rc_init_all+0x15c>
	}
	status = HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3); // gear
 8000fda:	2108      	movs	r1, #8
 8000fdc:	4818      	ldr	r0, [pc, #96]	; (8001040 <rc_init_all+0x194>)
 8000fde:	f004 f8dd 	bl	800519c <HAL_TIM_IC_Start_IT>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
	if (HAL_OK != status) {
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <rc_init_all+0x144>
		return status;
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	e00b      	b.n	8001008 <rc_init_all+0x15c>
	}
	status = HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4); // speed
 8000ff0:	210c      	movs	r1, #12
 8000ff2:	4813      	ldr	r0, [pc, #76]	; (8001040 <rc_init_all+0x194>)
 8000ff4:	f004 f8d2 	bl	800519c <HAL_TIM_IC_Start_IT>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]
	if (HAL_OK != status) {
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <rc_init_all+0x15a>
		return status;
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	e000      	b.n	8001008 <rc_init_all+0x15c>
	}
	return status;
 8001006:	79fb      	ldrb	r3, [r7, #7]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40020000 	.word	0x40020000
 8001014:	2000023c 	.word	0x2000023c
 8001018:	40014000 	.word	0x40014000
 800101c:	20000264 	.word	0x20000264
 8001020:	40020400 	.word	0x40020400
 8001024:	40014400 	.word	0x40014400
 8001028:	2000028c 	.word	0x2000028c
 800102c:	40014800 	.word	0x40014800
 8001030:	200002b4 	.word	0x200002b4
 8001034:	200002dc 	.word	0x200002dc
 8001038:	20000304 	.word	0x20000304
 800103c:	08000dad 	.word	0x08000dad
 8001040:	200003e0 	.word	0x200003e0
 8001044:	08000e29 	.word	0x08000e29
 8001048:	200005fc 	.word	0x200005fc
 800104c:	08000e55 	.word	0x08000e55
 8001050:	200006b0 	.word	0x200006b0
 8001054:	08000e81 	.word	0x08000e81
 8001058:	20000764 	.word	0x20000764

0800105c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <HAL_MspInit+0x4c>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <HAL_MspInit+0x4c>)
 800106c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001070:	6453      	str	r3, [r2, #68]	; 0x44
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_MspInit+0x4c>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_MspInit+0x4c>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <HAL_MspInit+0x4c>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108c:	6413      	str	r3, [r2, #64]	; 0x40
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_MspInit+0x4c>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <NMI_Handler+0x4>

080010b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <HardFault_Handler+0x4>

080010b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <MemManage_Handler+0x4>

080010be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <BusFault_Handler+0x4>

080010c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <UsageFault_Handler+0x4>

080010ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f8:	f001 fce0 	bl	8002abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <DMA1_Stream4_IRQHandler+0x10>)
 8001106:	f001 ff6f 	bl	8002fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000818 	.word	0x20000818

08001114 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001118:	4803      	ldr	r0, [pc, #12]	; (8001128 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800111a:	f004 f959 	bl	80053d0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001120:	f004 f956 	bl	80053d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	2000032c 	.word	0x2000032c
 800112c:	200005fc 	.word	0x200005fc

08001130 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001134:	4803      	ldr	r0, [pc, #12]	; (8001144 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001136:	f004 f94b 	bl	80053d0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800113a:	4803      	ldr	r0, [pc, #12]	; (8001148 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800113c:	f004 f948 	bl	80053d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000032c 	.word	0x2000032c
 8001148:	200006b0 	.word	0x200006b0

0800114c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001150:	4803      	ldr	r0, [pc, #12]	; (8001160 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001152:	f004 f93d 	bl	80053d0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001156:	4803      	ldr	r0, [pc, #12]	; (8001164 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001158:	f004 f93a 	bl	80053d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2000032c 	.word	0x2000032c
 8001164:	20000764 	.word	0x20000764

08001168 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <TIM2_IRQHandler+0x10>)
 800116e:	f004 f92f 	bl	80053d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200003e0 	.word	0x200003e0

0800117c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <USART1_IRQHandler+0x10>)
 8001182:	f005 fb57 	bl	8006834 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000878 	.word	0x20000878

08001190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <SystemInit+0x20>)
 8001196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800119a:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <SystemInit+0x20>)
 800119c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b092      	sub	sp, #72	; 0x48
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
 80011d4:	615a      	str	r2, [r3, #20]
 80011d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2220      	movs	r2, #32
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f006 fb5a 	bl	8007898 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011e4:	4b45      	ldr	r3, [pc, #276]	; (80012fc <MX_TIM1_Init+0x148>)
 80011e6:	4a46      	ldr	r2, [pc, #280]	; (8001300 <MX_TIM1_Init+0x14c>)
 80011e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011ea:	4b44      	ldr	r3, [pc, #272]	; (80012fc <MX_TIM1_Init+0x148>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f0:	4b42      	ldr	r3, [pc, #264]	; (80012fc <MX_TIM1_Init+0x148>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400-1;
 80011f6:	4b41      	ldr	r3, [pc, #260]	; (80012fc <MX_TIM1_Init+0x148>)
 80011f8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80011fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fe:	4b3f      	ldr	r3, [pc, #252]	; (80012fc <MX_TIM1_Init+0x148>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001204:	4b3d      	ldr	r3, [pc, #244]	; (80012fc <MX_TIM1_Init+0x148>)
 8001206:	2200      	movs	r2, #0
 8001208:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800120a:	4b3c      	ldr	r3, [pc, #240]	; (80012fc <MX_TIM1_Init+0x148>)
 800120c:	2280      	movs	r2, #128	; 0x80
 800120e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001210:	483a      	ldr	r0, [pc, #232]	; (80012fc <MX_TIM1_Init+0x148>)
 8001212:	f003 ff0b 	bl	800502c <HAL_TIM_PWM_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800121c:	f7ff fd02 	bl	8000c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001228:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800122c:	4619      	mov	r1, r3
 800122e:	4833      	ldr	r0, [pc, #204]	; (80012fc <MX_TIM1_Init+0x148>)
 8001230:	f005 f8aa 	bl	8006388 <HAL_TIMEx_MasterConfigSynchronization>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800123a:	f7ff fcf3 	bl	8000c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800123e:	2360      	movs	r3, #96	; 0x60
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001246:	2300      	movs	r3, #0
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800124a:	2300      	movs	r3, #0
 800124c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	2200      	movs	r2, #0
 8001260:	4619      	mov	r1, r3
 8001262:	4826      	ldr	r0, [pc, #152]	; (80012fc <MX_TIM1_Init+0x148>)
 8001264:	f004 fa78 	bl	8005758 <HAL_TIM_PWM_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800126e:	f7ff fcd9 	bl	8000c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001276:	2204      	movs	r2, #4
 8001278:	4619      	mov	r1, r3
 800127a:	4820      	ldr	r0, [pc, #128]	; (80012fc <MX_TIM1_Init+0x148>)
 800127c:	f004 fa6c 	bl	8005758 <HAL_TIM_PWM_ConfigChannel>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001286:	f7ff fccd 	bl	8000c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800128a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128e:	2208      	movs	r2, #8
 8001290:	4619      	mov	r1, r3
 8001292:	481a      	ldr	r0, [pc, #104]	; (80012fc <MX_TIM1_Init+0x148>)
 8001294:	f004 fa60 	bl	8005758 <HAL_TIM_PWM_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800129e:	f7ff fcc1 	bl	8000c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a6:	220c      	movs	r2, #12
 80012a8:	4619      	mov	r1, r3
 80012aa:	4814      	ldr	r0, [pc, #80]	; (80012fc <MX_TIM1_Init+0x148>)
 80012ac:	f004 fa54 	bl	8005758 <HAL_TIM_PWM_ConfigChannel>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80012b6:	f7ff fcb5 	bl	8000c24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	4619      	mov	r1, r3
 80012dc:	4807      	ldr	r0, [pc, #28]	; (80012fc <MX_TIM1_Init+0x148>)
 80012de:	f005 f8c1 	bl	8006464 <HAL_TIMEx_ConfigBreakDeadTime>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80012e8:	f7ff fc9c 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012ec:	4803      	ldr	r0, [pc, #12]	; (80012fc <MX_TIM1_Init+0x148>)
 80012ee:	f000 fbe1 	bl	8001ab4 <HAL_TIM_MspPostInit>

}
 80012f2:	bf00      	nop
 80012f4:	3748      	adds	r7, #72	; 0x48
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000032c 	.word	0x2000032c
 8001300:	40010000 	.word	0x40010000

08001304 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001314:	463b      	mov	r3, r7
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001320:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <MX_TIM2_Init+0xcc>)
 8001322:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001326:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8001328:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <MX_TIM2_Init+0xcc>)
 800132a:	2263      	movs	r2, #99	; 0x63
 800132c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <MX_TIM2_Init+0xcc>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF-1;
 8001334:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <MX_TIM2_Init+0xcc>)
 8001336:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800133a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133c:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <MX_TIM2_Init+0xcc>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <MX_TIM2_Init+0xcc>)
 8001344:	2280      	movs	r2, #128	; 0x80
 8001346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001348:	4821      	ldr	r0, [pc, #132]	; (80013d0 <MX_TIM2_Init+0xcc>)
 800134a:	f003 fecb 	bl	80050e4 <HAL_TIM_IC_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001354:	f7ff fc66 	bl	8000c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4619      	mov	r1, r3
 8001366:	481a      	ldr	r0, [pc, #104]	; (80013d0 <MX_TIM2_Init+0xcc>)
 8001368:	f005 f80e 	bl	8006388 <HAL_TIMEx_MasterConfigSynchronization>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001372:	f7ff fc57 	bl	8000c24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001376:	230a      	movs	r3, #10
 8001378:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800137a:	2301      	movs	r3, #1
 800137c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001386:	463b      	mov	r3, r7
 8001388:	2200      	movs	r2, #0
 800138a:	4619      	mov	r1, r3
 800138c:	4810      	ldr	r0, [pc, #64]	; (80013d0 <MX_TIM2_Init+0xcc>)
 800138e:	f004 f947 	bl	8005620 <HAL_TIM_IC_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001398:	f7ff fc44 	bl	8000c24 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	2208      	movs	r2, #8
 80013a0:	4619      	mov	r1, r3
 80013a2:	480b      	ldr	r0, [pc, #44]	; (80013d0 <MX_TIM2_Init+0xcc>)
 80013a4:	f004 f93c 	bl	8005620 <HAL_TIM_IC_ConfigChannel>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80013ae:	f7ff fc39 	bl	8000c24 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80013b2:	463b      	mov	r3, r7
 80013b4:	220c      	movs	r2, #12
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_TIM2_Init+0xcc>)
 80013ba:	f004 f931 	bl	8005620 <HAL_TIM_IC_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 80013c4:	f7ff fc2e 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200003e0 	.word	0x200003e0

080013d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013da:	f107 0320 	add.w	r3, r7, #32
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]
 80013f2:	615a      	str	r2, [r3, #20]
 80013f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013f6:	4b23      	ldr	r3, [pc, #140]	; (8001484 <MX_TIM3_Init+0xb0>)
 80013f8:	4a23      	ldr	r2, [pc, #140]	; (8001488 <MX_TIM3_Init+0xb4>)
 80013fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2000-1;
 80013fc:	4b21      	ldr	r3, [pc, #132]	; (8001484 <MX_TIM3_Init+0xb0>)
 80013fe:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001402:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001404:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <MX_TIM3_Init+0xb0>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800140a:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <MX_TIM3_Init+0xb0>)
 800140c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001410:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <MX_TIM3_Init+0xb0>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001418:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_TIM3_Init+0xb0>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800141e:	4819      	ldr	r0, [pc, #100]	; (8001484 <MX_TIM3_Init+0xb0>)
 8001420:	f003 fe04 	bl	800502c <HAL_TIM_PWM_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800142a:	f7ff fbfb 	bl	8000c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001436:	f107 0320 	add.w	r3, r7, #32
 800143a:	4619      	mov	r1, r3
 800143c:	4811      	ldr	r0, [pc, #68]	; (8001484 <MX_TIM3_Init+0xb0>)
 800143e:	f004 ffa3 	bl	8006388 <HAL_TIMEx_MasterConfigSynchronization>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001448:	f7ff fbec 	bl	8000c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800144c:	2360      	movs	r3, #96	; 0x60
 800144e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000;
 8001450:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001454:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2200      	movs	r2, #0
 8001462:	4619      	mov	r1, r3
 8001464:	4807      	ldr	r0, [pc, #28]	; (8001484 <MX_TIM3_Init+0xb0>)
 8001466:	f004 f977 	bl	8005758 <HAL_TIM_PWM_ConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001470:	f7ff fbd8 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <MX_TIM3_Init+0xb0>)
 8001476:	f000 fb1d 	bl	8001ab4 <HAL_TIM_MspPostInit>

}
 800147a:	bf00      	nop
 800147c:	3728      	adds	r7, #40	; 0x28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000494 	.word	0x20000494
 8001488:	40000400 	.word	0x40000400

0800148c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001492:	f107 0320 	add.w	r3, r7, #32
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]
 80014aa:	615a      	str	r2, [r3, #20]
 80014ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014ae:	4b27      	ldr	r3, [pc, #156]	; (800154c <MX_TIM5_Init+0xc0>)
 80014b0:	4a27      	ldr	r2, [pc, #156]	; (8001550 <MX_TIM5_Init+0xc4>)
 80014b2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 80014b4:	4b25      	ldr	r3, [pc, #148]	; (800154c <MX_TIM5_Init+0xc0>)
 80014b6:	2263      	movs	r2, #99	; 0x63
 80014b8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <MX_TIM5_Init+0xc0>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 80014c0:	4b22      	ldr	r3, [pc, #136]	; (800154c <MX_TIM5_Init+0xc0>)
 80014c2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80014c6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c8:	4b20      	ldr	r3, [pc, #128]	; (800154c <MX_TIM5_Init+0xc0>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014ce:	4b1f      	ldr	r3, [pc, #124]	; (800154c <MX_TIM5_Init+0xc0>)
 80014d0:	2280      	movs	r2, #128	; 0x80
 80014d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80014d4:	481d      	ldr	r0, [pc, #116]	; (800154c <MX_TIM5_Init+0xc0>)
 80014d6:	f003 fda9 	bl	800502c <HAL_TIM_PWM_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80014e0:	f7ff fba0 	bl	8000c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014ec:	f107 0320 	add.w	r3, r7, #32
 80014f0:	4619      	mov	r1, r3
 80014f2:	4816      	ldr	r0, [pc, #88]	; (800154c <MX_TIM5_Init+0xc0>)
 80014f4:	f004 ff48 	bl	8006388 <HAL_TIMEx_MasterConfigSynchronization>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80014fe:	f7ff fb91 	bl	8000c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001502:	2360      	movs	r3, #96	; 0x60
 8001504:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2200      	movs	r2, #0
 8001516:	4619      	mov	r1, r3
 8001518:	480c      	ldr	r0, [pc, #48]	; (800154c <MX_TIM5_Init+0xc0>)
 800151a:	f004 f91d 	bl	8005758 <HAL_TIM_PWM_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001524:	f7ff fb7e 	bl	8000c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2204      	movs	r2, #4
 800152c:	4619      	mov	r1, r3
 800152e:	4807      	ldr	r0, [pc, #28]	; (800154c <MX_TIM5_Init+0xc0>)
 8001530:	f004 f912 	bl	8005758 <HAL_TIM_PWM_ConfigChannel>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800153a:	f7ff fb73 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800153e:	4803      	ldr	r0, [pc, #12]	; (800154c <MX_TIM5_Init+0xc0>)
 8001540:	f000 fab8 	bl	8001ab4 <HAL_TIM_MspPostInit>

}
 8001544:	bf00      	nop
 8001546:	3728      	adds	r7, #40	; 0x28
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000548 	.word	0x20000548
 8001550:	40000c00 	.word	0x40000c00

08001554 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800155a:	463b      	mov	r3, r7
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <MX_TIM9_Init+0x78>)
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <MX_TIM9_Init+0x7c>)
 800156a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <MX_TIM9_Init+0x78>)
 800156e:	2263      	movs	r2, #99	; 0x63
 8001570:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <MX_TIM9_Init+0x78>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0xFFFF-1;
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <MX_TIM9_Init+0x78>)
 800157a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800157e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_TIM9_Init+0x78>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_TIM9_Init+0x78>)
 8001588:	2280      	movs	r2, #128	; 0x80
 800158a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 800158c:	480f      	ldr	r0, [pc, #60]	; (80015cc <MX_TIM9_Init+0x78>)
 800158e:	f003 fda9 	bl	80050e4 <HAL_TIM_IC_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001598:	f7ff fb44 	bl	8000c24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800159c:	230a      	movs	r3, #10
 800159e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015a0:	2301      	movs	r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015ac:	463b      	mov	r3, r7
 80015ae:	2200      	movs	r2, #0
 80015b0:	4619      	mov	r1, r3
 80015b2:	4806      	ldr	r0, [pc, #24]	; (80015cc <MX_TIM9_Init+0x78>)
 80015b4:	f004 f834 	bl	8005620 <HAL_TIM_IC_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM9_Init+0x6e>
  {
    Error_Handler();
 80015be:	f7ff fb31 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200005fc 	.word	0x200005fc
 80015d0:	40014000 	.word	0x40014000

080015d4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80015da:	463b      	mov	r3, r7
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <MX_TIM10_Init+0x88>)
 80015e8:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <MX_TIM10_Init+0x8c>)
 80015ea:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100-1;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <MX_TIM10_Init+0x88>)
 80015ee:	2263      	movs	r2, #99	; 0x63
 80015f0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <MX_TIM10_Init+0x88>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0xFFFF-1;
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <MX_TIM10_Init+0x88>)
 80015fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015fe:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001600:	4b16      	ldr	r3, [pc, #88]	; (800165c <MX_TIM10_Init+0x88>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <MX_TIM10_Init+0x88>)
 8001608:	2280      	movs	r2, #128	; 0x80
 800160a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800160c:	4813      	ldr	r0, [pc, #76]	; (800165c <MX_TIM10_Init+0x88>)
 800160e:	f003 fcb1 	bl	8004f74 <HAL_TIM_Base_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8001618:	f7ff fb04 	bl	8000c24 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 800161c:	480f      	ldr	r0, [pc, #60]	; (800165c <MX_TIM10_Init+0x88>)
 800161e:	f003 fd61 	bl	80050e4 <HAL_TIM_IC_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM10_Init+0x58>
  {
    Error_Handler();
 8001628:	f7ff fafc 	bl	8000c24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800162c:	230a      	movs	r3, #10
 800162e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001630:	2301      	movs	r3, #1
 8001632:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800163c:	463b      	mov	r3, r7
 800163e:	2200      	movs	r2, #0
 8001640:	4619      	mov	r1, r3
 8001642:	4806      	ldr	r0, [pc, #24]	; (800165c <MX_TIM10_Init+0x88>)
 8001644:	f003 ffec 	bl	8005620 <HAL_TIM_IC_ConfigChannel>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM10_Init+0x7e>
  {
    Error_Handler();
 800164e:	f7ff fae9 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200006b0 	.word	0x200006b0
 8001660:	40014400 	.word	0x40014400

08001664 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800166a:	463b      	mov	r3, r7
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <MX_TIM11_Init+0x88>)
 8001678:	4a1d      	ldr	r2, [pc, #116]	; (80016f0 <MX_TIM11_Init+0x8c>)
 800167a:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <MX_TIM11_Init+0x88>)
 800167e:	2263      	movs	r2, #99	; 0x63
 8001680:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <MX_TIM11_Init+0x88>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0xFFFF-1;
 8001688:	4b18      	ldr	r3, [pc, #96]	; (80016ec <MX_TIM11_Init+0x88>)
 800168a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800168e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001690:	4b16      	ldr	r3, [pc, #88]	; (80016ec <MX_TIM11_Init+0x88>)
 8001692:	2200      	movs	r2, #0
 8001694:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <MX_TIM11_Init+0x88>)
 8001698:	2280      	movs	r2, #128	; 0x80
 800169a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800169c:	4813      	ldr	r0, [pc, #76]	; (80016ec <MX_TIM11_Init+0x88>)
 800169e:	f003 fc69 	bl	8004f74 <HAL_TIM_Base_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 80016a8:	f7ff fabc 	bl	8000c24 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 80016ac:	480f      	ldr	r0, [pc, #60]	; (80016ec <MX_TIM11_Init+0x88>)
 80016ae:	f003 fd19 	bl	80050e4 <HAL_TIM_IC_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 80016b8:	f7ff fab4 	bl	8000c24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80016bc:	230a      	movs	r3, #10
 80016be:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016c0:	2301      	movs	r3, #1
 80016c2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016cc:	463b      	mov	r3, r7
 80016ce:	2200      	movs	r2, #0
 80016d0:	4619      	mov	r1, r3
 80016d2:	4806      	ldr	r0, [pc, #24]	; (80016ec <MX_TIM11_Init+0x88>)
 80016d4:	f003 ffa4 	bl	8005620 <HAL_TIM_IC_ConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 80016de:	f7ff faa1 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000764 	.word	0x20000764
 80016f0:	40014800 	.word	0x40014800

080016f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a4a      	ldr	r2, [pc, #296]	; (800182c <HAL_TIM_PWM_MspInit+0x138>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d126      	bne.n	8001754 <HAL_TIM_PWM_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	4b49      	ldr	r3, [pc, #292]	; (8001830 <HAL_TIM_PWM_MspInit+0x13c>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	4a48      	ldr	r2, [pc, #288]	; (8001830 <HAL_TIM_PWM_MspInit+0x13c>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6453      	str	r3, [r2, #68]	; 0x44
 8001716:	4b46      	ldr	r3, [pc, #280]	; (8001830 <HAL_TIM_PWM_MspInit+0x13c>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	2018      	movs	r0, #24
 8001728:	f001 fae7 	bl	8002cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800172c:	2018      	movs	r0, #24
 800172e:	f001 fb00 	bl	8002d32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	2019      	movs	r0, #25
 8001738:	f001 fadf 	bl	8002cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800173c:	2019      	movs	r0, #25
 800173e:	f001 faf8 	bl	8002d32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	201a      	movs	r0, #26
 8001748:	f001 fad7 	bl	8002cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800174c:	201a      	movs	r0, #26
 800174e:	f001 faf0 	bl	8002d32 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001752:	e067      	b.n	8001824 <HAL_TIM_PWM_MspInit+0x130>
  else if(tim_pwmHandle->Instance==TIM3)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a36      	ldr	r2, [pc, #216]	; (8001834 <HAL_TIM_PWM_MspInit+0x140>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d14f      	bne.n	80017fe <HAL_TIM_PWM_MspInit+0x10a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	4b33      	ldr	r3, [pc, #204]	; (8001830 <HAL_TIM_PWM_MspInit+0x13c>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	4a32      	ldr	r2, [pc, #200]	; (8001830 <HAL_TIM_PWM_MspInit+0x13c>)
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	6413      	str	r3, [r2, #64]	; 0x40
 800176e:	4b30      	ldr	r3, [pc, #192]	; (8001830 <HAL_TIM_PWM_MspInit+0x13c>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 800177a:	4b2f      	ldr	r3, [pc, #188]	; (8001838 <HAL_TIM_PWM_MspInit+0x144>)
 800177c:	4a2f      	ldr	r2, [pc, #188]	; (800183c <HAL_TIM_PWM_MspInit+0x148>)
 800177e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8001780:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <HAL_TIM_PWM_MspInit+0x144>)
 8001782:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001786:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001788:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <HAL_TIM_PWM_MspInit+0x144>)
 800178a:	2240      	movs	r2, #64	; 0x40
 800178c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800178e:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <HAL_TIM_PWM_MspInit+0x144>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001794:	4b28      	ldr	r3, [pc, #160]	; (8001838 <HAL_TIM_PWM_MspInit+0x144>)
 8001796:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800179a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800179c:	4b26      	ldr	r3, [pc, #152]	; (8001838 <HAL_TIM_PWM_MspInit+0x144>)
 800179e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017a2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017a4:	4b24      	ldr	r3, [pc, #144]	; (8001838 <HAL_TIM_PWM_MspInit+0x144>)
 80017a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017aa:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <HAL_TIM_PWM_MspInit+0x144>)
 80017ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 80017b4:	4b20      	ldr	r3, [pc, #128]	; (8001838 <HAL_TIM_PWM_MspInit+0x144>)
 80017b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017ba:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017bc:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <HAL_TIM_PWM_MspInit+0x144>)
 80017be:	2204      	movs	r2, #4
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim3_ch1_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_TIM_PWM_MspInit+0x144>)
 80017c4:	2203      	movs	r2, #3
 80017c6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim3_ch1_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 80017c8:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <HAL_TIM_PWM_MspInit+0x144>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim3_ch1_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80017ce:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <HAL_TIM_PWM_MspInit+0x144>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80017d4:	4818      	ldr	r0, [pc, #96]	; (8001838 <HAL_TIM_PWM_MspInit+0x144>)
 80017d6:	f001 fac7 	bl	8002d68 <HAL_DMA_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <HAL_TIM_PWM_MspInit+0xf0>
      Error_Handler();
 80017e0:	f7ff fa20 	bl	8000c24 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a14      	ldr	r2, [pc, #80]	; (8001838 <HAL_TIM_PWM_MspInit+0x144>)
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
 80017ea:	4a13      	ldr	r2, [pc, #76]	; (8001838 <HAL_TIM_PWM_MspInit+0x144>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a11      	ldr	r2, [pc, #68]	; (8001838 <HAL_TIM_PWM_MspInit+0x144>)
 80017f4:	639a      	str	r2, [r3, #56]	; 0x38
 80017f6:	4a10      	ldr	r2, [pc, #64]	; (8001838 <HAL_TIM_PWM_MspInit+0x144>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6393      	str	r3, [r2, #56]	; 0x38
}
 80017fc:	e012      	b.n	8001824 <HAL_TIM_PWM_MspInit+0x130>
  else if(tim_pwmHandle->Instance==TIM5)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <HAL_TIM_PWM_MspInit+0x14c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d10d      	bne.n	8001824 <HAL_TIM_PWM_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HAL_TIM_PWM_MspInit+0x13c>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	4a07      	ldr	r2, [pc, #28]	; (8001830 <HAL_TIM_PWM_MspInit+0x13c>)
 8001812:	f043 0308 	orr.w	r3, r3, #8
 8001816:	6413      	str	r3, [r2, #64]	; 0x40
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_TIM_PWM_MspInit+0x13c>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
}
 8001824:	bf00      	nop
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40010000 	.word	0x40010000
 8001830:	40023800 	.word	0x40023800
 8001834:	40000400 	.word	0x40000400
 8001838:	20000818 	.word	0x20000818
 800183c:	40026070 	.word	0x40026070
 8001840:	40000c00 	.word	0x40000c00

08001844 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08c      	sub	sp, #48	; 0x30
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 031c 	add.w	r3, r7, #28
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001864:	d153      	bne.n	800190e <HAL_TIM_IC_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
 800186a:	4b47      	ldr	r3, [pc, #284]	; (8001988 <HAL_TIM_IC_MspInit+0x144>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a46      	ldr	r2, [pc, #280]	; (8001988 <HAL_TIM_IC_MspInit+0x144>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b44      	ldr	r3, [pc, #272]	; (8001988 <HAL_TIM_IC_MspInit+0x144>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	61bb      	str	r3, [r7, #24]
 8001880:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	4b40      	ldr	r3, [pc, #256]	; (8001988 <HAL_TIM_IC_MspInit+0x144>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a3f      	ldr	r2, [pc, #252]	; (8001988 <HAL_TIM_IC_MspInit+0x144>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b3d      	ldr	r3, [pc, #244]	; (8001988 <HAL_TIM_IC_MspInit+0x144>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b39      	ldr	r3, [pc, #228]	; (8001988 <HAL_TIM_IC_MspInit+0x144>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a38      	ldr	r2, [pc, #224]	; (8001988 <HAL_TIM_IC_MspInit+0x144>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b36      	ldr	r3, [pc, #216]	; (8001988 <HAL_TIM_IC_MspInit+0x144>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SPEED_Pin|THROTTLE_Pin;
 80018ba:	2328      	movs	r3, #40	; 0x28
 80018bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018c2:	2302      	movs	r3, #2
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c6:	2302      	movs	r3, #2
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018ca:	2301      	movs	r3, #1
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	4619      	mov	r1, r3
 80018d4:	482d      	ldr	r0, [pc, #180]	; (800198c <HAL_TIM_IC_MspInit+0x148>)
 80018d6:	f001 fdc3 	bl	8003460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GEAR_Pin;
 80018da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018e4:	2302      	movs	r3, #2
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e8:	2302      	movs	r3, #2
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018ec:	2301      	movs	r3, #1
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GEAR_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4619      	mov	r1, r3
 80018f6:	4826      	ldr	r0, [pc, #152]	; (8001990 <HAL_TIM_IC_MspInit+0x14c>)
 80018f8:	f001 fdb2 	bl	8003460 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	201c      	movs	r0, #28
 8001902:	f001 f9fa 	bl	8002cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001906:	201c      	movs	r0, #28
 8001908:	f001 fa13 	bl	8002d32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800190c:	e038      	b.n	8001980 <HAL_TIM_IC_MspInit+0x13c>
  else if(tim_icHandle->Instance==TIM9)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a20      	ldr	r2, [pc, #128]	; (8001994 <HAL_TIM_IC_MspInit+0x150>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d133      	bne.n	8001980 <HAL_TIM_IC_MspInit+0x13c>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <HAL_TIM_IC_MspInit+0x144>)
 800191e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001920:	4a19      	ldr	r2, [pc, #100]	; (8001988 <HAL_TIM_IC_MspInit+0x144>)
 8001922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001926:	6453      	str	r3, [r2, #68]	; 0x44
 8001928:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_TIM_IC_MspInit+0x144>)
 800192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001934:	2300      	movs	r3, #0
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <HAL_TIM_IC_MspInit+0x144>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	4a12      	ldr	r2, [pc, #72]	; (8001988 <HAL_TIM_IC_MspInit+0x144>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6313      	str	r3, [r2, #48]	; 0x30
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <HAL_TIM_IC_MspInit+0x144>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PITCH_Pin;
 8001950:	2304      	movs	r3, #4
 8001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001958:	2302      	movs	r3, #2
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800195c:	2302      	movs	r3, #2
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001960:	2303      	movs	r3, #3
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PITCH_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	4619      	mov	r1, r3
 800196a:	4808      	ldr	r0, [pc, #32]	; (800198c <HAL_TIM_IC_MspInit+0x148>)
 800196c:	f001 fd78 	bl	8003460 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001970:	2200      	movs	r2, #0
 8001972:	2100      	movs	r1, #0
 8001974:	2018      	movs	r0, #24
 8001976:	f001 f9c0 	bl	8002cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800197a:	2018      	movs	r0, #24
 800197c:	f001 f9d9 	bl	8002d32 <HAL_NVIC_EnableIRQ>
}
 8001980:	bf00      	nop
 8001982:	3730      	adds	r7, #48	; 0x30
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40023800 	.word	0x40023800
 800198c:	40020000 	.word	0x40020000
 8001990:	40020400 	.word	0x40020400
 8001994:	40014000 	.word	0x40014000

08001998 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM10)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a3b      	ldr	r2, [pc, #236]	; (8001aa4 <HAL_TIM_Base_MspInit+0x10c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d135      	bne.n	8001a26 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	4b3a      	ldr	r3, [pc, #232]	; (8001aa8 <HAL_TIM_Base_MspInit+0x110>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	4a39      	ldr	r2, [pc, #228]	; (8001aa8 <HAL_TIM_Base_MspInit+0x110>)
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ca:	4b37      	ldr	r3, [pc, #220]	; (8001aa8 <HAL_TIM_Base_MspInit+0x110>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <HAL_TIM_Base_MspInit+0x110>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a32      	ldr	r2, [pc, #200]	; (8001aa8 <HAL_TIM_Base_MspInit+0x110>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <HAL_TIM_Base_MspInit+0x110>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697b      	ldr	r3, [r7, #20]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = ROLL_Pin;
 80019f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019fc:	2302      	movs	r3, #2
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a00:	2302      	movs	r3, #2
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001a04:	2303      	movs	r3, #3
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROLL_GPIO_Port, &GPIO_InitStruct);
 8001a08:	f107 031c 	add.w	r3, r7, #28
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4827      	ldr	r0, [pc, #156]	; (8001aac <HAL_TIM_Base_MspInit+0x114>)
 8001a10:	f001 fd26 	bl	8003460 <HAL_GPIO_Init>

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2100      	movs	r1, #0
 8001a18:	2019      	movs	r0, #25
 8001a1a:	f001 f96e 	bl	8002cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a1e:	2019      	movs	r0, #25
 8001a20:	f001 f987 	bl	8002d32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001a24:	e039      	b.n	8001a9a <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM11)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a21      	ldr	r2, [pc, #132]	; (8001ab0 <HAL_TIM_Base_MspInit+0x118>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d134      	bne.n	8001a9a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <HAL_TIM_Base_MspInit+0x110>)
 8001a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a38:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <HAL_TIM_Base_MspInit+0x110>)
 8001a3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a3e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_TIM_Base_MspInit+0x110>)
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_TIM_Base_MspInit+0x110>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <HAL_TIM_Base_MspInit+0x110>)
 8001a56:	f043 0302 	orr.w	r3, r3, #2
 8001a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_TIM_Base_MspInit+0x110>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = YAW_Pin;
 8001a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a72:	2302      	movs	r3, #2
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a76:	2302      	movs	r3, #2
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(YAW_GPIO_Port, &GPIO_InitStruct);
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	4619      	mov	r1, r3
 8001a84:	4809      	ldr	r0, [pc, #36]	; (8001aac <HAL_TIM_Base_MspInit+0x114>)
 8001a86:	f001 fceb 	bl	8003460 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	201a      	movs	r0, #26
 8001a90:	f001 f933 	bl	8002cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a94:	201a      	movs	r0, #26
 8001a96:	f001 f94c 	bl	8002d32 <HAL_NVIC_EnableIRQ>
}
 8001a9a:	bf00      	nop
 8001a9c:	3730      	adds	r7, #48	; 0x30
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40014400 	.word	0x40014400
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020400 	.word	0x40020400
 8001ab0:	40014800 	.word	0x40014800

08001ab4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	; 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a36      	ldr	r2, [pc, #216]	; (8001bac <HAL_TIM_MspPostInit+0xf8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d11f      	bne.n	8001b16 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	4b35      	ldr	r3, [pc, #212]	; (8001bb0 <HAL_TIM_MspPostInit+0xfc>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a34      	ldr	r2, [pc, #208]	; (8001bb0 <HAL_TIM_MspPostInit+0xfc>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <HAL_TIM_MspPostInit+0xfc>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TAROT_L1_Pin|TAROT_L2_Pin|TAROT_R1_Pin|TAROT_R2_Pin;
 8001af2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001afc:	2302      	movs	r3, #2
 8001afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b00:	2302      	movs	r3, #2
 8001b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4829      	ldr	r0, [pc, #164]	; (8001bb4 <HAL_TIM_MspPostInit+0x100>)
 8001b10:	f001 fca6 	bl	8003460 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001b14:	e046      	b.n	8001ba4 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a27      	ldr	r2, [pc, #156]	; (8001bb8 <HAL_TIM_MspPostInit+0x104>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d11e      	bne.n	8001b5e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <HAL_TIM_MspPostInit+0xfc>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	4a21      	ldr	r2, [pc, #132]	; (8001bb0 <HAL_TIM_MspPostInit+0xfc>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b30:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <HAL_TIM_MspPostInit+0xfc>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_Pin;
 8001b3c:	2340      	movs	r3, #64	; 0x40
 8001b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b44:	2302      	movs	r3, #2
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	4817      	ldr	r0, [pc, #92]	; (8001bb4 <HAL_TIM_MspPostInit+0x100>)
 8001b58:	f001 fc82 	bl	8003460 <HAL_GPIO_Init>
}
 8001b5c:	e022      	b.n	8001ba4 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM5)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a16      	ldr	r2, [pc, #88]	; (8001bbc <HAL_TIM_MspPostInit+0x108>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d11d      	bne.n	8001ba4 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <HAL_TIM_MspPostInit+0xfc>)
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	4a0f      	ldr	r2, [pc, #60]	; (8001bb0 <HAL_TIM_MspPostInit+0xfc>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6313      	str	r3, [r2, #48]	; 0x30
 8001b78:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <HAL_TIM_MspPostInit+0xfc>)
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EDF_L1_Pin|EDF_R1_Pin;
 8001b84:	2303      	movs	r3, #3
 8001b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b90:	2302      	movs	r3, #2
 8001b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b94:	2302      	movs	r3, #2
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <HAL_TIM_MspPostInit+0x100>)
 8001ba0:	f001 fc5e 	bl	8003460 <HAL_GPIO_Init>
}
 8001ba4:	bf00      	nop
 8001ba6:	3728      	adds	r7, #40	; 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	40000400 	.word	0x40000400
 8001bbc:	40000c00 	.word	0x40000c00

08001bc0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <MX_USART1_UART_Init+0x4c>)
 8001bc6:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <MX_USART1_UART_Init+0x50>)
 8001bc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <MX_USART1_UART_Init+0x4c>)
 8001bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <MX_USART1_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <MX_USART1_UART_Init+0x4c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <MX_USART1_UART_Init+0x4c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <MX_USART1_UART_Init+0x4c>)
 8001be6:	220c      	movs	r2, #12
 8001be8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <MX_USART1_UART_Init+0x4c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <MX_USART1_UART_Init+0x4c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bf6:	4805      	ldr	r0, [pc, #20]	; (8001c0c <MX_USART1_UART_Init+0x4c>)
 8001bf8:	f004 fca4 	bl	8006544 <HAL_UART_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c02:	f7ff f80f 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000878 	.word	0x20000878
 8001c10:	40011000 	.word	0x40011000

08001c14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a2c      	ldr	r2, [pc, #176]	; (8001ce4 <HAL_UART_MspInit+0xd0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d152      	bne.n	8001cdc <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <HAL_UART_MspInit+0xd4>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	4a2a      	ldr	r2, [pc, #168]	; (8001ce8 <HAL_UART_MspInit+0xd4>)
 8001c40:	f043 0310 	orr.w	r3, r3, #16
 8001c44:	6453      	str	r3, [r2, #68]	; 0x44
 8001c46:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <HAL_UART_MspInit+0xd4>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <HAL_UART_MspInit+0xd4>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a23      	ldr	r2, [pc, #140]	; (8001ce8 <HAL_UART_MspInit+0xd4>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <HAL_UART_MspInit+0xd4>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <HAL_UART_MspInit+0xd4>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a1c      	ldr	r2, [pc, #112]	; (8001ce8 <HAL_UART_MspInit+0xd4>)
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <HAL_UART_MspInit+0xd4>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = FC_TX_Pin;
 8001c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c9c:	2307      	movs	r3, #7
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FC_TX_GPIO_Port, &GPIO_InitStruct);
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4811      	ldr	r0, [pc, #68]	; (8001cec <HAL_UART_MspInit+0xd8>)
 8001ca8:	f001 fbda 	bl	8003460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FC_RX_Pin;
 8001cac:	2308      	movs	r3, #8
 8001cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cbc:	2307      	movs	r3, #7
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FC_RX_GPIO_Port, &GPIO_InitStruct);
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	480a      	ldr	r0, [pc, #40]	; (8001cf0 <HAL_UART_MspInit+0xdc>)
 8001cc8:	f001 fbca 	bl	8003460 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2100      	movs	r1, #0
 8001cd0:	2025      	movs	r0, #37	; 0x25
 8001cd2:	f001 f812 	bl	8002cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cd6:	2025      	movs	r0, #37	; 0x25
 8001cd8:	f001 f82b 	bl	8002d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3728      	adds	r7, #40	; 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40011000 	.word	0x40011000
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40020000 	.word	0x40020000
 8001cf0:	40020400 	.word	0x40020400

08001cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cf8:	480d      	ldr	r0, [pc, #52]	; (8001d30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cfa:	490e      	ldr	r1, [pc, #56]	; (8001d34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cfc:	4a0e      	ldr	r2, [pc, #56]	; (8001d38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d00:	e002      	b.n	8001d08 <LoopCopyDataInit>

08001d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d06:	3304      	adds	r3, #4

08001d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d0c:	d3f9      	bcc.n	8001d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0e:	4a0b      	ldr	r2, [pc, #44]	; (8001d3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d10:	4c0b      	ldr	r4, [pc, #44]	; (8001d40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d14:	e001      	b.n	8001d1a <LoopFillZerobss>

08001d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d18:	3204      	adds	r2, #4

08001d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d1c:	d3fb      	bcc.n	8001d16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d1e:	f7ff fa37 	bl	8001190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d22:	f005 fe4f 	bl	80079c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d26:	f7fe fecd 	bl	8000ac4 <main>
  bx  lr    
 8001d2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d34:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001d38:	08007c14 	.word	0x08007c14
  ldr r2, =_sbss
 8001d3c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001d40:	20001058 	.word	0x20001058

08001d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d44:	e7fe      	b.n	8001d44 <ADC_IRQHandler>

08001d46 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8001d46:	b590      	push	{r4, r7, lr}
 8001d48:	b087      	sub	sp, #28
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	4603      	mov	r3, r0
 8001d52:	73fb      	strb	r3, [r7, #15]
 8001d54:	4613      	mov	r3, r2
 8001d56:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <bmi160_get_regs+0x24>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d102      	bne.n	8001d70 <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 8001d6a:	23ff      	movs	r3, #255	; 0xff
 8001d6c:	75fb      	strb	r3, [r7, #23]
 8001d6e:	e017      	b.n	8001da0 <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 8001d70:	89bb      	ldrh	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d102      	bne.n	8001d7c <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8001d76:	23f4      	movs	r3, #244	; 0xf4
 8001d78:	75fb      	strb	r3, [r7, #23]
 8001d7a:	e011      	b.n	8001da0 <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	789b      	ldrb	r3, [r3, #2]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d103      	bne.n	8001d8c <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d8a:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69dc      	ldr	r4, [r3, #28]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	7858      	ldrb	r0, [r3, #1]
 8001d94:	89bb      	ldrh	r3, [r7, #12]
 8001d96:	7bf9      	ldrb	r1, [r7, #15]
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	47a0      	blx	r4
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001da0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	371c      	adds	r7, #28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd90      	pop	{r4, r7, pc}

08001dac <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	4603      	mov	r3, r0
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <bmi160_set_regs+0x28>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d102      	bne.n	8001dda <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 8001dd4:	23ff      	movs	r3, #255	; 0xff
 8001dd6:	75fb      	strb	r3, [r7, #23]
 8001dd8:	e045      	b.n	8001e66 <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 8001dda:	89bb      	ldrh	r3, [r7, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d102      	bne.n	8001de6 <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8001de0:	23f4      	movs	r3, #244	; 0xf4
 8001de2:	75fb      	strb	r3, [r7, #23]
 8001de4:	e03f      	b.n	8001e66 <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	789b      	ldrb	r3, [r3, #2]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d103      	bne.n	8001df6 <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001df4:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	7a1b      	ldrb	r3, [r3, #8]
 8001dfa:	2b11      	cmp	r3, #17
 8001dfc:	d003      	beq.n	8001e06 <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8001e02:	2b15      	cmp	r3, #21
 8001e04:	d124      	bne.n	8001e50 <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1c      	ldr	r4, [r3, #32]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7858      	ldrb	r0, [r3, #1]
 8001e0e:	89bb      	ldrh	r3, [r7, #12]
 8001e10:	7bf9      	ldrb	r1, [r7, #15]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	47a0      	blx	r4
 8001e16:	4603      	mov	r3, r0
 8001e18:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	2001      	movs	r0, #1
 8001e20:	4798      	blx	r3
 8001e22:	e01a      	b.n	8001e5a <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1c      	ldr	r4, [r3, #32]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7858      	ldrb	r0, [r3, #1]
 8001e2c:	7dbb      	ldrb	r3, [r7, #22]
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	441a      	add	r2, r3
 8001e32:	7bf9      	ldrb	r1, [r7, #15]
 8001e34:	2301      	movs	r3, #1
 8001e36:	47a0      	blx	r4
 8001e38:	4603      	mov	r3, r0
 8001e3a:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	2001      	movs	r0, #1
 8001e48:	4798      	blx	r3
            for (; count < len; count++)
 8001e4a:	7dbb      	ldrb	r3, [r7, #22]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	75bb      	strb	r3, [r7, #22]
 8001e50:	7dbb      	ldrb	r3, [r7, #22]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	89ba      	ldrh	r2, [r7, #12]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d8e4      	bhi.n	8001e24 <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 8001e5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 8001e62:	23fe      	movs	r3, #254	; 0xfe
 8001e64:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001e66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	371c      	adds	r7, #28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd90      	pop	{r4, r7, pc}

08001e72 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f8da 	bl	8002038 <null_ptr_check>
 8001e84:	4603      	mov	r3, r0
 8001e86:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8001e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10c      	bne.n	8001eaa <bmi160_init+0x38>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	789b      	ldrb	r3, [r3, #2]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d108      	bne.n	8001eaa <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8001e98:	f107 010d 	add.w	r1, r7, #13
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	207f      	movs	r0, #127	; 0x7f
 8001ea2:	f7ff ff50 	bl	8001d46 <bmi160_get_regs>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 8001eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d127      	bne.n	8001f02 <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8001eb8:	e007      	b.n	8001eca <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f7ff ff40 	bl	8001d46 <bmi160_get_regs>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8001eca:	7bbb      	ldrb	r3, [r7, #14]
 8001ecc:	1e5a      	subs	r2, r3, #1
 8001ece:	73ba      	strb	r2, [r7, #14]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <bmi160_init+0x6a>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2bd1      	cmp	r3, #209	; 0xd1
 8001eda:	d1ee      	bne.n	8001eba <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 8001edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10c      	bne.n	8001efe <bmi160_init+0x8c>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2bd1      	cmp	r3, #209	; 0xd1
 8001eea:	d108      	bne.n	8001efe <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	22ff      	movs	r2, #255	; 0xff
 8001ef0:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f80b 	bl	8001f0e <bmi160_soft_reset>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	e001      	b.n	8001f02 <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 8001efe:	23fd      	movs	r3, #253	; 0xfd
 8001f00:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 8001f16:	23b6      	movs	r3, #182	; 0xb6
 8001f18:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <bmi160_soft_reset+0x1a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d102      	bne.n	8001f2e <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8001f28:	23ff      	movs	r3, #255	; 0xff
 8001f2a:	73fb      	strb	r3, [r7, #15]
 8001f2c:	e024      	b.n	8001f78 <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8001f2e:	f107 010e 	add.w	r1, r7, #14
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	207e      	movs	r0, #126	; 0x7e
 8001f38:	f7ff ff38 	bl	8001dac <bmi160_set_regs>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	2001      	movs	r0, #1
 8001f46:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8001f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10c      	bne.n	8001f6a <bmi160_soft_reset+0x5c>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	789b      	ldrb	r3, [r3, #2]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d108      	bne.n	8001f6a <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8001f58:	f107 010e 	add.w	r1, r7, #14
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	207f      	movs	r0, #127	; 0x7f
 8001f62:	f7ff fef0 	bl	8001d46 <bmi160_get_regs>
 8001f66:	4603      	mov	r3, r0
 8001f68:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f880 	bl	8002078 <default_param_settg>
        }
    }

    return rslt;
 8001f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <bmi160_set_sens_conf+0x1a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8001f9e:	23ff      	movs	r3, #255	; 0xff
 8001fa0:	73fb      	strb	r3, [r7, #15]
 8001fa2:	e01f      	b.n	8001fe4 <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f891 	bl	80020cc <set_accel_conf>
 8001faa:	4603      	mov	r3, r0
 8001fac:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d116      	bne.n	8001fe4 <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f9cc 	bl	8002354 <set_gyro_conf>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10d      	bne.n	8001fe4 <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f811 	bl	8001ff0 <bmi160_set_power_mode>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8001fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d104      	bne.n	8001fe4 <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f985 	bl	80022ea <check_invalid_settg>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <bmi160_set_power_mode+0x1a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 800200a:	23ff      	movs	r3, #255	; 0xff
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	e00d      	b.n	800202c <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 faa8 	bl	8002566 <set_accel_pwr>
 8002016:	4603      	mov	r3, r0
 8002018:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800201a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d104      	bne.n	800202c <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fb36 	bl	8002694 <set_gyro_pwr>
 8002028:	4603      	mov	r3, r0
 800202a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800202c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00b      	beq.n	800205e <null_ptr_check+0x26>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <null_ptr_check+0x26>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <null_ptr_check+0x26>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	2b00      	cmp	r3, #0
 800205c:	d102      	bne.n	8002064 <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 800205e:	23ff      	movs	r3, #255	; 0xff
 8002060:	73fb      	strb	r3, [r7, #15]
 8002062:	e001      	b.n	8002068 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002068:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2208      	movs	r2, #8
 800208a:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2210      	movs	r2, #16
 8002090:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2203      	movs	r2, #3
 8002096:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2202      	movs	r2, #2
 800209c:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2208      	movs	r2, #8
 80020a2:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2214      	movs	r2, #20
 80020a8:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6852      	ldr	r2, [r2, #4]
 80020b6:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68d2      	ldr	r2, [r2, #12]
 80020be:	611a      	str	r2, [r3, #16]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 80020d4:	2300      	movs	r3, #0
 80020d6:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f833 	bl	800214a <check_accel_config>
 80020e4:	4603      	mov	r3, r0
 80020e6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80020e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d126      	bne.n	800213e <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 80020f0:	f107 010c 	add.w	r1, r7, #12
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	2040      	movs	r0, #64	; 0x40
 80020fa:	f7ff fe57 	bl	8001dac <bmi160_set_regs>
 80020fe:	4603      	mov	r3, r0
 8002100:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8002102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d119      	bne.n	800213e <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	795a      	ldrb	r2, [r3, #5]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	79da      	ldrb	r2, [r3, #7]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 800211a:	f107 030c 	add.w	r3, r7, #12
 800211e:	1c59      	adds	r1, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	2041      	movs	r0, #65	; 0x41
 8002126:	f7ff fe41 	bl	8001dac <bmi160_set_regs>
 800212a:	4603      	mov	r3, r0
 800212c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800212e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d103      	bne.n	800213e <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	799a      	ldrb	r2, [r3, #6]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 800213e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2202      	movs	r2, #2
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	2040      	movs	r0, #64	; 0x40
 800215c:	f7ff fdf3 	bl	8001d46 <bmi160_get_regs>
 8002160:	4603      	mov	r3, r0
 8002162:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d11b      	bne.n	80021a4 <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 800216c:	6839      	ldr	r1, [r7, #0]
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f81e 	bl	80021b0 <process_accel_odr>
 8002174:	4603      	mov	r3, r0
 8002176:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8002178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d111      	bne.n	80021a4 <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 8002180:	6839      	ldr	r1, [r7, #0]
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f848 	bl	8002218 <process_accel_bw>
 8002188:	4603      	mov	r3, r0
 800218a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800218c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d107      	bne.n	80021a4 <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3301      	adds	r3, #1
 8002198:	6839      	ldr	r1, [r7, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f871 	bl	8002282 <process_accel_range>
 80021a0:	4603      	mov	r3, r0
 80021a2:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80021a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	795b      	ldrb	r3, [r3, #5]
 80021ca:	2b0c      	cmp	r3, #12
 80021cc:	d81a      	bhi.n	8002204 <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	795a      	ldrb	r2, [r3, #5]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	7a5b      	ldrb	r3, [r3, #9]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d016      	beq.n	8002208 <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	795b      	ldrb	r3, [r3, #5]
 80021de:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	f023 030f 	bic.w	r3, r3, #15
 80021e8:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 80021ea:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	b25a      	sxtb	r2, r3
 80021f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	b25b      	sxtb	r3, r3
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	701a      	strb	r2, [r3, #0]
 8002202:	e001      	b.n	8002208 <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8002204:	23fc      	movs	r3, #252	; 0xfc
 8002206:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002208:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	79db      	ldrb	r3, [r3, #7]
 8002232:	2b07      	cmp	r3, #7
 8002234:	d81b      	bhi.n	800226e <process_accel_bw+0x56>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	79da      	ldrb	r2, [r3, #7]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	7adb      	ldrb	r3, [r3, #11]
 800223e:	429a      	cmp	r2, r3
 8002240:	d017      	beq.n	8002272 <process_accel_bw+0x5a>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	79db      	ldrb	r3, [r3, #7]
 8002246:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002250:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 8002252:	7b7b      	ldrb	r3, [r7, #13]
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	b25b      	sxtb	r3, r3
 8002258:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800225c:	b25a      	sxtb	r2, r3
 800225e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002262:	4313      	orrs	r3, r2
 8002264:	b25b      	sxtb	r3, r3
 8002266:	b2da      	uxtb	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	e001      	b.n	8002272 <process_accel_bw+0x5a>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800226e:	23fc      	movs	r3, #252	; 0xfc
 8002270:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002272:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8002282:	b480      	push	{r7}
 8002284:	b085      	sub	sp, #20
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	799b      	ldrb	r3, [r3, #6]
 800229c:	2b0c      	cmp	r3, #12
 800229e:	d81a      	bhi.n	80022d6 <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	799a      	ldrb	r2, [r3, #6]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	7a9b      	ldrb	r3, [r3, #10]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d016      	beq.n	80022da <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	799b      	ldrb	r3, [r3, #6]
 80022b0:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	f023 030f 	bic.w	r3, r3, #15
 80022ba:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 80022bc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	b25a      	sxtb	r2, r3
 80022c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	b25b      	sxtb	r3, r3
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	701a      	strb	r2, [r3, #0]
 80022d4:	e001      	b.n	80022da <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80022d6:	23fc      	movs	r3, #252	; 0xfc
 80022d8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80022da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 80022f6:	f107 010e 	add.w	r1, r7, #14
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	2002      	movs	r0, #2
 8002300:	f7ff fd21 	bl	8001d46 <bmi160_get_regs>
 8002304:	4603      	mov	r3, r0
 8002306:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 8002308:	7bbb      	ldrb	r3, [r7, #14]
 800230a:	085b      	lsrs	r3, r3, #1
 800230c:	b2db      	uxtb	r3, r3
 800230e:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 8002310:	7bbb      	ldrb	r3, [r7, #14]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	b2db      	uxtb	r3, r3
 8002318:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 800231a:	7bbb      	ldrb	r3, [r7, #14]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d102      	bne.n	8002326 <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 8002320:	23fa      	movs	r3, #250	; 0xfa
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	e010      	b.n	8002348 <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 8002326:	7bbb      	ldrb	r3, [r7, #14]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d102      	bne.n	8002332 <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 800232c:	23f9      	movs	r3, #249	; 0xf9
 800232e:	73fb      	strb	r3, [r7, #15]
 8002330:	e00a      	b.n	8002348 <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 8002332:	7bbb      	ldrb	r3, [r7, #14]
 8002334:	2b03      	cmp	r3, #3
 8002336:	d102      	bne.n	800233e <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 8002338:	23f8      	movs	r3, #248	; 0xf8
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	e004      	b.n	8002348 <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 800233e:	7bbb      	ldrb	r3, [r7, #14]
 8002340:	2b07      	cmp	r3, #7
 8002342:	d101      	bne.n	8002348 <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 8002344:	23f7      	movs	r3, #247	; 0xf7
 8002346:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002348:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 800235c:	2300      	movs	r3, #0
 800235e:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f833 	bl	80023d2 <check_gyro_config>
 800236c:	4603      	mov	r3, r0
 800236e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d126      	bne.n	80023c6 <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 8002378:	f107 010c 	add.w	r1, r7, #12
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	2042      	movs	r0, #66	; 0x42
 8002382:	f7ff fd13 	bl	8001dac <bmi160_set_regs>
 8002386:	4603      	mov	r3, r0
 8002388:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800238a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d119      	bne.n	80023c6 <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	7b5a      	ldrb	r2, [r3, #13]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	7bda      	ldrb	r2, [r3, #15]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	1c59      	adds	r1, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	2043      	movs	r0, #67	; 0x43
 80023ae:	f7ff fcfd 	bl	8001dac <bmi160_set_regs>
 80023b2:	4603      	mov	r3, r0
 80023b4:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80023b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d103      	bne.n	80023c6 <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	7b9a      	ldrb	r2, [r3, #14]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 80023c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b084      	sub	sp, #16
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2202      	movs	r2, #2
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	2042      	movs	r0, #66	; 0x42
 80023e4:	f7ff fcaf 	bl	8001d46 <bmi160_get_regs>
 80023e8:	4603      	mov	r3, r0
 80023ea:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80023ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d11b      	bne.n	800242c <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 80023f4:	6839      	ldr	r1, [r7, #0]
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f81e 	bl	8002438 <process_gyro_odr>
 80023fc:	4603      	mov	r3, r0
 80023fe:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8002400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d111      	bne.n	800242c <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 8002408:	6839      	ldr	r1, [r7, #0]
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f848 	bl	80024a0 <process_gyro_bw>
 8002410:	4603      	mov	r3, r0
 8002412:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8002414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d107      	bne.n	800242c <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3301      	adds	r3, #1
 8002420:	6839      	ldr	r1, [r7, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f86b 	bl	80024fe <process_gyro_range>
 8002428:	4603      	mov	r3, r0
 800242a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800242c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	7b5b      	ldrb	r3, [r3, #13]
 8002452:	2b0d      	cmp	r3, #13
 8002454:	d81a      	bhi.n	800248c <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	7b5a      	ldrb	r2, [r3, #13]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	7c5b      	ldrb	r3, [r3, #17]
 800245e:	429a      	cmp	r2, r3
 8002460:	d016      	beq.n	8002490 <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	7b5b      	ldrb	r3, [r3, #13]
 8002466:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	f023 030f 	bic.w	r3, r3, #15
 8002470:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 8002472:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	b25a      	sxtb	r2, r3
 800247c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002480:	4313      	orrs	r3, r2
 8002482:	b25b      	sxtb	r3, r3
 8002484:	b2da      	uxtb	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	e001      	b.n	8002490 <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800248c:	23fc      	movs	r3, #252	; 0xfc
 800248e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002490:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	7bdb      	ldrb	r3, [r3, #15]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d815      	bhi.n	80024ea <process_gyro_bw+0x4a>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	7bdb      	ldrb	r3, [r3, #15]
 80024c2:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80024cc:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 80024ce:	7b7b      	ldrb	r3, [r7, #13]
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	b25b      	sxtb	r3, r3
 80024d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80024d8:	b25a      	sxtb	r2, r3
 80024da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024de:	4313      	orrs	r3, r2
 80024e0:	b25b      	sxtb	r3, r3
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	701a      	strb	r2, [r3, #0]
 80024e8:	e001      	b.n	80024ee <process_gyro_bw+0x4e>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80024ea:	23fc      	movs	r3, #252	; 0xfc
 80024ec:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80024ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 80024fe:	b480      	push	{r7}
 8002500:	b085      	sub	sp, #20
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	7b9b      	ldrb	r3, [r3, #14]
 8002518:	2b04      	cmp	r3, #4
 800251a:	d81a      	bhi.n	8002552 <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	7b9a      	ldrb	r2, [r3, #14]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	7c9b      	ldrb	r3, [r3, #18]
 8002524:	429a      	cmp	r2, r3
 8002526:	d016      	beq.n	8002556 <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	7b9b      	ldrb	r3, [r3, #14]
 800252c:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	f023 0307 	bic.w	r3, r3, #7
 8002536:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 8002538:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	b25a      	sxtb	r2, r3
 8002542:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002546:	4313      	orrs	r3, r2
 8002548:	b25b      	sxtb	r3, r3
 800254a:	b2da      	uxtb	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	701a      	strb	r2, [r3, #0]
 8002550:	e001      	b.n	8002556 <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8002552:	23fc      	movs	r3, #252	; 0xfc
 8002554:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002556:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b084      	sub	sp, #16
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	791b      	ldrb	r3, [r3, #4]
 800257a:	2b0f      	cmp	r3, #15
 800257c:	d92b      	bls.n	80025d6 <set_accel_pwr+0x70>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	791b      	ldrb	r3, [r3, #4]
 8002582:	2b12      	cmp	r3, #18
 8002584:	d827      	bhi.n	80025d6 <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	791a      	ldrb	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	7a1b      	ldrb	r3, [r3, #8]
 800258e:	429a      	cmp	r2, r3
 8002590:	d024      	beq.n	80025dc <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 8002592:	f107 030e 	add.w	r3, r7, #14
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4618      	mov	r0, r3
 800259a:	f000 f826 	bl	80025ea <process_under_sampling>
 800259e:	4603      	mov	r3, r0
 80025a0:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80025a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d118      	bne.n	80025dc <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	1d19      	adds	r1, r3, #4
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	207e      	movs	r0, #126	; 0x7e
 80025b4:	f7ff fbfa 	bl	8001dac <bmi160_set_regs>
 80025b8:	4603      	mov	r3, r0
 80025ba:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	7a1b      	ldrb	r3, [r3, #8]
 80025c0:	2b10      	cmp	r3, #16
 80025c2:	d103      	bne.n	80025cc <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	2005      	movs	r0, #5
 80025ca:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	791a      	ldrb	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 80025d4:	e002      	b.n	80025dc <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 80025d6:	23f3      	movs	r3, #243	; 0xf3
 80025d8:	73fb      	strb	r3, [r7, #15]
 80025da:	e000      	b.n	80025de <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 80025dc:	bf00      	nop
    }

    return rslt;
 80025de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 80025f8:	2300      	movs	r3, #0
 80025fa:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	2201      	movs	r2, #1
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	2040      	movs	r0, #64	; 0x40
 8002604:	f7ff fb9f 	bl	8001d46 <bmi160_get_regs>
 8002608:	4603      	mov	r3, r0
 800260a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800260c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d139      	bne.n	8002688 <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	791b      	ldrb	r3, [r3, #4]
 8002618:	2b12      	cmp	r3, #18
 800261a:	d120      	bne.n	800265e <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002624:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 8002626:	7bbb      	ldrb	r3, [r7, #14]
 8002628:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800262c:	b2da      	uxtb	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2201      	movs	r2, #1
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	2040      	movs	r0, #64	; 0x40
 800263a:	f7ff fbb7 	bl	8001dac <bmi160_set_regs>
 800263e:	4603      	mov	r3, r0
 8002640:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 8002642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d11e      	bne.n	8002688 <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 800264a:	f107 010c 	add.w	r1, r7, #12
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2202      	movs	r2, #2
 8002652:	2058      	movs	r0, #88	; 0x58
 8002654:	f7ff fbaa 	bl	8001dac <bmi160_set_regs>
 8002658:	4603      	mov	r3, r0
 800265a:	73fb      	strb	r3, [r7, #15]
 800265c:	e014      	b.n	8002688 <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	b25b      	sxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	da0f      	bge.n	8002688 <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002670:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	7bba      	ldrb	r2, [r7, #14]
 8002676:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2201      	movs	r2, #1
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	2040      	movs	r0, #64	; 0x40
 8002680:	f7ff fb94 	bl	8001dac <bmi160_set_regs>
 8002684:	4603      	mov	r3, r0
 8002686:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002688:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	7b1b      	ldrb	r3, [r3, #12]
 80026a4:	2b14      	cmp	r3, #20
 80026a6:	d007      	beq.n	80026b8 <set_gyro_pwr+0x24>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	7b1b      	ldrb	r3, [r3, #12]
 80026ac:	2b15      	cmp	r3, #21
 80026ae:	d003      	beq.n	80026b8 <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 80026b4:	2b17      	cmp	r3, #23
 80026b6:	d129      	bne.n	800270c <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7b1a      	ldrb	r2, [r3, #12]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	7c1b      	ldrb	r3, [r3, #16]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d025      	beq.n	8002710 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f103 010c 	add.w	r1, r3, #12
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	207e      	movs	r0, #126	; 0x7e
 80026d0:	f7ff fb6c 	bl	8001dac <bmi160_set_regs>
 80026d4:	4603      	mov	r3, r0
 80026d6:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	7c1b      	ldrb	r3, [r3, #16]
 80026dc:	2b14      	cmp	r3, #20
 80026de:	d104      	bne.n	80026ea <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	2050      	movs	r0, #80	; 0x50
 80026e6:	4798      	blx	r3
 80026e8:	e00b      	b.n	8002702 <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7c1b      	ldrb	r3, [r3, #16]
 80026ee:	2b17      	cmp	r3, #23
 80026f0:	d107      	bne.n	8002702 <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 80026f6:	2b15      	cmp	r3, #21
 80026f8:	d103      	bne.n	8002702 <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	200a      	movs	r0, #10
 8002700:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	7b1a      	ldrb	r2, [r3, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 800270a:	e001      	b.n	8002710 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 800270c:	23f3      	movs	r3, #243	; 0xf3
 800270e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002710:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <bridge_validate_data>:

const char space = ' ';
const char semicolon = ';';

// "1097;1919;1508;1508;1919;"
bool bridge_validate_data(char *s, int size) {
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
	int length = strlen(s);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fd fd56 	bl	80001d8 <strlen>
 800272c:	4603      	mov	r3, r0
 800272e:	60fb      	str	r3, [r7, #12]
	if (s == NULL || length < size) {
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <bridge_validate_data+0x22>
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	da01      	bge.n	8002742 <bridge_validate_data+0x26>
		return false;
 800273e:	2300      	movs	r3, #0
 8002740:	e000      	b.n	8002744 <bridge_validate_data+0x28>
	}
	return true;
 8002742:	2301      	movs	r3, #1
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <bridge_format_string>:

// fc_bridge.port->data_in = bridge_format_string((char*) fc_bridge.rx_data); // allocate memory
// process data
// free(fc_bridge.port->data_in); // deallocate memory
char* bridge_format_string(char *s) {
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
	char *d = (char*) malloc(strlen(s));
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7fd fd3f 	bl	80001d8 <strlen>
 800275a:	4603      	mov	r3, r0
 800275c:	4618      	mov	r0, r3
 800275e:	f004 ffdf 	bl	8007720 <malloc>
 8002762:	4603      	mov	r3, r0
 8002764:	60fb      	str	r3, [r7, #12]
	int counter = 0, space_num = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
	while (*s++) {
 800276e:	e02c      	b.n	80027ca <bridge_format_string+0x7e>
		if (*s != semicolon && isdigit((int )*s)) {
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	223b      	movs	r2, #59	; 0x3b
 8002776:	4293      	cmp	r3, r2
 8002778:	d027      	beq.n	80027ca <bridge_format_string+0x7e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	3301      	adds	r3, #1
 8002780:	4a1a      	ldr	r2, [pc, #104]	; (80027ec <bridge_format_string+0xa0>)
 8002782:	4413      	add	r3, r2
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b00      	cmp	r3, #0
 800278c:	d01d      	beq.n	80027ca <bridge_format_string+0x7e>
			if (counter != 0 && (counter - space_num) % 4 == 0) {
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d011      	beq.n	80027b8 <bridge_format_string+0x6c>
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <bridge_format_string+0x6c>
				d[counter++] = space;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	617a      	str	r2, [r7, #20]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4413      	add	r3, r2
 80027ae:	2220      	movs	r2, #32
 80027b0:	701a      	strb	r2, [r3, #0]
				space_num++;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	3301      	adds	r3, #1
 80027b6:	613b      	str	r3, [r7, #16]
			}
			d[counter++] = *s;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	617a      	str	r2, [r7, #20]
 80027be:	461a      	mov	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4413      	add	r3, r2
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	7812      	ldrb	r2, [r2, #0]
 80027c8:	701a      	strb	r2, [r3, #0]
	while (*s++) {
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1cc      	bne.n	8002770 <bridge_format_string+0x24>
		}
	}
	d[counter] = (char) 0; //'\0'
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4413      	add	r3, r2
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
	return d;
 80027e0:	68fb      	ldr	r3, [r7, #12]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	08007b00 	.word	0x08007b00

080027f0 <bridge_get_transmit_sigint>:

inline const short bridge_get_transmit_sigint() {
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
	return FC_BRIDGE_TRANSMIT_SIGINT;
 80027f4:	f44f 7396 	mov.w	r3, #300	; 0x12c
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <bridge_get_receive_sigint>:

inline const short bridge_get_receive_sigint() {
 8002802:	b480      	push	{r7}
 8002804:	af00      	add	r7, sp, #0
	return FC_BRIDGE_RECEIVE_SIGINT;
 8002806:	f240 132d 	movw	r3, #301	; 0x12d
}
 800280a:	4618      	mov	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <get_throttle_queue_rc>:
		queue_dequeue(get_speed_queue_rc(), &data);
		speed_s = (float) data;
	}
}

inline Queue_t* get_throttle_queue_rc() {
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
	return &queues_rc[0];
 8002818:	4b02      	ldr	r3, [pc, #8]	; (8002824 <get_throttle_queue_rc+0x10>)
}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	200008ec 	.word	0x200008ec

08002828 <get_pitch_queue_rc>:

inline Queue_t* get_pitch_queue_rc() {
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
	return &queues_rc[1];
 800282c:	4b02      	ldr	r3, [pc, #8]	; (8002838 <get_pitch_queue_rc+0x10>)
}
 800282e:	4618      	mov	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	200009f0 	.word	0x200009f0

0800283c <get_roll_queue_rc>:

inline Queue_t* get_roll_queue_rc() {
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
	return &queues_rc[2];
 8002840:	4b02      	ldr	r3, [pc, #8]	; (800284c <get_roll_queue_rc+0x10>)
}
 8002842:	4618      	mov	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	20000af4 	.word	0x20000af4

08002850 <get_yaw_queue_rc>:

inline Queue_t* get_yaw_queue_rc() {
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
	return &queues_rc[3];
 8002854:	4b02      	ldr	r3, [pc, #8]	; (8002860 <get_yaw_queue_rc+0x10>)
}
 8002856:	4618      	mov	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	20000bf8 	.word	0x20000bf8

08002864 <get_gear_queue_rc>:

inline Queue_t* get_gear_queue_rc() {
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
	return &queues_rc[4];
 8002868:	4b02      	ldr	r3, [pc, #8]	; (8002874 <get_gear_queue_rc+0x10>)
}
 800286a:	4618      	mov	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	20000cfc 	.word	0x20000cfc

08002878 <get_speed_queue_rc>:

inline Queue_t* get_speed_queue_rc() {
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
	return &queues_rc[5];
 800287c:	4b02      	ldr	r3, [pc, #8]	; (8002888 <get_speed_queue_rc+0x10>)
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	20000e00 	.word	0x20000e00

0800288c <get_memory_order>:
#include <stdbool.h>

static volatile bool initialized = false;
static const memory_order memory_order_drone = memory_order_seq_cst;

inline const memory_order* get_memory_order() {
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
	return &memory_order_drone;
 8002890:	4b02      	ldr	r3, [pc, #8]	; (800289c <get_memory_order+0x10>)
}
 8002892:	4618      	mov	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	08007af4 	.word	0x08007af4

080028a0 <pre_init>:

void pre_init() {
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
	if (!initialized) {
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <pre_init+0x28>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f083 0301 	eor.w	r3, r3, #1
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d004      	beq.n	80028be <pre_init+0x1e>
		atomic_signal_fence(memory_order_drone);
		atomic_thread_fence(memory_order_drone);
 80028b4:	f3bf 8f5b 	dmb	ish
		initialized = true;
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <pre_init+0x28>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	701a      	strb	r2, [r3, #0]
	}
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	20000f04 	.word	0x20000f04

080028cc <queue_store_data>:
 *  Created on: Dec 23, 2023
 *      Author: konrad
 */
#include "queue.h"

inline static void queue_store_data(Queue_t *queue, uint32_t data) {
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
	atomic_store_explicit(&queue->q[queue->pW], data, *get_memory_order());
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	885b      	ldrh	r3, [r3, #2]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	4413      	add	r3, r2
 80028e0:	3304      	adds	r3, #4
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	60bb      	str	r3, [r7, #8]
 80028e8:	68bc      	ldr	r4, [r7, #8]
 80028ea:	f7ff ffcf 	bl	800288c <get_memory_order>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f3bf 8f5b 	dmb	ish
 80028f4:	601c      	str	r4, [r3, #0]
 80028f6:	f3bf 8f5b 	dmb	ish
}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd90      	pop	{r4, r7, pc}

08002902 <queue_full>:

inline static uint32_t queue_get_data(Queue_t *queue) {
	return atomic_load_explicit(&queue->q[queue->pR], *get_memory_order());
}

inline static bool queue_full(Queue_t *queue) {
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
	return (((queue->pW + 1) % QUEUE_SIZE) == queue->pR);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	885b      	ldrh	r3, [r3, #2]
 800290e:	3301      	adds	r3, #1
 8002910:	425a      	negs	r2, r3
 8002912:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002916:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800291a:	bf58      	it	pl
 800291c:	4253      	negpl	r3, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	8812      	ldrh	r2, [r2, #0]
 8002922:	4293      	cmp	r3, r2
 8002924:	bf0c      	ite	eq
 8002926:	2301      	moveq	r3, #1
 8002928:	2300      	movne	r3, #0
 800292a:	b2db      	uxtb	r3, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <queue_enqueue>:

inline bool queue_data_available(Queue_t *queue) {
	return (queue->pW > queue->pR);
}

bool queue_enqueue(Queue_t *queue, uint32_t data) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
	if (queue_full(queue)) {
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff ffdd 	bl	8002902 <queue_full>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <queue_enqueue+0x1a>
		return false;
 800294e:	2300      	movs	r3, #0
 8002950:	e010      	b.n	8002974 <queue_enqueue+0x3c>
	} else {
		queue_store_data(queue, data);
 8002952:	6839      	ldr	r1, [r7, #0]
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff ffb9 	bl	80028cc <queue_store_data>
		queue->pW = ((queue->pW + 1) == QUEUE_SIZE) ? 0 : queue->pW + 1;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	885b      	ldrh	r3, [r3, #2]
 800295e:	2b3f      	cmp	r3, #63	; 0x3f
 8002960:	d004      	beq.n	800296c <queue_enqueue+0x34>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	885b      	ldrh	r3, [r3, #2]
 8002966:	3301      	adds	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	e000      	b.n	800296e <queue_enqueue+0x36>
 800296c:	2200      	movs	r2, #0
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	805a      	strh	r2, [r3, #2]
		return true;
 8002972:	2301      	movs	r3, #1
	}
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return 1;
 8002980:	2301      	movs	r3, #1
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <_kill>:

int _kill(int pid, int sig)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002996:	f005 f80f 	bl	80079b8 <__errno>
 800299a:	4603      	mov	r3, r0
 800299c:	2216      	movs	r2, #22
 800299e:	601a      	str	r2, [r3, #0]
  return -1;
 80029a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029b4:	4a14      	ldr	r2, [pc, #80]	; (8002a08 <_sbrk+0x5c>)
 80029b6:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <_sbrk+0x60>)
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029c0:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <_sbrk+0x64>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <_sbrk+0x64>)
 80029ca:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <_sbrk+0x68>)
 80029cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <_sbrk+0x64>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d207      	bcs.n	80029ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029dc:	f004 ffec 	bl	80079b8 <__errno>
 80029e0:	4603      	mov	r3, r0
 80029e2:	220c      	movs	r2, #12
 80029e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ea:	e009      	b.n	8002a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <_sbrk+0x64>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029f2:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <_sbrk+0x64>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4413      	add	r3, r2
 80029fa:	4a05      	ldr	r2, [pc, #20]	; (8002a10 <_sbrk+0x64>)
 80029fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029fe:	68fb      	ldr	r3, [r7, #12]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20020000 	.word	0x20020000
 8002a0c:	00000400 	.word	0x00000400
 8002a10:	20000f08 	.word	0x20000f08
 8002a14:	20001058 	.word	0x20001058

08002a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <HAL_Init+0x40>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <HAL_Init+0x40>)
 8002a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_Init+0x40>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <HAL_Init+0x40>)
 8002a2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a34:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <HAL_Init+0x40>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <HAL_Init+0x40>)
 8002a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a40:	2003      	movs	r0, #3
 8002a42:	f000 f94f 	bl	8002ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a46:	200f      	movs	r0, #15
 8002a48:	f000 f808 	bl	8002a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a4c:	f7fe fb06 	bl	800105c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40023c00 	.word	0x40023c00

08002a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a64:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <HAL_InitTick+0x54>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <HAL_InitTick+0x58>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 f967 	bl	8002d4e <HAL_SYSTICK_Config>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e00e      	b.n	8002aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b0f      	cmp	r3, #15
 8002a8e:	d80a      	bhi.n	8002aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a90:	2200      	movs	r2, #0
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295
 8002a98:	f000 f92f 	bl	8002cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a9c:	4a06      	ldr	r2, [pc, #24]	; (8002ab8 <HAL_InitTick+0x5c>)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	e000      	b.n	8002aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20000030 	.word	0x20000030
 8002ab4:	20000038 	.word	0x20000038
 8002ab8:	20000034 	.word	0x20000034

08002abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_IncTick+0x20>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_IncTick+0x24>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <HAL_IncTick+0x24>)
 8002ace:	6013      	str	r3, [r2, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000038 	.word	0x20000038
 8002ae0:	20000f0c 	.word	0x20000f0c

08002ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_GetTick+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000f0c 	.word	0x20000f0c

08002afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b04:	f7ff ffee 	bl	8002ae4 <HAL_GetTick>
 8002b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d005      	beq.n	8002b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <HAL_Delay+0x44>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b22:	bf00      	nop
 8002b24:	f7ff ffde 	bl	8002ae4 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d8f7      	bhi.n	8002b24 <HAL_Delay+0x28>
  {
  }
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000038 	.word	0x20000038

08002b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <__NVIC_SetPriorityGrouping+0x44>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b60:	4013      	ands	r3, r2
 8002b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b76:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <__NVIC_SetPriorityGrouping+0x44>)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	60d3      	str	r3, [r2, #12]
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b90:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	0a1b      	lsrs	r3, r3, #8
 8002b96:	f003 0307 	and.w	r3, r3, #7
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	db0b      	blt.n	8002bd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	f003 021f 	and.w	r2, r3, #31
 8002bc0:	4907      	ldr	r1, [pc, #28]	; (8002be0 <__NVIC_EnableIRQ+0x38>)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	2001      	movs	r0, #1
 8002bca:	fa00 f202 	lsl.w	r2, r0, r2
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e000e100 	.word	0xe000e100

08002be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	6039      	str	r1, [r7, #0]
 8002bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	db0a      	blt.n	8002c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	490c      	ldr	r1, [pc, #48]	; (8002c30 <__NVIC_SetPriority+0x4c>)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	0112      	lsls	r2, r2, #4
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	440b      	add	r3, r1
 8002c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c0c:	e00a      	b.n	8002c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4908      	ldr	r1, [pc, #32]	; (8002c34 <__NVIC_SetPriority+0x50>)
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	3b04      	subs	r3, #4
 8002c1c:	0112      	lsls	r2, r2, #4
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	440b      	add	r3, r1
 8002c22:	761a      	strb	r2, [r3, #24]
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000e100 	.word	0xe000e100
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b089      	sub	sp, #36	; 0x24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f1c3 0307 	rsb	r3, r3, #7
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	bf28      	it	cs
 8002c56:	2304      	movcs	r3, #4
 8002c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	2b06      	cmp	r3, #6
 8002c60:	d902      	bls.n	8002c68 <NVIC_EncodePriority+0x30>
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3b03      	subs	r3, #3
 8002c66:	e000      	b.n	8002c6a <NVIC_EncodePriority+0x32>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c80:	f04f 31ff 	mov.w	r1, #4294967295
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8a:	43d9      	mvns	r1, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c90:	4313      	orrs	r3, r2
         );
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3724      	adds	r7, #36	; 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cb0:	d301      	bcc.n	8002cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e00f      	b.n	8002cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <SysTick_Config+0x40>)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cbe:	210f      	movs	r1, #15
 8002cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc4:	f7ff ff8e 	bl	8002be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <SysTick_Config+0x40>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cce:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <SysTick_Config+0x40>)
 8002cd0:	2207      	movs	r2, #7
 8002cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	e000e010 	.word	0xe000e010

08002ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ff29 	bl	8002b44 <__NVIC_SetPriorityGrouping>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b086      	sub	sp, #24
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	4603      	mov	r3, r0
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
 8002d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d0c:	f7ff ff3e 	bl	8002b8c <__NVIC_GetPriorityGrouping>
 8002d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68b9      	ldr	r1, [r7, #8]
 8002d16:	6978      	ldr	r0, [r7, #20]
 8002d18:	f7ff ff8e 	bl	8002c38 <NVIC_EncodePriority>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff ff5d 	bl	8002be4 <__NVIC_SetPriority>
}
 8002d2a:	bf00      	nop
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	4603      	mov	r3, r0
 8002d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff31 	bl	8002ba8 <__NVIC_EnableIRQ>
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ffa2 	bl	8002ca0 <SysTick_Config>
 8002d5c:	4603      	mov	r3, r0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d74:	f7ff feb6 	bl	8002ae4 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e099      	b.n	8002eb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002da4:	e00f      	b.n	8002dc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002da6:	f7ff fe9d 	bl	8002ae4 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b05      	cmp	r3, #5
 8002db2:	d908      	bls.n	8002dc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2220      	movs	r2, #32
 8002db8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2203      	movs	r2, #3
 8002dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e078      	b.n	8002eb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1e8      	bne.n	8002da6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	4b38      	ldr	r3, [pc, #224]	; (8002ec0 <HAL_DMA_Init+0x158>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d107      	bne.n	8002e30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f023 0307 	bic.w	r3, r3, #7
 8002e46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d117      	bne.n	8002e8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00e      	beq.n	8002e8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 fa7b 	bl	8003368 <DMA_CheckFifoParam>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2240      	movs	r2, #64	; 0x40
 8002e7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e86:	2301      	movs	r3, #1
 8002e88:	e016      	b.n	8002eb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fa32 	bl	80032fc <DMA_CalcBaseAndBitshift>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea0:	223f      	movs	r2, #63	; 0x3f
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	f010803f 	.word	0xf010803f

08002ec4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ed2:	f7ff fe07 	bl	8002ae4 <HAL_GetTick>
 8002ed6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d008      	beq.n	8002ef6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2280      	movs	r2, #128	; 0x80
 8002ee8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e052      	b.n	8002f9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0216 	bic.w	r2, r2, #22
 8002f04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d103      	bne.n	8002f26 <HAL_DMA_Abort+0x62>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d007      	beq.n	8002f36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0208 	bic.w	r2, r2, #8
 8002f34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0201 	bic.w	r2, r2, #1
 8002f44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f46:	e013      	b.n	8002f70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f48:	f7ff fdcc 	bl	8002ae4 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b05      	cmp	r3, #5
 8002f54:	d90c      	bls.n	8002f70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2203      	movs	r2, #3
 8002f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e015      	b.n	8002f9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1e4      	bne.n	8002f48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	223f      	movs	r2, #63	; 0x3f
 8002f84:	409a      	lsls	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d004      	beq.n	8002fc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2280      	movs	r2, #128	; 0x80
 8002fbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e00c      	b.n	8002fdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2205      	movs	r2, #5
 8002fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0201 	bic.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ff4:	4b8e      	ldr	r3, [pc, #568]	; (8003230 <HAL_DMA_IRQHandler+0x248>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a8e      	ldr	r2, [pc, #568]	; (8003234 <HAL_DMA_IRQHandler+0x24c>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	0a9b      	lsrs	r3, r3, #10
 8003000:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003006:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003012:	2208      	movs	r2, #8
 8003014:	409a      	lsls	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d01a      	beq.n	8003054 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d013      	beq.n	8003054 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0204 	bic.w	r2, r2, #4
 800303a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003040:	2208      	movs	r2, #8
 8003042:	409a      	lsls	r2, r3
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304c:	f043 0201 	orr.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003058:	2201      	movs	r2, #1
 800305a:	409a      	lsls	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d012      	beq.n	800308a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003076:	2201      	movs	r2, #1
 8003078:	409a      	lsls	r2, r3
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003082:	f043 0202 	orr.w	r2, r3, #2
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308e:	2204      	movs	r2, #4
 8003090:	409a      	lsls	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4013      	ands	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d012      	beq.n	80030c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00b      	beq.n	80030c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ac:	2204      	movs	r2, #4
 80030ae:	409a      	lsls	r2, r3
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b8:	f043 0204 	orr.w	r2, r3, #4
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c4:	2210      	movs	r2, #16
 80030c6:	409a      	lsls	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d043      	beq.n	8003158 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d03c      	beq.n	8003158 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	2210      	movs	r2, #16
 80030e4:	409a      	lsls	r2, r3
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d018      	beq.n	800312a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d108      	bne.n	8003118 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	2b00      	cmp	r3, #0
 800310c:	d024      	beq.n	8003158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	4798      	blx	r3
 8003116:	e01f      	b.n	8003158 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01b      	beq.n	8003158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4798      	blx	r3
 8003128:	e016      	b.n	8003158 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d107      	bne.n	8003148 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0208 	bic.w	r2, r2, #8
 8003146:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315c:	2220      	movs	r2, #32
 800315e:	409a      	lsls	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4013      	ands	r3, r2
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 808f 	beq.w	8003288 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 8087 	beq.w	8003288 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317e:	2220      	movs	r2, #32
 8003180:	409a      	lsls	r2, r3
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b05      	cmp	r3, #5
 8003190:	d136      	bne.n	8003200 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0216 	bic.w	r2, r2, #22
 80031a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d103      	bne.n	80031c2 <HAL_DMA_IRQHandler+0x1da>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d007      	beq.n	80031d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0208 	bic.w	r2, r2, #8
 80031d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d6:	223f      	movs	r2, #63	; 0x3f
 80031d8:	409a      	lsls	r2, r3
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d07e      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	4798      	blx	r3
        }
        return;
 80031fe:	e079      	b.n	80032f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d01d      	beq.n	800324a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10d      	bne.n	8003238 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003220:	2b00      	cmp	r3, #0
 8003222:	d031      	beq.n	8003288 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	4798      	blx	r3
 800322c:	e02c      	b.n	8003288 <HAL_DMA_IRQHandler+0x2a0>
 800322e:	bf00      	nop
 8003230:	20000030 	.word	0x20000030
 8003234:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323c:	2b00      	cmp	r3, #0
 800323e:	d023      	beq.n	8003288 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	4798      	blx	r3
 8003248:	e01e      	b.n	8003288 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10f      	bne.n	8003278 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0210 	bic.w	r2, r2, #16
 8003266:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328c:	2b00      	cmp	r3, #0
 800328e:	d032      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d022      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2205      	movs	r2, #5
 80032a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	3301      	adds	r3, #1
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d307      	bcc.n	80032d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f2      	bne.n	80032b4 <HAL_DMA_IRQHandler+0x2cc>
 80032ce:	e000      	b.n	80032d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4798      	blx	r3
 80032f2:	e000      	b.n	80032f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80032f4:	bf00      	nop
    }
  }
}
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	3b10      	subs	r3, #16
 800330c:	4a14      	ldr	r2, [pc, #80]	; (8003360 <DMA_CalcBaseAndBitshift+0x64>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	091b      	lsrs	r3, r3, #4
 8003314:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003316:	4a13      	ldr	r2, [pc, #76]	; (8003364 <DMA_CalcBaseAndBitshift+0x68>)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b03      	cmp	r3, #3
 8003328:	d909      	bls.n	800333e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003332:	f023 0303 	bic.w	r3, r3, #3
 8003336:	1d1a      	adds	r2, r3, #4
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	659a      	str	r2, [r3, #88]	; 0x58
 800333c:	e007      	b.n	800334e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003346:	f023 0303 	bic.w	r3, r3, #3
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	aaaaaaab 	.word	0xaaaaaaab
 8003364:	08007af8 	.word	0x08007af8

08003368 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d11f      	bne.n	80033c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b03      	cmp	r3, #3
 8003386:	d856      	bhi.n	8003436 <DMA_CheckFifoParam+0xce>
 8003388:	a201      	add	r2, pc, #4	; (adr r2, 8003390 <DMA_CheckFifoParam+0x28>)
 800338a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338e:	bf00      	nop
 8003390:	080033a1 	.word	0x080033a1
 8003394:	080033b3 	.word	0x080033b3
 8003398:	080033a1 	.word	0x080033a1
 800339c:	08003437 	.word	0x08003437
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d046      	beq.n	800343a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b0:	e043      	b.n	800343a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033ba:	d140      	bne.n	800343e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c0:	e03d      	b.n	800343e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ca:	d121      	bne.n	8003410 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d837      	bhi.n	8003442 <DMA_CheckFifoParam+0xda>
 80033d2:	a201      	add	r2, pc, #4	; (adr r2, 80033d8 <DMA_CheckFifoParam+0x70>)
 80033d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d8:	080033e9 	.word	0x080033e9
 80033dc:	080033ef 	.word	0x080033ef
 80033e0:	080033e9 	.word	0x080033e9
 80033e4:	08003401 	.word	0x08003401
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
      break;
 80033ec:	e030      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d025      	beq.n	8003446 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033fe:	e022      	b.n	8003446 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003408:	d11f      	bne.n	800344a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800340e:	e01c      	b.n	800344a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d903      	bls.n	800341e <DMA_CheckFifoParam+0xb6>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b03      	cmp	r3, #3
 800341a:	d003      	beq.n	8003424 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800341c:	e018      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	73fb      	strb	r3, [r7, #15]
      break;
 8003422:	e015      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00e      	beq.n	800344e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	73fb      	strb	r3, [r7, #15]
      break;
 8003434:	e00b      	b.n	800344e <DMA_CheckFifoParam+0xe6>
      break;
 8003436:	bf00      	nop
 8003438:	e00a      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;
 800343a:	bf00      	nop
 800343c:	e008      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;
 800343e:	bf00      	nop
 8003440:	e006      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;
 8003442:	bf00      	nop
 8003444:	e004      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;
 8003446:	bf00      	nop
 8003448:	e002      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;   
 800344a:	bf00      	nop
 800344c:	e000      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;
 800344e:	bf00      	nop
    }
  } 
  
  return status; 
 8003450:	7bfb      	ldrb	r3, [r7, #15]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop

08003460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003460:	b480      	push	{r7}
 8003462:	b089      	sub	sp, #36	; 0x24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800346e:	2300      	movs	r3, #0
 8003470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003472:	2300      	movs	r3, #0
 8003474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
 800347a:	e159      	b.n	8003730 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800347c:	2201      	movs	r2, #1
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4013      	ands	r3, r2
 800348e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	429a      	cmp	r2, r3
 8003496:	f040 8148 	bne.w	800372a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d005      	beq.n	80034b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d130      	bne.n	8003514 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	2203      	movs	r2, #3
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034e8:	2201      	movs	r2, #1
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f003 0201 	and.w	r2, r3, #1
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	2b03      	cmp	r3, #3
 800351e:	d017      	beq.n	8003550 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	2203      	movs	r2, #3
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4013      	ands	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d123      	bne.n	80035a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	08da      	lsrs	r2, r3, #3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3208      	adds	r2, #8
 8003564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003568:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	220f      	movs	r2, #15
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	08da      	lsrs	r2, r3, #3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3208      	adds	r2, #8
 800359e:	69b9      	ldr	r1, [r7, #24]
 80035a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	2203      	movs	r2, #3
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 0203 	and.w	r2, r3, #3
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80a2 	beq.w	800372a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	4b57      	ldr	r3, [pc, #348]	; (8003748 <HAL_GPIO_Init+0x2e8>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	4a56      	ldr	r2, [pc, #344]	; (8003748 <HAL_GPIO_Init+0x2e8>)
 80035f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035f4:	6453      	str	r3, [r2, #68]	; 0x44
 80035f6:	4b54      	ldr	r3, [pc, #336]	; (8003748 <HAL_GPIO_Init+0x2e8>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003602:	4a52      	ldr	r2, [pc, #328]	; (800374c <HAL_GPIO_Init+0x2ec>)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	089b      	lsrs	r3, r3, #2
 8003608:	3302      	adds	r3, #2
 800360a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	220f      	movs	r2, #15
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4013      	ands	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a49      	ldr	r2, [pc, #292]	; (8003750 <HAL_GPIO_Init+0x2f0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d019      	beq.n	8003662 <HAL_GPIO_Init+0x202>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a48      	ldr	r2, [pc, #288]	; (8003754 <HAL_GPIO_Init+0x2f4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d013      	beq.n	800365e <HAL_GPIO_Init+0x1fe>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a47      	ldr	r2, [pc, #284]	; (8003758 <HAL_GPIO_Init+0x2f8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00d      	beq.n	800365a <HAL_GPIO_Init+0x1fa>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a46      	ldr	r2, [pc, #280]	; (800375c <HAL_GPIO_Init+0x2fc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d007      	beq.n	8003656 <HAL_GPIO_Init+0x1f6>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a45      	ldr	r2, [pc, #276]	; (8003760 <HAL_GPIO_Init+0x300>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d101      	bne.n	8003652 <HAL_GPIO_Init+0x1f2>
 800364e:	2304      	movs	r3, #4
 8003650:	e008      	b.n	8003664 <HAL_GPIO_Init+0x204>
 8003652:	2307      	movs	r3, #7
 8003654:	e006      	b.n	8003664 <HAL_GPIO_Init+0x204>
 8003656:	2303      	movs	r3, #3
 8003658:	e004      	b.n	8003664 <HAL_GPIO_Init+0x204>
 800365a:	2302      	movs	r3, #2
 800365c:	e002      	b.n	8003664 <HAL_GPIO_Init+0x204>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_GPIO_Init+0x204>
 8003662:	2300      	movs	r3, #0
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	f002 0203 	and.w	r2, r2, #3
 800366a:	0092      	lsls	r2, r2, #2
 800366c:	4093      	lsls	r3, r2
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003674:	4935      	ldr	r1, [pc, #212]	; (800374c <HAL_GPIO_Init+0x2ec>)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	089b      	lsrs	r3, r3, #2
 800367a:	3302      	adds	r3, #2
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003682:	4b38      	ldr	r3, [pc, #224]	; (8003764 <HAL_GPIO_Init+0x304>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	43db      	mvns	r3, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4013      	ands	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036a6:	4a2f      	ldr	r2, [pc, #188]	; (8003764 <HAL_GPIO_Init+0x304>)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036ac:	4b2d      	ldr	r3, [pc, #180]	; (8003764 <HAL_GPIO_Init+0x304>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036d0:	4a24      	ldr	r2, [pc, #144]	; (8003764 <HAL_GPIO_Init+0x304>)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036d6:	4b23      	ldr	r3, [pc, #140]	; (8003764 <HAL_GPIO_Init+0x304>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036fa:	4a1a      	ldr	r2, [pc, #104]	; (8003764 <HAL_GPIO_Init+0x304>)
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003700:	4b18      	ldr	r3, [pc, #96]	; (8003764 <HAL_GPIO_Init+0x304>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	43db      	mvns	r3, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003724:	4a0f      	ldr	r2, [pc, #60]	; (8003764 <HAL_GPIO_Init+0x304>)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	3301      	adds	r3, #1
 800372e:	61fb      	str	r3, [r7, #28]
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	2b0f      	cmp	r3, #15
 8003734:	f67f aea2 	bls.w	800347c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	3724      	adds	r7, #36	; 0x24
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800
 800374c:	40013800 	.word	0x40013800
 8003750:	40020000 	.word	0x40020000
 8003754:	40020400 	.word	0x40020400
 8003758:	40020800 	.word	0x40020800
 800375c:	40020c00 	.word	0x40020c00
 8003760:	40021000 	.word	0x40021000
 8003764:	40013c00 	.word	0x40013c00

08003768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	887b      	ldrh	r3, [r7, #2]
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
 8003784:	e001      	b.n	800378a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003786:	2300      	movs	r3, #0
 8003788:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800378a:	7bfb      	ldrb	r3, [r7, #15]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e12b      	b.n	8003a02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fd f812 	bl	80007e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2224      	movs	r2, #36	; 0x24
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0201 	bic.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037fc:	f001 fb92 	bl	8004f24 <HAL_RCC_GetPCLK1Freq>
 8003800:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4a81      	ldr	r2, [pc, #516]	; (8003a0c <HAL_I2C_Init+0x274>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d807      	bhi.n	800381c <HAL_I2C_Init+0x84>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a80      	ldr	r2, [pc, #512]	; (8003a10 <HAL_I2C_Init+0x278>)
 8003810:	4293      	cmp	r3, r2
 8003812:	bf94      	ite	ls
 8003814:	2301      	movls	r3, #1
 8003816:	2300      	movhi	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	e006      	b.n	800382a <HAL_I2C_Init+0x92>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4a7d      	ldr	r2, [pc, #500]	; (8003a14 <HAL_I2C_Init+0x27c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	bf94      	ite	ls
 8003824:	2301      	movls	r3, #1
 8003826:	2300      	movhi	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e0e7      	b.n	8003a02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4a78      	ldr	r2, [pc, #480]	; (8003a18 <HAL_I2C_Init+0x280>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	0c9b      	lsrs	r3, r3, #18
 800383c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	430a      	orrs	r2, r1
 8003850:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4a6a      	ldr	r2, [pc, #424]	; (8003a0c <HAL_I2C_Init+0x274>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d802      	bhi.n	800386c <HAL_I2C_Init+0xd4>
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	3301      	adds	r3, #1
 800386a:	e009      	b.n	8003880 <HAL_I2C_Init+0xe8>
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	4a69      	ldr	r2, [pc, #420]	; (8003a1c <HAL_I2C_Init+0x284>)
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	099b      	lsrs	r3, r3, #6
 800387e:	3301      	adds	r3, #1
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	430b      	orrs	r3, r1
 8003886:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003892:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	495c      	ldr	r1, [pc, #368]	; (8003a0c <HAL_I2C_Init+0x274>)
 800389c:	428b      	cmp	r3, r1
 800389e:	d819      	bhi.n	80038d4 <HAL_I2C_Init+0x13c>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1e59      	subs	r1, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ae:	1c59      	adds	r1, r3, #1
 80038b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038b4:	400b      	ands	r3, r1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_I2C_Init+0x138>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1e59      	subs	r1, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80038c8:	3301      	adds	r3, #1
 80038ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ce:	e051      	b.n	8003974 <HAL_I2C_Init+0x1dc>
 80038d0:	2304      	movs	r3, #4
 80038d2:	e04f      	b.n	8003974 <HAL_I2C_Init+0x1dc>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d111      	bne.n	8003900 <HAL_I2C_Init+0x168>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1e58      	subs	r0, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	440b      	add	r3, r1
 80038ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ee:	3301      	adds	r3, #1
 80038f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bf0c      	ite	eq
 80038f8:	2301      	moveq	r3, #1
 80038fa:	2300      	movne	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e012      	b.n	8003926 <HAL_I2C_Init+0x18e>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1e58      	subs	r0, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	0099      	lsls	r1, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	fbb0 f3f3 	udiv	r3, r0, r3
 8003916:	3301      	adds	r3, #1
 8003918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391c:	2b00      	cmp	r3, #0
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_I2C_Init+0x196>
 800392a:	2301      	movs	r3, #1
 800392c:	e022      	b.n	8003974 <HAL_I2C_Init+0x1dc>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10e      	bne.n	8003954 <HAL_I2C_Init+0x1bc>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1e58      	subs	r0, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6859      	ldr	r1, [r3, #4]
 800393e:	460b      	mov	r3, r1
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	440b      	add	r3, r1
 8003944:	fbb0 f3f3 	udiv	r3, r0, r3
 8003948:	3301      	adds	r3, #1
 800394a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003952:	e00f      	b.n	8003974 <HAL_I2C_Init+0x1dc>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1e58      	subs	r0, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6859      	ldr	r1, [r3, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	0099      	lsls	r1, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	fbb0 f3f3 	udiv	r3, r0, r3
 800396a:	3301      	adds	r3, #1
 800396c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003970:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	6809      	ldr	r1, [r1, #0]
 8003978:	4313      	orrs	r3, r2
 800397a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69da      	ldr	r2, [r3, #28]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6911      	ldr	r1, [r2, #16]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68d2      	ldr	r2, [r2, #12]
 80039ae:	4311      	orrs	r1, r2
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	000186a0 	.word	0x000186a0
 8003a10:	001e847f 	.word	0x001e847f
 8003a14:	003d08ff 	.word	0x003d08ff
 8003a18:	431bde83 	.word	0x431bde83
 8003a1c:	10624dd3 	.word	0x10624dd3

08003a20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	607a      	str	r2, [r7, #4]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	817b      	strh	r3, [r7, #10]
 8003a30:	4613      	mov	r3, r2
 8003a32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a34:	f7ff f856 	bl	8002ae4 <HAL_GetTick>
 8003a38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	f040 80e0 	bne.w	8003c08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	2319      	movs	r3, #25
 8003a4e:	2201      	movs	r2, #1
 8003a50:	4970      	ldr	r1, [pc, #448]	; (8003c14 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 fc58 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e0d3      	b.n	8003c0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_I2C_Master_Transmit+0x50>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e0cc      	b.n	8003c0a <HAL_I2C_Master_Transmit+0x1ea>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d007      	beq.n	8003a96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0201 	orr.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aa4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2221      	movs	r2, #33	; 0x21
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2210      	movs	r2, #16
 8003ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	893a      	ldrh	r2, [r7, #8]
 8003ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4a50      	ldr	r2, [pc, #320]	; (8003c18 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ad6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ad8:	8979      	ldrh	r1, [r7, #10]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	6a3a      	ldr	r2, [r7, #32]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 fac2 	bl	8004068 <I2C_MasterRequestWrite>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e08d      	b.n	8003c0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aee:	2300      	movs	r3, #0
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b04:	e066      	b.n	8003bd4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	6a39      	ldr	r1, [r7, #32]
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 fcd2 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00d      	beq.n	8003b32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d107      	bne.n	8003b2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e06b      	b.n	8003c0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	781a      	ldrb	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d11b      	bne.n	8003ba8 <HAL_I2C_Master_Transmit+0x188>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d017      	beq.n	8003ba8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	781a      	ldrb	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	6a39      	ldr	r1, [r7, #32]
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 fcc2 	bl	8004536 <I2C_WaitOnBTFFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00d      	beq.n	8003bd4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d107      	bne.n	8003bd0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e01a      	b.n	8003c0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d194      	bne.n	8003b06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	e000      	b.n	8003c0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c08:	2302      	movs	r3, #2
  }
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	00100002 	.word	0x00100002
 8003c18:	ffff0000 	.word	0xffff0000

08003c1c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08c      	sub	sp, #48	; 0x30
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	607a      	str	r2, [r7, #4]
 8003c26:	461a      	mov	r2, r3
 8003c28:	460b      	mov	r3, r1
 8003c2a:	817b      	strh	r3, [r7, #10]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c30:	f7fe ff58 	bl	8002ae4 <HAL_GetTick>
 8003c34:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b20      	cmp	r3, #32
 8003c40:	f040 820b 	bne.w	800405a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	2319      	movs	r3, #25
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	497c      	ldr	r1, [pc, #496]	; (8003e40 <HAL_I2C_Master_Receive+0x224>)
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 fb5a 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e1fe      	b.n	800405c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_I2C_Master_Receive+0x50>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e1f7      	b.n	800405c <HAL_I2C_Master_Receive+0x440>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d007      	beq.n	8003c92 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 0201 	orr.w	r2, r2, #1
 8003c90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ca0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2222      	movs	r2, #34	; 0x22
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2210      	movs	r2, #16
 8003cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	893a      	ldrh	r2, [r7, #8]
 8003cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	4a5c      	ldr	r2, [pc, #368]	; (8003e44 <HAL_I2C_Master_Receive+0x228>)
 8003cd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cd4:	8979      	ldrh	r1, [r7, #10]
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fa46 	bl	800416c <I2C_MasterRequestRead>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e1b8      	b.n	800405c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d113      	bne.n	8003d1a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	623b      	str	r3, [r7, #32]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	623b      	str	r3, [r7, #32]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	623b      	str	r3, [r7, #32]
 8003d06:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	e18c      	b.n	8004034 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d11b      	bne.n	8003d5a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	61fb      	str	r3, [r7, #28]
 8003d46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e16c      	b.n	8004034 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d11b      	bne.n	8003d9a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d70:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d82:	2300      	movs	r3, #0
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	61bb      	str	r3, [r7, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	61bb      	str	r3, [r7, #24]
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	e14c      	b.n	8004034 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003da8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003dc0:	e138      	b.n	8004034 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc6:	2b03      	cmp	r3, #3
 8003dc8:	f200 80f1 	bhi.w	8003fae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d123      	bne.n	8003e1c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 fbed 	bl	80045b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e139      	b.n	800405c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e1a:	e10b      	b.n	8004034 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d14e      	bne.n	8003ec2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	4906      	ldr	r1, [pc, #24]	; (8003e48 <HAL_I2C_Master_Receive+0x22c>)
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 fa6a 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d008      	beq.n	8003e4c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e10e      	b.n	800405c <HAL_I2C_Master_Receive+0x440>
 8003e3e:	bf00      	nop
 8003e40:	00100002 	.word	0x00100002
 8003e44:	ffff0000 	.word	0xffff0000
 8003e48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ec0:	e0b8      	b.n	8004034 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec8:	2200      	movs	r2, #0
 8003eca:	4966      	ldr	r1, [pc, #408]	; (8004064 <HAL_I2C_Master_Receive+0x448>)
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 fa1b 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0bf      	b.n	800405c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f24:	2200      	movs	r2, #0
 8003f26:	494f      	ldr	r1, [pc, #316]	; (8004064 <HAL_I2C_Master_Receive+0x448>)
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 f9ed 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e091      	b.n	800405c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691a      	ldr	r2, [r3, #16]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fac:	e042      	b.n	8004034 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 fb00 	bl	80045b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e04c      	b.n	800405c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d118      	bne.n	8004034 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	1c5a      	adds	r2, r3, #1
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401e:	3b01      	subs	r3, #1
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402a:	b29b      	uxth	r3, r3
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004038:	2b00      	cmp	r3, #0
 800403a:	f47f aec2 	bne.w	8003dc2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	e000      	b.n	800405c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800405a:	2302      	movs	r3, #2
  }
}
 800405c:	4618      	mov	r0, r3
 800405e:	3728      	adds	r7, #40	; 0x28
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	00010004 	.word	0x00010004

08004068 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af02      	add	r7, sp, #8
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	607a      	str	r2, [r7, #4]
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	460b      	mov	r3, r1
 8004076:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b08      	cmp	r3, #8
 8004082:	d006      	beq.n	8004092 <I2C_MasterRequestWrite+0x2a>
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d003      	beq.n	8004092 <I2C_MasterRequestWrite+0x2a>
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004090:	d108      	bne.n	80040a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e00b      	b.n	80040bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	2b12      	cmp	r3, #18
 80040aa:	d107      	bne.n	80040bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f91d 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00d      	beq.n	80040f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040e2:	d103      	bne.n	80040ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e035      	b.n	800415c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f8:	d108      	bne.n	800410c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040fa:	897b      	ldrh	r3, [r7, #10]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	461a      	mov	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004108:	611a      	str	r2, [r3, #16]
 800410a:	e01b      	b.n	8004144 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800410c:	897b      	ldrh	r3, [r7, #10]
 800410e:	11db      	asrs	r3, r3, #7
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f003 0306 	and.w	r3, r3, #6
 8004116:	b2db      	uxtb	r3, r3
 8004118:	f063 030f 	orn	r3, r3, #15
 800411c:	b2da      	uxtb	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	490e      	ldr	r1, [pc, #56]	; (8004164 <I2C_MasterRequestWrite+0xfc>)
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 f943 	bl	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e010      	b.n	800415c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800413a:	897b      	ldrh	r3, [r7, #10]
 800413c:	b2da      	uxtb	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	4907      	ldr	r1, [pc, #28]	; (8004168 <I2C_MasterRequestWrite+0x100>)
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f933 	bl	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	00010008 	.word	0x00010008
 8004168:	00010002 	.word	0x00010002

0800416c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af02      	add	r7, sp, #8
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	607a      	str	r2, [r7, #4]
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	460b      	mov	r3, r1
 800417a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004190:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b08      	cmp	r3, #8
 8004196:	d006      	beq.n	80041a6 <I2C_MasterRequestRead+0x3a>
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d003      	beq.n	80041a6 <I2C_MasterRequestRead+0x3a>
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041a4:	d108      	bne.n	80041b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	e00b      	b.n	80041d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	2b11      	cmp	r3, #17
 80041be:	d107      	bne.n	80041d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f893 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00d      	beq.n	8004204 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f6:	d103      	bne.n	8004200 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e079      	b.n	80042f8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800420c:	d108      	bne.n	8004220 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800420e:	897b      	ldrh	r3, [r7, #10]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	b2da      	uxtb	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	611a      	str	r2, [r3, #16]
 800421e:	e05f      	b.n	80042e0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004220:	897b      	ldrh	r3, [r7, #10]
 8004222:	11db      	asrs	r3, r3, #7
 8004224:	b2db      	uxtb	r3, r3
 8004226:	f003 0306 	and.w	r3, r3, #6
 800422a:	b2db      	uxtb	r3, r3
 800422c:	f063 030f 	orn	r3, r3, #15
 8004230:	b2da      	uxtb	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4930      	ldr	r1, [pc, #192]	; (8004300 <I2C_MasterRequestRead+0x194>)
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 f8b9 	bl	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e054      	b.n	80042f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800424e:	897b      	ldrh	r3, [r7, #10]
 8004250:	b2da      	uxtb	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	4929      	ldr	r1, [pc, #164]	; (8004304 <I2C_MasterRequestRead+0x198>)
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 f8a9 	bl	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e044      	b.n	80042f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800426e:	2300      	movs	r3, #0
 8004270:	613b      	str	r3, [r7, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004292:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f831 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00d      	beq.n	80042c8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ba:	d103      	bne.n	80042c4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042c2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e017      	b.n	80042f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80042c8:	897b      	ldrh	r3, [r7, #10]
 80042ca:	11db      	asrs	r3, r3, #7
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	f003 0306 	and.w	r3, r3, #6
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	f063 030e 	orn	r3, r3, #14
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	4907      	ldr	r1, [pc, #28]	; (8004304 <I2C_MasterRequestRead+0x198>)
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f865 	bl	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	00010008 	.word	0x00010008
 8004304:	00010002 	.word	0x00010002

08004308 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004318:	e025      	b.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d021      	beq.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004322:	f7fe fbdf 	bl	8002ae4 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d302      	bcc.n	8004338 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d116      	bne.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f043 0220 	orr.w	r2, r3, #32
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e023      	b.n	80043ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b01      	cmp	r3, #1
 800436e:	d10d      	bne.n	800438c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	43da      	mvns	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4013      	ands	r3, r2
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	bf0c      	ite	eq
 8004382:	2301      	moveq	r3, #1
 8004384:	2300      	movne	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	e00c      	b.n	80043a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	43da      	mvns	r2, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4013      	ands	r3, r2
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	bf0c      	ite	eq
 800439e:	2301      	moveq	r3, #1
 80043a0:	2300      	movne	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d0b6      	beq.n	800431a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
 80043c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043c4:	e051      	b.n	800446a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d4:	d123      	bne.n	800441e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f043 0204 	orr.w	r2, r3, #4
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e046      	b.n	80044ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004424:	d021      	beq.n	800446a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004426:	f7fe fb5d 	bl	8002ae4 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	429a      	cmp	r2, r3
 8004434:	d302      	bcc.n	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d116      	bne.n	800446a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f043 0220 	orr.w	r2, r3, #32
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e020      	b.n	80044ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	0c1b      	lsrs	r3, r3, #16
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d10c      	bne.n	800448e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	43da      	mvns	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4013      	ands	r3, r2
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	bf14      	ite	ne
 8004486:	2301      	movne	r3, #1
 8004488:	2300      	moveq	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	e00b      	b.n	80044a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	43da      	mvns	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4013      	ands	r3, r2
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	bf14      	ite	ne
 80044a0:	2301      	movne	r3, #1
 80044a2:	2300      	moveq	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d18d      	bne.n	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044c0:	e02d      	b.n	800451e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 f8ce 	bl	8004664 <I2C_IsAcknowledgeFailed>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e02d      	b.n	800452e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d021      	beq.n	800451e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044da:	f7fe fb03 	bl	8002ae4 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d302      	bcc.n	80044f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d116      	bne.n	800451e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f043 0220 	orr.w	r2, r3, #32
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e007      	b.n	800452e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004528:	2b80      	cmp	r3, #128	; 0x80
 800452a:	d1ca      	bne.n	80044c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004542:	e02d      	b.n	80045a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f88d 	bl	8004664 <I2C_IsAcknowledgeFailed>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e02d      	b.n	80045b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455a:	d021      	beq.n	80045a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455c:	f7fe fac2 	bl	8002ae4 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	429a      	cmp	r2, r3
 800456a:	d302      	bcc.n	8004572 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d116      	bne.n	80045a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	f043 0220 	orr.w	r2, r3, #32
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e007      	b.n	80045b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d1ca      	bne.n	8004544 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045c4:	e042      	b.n	800464c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b10      	cmp	r3, #16
 80045d2:	d119      	bne.n	8004608 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0210 	mvn.w	r2, #16
 80045dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e029      	b.n	800465c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004608:	f7fe fa6c 	bl	8002ae4 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	429a      	cmp	r2, r3
 8004616:	d302      	bcc.n	800461e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d116      	bne.n	800464c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	f043 0220 	orr.w	r2, r3, #32
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e007      	b.n	800465c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004656:	2b40      	cmp	r3, #64	; 0x40
 8004658:	d1b5      	bne.n	80045c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800467a:	d11b      	bne.n	80046b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004684:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	f043 0204 	orr.w	r2, r3, #4
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
	...

080046c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e267      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d075      	beq.n	80047ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046e2:	4b88      	ldr	r3, [pc, #544]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d00c      	beq.n	8004708 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ee:	4b85      	ldr	r3, [pc, #532]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d112      	bne.n	8004720 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046fa:	4b82      	ldr	r3, [pc, #520]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004706:	d10b      	bne.n	8004720 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004708:	4b7e      	ldr	r3, [pc, #504]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d05b      	beq.n	80047cc <HAL_RCC_OscConfig+0x108>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d157      	bne.n	80047cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e242      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004728:	d106      	bne.n	8004738 <HAL_RCC_OscConfig+0x74>
 800472a:	4b76      	ldr	r3, [pc, #472]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a75      	ldr	r2, [pc, #468]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 8004730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	e01d      	b.n	8004774 <HAL_RCC_OscConfig+0xb0>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004740:	d10c      	bne.n	800475c <HAL_RCC_OscConfig+0x98>
 8004742:	4b70      	ldr	r3, [pc, #448]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a6f      	ldr	r2, [pc, #444]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 8004748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	4b6d      	ldr	r3, [pc, #436]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a6c      	ldr	r2, [pc, #432]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 8004754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	e00b      	b.n	8004774 <HAL_RCC_OscConfig+0xb0>
 800475c:	4b69      	ldr	r3, [pc, #420]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a68      	ldr	r2, [pc, #416]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 8004762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	4b66      	ldr	r3, [pc, #408]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a65      	ldr	r2, [pc, #404]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 800476e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d013      	beq.n	80047a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477c:	f7fe f9b2 	bl	8002ae4 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004784:	f7fe f9ae 	bl	8002ae4 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b64      	cmp	r3, #100	; 0x64
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e207      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004796:	4b5b      	ldr	r3, [pc, #364]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0f0      	beq.n	8004784 <HAL_RCC_OscConfig+0xc0>
 80047a2:	e014      	b.n	80047ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a4:	f7fe f99e 	bl	8002ae4 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047ac:	f7fe f99a 	bl	8002ae4 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b64      	cmp	r3, #100	; 0x64
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e1f3      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047be:	4b51      	ldr	r3, [pc, #324]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f0      	bne.n	80047ac <HAL_RCC_OscConfig+0xe8>
 80047ca:	e000      	b.n	80047ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d063      	beq.n	80048a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047da:	4b4a      	ldr	r3, [pc, #296]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00b      	beq.n	80047fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047e6:	4b47      	ldr	r3, [pc, #284]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d11c      	bne.n	800482c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047f2:	4b44      	ldr	r3, [pc, #272]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d116      	bne.n	800482c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047fe:	4b41      	ldr	r3, [pc, #260]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <HAL_RCC_OscConfig+0x152>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d001      	beq.n	8004816 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e1c7      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004816:	4b3b      	ldr	r3, [pc, #236]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	4937      	ldr	r1, [pc, #220]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 8004826:	4313      	orrs	r3, r2
 8004828:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482a:	e03a      	b.n	80048a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d020      	beq.n	8004876 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004834:	4b34      	ldr	r3, [pc, #208]	; (8004908 <HAL_RCC_OscConfig+0x244>)
 8004836:	2201      	movs	r2, #1
 8004838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483a:	f7fe f953 	bl	8002ae4 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004842:	f7fe f94f 	bl	8002ae4 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e1a8      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004854:	4b2b      	ldr	r3, [pc, #172]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0f0      	beq.n	8004842 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004860:	4b28      	ldr	r3, [pc, #160]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4925      	ldr	r1, [pc, #148]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 8004870:	4313      	orrs	r3, r2
 8004872:	600b      	str	r3, [r1, #0]
 8004874:	e015      	b.n	80048a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004876:	4b24      	ldr	r3, [pc, #144]	; (8004908 <HAL_RCC_OscConfig+0x244>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487c:	f7fe f932 	bl	8002ae4 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004884:	f7fe f92e 	bl	8002ae4 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e187      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004896:	4b1b      	ldr	r3, [pc, #108]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d036      	beq.n	800491c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d016      	beq.n	80048e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048b6:	4b15      	ldr	r3, [pc, #84]	; (800490c <HAL_RCC_OscConfig+0x248>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048bc:	f7fe f912 	bl	8002ae4 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048c4:	f7fe f90e 	bl	8002ae4 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e167      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d6:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <HAL_RCC_OscConfig+0x240>)
 80048d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCC_OscConfig+0x200>
 80048e2:	e01b      	b.n	800491c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048e4:	4b09      	ldr	r3, [pc, #36]	; (800490c <HAL_RCC_OscConfig+0x248>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ea:	f7fe f8fb 	bl	8002ae4 <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f0:	e00e      	b.n	8004910 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048f2:	f7fe f8f7 	bl	8002ae4 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d907      	bls.n	8004910 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e150      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
 8004904:	40023800 	.word	0x40023800
 8004908:	42470000 	.word	0x42470000
 800490c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004910:	4b88      	ldr	r3, [pc, #544]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1ea      	bne.n	80048f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 8097 	beq.w	8004a58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800492a:	2300      	movs	r3, #0
 800492c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800492e:	4b81      	ldr	r3, [pc, #516]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10f      	bne.n	800495a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800493a:	2300      	movs	r3, #0
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	4b7d      	ldr	r3, [pc, #500]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	4a7c      	ldr	r2, [pc, #496]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004948:	6413      	str	r3, [r2, #64]	; 0x40
 800494a:	4b7a      	ldr	r3, [pc, #488]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004952:	60bb      	str	r3, [r7, #8]
 8004954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004956:	2301      	movs	r3, #1
 8004958:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495a:	4b77      	ldr	r3, [pc, #476]	; (8004b38 <HAL_RCC_OscConfig+0x474>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004962:	2b00      	cmp	r3, #0
 8004964:	d118      	bne.n	8004998 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004966:	4b74      	ldr	r3, [pc, #464]	; (8004b38 <HAL_RCC_OscConfig+0x474>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a73      	ldr	r2, [pc, #460]	; (8004b38 <HAL_RCC_OscConfig+0x474>)
 800496c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004972:	f7fe f8b7 	bl	8002ae4 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800497a:	f7fe f8b3 	bl	8002ae4 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e10c      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498c:	4b6a      	ldr	r3, [pc, #424]	; (8004b38 <HAL_RCC_OscConfig+0x474>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0f0      	beq.n	800497a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d106      	bne.n	80049ae <HAL_RCC_OscConfig+0x2ea>
 80049a0:	4b64      	ldr	r3, [pc, #400]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 80049a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a4:	4a63      	ldr	r2, [pc, #396]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	6713      	str	r3, [r2, #112]	; 0x70
 80049ac:	e01c      	b.n	80049e8 <HAL_RCC_OscConfig+0x324>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	2b05      	cmp	r3, #5
 80049b4:	d10c      	bne.n	80049d0 <HAL_RCC_OscConfig+0x30c>
 80049b6:	4b5f      	ldr	r3, [pc, #380]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ba:	4a5e      	ldr	r2, [pc, #376]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 80049bc:	f043 0304 	orr.w	r3, r3, #4
 80049c0:	6713      	str	r3, [r2, #112]	; 0x70
 80049c2:	4b5c      	ldr	r3, [pc, #368]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c6:	4a5b      	ldr	r2, [pc, #364]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 80049c8:	f043 0301 	orr.w	r3, r3, #1
 80049cc:	6713      	str	r3, [r2, #112]	; 0x70
 80049ce:	e00b      	b.n	80049e8 <HAL_RCC_OscConfig+0x324>
 80049d0:	4b58      	ldr	r3, [pc, #352]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d4:	4a57      	ldr	r2, [pc, #348]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 80049d6:	f023 0301 	bic.w	r3, r3, #1
 80049da:	6713      	str	r3, [r2, #112]	; 0x70
 80049dc:	4b55      	ldr	r3, [pc, #340]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 80049de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e0:	4a54      	ldr	r2, [pc, #336]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 80049e2:	f023 0304 	bic.w	r3, r3, #4
 80049e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d015      	beq.n	8004a1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f0:	f7fe f878 	bl	8002ae4 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049f8:	f7fe f874 	bl	8002ae4 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e0cb      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0e:	4b49      	ldr	r3, [pc, #292]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0ee      	beq.n	80049f8 <HAL_RCC_OscConfig+0x334>
 8004a1a:	e014      	b.n	8004a46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a1c:	f7fe f862 	bl	8002ae4 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a22:	e00a      	b.n	8004a3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a24:	f7fe f85e 	bl	8002ae4 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e0b5      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a3a:	4b3e      	ldr	r3, [pc, #248]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1ee      	bne.n	8004a24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a46:	7dfb      	ldrb	r3, [r7, #23]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d105      	bne.n	8004a58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a4c:	4b39      	ldr	r3, [pc, #228]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	4a38      	ldr	r2, [pc, #224]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 80a1 	beq.w	8004ba4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a62:	4b34      	ldr	r3, [pc, #208]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d05c      	beq.n	8004b28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d141      	bne.n	8004afa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a76:	4b31      	ldr	r3, [pc, #196]	; (8004b3c <HAL_RCC_OscConfig+0x478>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7c:	f7fe f832 	bl	8002ae4 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a84:	f7fe f82e 	bl	8002ae4 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e087      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a96:	4b27      	ldr	r3, [pc, #156]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69da      	ldr	r2, [r3, #28]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	019b      	lsls	r3, r3, #6
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab8:	085b      	lsrs	r3, r3, #1
 8004aba:	3b01      	subs	r3, #1
 8004abc:	041b      	lsls	r3, r3, #16
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	061b      	lsls	r3, r3, #24
 8004ac6:	491b      	ldr	r1, [pc, #108]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004acc:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <HAL_RCC_OscConfig+0x478>)
 8004ace:	2201      	movs	r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad2:	f7fe f807 	bl	8002ae4 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ada:	f7fe f803 	bl	8002ae4 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e05c      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aec:	4b11      	ldr	r3, [pc, #68]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0f0      	beq.n	8004ada <HAL_RCC_OscConfig+0x416>
 8004af8:	e054      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004afa:	4b10      	ldr	r3, [pc, #64]	; (8004b3c <HAL_RCC_OscConfig+0x478>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b00:	f7fd fff0 	bl	8002ae4 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b08:	f7fd ffec 	bl	8002ae4 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e045      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b1a:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCC_OscConfig+0x444>
 8004b26:	e03d      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d107      	bne.n	8004b40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e038      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
 8004b34:	40023800 	.word	0x40023800
 8004b38:	40007000 	.word	0x40007000
 8004b3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b40:	4b1b      	ldr	r3, [pc, #108]	; (8004bb0 <HAL_RCC_OscConfig+0x4ec>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d028      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d121      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d11a      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b70:	4013      	ands	r3, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d111      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b86:	085b      	lsrs	r3, r3, #1
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d107      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d001      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40023800 	.word	0x40023800

08004bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0cc      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc8:	4b68      	ldr	r3, [pc, #416]	; (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d90c      	bls.n	8004bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd6:	4b65      	ldr	r3, [pc, #404]	; (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bde:	4b63      	ldr	r3, [pc, #396]	; (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d001      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0b8      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d020      	beq.n	8004c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c08:	4b59      	ldr	r3, [pc, #356]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4a58      	ldr	r2, [pc, #352]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c20:	4b53      	ldr	r3, [pc, #332]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	4a52      	ldr	r2, [pc, #328]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c2c:	4b50      	ldr	r3, [pc, #320]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	494d      	ldr	r1, [pc, #308]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d044      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d107      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c52:	4b47      	ldr	r3, [pc, #284]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d119      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e07f      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d003      	beq.n	8004c72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d107      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c72:	4b3f      	ldr	r3, [pc, #252]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e06f      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c82:	4b3b      	ldr	r3, [pc, #236]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e067      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c92:	4b37      	ldr	r3, [pc, #220]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f023 0203 	bic.w	r2, r3, #3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	4934      	ldr	r1, [pc, #208]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ca4:	f7fd ff1e 	bl	8002ae4 <HAL_GetTick>
 8004ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004caa:	e00a      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cac:	f7fd ff1a 	bl	8002ae4 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e04f      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc2:	4b2b      	ldr	r3, [pc, #172]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 020c 	and.w	r2, r3, #12
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d1eb      	bne.n	8004cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cd4:	4b25      	ldr	r3, [pc, #148]	; (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d20c      	bcs.n	8004cfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce2:	4b22      	ldr	r3, [pc, #136]	; (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cea:	4b20      	ldr	r3, [pc, #128]	; (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e032      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d08:	4b19      	ldr	r3, [pc, #100]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	4916      	ldr	r1, [pc, #88]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0308 	and.w	r3, r3, #8
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d009      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d26:	4b12      	ldr	r3, [pc, #72]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	490e      	ldr	r1, [pc, #56]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d3a:	f000 f821 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	091b      	lsrs	r3, r3, #4
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	490a      	ldr	r1, [pc, #40]	; (8004d74 <HAL_RCC_ClockConfig+0x1c0>)
 8004d4c:	5ccb      	ldrb	r3, [r1, r3]
 8004d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d52:	4a09      	ldr	r2, [pc, #36]	; (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d56:	4b09      	ldr	r3, [pc, #36]	; (8004d7c <HAL_RCC_ClockConfig+0x1c8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fd fe7e 	bl	8002a5c <HAL_InitTick>

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40023c00 	.word	0x40023c00
 8004d70:	40023800 	.word	0x40023800
 8004d74:	08007adc 	.word	0x08007adc
 8004d78:	20000030 	.word	0x20000030
 8004d7c:	20000034 	.word	0x20000034

08004d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d84:	b090      	sub	sp, #64	; 0x40
 8004d86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d90:	2300      	movs	r3, #0
 8004d92:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d98:	4b59      	ldr	r3, [pc, #356]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f003 030c 	and.w	r3, r3, #12
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d00d      	beq.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x40>
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	f200 80a1 	bhi.w	8004eec <HAL_RCC_GetSysClockFreq+0x16c>
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <HAL_RCC_GetSysClockFreq+0x34>
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d003      	beq.n	8004dba <HAL_RCC_GetSysClockFreq+0x3a>
 8004db2:	e09b      	b.n	8004eec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004db4:	4b53      	ldr	r3, [pc, #332]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x184>)
 8004db6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004db8:	e09b      	b.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dba:	4b53      	ldr	r3, [pc, #332]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x188>)
 8004dbc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004dbe:	e098      	b.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dc0:	4b4f      	ldr	r3, [pc, #316]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dca:	4b4d      	ldr	r3, [pc, #308]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d028      	beq.n	8004e28 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd6:	4b4a      	ldr	r3, [pc, #296]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	099b      	lsrs	r3, r3, #6
 8004ddc:	2200      	movs	r2, #0
 8004dde:	623b      	str	r3, [r7, #32]
 8004de0:	627a      	str	r2, [r7, #36]	; 0x24
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004de8:	2100      	movs	r1, #0
 8004dea:	4b47      	ldr	r3, [pc, #284]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x188>)
 8004dec:	fb03 f201 	mul.w	r2, r3, r1
 8004df0:	2300      	movs	r3, #0
 8004df2:	fb00 f303 	mul.w	r3, r0, r3
 8004df6:	4413      	add	r3, r2
 8004df8:	4a43      	ldr	r2, [pc, #268]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x188>)
 8004dfa:	fba0 1202 	umull	r1, r2, r0, r2
 8004dfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e00:	460a      	mov	r2, r1
 8004e02:	62ba      	str	r2, [r7, #40]	; 0x28
 8004e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e06:	4413      	add	r3, r2
 8004e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	61bb      	str	r3, [r7, #24]
 8004e10:	61fa      	str	r2, [r7, #28]
 8004e12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004e1a:	f7fb f9e5 	bl	80001e8 <__aeabi_uldivmod>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	4613      	mov	r3, r2
 8004e24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e26:	e053      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e28:	4b35      	ldr	r3, [pc, #212]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	099b      	lsrs	r3, r3, #6
 8004e2e:	2200      	movs	r2, #0
 8004e30:	613b      	str	r3, [r7, #16]
 8004e32:	617a      	str	r2, [r7, #20]
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004e3a:	f04f 0b00 	mov.w	fp, #0
 8004e3e:	4652      	mov	r2, sl
 8004e40:	465b      	mov	r3, fp
 8004e42:	f04f 0000 	mov.w	r0, #0
 8004e46:	f04f 0100 	mov.w	r1, #0
 8004e4a:	0159      	lsls	r1, r3, #5
 8004e4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e50:	0150      	lsls	r0, r2, #5
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	ebb2 080a 	subs.w	r8, r2, sl
 8004e5a:	eb63 090b 	sbc.w	r9, r3, fp
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e6a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e6e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e72:	ebb2 0408 	subs.w	r4, r2, r8
 8004e76:	eb63 0509 	sbc.w	r5, r3, r9
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	00eb      	lsls	r3, r5, #3
 8004e84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e88:	00e2      	lsls	r2, r4, #3
 8004e8a:	4614      	mov	r4, r2
 8004e8c:	461d      	mov	r5, r3
 8004e8e:	eb14 030a 	adds.w	r3, r4, sl
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	eb45 030b 	adc.w	r3, r5, fp
 8004e98:	607b      	str	r3, [r7, #4]
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	028b      	lsls	r3, r1, #10
 8004eaa:	4621      	mov	r1, r4
 8004eac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	028a      	lsls	r2, r1, #10
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eba:	2200      	movs	r2, #0
 8004ebc:	60bb      	str	r3, [r7, #8]
 8004ebe:	60fa      	str	r2, [r7, #12]
 8004ec0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ec4:	f7fb f990 	bl	80001e8 <__aeabi_uldivmod>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4613      	mov	r3, r2
 8004ece:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	0c1b      	lsrs	r3, r3, #16
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	3301      	adds	r3, #1
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004ee0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004eea:	e002      	b.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eec:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x184>)
 8004eee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3740      	adds	r7, #64	; 0x40
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004efe:	bf00      	nop
 8004f00:	40023800 	.word	0x40023800
 8004f04:	00f42400 	.word	0x00f42400
 8004f08:	017d7840 	.word	0x017d7840

08004f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f10:	4b03      	ldr	r3, [pc, #12]	; (8004f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f12:	681b      	ldr	r3, [r3, #0]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	20000030 	.word	0x20000030

08004f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f28:	f7ff fff0 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	4b05      	ldr	r3, [pc, #20]	; (8004f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	0a9b      	lsrs	r3, r3, #10
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	4903      	ldr	r1, [pc, #12]	; (8004f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f3a:	5ccb      	ldrb	r3, [r1, r3]
 8004f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40023800 	.word	0x40023800
 8004f48:	08007aec 	.word	0x08007aec

08004f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f50:	f7ff ffdc 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8004f54:	4602      	mov	r2, r0
 8004f56:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	0b5b      	lsrs	r3, r3, #13
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	4903      	ldr	r1, [pc, #12]	; (8004f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f62:	5ccb      	ldrb	r3, [r1, r3]
 8004f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	08007aec 	.word	0x08007aec

08004f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e04c      	b.n	8005020 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d111      	bne.n	8004fb6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f001 f99c 	bl	80062d8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d102      	bne.n	8004fae <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a1f      	ldr	r2, [pc, #124]	; (8005028 <HAL_TIM_Base_Init+0xb4>)
 8004fac:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2202      	movs	r2, #2
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4610      	mov	r0, r2
 8004fca:	f000 fe35 	bl	8005c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	08001999 	.word	0x08001999

0800502c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e04c      	b.n	80050d8 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d111      	bne.n	800506e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f001 f940 	bl	80062d8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800505c:	2b00      	cmp	r3, #0
 800505e:	d102      	bne.n	8005066 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a1f      	ldr	r2, [pc, #124]	; (80050e0 <HAL_TIM_PWM_Init+0xb4>)
 8005064:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2202      	movs	r2, #2
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3304      	adds	r3, #4
 800507e:	4619      	mov	r1, r3
 8005080:	4610      	mov	r0, r2
 8005082:	f000 fdd9 	bl	8005c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	080016f5 	.word	0x080016f5

080050e4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e04c      	b.n	8005190 <HAL_TIM_IC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d111      	bne.n	8005126 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f001 f8e4 	bl	80062d8 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005114:	2b00      	cmp	r3, #0
 8005116:	d102      	bne.n	800511e <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a1f      	ldr	r2, [pc, #124]	; (8005198 <HAL_TIM_IC_Init+0xb4>)
 800511c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2202      	movs	r2, #2
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3304      	adds	r3, #4
 8005136:	4619      	mov	r1, r3
 8005138:	4610      	mov	r0, r2
 800513a:	f000 fd7d 	bl	8005c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	08001845 	.word	0x08001845

0800519c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d104      	bne.n	80051ba <HAL_TIM_IC_Start_IT+0x1e>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	e013      	b.n	80051e2 <HAL_TIM_IC_Start_IT+0x46>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b04      	cmp	r3, #4
 80051be:	d104      	bne.n	80051ca <HAL_TIM_IC_Start_IT+0x2e>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	e00b      	b.n	80051e2 <HAL_TIM_IC_Start_IT+0x46>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d104      	bne.n	80051da <HAL_TIM_IC_Start_IT+0x3e>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	e003      	b.n	80051e2 <HAL_TIM_IC_Start_IT+0x46>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d104      	bne.n	80051f4 <HAL_TIM_IC_Start_IT+0x58>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	e013      	b.n	800521c <HAL_TIM_IC_Start_IT+0x80>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d104      	bne.n	8005204 <HAL_TIM_IC_Start_IT+0x68>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005200:	b2db      	uxtb	r3, r3
 8005202:	e00b      	b.n	800521c <HAL_TIM_IC_Start_IT+0x80>
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	2b08      	cmp	r3, #8
 8005208:	d104      	bne.n	8005214 <HAL_TIM_IC_Start_IT+0x78>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005210:	b2db      	uxtb	r3, r3
 8005212:	e003      	b.n	800521c <HAL_TIM_IC_Start_IT+0x80>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800521a:	b2db      	uxtb	r3, r3
 800521c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800521e:	7bbb      	ldrb	r3, [r7, #14]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d102      	bne.n	800522a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005224:	7b7b      	ldrb	r3, [r7, #13]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d001      	beq.n	800522e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e0c2      	b.n	80053b4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d104      	bne.n	800523e <HAL_TIM_IC_Start_IT+0xa2>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800523c:	e013      	b.n	8005266 <HAL_TIM_IC_Start_IT+0xca>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b04      	cmp	r3, #4
 8005242:	d104      	bne.n	800524e <HAL_TIM_IC_Start_IT+0xb2>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800524c:	e00b      	b.n	8005266 <HAL_TIM_IC_Start_IT+0xca>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b08      	cmp	r3, #8
 8005252:	d104      	bne.n	800525e <HAL_TIM_IC_Start_IT+0xc2>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800525c:	e003      	b.n	8005266 <HAL_TIM_IC_Start_IT+0xca>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2202      	movs	r2, #2
 8005262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d104      	bne.n	8005276 <HAL_TIM_IC_Start_IT+0xda>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005274:	e013      	b.n	800529e <HAL_TIM_IC_Start_IT+0x102>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b04      	cmp	r3, #4
 800527a:	d104      	bne.n	8005286 <HAL_TIM_IC_Start_IT+0xea>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005284:	e00b      	b.n	800529e <HAL_TIM_IC_Start_IT+0x102>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b08      	cmp	r3, #8
 800528a:	d104      	bne.n	8005296 <HAL_TIM_IC_Start_IT+0xfa>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005294:	e003      	b.n	800529e <HAL_TIM_IC_Start_IT+0x102>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2202      	movs	r2, #2
 800529a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b0c      	cmp	r3, #12
 80052a2:	d841      	bhi.n	8005328 <HAL_TIM_IC_Start_IT+0x18c>
 80052a4:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <HAL_TIM_IC_Start_IT+0x110>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	080052e1 	.word	0x080052e1
 80052b0:	08005329 	.word	0x08005329
 80052b4:	08005329 	.word	0x08005329
 80052b8:	08005329 	.word	0x08005329
 80052bc:	080052f3 	.word	0x080052f3
 80052c0:	08005329 	.word	0x08005329
 80052c4:	08005329 	.word	0x08005329
 80052c8:	08005329 	.word	0x08005329
 80052cc:	08005305 	.word	0x08005305
 80052d0:	08005329 	.word	0x08005329
 80052d4:	08005329 	.word	0x08005329
 80052d8:	08005329 	.word	0x08005329
 80052dc:	08005317 	.word	0x08005317
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0202 	orr.w	r2, r2, #2
 80052ee:	60da      	str	r2, [r3, #12]
      break;
 80052f0:	e01d      	b.n	800532e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68da      	ldr	r2, [r3, #12]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f042 0204 	orr.w	r2, r2, #4
 8005300:	60da      	str	r2, [r3, #12]
      break;
 8005302:	e014      	b.n	800532e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0208 	orr.w	r2, r2, #8
 8005312:	60da      	str	r2, [r3, #12]
      break;
 8005314:	e00b      	b.n	800532e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68da      	ldr	r2, [r3, #12]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f042 0210 	orr.w	r2, r2, #16
 8005324:	60da      	str	r2, [r3, #12]
      break;
 8005326:	e002      	b.n	800532e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	73fb      	strb	r3, [r7, #15]
      break;
 800532c:	bf00      	nop
  }

  if (status == HAL_OK)
 800532e:	7bfb      	ldrb	r3, [r7, #15]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d13e      	bne.n	80053b2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2201      	movs	r2, #1
 800533a:	6839      	ldr	r1, [r7, #0]
 800533c:	4618      	mov	r0, r3
 800533e:	f000 ffa5 	bl	800628c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a1d      	ldr	r2, [pc, #116]	; (80053bc <HAL_TIM_IC_Start_IT+0x220>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d018      	beq.n	800537e <HAL_TIM_IC_Start_IT+0x1e2>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005354:	d013      	beq.n	800537e <HAL_TIM_IC_Start_IT+0x1e2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a19      	ldr	r2, [pc, #100]	; (80053c0 <HAL_TIM_IC_Start_IT+0x224>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00e      	beq.n	800537e <HAL_TIM_IC_Start_IT+0x1e2>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a17      	ldr	r2, [pc, #92]	; (80053c4 <HAL_TIM_IC_Start_IT+0x228>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d009      	beq.n	800537e <HAL_TIM_IC_Start_IT+0x1e2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a16      	ldr	r2, [pc, #88]	; (80053c8 <HAL_TIM_IC_Start_IT+0x22c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d004      	beq.n	800537e <HAL_TIM_IC_Start_IT+0x1e2>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a14      	ldr	r2, [pc, #80]	; (80053cc <HAL_TIM_IC_Start_IT+0x230>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d111      	bne.n	80053a2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b06      	cmp	r3, #6
 800538e:	d010      	beq.n	80053b2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0201 	orr.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a0:	e007      	b.n	80053b2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f042 0201 	orr.w	r2, r2, #1
 80053b0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80053b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40010000 	.word	0x40010000
 80053c0:	40000400 	.word	0x40000400
 80053c4:	40000800 	.word	0x40000800
 80053c8:	40000c00 	.word	0x40000c00
 80053cc:	40014000 	.word	0x40014000

080053d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d128      	bne.n	8005438 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d121      	bne.n	8005438 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f06f 0202 	mvn.w	r2, #2
 80053fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	4798      	blx	r3
 800541c:	e009      	b.n	8005432 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b04      	cmp	r3, #4
 8005444:	d128      	bne.n	8005498 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b04      	cmp	r3, #4
 8005452:	d121      	bne.n	8005498 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0204 	mvn.w	r2, #4
 800545c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2202      	movs	r2, #2
 8005462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546e:	2b00      	cmp	r3, #0
 8005470:	d005      	beq.n	800547e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	4798      	blx	r3
 800547c:	e009      	b.n	8005492 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d128      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d121      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f06f 0208 	mvn.w	r2, #8
 80054bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2204      	movs	r2, #4
 80054c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d005      	beq.n	80054de <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	4798      	blx	r3
 80054dc:	e009      	b.n	80054f2 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b10      	cmp	r3, #16
 8005504:	d128      	bne.n	8005558 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	2b10      	cmp	r3, #16
 8005512:	d121      	bne.n	8005558 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0210 	mvn.w	r2, #16
 800551c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2208      	movs	r2, #8
 8005522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552e:	2b00      	cmp	r3, #0
 8005530:	d005      	beq.n	800553e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	4798      	blx	r3
 800553c:	e009      	b.n	8005552 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b01      	cmp	r3, #1
 8005564:	d110      	bne.n	8005588 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b01      	cmp	r3, #1
 8005572:	d109      	bne.n	8005588 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0201 	mvn.w	r2, #1
 800557c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005592:	2b80      	cmp	r3, #128	; 0x80
 8005594:	d110      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a0:	2b80      	cmp	r3, #128	; 0x80
 80055a2:	d109      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c2:	2b40      	cmp	r3, #64	; 0x40
 80055c4:	d110      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d0:	2b40      	cmp	r3, #64	; 0x40
 80055d2:	d109      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 0320 	and.w	r3, r3, #32
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	d110      	bne.n	8005618 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f003 0320 	and.w	r3, r3, #32
 8005600:	2b20      	cmp	r3, #32
 8005602:	d109      	bne.n	8005618 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0220 	mvn.w	r2, #32
 800560c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005618:	bf00      	nop
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_TIM_IC_ConfigChannel+0x1e>
 800563a:	2302      	movs	r3, #2
 800563c:	e088      	b.n	8005750 <HAL_TIM_IC_ConfigChannel+0x130>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d11b      	bne.n	8005684 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6818      	ldr	r0, [r3, #0]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	6819      	ldr	r1, [r3, #0]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f000 fcf8 	bl	8006050 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 020c 	bic.w	r2, r2, #12
 800566e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6999      	ldr	r1, [r3, #24]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	619a      	str	r2, [r3, #24]
 8005682:	e060      	b.n	8005746 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b04      	cmp	r3, #4
 8005688:	d11c      	bne.n	80056c4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	6819      	ldr	r1, [r3, #0]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f000 fd41 	bl	8006120 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699a      	ldr	r2, [r3, #24]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80056ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6999      	ldr	r1, [r3, #24]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	021a      	lsls	r2, r3, #8
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	619a      	str	r2, [r3, #24]
 80056c2:	e040      	b.n	8005746 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b08      	cmp	r3, #8
 80056c8:	d11b      	bne.n	8005702 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6818      	ldr	r0, [r3, #0]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	6819      	ldr	r1, [r3, #0]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f000 fd5e 	bl	800619a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69da      	ldr	r2, [r3, #28]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 020c 	bic.w	r2, r2, #12
 80056ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69d9      	ldr	r1, [r3, #28]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	61da      	str	r2, [r3, #28]
 8005700:	e021      	b.n	8005746 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b0c      	cmp	r3, #12
 8005706:	d11c      	bne.n	8005742 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6818      	ldr	r0, [r3, #0]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	6819      	ldr	r1, [r3, #0]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f000 fd7b 	bl	8006212 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69da      	ldr	r2, [r3, #28]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800572a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	69d9      	ldr	r1, [r3, #28]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	021a      	lsls	r2, r3, #8
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	61da      	str	r2, [r3, #28]
 8005740:	e001      	b.n	8005746 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800574e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005764:	2300      	movs	r3, #0
 8005766:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800576e:	2b01      	cmp	r3, #1
 8005770:	d101      	bne.n	8005776 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005772:	2302      	movs	r3, #2
 8005774:	e0ae      	b.n	80058d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b0c      	cmp	r3, #12
 8005782:	f200 809f 	bhi.w	80058c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005786:	a201      	add	r2, pc, #4	; (adr r2, 800578c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578c:	080057c1 	.word	0x080057c1
 8005790:	080058c5 	.word	0x080058c5
 8005794:	080058c5 	.word	0x080058c5
 8005798:	080058c5 	.word	0x080058c5
 800579c:	08005801 	.word	0x08005801
 80057a0:	080058c5 	.word	0x080058c5
 80057a4:	080058c5 	.word	0x080058c5
 80057a8:	080058c5 	.word	0x080058c5
 80057ac:	08005843 	.word	0x08005843
 80057b0:	080058c5 	.word	0x080058c5
 80057b4:	080058c5 	.word	0x080058c5
 80057b8:	080058c5 	.word	0x080058c5
 80057bc:	08005883 	.word	0x08005883
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68b9      	ldr	r1, [r7, #8]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fab6 	bl	8005d38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0208 	orr.w	r2, r2, #8
 80057da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0204 	bic.w	r2, r2, #4
 80057ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6999      	ldr	r1, [r3, #24]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	691a      	ldr	r2, [r3, #16]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	619a      	str	r2, [r3, #24]
      break;
 80057fe:	e064      	b.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fafc 	bl	8005e04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800581a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800582a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6999      	ldr	r1, [r3, #24]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	021a      	lsls	r2, r3, #8
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	619a      	str	r2, [r3, #24]
      break;
 8005840:	e043      	b.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68b9      	ldr	r1, [r7, #8]
 8005848:	4618      	mov	r0, r3
 800584a:	f000 fb47 	bl	8005edc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69da      	ldr	r2, [r3, #28]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f042 0208 	orr.w	r2, r2, #8
 800585c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69da      	ldr	r2, [r3, #28]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0204 	bic.w	r2, r2, #4
 800586c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69d9      	ldr	r1, [r3, #28]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	691a      	ldr	r2, [r3, #16]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	61da      	str	r2, [r3, #28]
      break;
 8005880:	e023      	b.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	4618      	mov	r0, r3
 800588a:	f000 fb91 	bl	8005fb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69da      	ldr	r2, [r3, #28]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800589c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69da      	ldr	r2, [r3, #28]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69d9      	ldr	r1, [r3, #28]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	021a      	lsls	r2, r3, #8
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	61da      	str	r2, [r3, #28]
      break;
 80058c2:	e002      	b.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	75fb      	strb	r3, [r7, #23]
      break;
 80058c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	460b      	mov	r3, r1
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e135      	b.n	8005c2c <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_TIM_RegisterCallback+0x2a>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e12e      	b.n	8005c2c <HAL_TIM_RegisterCallback+0x288>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b01      	cmp	r3, #1
 80059e0:	f040 80ba 	bne.w	8005b58 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 80059e4:	7afb      	ldrb	r3, [r7, #11]
 80059e6:	2b1a      	cmp	r3, #26
 80059e8:	f200 80b3 	bhi.w	8005b52 <HAL_TIM_RegisterCallback+0x1ae>
 80059ec:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <HAL_TIM_RegisterCallback+0x50>)
 80059ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f2:	bf00      	nop
 80059f4:	08005a61 	.word	0x08005a61
 80059f8:	08005a69 	.word	0x08005a69
 80059fc:	08005a71 	.word	0x08005a71
 8005a00:	08005a79 	.word	0x08005a79
 8005a04:	08005a81 	.word	0x08005a81
 8005a08:	08005a89 	.word	0x08005a89
 8005a0c:	08005a91 	.word	0x08005a91
 8005a10:	08005a99 	.word	0x08005a99
 8005a14:	08005aa1 	.word	0x08005aa1
 8005a18:	08005aa9 	.word	0x08005aa9
 8005a1c:	08005ab1 	.word	0x08005ab1
 8005a20:	08005ab9 	.word	0x08005ab9
 8005a24:	08005ac1 	.word	0x08005ac1
 8005a28:	08005ac9 	.word	0x08005ac9
 8005a2c:	08005ad1 	.word	0x08005ad1
 8005a30:	08005adb 	.word	0x08005adb
 8005a34:	08005ae5 	.word	0x08005ae5
 8005a38:	08005aef 	.word	0x08005aef
 8005a3c:	08005af9 	.word	0x08005af9
 8005a40:	08005b03 	.word	0x08005b03
 8005a44:	08005b0d 	.word	0x08005b0d
 8005a48:	08005b17 	.word	0x08005b17
 8005a4c:	08005b21 	.word	0x08005b21
 8005a50:	08005b2b 	.word	0x08005b2b
 8005a54:	08005b35 	.word	0x08005b35
 8005a58:	08005b3f 	.word	0x08005b3f
 8005a5c:	08005b49 	.word	0x08005b49
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8005a66:	e0dc      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8005a6e:	e0d8      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8005a76:	e0d4      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8005a7e:	e0d0      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8005a86:	e0cc      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8005a8e:	e0c8      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8005a96:	e0c4      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8005a9e:	e0c0      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8005aa6:	e0bc      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8005aae:	e0b8      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8005ab6:	e0b4      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8005abe:	e0b0      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8005ac6:	e0ac      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8005ace:	e0a8      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8005ad8:	e0a3      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8005ae2:	e09e      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8005aec:	e099      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8005af6:	e094      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8005b00:	e08f      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8005b0a:	e08a      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8005b14:	e085      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8005b1e:	e080      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8005b28:	e07b      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8005b32:	e076      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8005b3c:	e071      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8005b46:	e06c      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8005b50:	e067      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	75fb      	strb	r3, [r7, #23]
        break;
 8005b56:	e064      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d15c      	bne.n	8005c1e <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8005b64:	7afb      	ldrb	r3, [r7, #11]
 8005b66:	2b0d      	cmp	r3, #13
 8005b68:	d856      	bhi.n	8005c18 <HAL_TIM_RegisterCallback+0x274>
 8005b6a:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <HAL_TIM_RegisterCallback+0x1cc>)
 8005b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b70:	08005ba9 	.word	0x08005ba9
 8005b74:	08005bb1 	.word	0x08005bb1
 8005b78:	08005bb9 	.word	0x08005bb9
 8005b7c:	08005bc1 	.word	0x08005bc1
 8005b80:	08005bc9 	.word	0x08005bc9
 8005b84:	08005bd1 	.word	0x08005bd1
 8005b88:	08005bd9 	.word	0x08005bd9
 8005b8c:	08005be1 	.word	0x08005be1
 8005b90:	08005be9 	.word	0x08005be9
 8005b94:	08005bf1 	.word	0x08005bf1
 8005b98:	08005bf9 	.word	0x08005bf9
 8005b9c:	08005c01 	.word	0x08005c01
 8005ba0:	08005c09 	.word	0x08005c09
 8005ba4:	08005c11 	.word	0x08005c11
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8005bae:	e038      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8005bb6:	e034      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8005bbe:	e030      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8005bc6:	e02c      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8005bce:	e028      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8005bd6:	e024      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8005bde:	e020      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8005be6:	e01c      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8005bee:	e018      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8005bf6:	e014      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8005bfe:	e010      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8005c06:	e00c      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8005c0e:	e008      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8005c16:	e004      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	75fb      	strb	r3, [r7, #23]
        break;
 8005c1c:	e001      	b.n	8005c22 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	371c      	adds	r7, #28
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a34      	ldr	r2, [pc, #208]	; (8005d1c <TIM_Base_SetConfig+0xe4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00f      	beq.n	8005c70 <TIM_Base_SetConfig+0x38>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c56:	d00b      	beq.n	8005c70 <TIM_Base_SetConfig+0x38>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a31      	ldr	r2, [pc, #196]	; (8005d20 <TIM_Base_SetConfig+0xe8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d007      	beq.n	8005c70 <TIM_Base_SetConfig+0x38>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a30      	ldr	r2, [pc, #192]	; (8005d24 <TIM_Base_SetConfig+0xec>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d003      	beq.n	8005c70 <TIM_Base_SetConfig+0x38>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a2f      	ldr	r2, [pc, #188]	; (8005d28 <TIM_Base_SetConfig+0xf0>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d108      	bne.n	8005c82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a25      	ldr	r2, [pc, #148]	; (8005d1c <TIM_Base_SetConfig+0xe4>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d01b      	beq.n	8005cc2 <TIM_Base_SetConfig+0x8a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c90:	d017      	beq.n	8005cc2 <TIM_Base_SetConfig+0x8a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a22      	ldr	r2, [pc, #136]	; (8005d20 <TIM_Base_SetConfig+0xe8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d013      	beq.n	8005cc2 <TIM_Base_SetConfig+0x8a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a21      	ldr	r2, [pc, #132]	; (8005d24 <TIM_Base_SetConfig+0xec>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d00f      	beq.n	8005cc2 <TIM_Base_SetConfig+0x8a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a20      	ldr	r2, [pc, #128]	; (8005d28 <TIM_Base_SetConfig+0xf0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00b      	beq.n	8005cc2 <TIM_Base_SetConfig+0x8a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a1f      	ldr	r2, [pc, #124]	; (8005d2c <TIM_Base_SetConfig+0xf4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d007      	beq.n	8005cc2 <TIM_Base_SetConfig+0x8a>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a1e      	ldr	r2, [pc, #120]	; (8005d30 <TIM_Base_SetConfig+0xf8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d003      	beq.n	8005cc2 <TIM_Base_SetConfig+0x8a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a1d      	ldr	r2, [pc, #116]	; (8005d34 <TIM_Base_SetConfig+0xfc>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d108      	bne.n	8005cd4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a08      	ldr	r2, [pc, #32]	; (8005d1c <TIM_Base_SetConfig+0xe4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d103      	bne.n	8005d08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	615a      	str	r2, [r3, #20]
}
 8005d0e:	bf00      	nop
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40010000 	.word	0x40010000
 8005d20:	40000400 	.word	0x40000400
 8005d24:	40000800 	.word	0x40000800
 8005d28:	40000c00 	.word	0x40000c00
 8005d2c:	40014000 	.word	0x40014000
 8005d30:	40014400 	.word	0x40014400
 8005d34:	40014800 	.word	0x40014800

08005d38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f023 0201 	bic.w	r2, r3, #1
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 0303 	bic.w	r3, r3, #3
 8005d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f023 0302 	bic.w	r3, r3, #2
 8005d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a1c      	ldr	r2, [pc, #112]	; (8005e00 <TIM_OC1_SetConfig+0xc8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d10c      	bne.n	8005dae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f023 0308 	bic.w	r3, r3, #8
 8005d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f023 0304 	bic.w	r3, r3, #4
 8005dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a13      	ldr	r2, [pc, #76]	; (8005e00 <TIM_OC1_SetConfig+0xc8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d111      	bne.n	8005dda <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	621a      	str	r2, [r3, #32]
}
 8005df4:	bf00      	nop
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	40010000 	.word	0x40010000

08005e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	f023 0210 	bic.w	r2, r3, #16
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	021b      	lsls	r3, r3, #8
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f023 0320 	bic.w	r3, r3, #32
 8005e4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a1e      	ldr	r2, [pc, #120]	; (8005ed8 <TIM_OC2_SetConfig+0xd4>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d10d      	bne.n	8005e80 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	011b      	lsls	r3, r3, #4
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a15      	ldr	r2, [pc, #84]	; (8005ed8 <TIM_OC2_SetConfig+0xd4>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d113      	bne.n	8005eb0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	621a      	str	r2, [r3, #32]
}
 8005eca:	bf00      	nop
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	40010000 	.word	0x40010000

08005edc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0303 	bic.w	r3, r3, #3
 8005f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	021b      	lsls	r3, r3, #8
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a1d      	ldr	r2, [pc, #116]	; (8005fac <TIM_OC3_SetConfig+0xd0>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d10d      	bne.n	8005f56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	021b      	lsls	r3, r3, #8
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a14      	ldr	r2, [pc, #80]	; (8005fac <TIM_OC3_SetConfig+0xd0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d113      	bne.n	8005f86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	011b      	lsls	r3, r3, #4
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	011b      	lsls	r3, r3, #4
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	621a      	str	r2, [r3, #32]
}
 8005fa0:	bf00      	nop
 8005fa2:	371c      	adds	r7, #28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	40010000 	.word	0x40010000

08005fb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	021b      	lsls	r3, r3, #8
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	031b      	lsls	r3, r3, #12
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4313      	orrs	r3, r2
 8006006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a10      	ldr	r2, [pc, #64]	; (800604c <TIM_OC4_SetConfig+0x9c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d109      	bne.n	8006024 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006016:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	019b      	lsls	r3, r3, #6
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	4313      	orrs	r3, r2
 8006022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	621a      	str	r2, [r3, #32]
}
 800603e:	bf00      	nop
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40010000 	.word	0x40010000

08006050 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	f023 0201 	bic.w	r2, r3, #1
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	4a24      	ldr	r2, [pc, #144]	; (800610c <TIM_TI1_SetConfig+0xbc>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d013      	beq.n	80060a6 <TIM_TI1_SetConfig+0x56>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006084:	d00f      	beq.n	80060a6 <TIM_TI1_SetConfig+0x56>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4a21      	ldr	r2, [pc, #132]	; (8006110 <TIM_TI1_SetConfig+0xc0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00b      	beq.n	80060a6 <TIM_TI1_SetConfig+0x56>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4a20      	ldr	r2, [pc, #128]	; (8006114 <TIM_TI1_SetConfig+0xc4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d007      	beq.n	80060a6 <TIM_TI1_SetConfig+0x56>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4a1f      	ldr	r2, [pc, #124]	; (8006118 <TIM_TI1_SetConfig+0xc8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d003      	beq.n	80060a6 <TIM_TI1_SetConfig+0x56>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4a1e      	ldr	r2, [pc, #120]	; (800611c <TIM_TI1_SetConfig+0xcc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d101      	bne.n	80060aa <TIM_TI1_SetConfig+0x5a>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <TIM_TI1_SetConfig+0x5c>
 80060aa:	2300      	movs	r3, #0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d008      	beq.n	80060c2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f023 0303 	bic.w	r3, r3, #3
 80060b6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4313      	orrs	r3, r2
 80060be:	617b      	str	r3, [r7, #20]
 80060c0:	e003      	b.n	80060ca <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f043 0301 	orr.w	r3, r3, #1
 80060c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	011b      	lsls	r3, r3, #4
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	4313      	orrs	r3, r2
 80060dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f023 030a 	bic.w	r3, r3, #10
 80060e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f003 030a 	and.w	r3, r3, #10
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	621a      	str	r2, [r3, #32]
}
 80060fe:	bf00      	nop
 8006100:	371c      	adds	r7, #28
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40010000 	.word	0x40010000
 8006110:	40000400 	.word	0x40000400
 8006114:	40000800 	.word	0x40000800
 8006118:	40000c00 	.word	0x40000c00
 800611c:	40014000 	.word	0x40014000

08006120 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	f023 0210 	bic.w	r2, r3, #16
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800614c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	021b      	lsls	r3, r3, #8
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800615e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	031b      	lsls	r3, r3, #12
 8006164:	b29b      	uxth	r3, r3
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006172:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800619a:	b480      	push	{r7}
 800619c:	b087      	sub	sp, #28
 800619e:	af00      	add	r7, sp, #0
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	607a      	str	r2, [r7, #4]
 80061a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f023 0303 	bic.w	r3, r3, #3
 80061c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80061ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	021b      	lsls	r3, r3, #8
 80061f0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	621a      	str	r2, [r3, #32]
}
 8006206:	bf00      	nop
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006212:	b480      	push	{r7}
 8006214:	b087      	sub	sp, #28
 8006216:	af00      	add	r7, sp, #0
 8006218:	60f8      	str	r0, [r7, #12]
 800621a:	60b9      	str	r1, [r7, #8]
 800621c:	607a      	str	r2, [r7, #4]
 800621e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800623e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	021b      	lsls	r3, r3, #8
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	4313      	orrs	r3, r2
 8006248:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006250:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	031b      	lsls	r3, r3, #12
 8006256:	b29b      	uxth	r3, r3
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	4313      	orrs	r3, r2
 800625c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006264:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	031b      	lsls	r3, r3, #12
 800626a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4313      	orrs	r3, r2
 8006272:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	621a      	str	r2, [r3, #32]
}
 8006280:	bf00      	nop
 8006282:	371c      	adds	r7, #28
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f003 031f 	and.w	r3, r3, #31
 800629e:	2201      	movs	r2, #1
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a1a      	ldr	r2, [r3, #32]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	43db      	mvns	r3, r3
 80062ae:	401a      	ands	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a1a      	ldr	r2, [r3, #32]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f003 031f 	and.w	r3, r3, #31
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	fa01 f303 	lsl.w	r3, r1, r3
 80062c4:	431a      	orrs	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	621a      	str	r2, [r3, #32]
}
 80062ca:	bf00      	nop
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
	...

080062d8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a1c      	ldr	r2, [pc, #112]	; (8006354 <TIM_ResetCallback+0x7c>)
 80062e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a1b      	ldr	r2, [pc, #108]	; (8006358 <TIM_ResetCallback+0x80>)
 80062ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a1a      	ldr	r2, [pc, #104]	; (800635c <TIM_ResetCallback+0x84>)
 80062f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a19      	ldr	r2, [pc, #100]	; (8006360 <TIM_ResetCallback+0x88>)
 80062fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a18      	ldr	r2, [pc, #96]	; (8006364 <TIM_ResetCallback+0x8c>)
 8006304:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a17      	ldr	r2, [pc, #92]	; (8006368 <TIM_ResetCallback+0x90>)
 800630c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a16      	ldr	r2, [pc, #88]	; (800636c <TIM_ResetCallback+0x94>)
 8006314:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a15      	ldr	r2, [pc, #84]	; (8006370 <TIM_ResetCallback+0x98>)
 800631c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a14      	ldr	r2, [pc, #80]	; (8006374 <TIM_ResetCallback+0x9c>)
 8006324:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a13      	ldr	r2, [pc, #76]	; (8006378 <TIM_ResetCallback+0xa0>)
 800632c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a12      	ldr	r2, [pc, #72]	; (800637c <TIM_ResetCallback+0xa4>)
 8006334:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a11      	ldr	r2, [pc, #68]	; (8006380 <TIM_ResetCallback+0xa8>)
 800633c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a10      	ldr	r2, [pc, #64]	; (8006384 <TIM_ResetCallback+0xac>)
 8006344:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	080058dd 	.word	0x080058dd
 8006358:	080058f1 	.word	0x080058f1
 800635c:	08005969 	.word	0x08005969
 8006360:	0800597d 	.word	0x0800597d
 8006364:	08005919 	.word	0x08005919
 8006368:	0800592d 	.word	0x0800592d
 800636c:	08005905 	.word	0x08005905
 8006370:	08005941 	.word	0x08005941
 8006374:	08005955 	.word	0x08005955
 8006378:	08005991 	.word	0x08005991
 800637c:	08006509 	.word	0x08006509
 8006380:	0800651d 	.word	0x0800651d
 8006384:	08006531 	.word	0x08006531

08006388 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006398:	2b01      	cmp	r3, #1
 800639a:	d101      	bne.n	80063a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800639c:	2302      	movs	r3, #2
 800639e:	e050      	b.n	8006442 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a1c      	ldr	r2, [pc, #112]	; (8006450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d018      	beq.n	8006416 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ec:	d013      	beq.n	8006416 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a18      	ldr	r2, [pc, #96]	; (8006454 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d00e      	beq.n	8006416 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a16      	ldr	r2, [pc, #88]	; (8006458 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d009      	beq.n	8006416 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a15      	ldr	r2, [pc, #84]	; (800645c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d004      	beq.n	8006416 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a13      	ldr	r2, [pc, #76]	; (8006460 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d10c      	bne.n	8006430 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800641c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	4313      	orrs	r3, r2
 8006426:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	40010000 	.word	0x40010000
 8006454:	40000400 	.word	0x40000400
 8006458:	40000800 	.word	0x40000800
 800645c:	40000c00 	.word	0x40000c00
 8006460:	40014000 	.word	0x40014000

08006464 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800647c:	2302      	movs	r3, #2
 800647e:	e03d      	b.n	80064fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4313      	orrs	r3, r2
 80064be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	4313      	orrs	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e04a      	b.n	80065ec <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d111      	bne.n	8006586 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fc50 	bl	8006e10 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d102      	bne.n	800657e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a1e      	ldr	r2, [pc, #120]	; (80065f4 <HAL_UART_Init+0xb0>)
 800657c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2224      	movs	r2, #36	; 0x24
 800658a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68da      	ldr	r2, [r3, #12]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800659c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fe4a 	bl	8007238 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691a      	ldr	r2, [r3, #16]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065b2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695a      	ldr	r2, [r3, #20]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065c2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68da      	ldr	r2, [r3, #12]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065d2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2220      	movs	r2, #32
 80065de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2220      	movs	r2, #32
 80065e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	08001c15 	.word	0x08001c15

080065f8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	460b      	mov	r3, r1
 8006602:	607a      	str	r2, [r7, #4]
 8006604:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d107      	bne.n	8006620 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006614:	f043 0220 	orr.w	r2, r3, #32
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e08c      	b.n	800673a <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006626:	2b01      	cmp	r3, #1
 8006628:	d101      	bne.n	800662e <HAL_UART_RegisterCallback+0x36>
 800662a:	2302      	movs	r3, #2
 800662c:	e085      	b.n	800673a <HAL_UART_RegisterCallback+0x142>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b20      	cmp	r3, #32
 8006640:	d151      	bne.n	80066e6 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8006642:	7afb      	ldrb	r3, [r7, #11]
 8006644:	2b0c      	cmp	r3, #12
 8006646:	d845      	bhi.n	80066d4 <HAL_UART_RegisterCallback+0xdc>
 8006648:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <HAL_UART_RegisterCallback+0x58>)
 800664a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664e:	bf00      	nop
 8006650:	08006685 	.word	0x08006685
 8006654:	0800668d 	.word	0x0800668d
 8006658:	08006695 	.word	0x08006695
 800665c:	0800669d 	.word	0x0800669d
 8006660:	080066a5 	.word	0x080066a5
 8006664:	080066ad 	.word	0x080066ad
 8006668:	080066b5 	.word	0x080066b5
 800666c:	080066bd 	.word	0x080066bd
 8006670:	080066d5 	.word	0x080066d5
 8006674:	080066d5 	.word	0x080066d5
 8006678:	080066d5 	.word	0x080066d5
 800667c:	080066c5 	.word	0x080066c5
 8006680:	080066cd 	.word	0x080066cd
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800668a:	e051      	b.n	8006730 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006692:	e04d      	b.n	8006730 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800669a:	e049      	b.n	8006730 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80066a2:	e045      	b.n	8006730 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80066aa:	e041      	b.n	8006730 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80066b2:	e03d      	b.n	8006730 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80066ba:	e039      	b.n	8006730 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80066c2:	e035      	b.n	8006730 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80066ca:	e031      	b.n	8006730 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80066d2:	e02d      	b.n	8006730 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	f043 0220 	orr.w	r2, r3, #32
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	75fb      	strb	r3, [r7, #23]
        break;
 80066e4:	e024      	b.n	8006730 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d116      	bne.n	8006720 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 80066f2:	7afb      	ldrb	r3, [r7, #11]
 80066f4:	2b0b      	cmp	r3, #11
 80066f6:	d002      	beq.n	80066fe <HAL_UART_RegisterCallback+0x106>
 80066f8:	2b0c      	cmp	r3, #12
 80066fa:	d004      	beq.n	8006706 <HAL_UART_RegisterCallback+0x10e>
 80066fc:	e007      	b.n	800670e <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006704:	e014      	b.n	8006730 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800670c:	e010      	b.n	8006730 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	f043 0220 	orr.w	r2, r3, #32
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	75fb      	strb	r3, [r7, #23]
        break;
 800671e:	e007      	b.n	8006730 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006724:	f043 0220 	orr.w	r2, r3, #32
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006738:	7dfb      	ldrb	r3, [r7, #23]
}
 800673a:	4618      	mov	r0, r3
 800673c:	371c      	adds	r7, #28
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop

08006748 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	4613      	mov	r3, r2
 8006754:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b20      	cmp	r3, #32
 8006760:	d130      	bne.n	80067c4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <HAL_UART_Transmit_IT+0x26>
 8006768:	88fb      	ldrh	r3, [r7, #6]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e029      	b.n	80067c6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_UART_Transmit_IT+0x38>
 800677c:	2302      	movs	r3, #2
 800677e:	e022      	b.n	80067c6 <HAL_UART_Transmit_IT+0x7e>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	88fa      	ldrh	r2, [r7, #6]
 8006792:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	88fa      	ldrh	r2, [r7, #6]
 8006798:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2221      	movs	r2, #33	; 0x21
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067be:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80067c0:	2300      	movs	r3, #0
 80067c2:	e000      	b.n	80067c6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80067c4:	2302      	movs	r3, #2
  }
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b084      	sub	sp, #16
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	60f8      	str	r0, [r7, #12]
 80067da:	60b9      	str	r1, [r7, #8]
 80067dc:	4613      	mov	r3, r2
 80067de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b20      	cmp	r3, #32
 80067ea:	d11d      	bne.n	8006828 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <HAL_UART_Receive_IT+0x26>
 80067f2:	88fb      	ldrh	r3, [r7, #6]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e016      	b.n	800682a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006802:	2b01      	cmp	r3, #1
 8006804:	d101      	bne.n	800680a <HAL_UART_Receive_IT+0x38>
 8006806:	2302      	movs	r3, #2
 8006808:	e00f      	b.n	800682a <HAL_UART_Receive_IT+0x58>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006818:	88fb      	ldrh	r3, [r7, #6]
 800681a:	461a      	mov	r2, r3
 800681c:	68b9      	ldr	r1, [r7, #8]
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 fb2e 	bl	8006e80 <UART_Start_Receive_IT>
 8006824:	4603      	mov	r3, r0
 8006826:	e000      	b.n	800682a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006828:	2302      	movs	r3, #2
  }
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
	...

08006834 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b0ba      	sub	sp, #232	; 0xe8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800685a:	2300      	movs	r3, #0
 800685c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006860:	2300      	movs	r3, #0
 8006862:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800686a:	f003 030f 	and.w	r3, r3, #15
 800686e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006872:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10f      	bne.n	800689a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800687a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800687e:	f003 0320 	and.w	r3, r3, #32
 8006882:	2b00      	cmp	r3, #0
 8006884:	d009      	beq.n	800689a <HAL_UART_IRQHandler+0x66>
 8006886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800688a:	f003 0320 	and.w	r3, r3, #32
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fc13 	bl	80070be <UART_Receive_IT>
      return;
 8006898:	e25b      	b.n	8006d52 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800689a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 80e1 	beq.w	8006a66 <HAL_UART_IRQHandler+0x232>
 80068a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d106      	bne.n	80068be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 80d4 	beq.w	8006a66 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00b      	beq.n	80068e2 <HAL_UART_IRQHandler+0xae>
 80068ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d005      	beq.n	80068e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	f043 0201 	orr.w	r2, r3, #1
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e6:	f003 0304 	and.w	r3, r3, #4
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00b      	beq.n	8006906 <HAL_UART_IRQHandler+0xd2>
 80068ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d005      	beq.n	8006906 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	f043 0202 	orr.w	r2, r3, #2
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00b      	beq.n	800692a <HAL_UART_IRQHandler+0xf6>
 8006912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	f043 0204 	orr.w	r2, r3, #4
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800692a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800692e:	f003 0308 	and.w	r3, r3, #8
 8006932:	2b00      	cmp	r3, #0
 8006934:	d011      	beq.n	800695a <HAL_UART_IRQHandler+0x126>
 8006936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b00      	cmp	r3, #0
 8006940:	d105      	bne.n	800694e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d005      	beq.n	800695a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	f043 0208 	orr.w	r2, r3, #8
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 81f2 	beq.w	8006d48 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006968:	f003 0320 	and.w	r3, r3, #32
 800696c:	2b00      	cmp	r3, #0
 800696e:	d008      	beq.n	8006982 <HAL_UART_IRQHandler+0x14e>
 8006970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006974:	f003 0320 	and.w	r3, r3, #32
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fb9e 	bl	80070be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698c:	2b40      	cmp	r3, #64	; 0x40
 800698e:	bf0c      	ite	eq
 8006990:	2301      	moveq	r3, #1
 8006992:	2300      	movne	r3, #0
 8006994:	b2db      	uxtb	r3, r3
 8006996:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699e:	f003 0308 	and.w	r3, r3, #8
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d103      	bne.n	80069ae <HAL_UART_IRQHandler+0x17a>
 80069a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d051      	beq.n	8006a52 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 faa4 	bl	8006efc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069be:	2b40      	cmp	r3, #64	; 0x40
 80069c0:	d142      	bne.n	8006a48 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3314      	adds	r3, #20
 80069c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3314      	adds	r3, #20
 80069ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1d9      	bne.n	80069c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d013      	beq.n	8006a3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1a:	4a7f      	ldr	r2, [pc, #508]	; (8006c18 <HAL_UART_IRQHandler+0x3e4>)
 8006a1c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fc fabe 	bl	8002fa4 <HAL_DMA_Abort_IT>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d019      	beq.n	8006a62 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a38:	4610      	mov	r0, r2
 8006a3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a3c:	e011      	b.n	8006a62 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a46:	e00c      	b.n	8006a62 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a50:	e007      	b.n	8006a62 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006a60:	e172      	b.n	8006d48 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a62:	bf00      	nop
    return;
 8006a64:	e170      	b.n	8006d48 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	f040 814c 	bne.w	8006d08 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a74:	f003 0310 	and.w	r3, r3, #16
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 8145 	beq.w	8006d08 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a82:	f003 0310 	and.w	r3, r3, #16
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 813e 	beq.w	8006d08 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60bb      	str	r3, [r7, #8]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	60bb      	str	r3, [r7, #8]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	60bb      	str	r3, [r7, #8]
 8006aa0:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aac:	2b40      	cmp	r3, #64	; 0x40
 8006aae:	f040 80b5 	bne.w	8006c1c <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006abe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 8142 	beq.w	8006d4c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006acc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	f080 813b 	bcs.w	8006d4c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006adc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ae8:	f000 8088 	beq.w	8006bfc <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	330c      	adds	r3, #12
 8006af2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006afa:	e853 3f00 	ldrex	r3, [r3]
 8006afe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	330c      	adds	r3, #12
 8006b14:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b18:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b28:	e841 2300 	strex	r3, r2, [r1]
 8006b2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1d9      	bne.n	8006aec <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3314      	adds	r3, #20
 8006b3e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b42:	e853 3f00 	ldrex	r3, [r3]
 8006b46:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b4a:	f023 0301 	bic.w	r3, r3, #1
 8006b4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3314      	adds	r3, #20
 8006b58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b5c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b60:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e1      	bne.n	8006b38 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3314      	adds	r3, #20
 8006b7a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3314      	adds	r3, #20
 8006b94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b98:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ba6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e3      	bne.n	8006b74 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	330c      	adds	r3, #12
 8006bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bcc:	f023 0310 	bic.w	r3, r3, #16
 8006bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	330c      	adds	r3, #12
 8006bda:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006bde:	65ba      	str	r2, [r7, #88]	; 0x58
 8006be0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006be4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006be6:	e841 2300 	strex	r3, r2, [r1]
 8006bea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1e3      	bne.n	8006bba <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fc f964 	bl	8002ec4 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8006c08:	b292      	uxth	r2, r2
 8006c0a:	1a8a      	subs	r2, r1, r2
 8006c0c:	b292      	uxth	r2, r2
 8006c0e:	4611      	mov	r1, r2
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c14:	e09a      	b.n	8006d4c <HAL_UART_IRQHandler+0x518>
 8006c16:	bf00      	nop
 8006c18:	08006fc3 	.word	0x08006fc3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 808c 	beq.w	8006d50 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 8087 	beq.w	8006d50 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	330c      	adds	r3, #12
 8006c48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	330c      	adds	r3, #12
 8006c62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c66:	647a      	str	r2, [r7, #68]	; 0x44
 8006c68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e3      	bne.n	8006c42 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3314      	adds	r3, #20
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	e853 3f00 	ldrex	r3, [r3]
 8006c88:	623b      	str	r3, [r7, #32]
   return(result);
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	f023 0301 	bic.w	r3, r3, #1
 8006c90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3314      	adds	r3, #20
 8006c9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c9e:	633a      	str	r2, [r7, #48]	; 0x30
 8006ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e3      	bne.n	8006c7a <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	330c      	adds	r3, #12
 8006cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0310 	bic.w	r3, r3, #16
 8006cd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	330c      	adds	r3, #12
 8006ce0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ce4:	61fa      	str	r2, [r7, #28]
 8006ce6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	69b9      	ldr	r1, [r7, #24]
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e3      	bne.n	8006cc0 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cfc:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8006d00:	4611      	mov	r1, r2
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d06:	e023      	b.n	8006d50 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d009      	beq.n	8006d28 <HAL_UART_IRQHandler+0x4f4>
 8006d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f963 	bl	8006fec <UART_Transmit_IT>
    return;
 8006d26:	e014      	b.n	8006d52 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00e      	beq.n	8006d52 <HAL_UART_IRQHandler+0x51e>
 8006d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d008      	beq.n	8006d52 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f9a3 	bl	800708c <UART_EndTransmit_IT>
    return;
 8006d46:	e004      	b.n	8006d52 <HAL_UART_IRQHandler+0x51e>
    return;
 8006d48:	bf00      	nop
 8006d4a:	e002      	b.n	8006d52 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d4c:	bf00      	nop
 8006d4e:	e000      	b.n	8006d52 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d50:	bf00      	nop
  }
}
 8006d52:	37e8      	adds	r7, #232	; 0xe8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	460b      	mov	r3, r1
 8006e02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a10      	ldr	r2, [pc, #64]	; (8006e5c <UART_InitCallbacksToDefault+0x4c>)
 8006e1c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a0f      	ldr	r2, [pc, #60]	; (8006e60 <UART_InitCallbacksToDefault+0x50>)
 8006e22:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a0f      	ldr	r2, [pc, #60]	; (8006e64 <UART_InitCallbacksToDefault+0x54>)
 8006e28:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a0e      	ldr	r2, [pc, #56]	; (8006e68 <UART_InitCallbacksToDefault+0x58>)
 8006e2e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a0e      	ldr	r2, [pc, #56]	; (8006e6c <UART_InitCallbacksToDefault+0x5c>)
 8006e34:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a0d      	ldr	r2, [pc, #52]	; (8006e70 <UART_InitCallbacksToDefault+0x60>)
 8006e3a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a0d      	ldr	r2, [pc, #52]	; (8006e74 <UART_InitCallbacksToDefault+0x64>)
 8006e40:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a0c      	ldr	r2, [pc, #48]	; (8006e78 <UART_InitCallbacksToDefault+0x68>)
 8006e46:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a0c      	ldr	r2, [pc, #48]	; (8006e7c <UART_InitCallbacksToDefault+0x6c>)
 8006e4c:	669a      	str	r2, [r3, #104]	; 0x68

}
 8006e4e:	bf00      	nop
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	08006d6d 	.word	0x08006d6d
 8006e60:	08006d59 	.word	0x08006d59
 8006e64:	08006d95 	.word	0x08006d95
 8006e68:	08006d81 	.word	0x08006d81
 8006e6c:	08006da9 	.word	0x08006da9
 8006e70:	08006dbd 	.word	0x08006dbd
 8006e74:	08006dd1 	.word	0x08006dd1
 8006e78:	08006de5 	.word	0x08006de5
 8006e7c:	08006df9 	.word	0x08006df9

08006e80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	88fa      	ldrh	r2, [r7, #6]
 8006e98:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	88fa      	ldrh	r2, [r7, #6]
 8006e9e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2222      	movs	r2, #34	; 0x22
 8006eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d007      	beq.n	8006ece <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68da      	ldr	r2, [r3, #12]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ecc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	695a      	ldr	r2, [r3, #20]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f042 0201 	orr.w	r2, r2, #1
 8006edc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68da      	ldr	r2, [r3, #12]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f042 0220 	orr.w	r2, r2, #32
 8006eec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b095      	sub	sp, #84	; 0x54
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	330c      	adds	r3, #12
 8006f0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0e:	e853 3f00 	ldrex	r3, [r3]
 8006f12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	330c      	adds	r3, #12
 8006f22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f24:	643a      	str	r2, [r7, #64]	; 0x40
 8006f26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f2c:	e841 2300 	strex	r3, r2, [r1]
 8006f30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1e5      	bne.n	8006f04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3314      	adds	r3, #20
 8006f3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	e853 3f00 	ldrex	r3, [r3]
 8006f46:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	f023 0301 	bic.w	r3, r3, #1
 8006f4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3314      	adds	r3, #20
 8006f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f60:	e841 2300 	strex	r3, r2, [r1]
 8006f64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e5      	bne.n	8006f38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d119      	bne.n	8006fa8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	330c      	adds	r3, #12
 8006f7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f023 0310 	bic.w	r3, r3, #16
 8006f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	330c      	adds	r3, #12
 8006f92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f94:	61ba      	str	r2, [r7, #24]
 8006f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f98:	6979      	ldr	r1, [r7, #20]
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	e841 2300 	strex	r3, r2, [r1]
 8006fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e5      	bne.n	8006f74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2220      	movs	r2, #32
 8006fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006fb6:	bf00      	nop
 8006fb8:	3754      	adds	r7, #84	; 0x54
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fe4:	bf00      	nop
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b21      	cmp	r3, #33	; 0x21
 8006ffe:	d13e      	bne.n	800707e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007008:	d114      	bne.n	8007034 <UART_Transmit_IT+0x48>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d110      	bne.n	8007034 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	461a      	mov	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007026:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	1c9a      	adds	r2, r3, #2
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	621a      	str	r2, [r3, #32]
 8007032:	e008      	b.n	8007046 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	1c59      	adds	r1, r3, #1
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	6211      	str	r1, [r2, #32]
 800703e:	781a      	ldrb	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800704a:	b29b      	uxth	r3, r3
 800704c:	3b01      	subs	r3, #1
 800704e:	b29b      	uxth	r3, r3
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	4619      	mov	r1, r3
 8007054:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10f      	bne.n	800707a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007068:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68da      	ldr	r2, [r3, #12]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007078:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	e000      	b.n	8007080 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800707e:	2302      	movs	r3, #2
  }
}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070a2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2220      	movs	r2, #32
 80070a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b08c      	sub	sp, #48	; 0x30
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b22      	cmp	r3, #34	; 0x22
 80070d0:	f040 80ad 	bne.w	800722e <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070dc:	d117      	bne.n	800710e <UART_Receive_IT+0x50>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d113      	bne.n	800710e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070e6:	2300      	movs	r3, #0
 80070e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007100:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007106:	1c9a      	adds	r2, r3, #2
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	629a      	str	r2, [r3, #40]	; 0x28
 800710c:	e026      	b.n	800715c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007112:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007114:	2300      	movs	r3, #0
 8007116:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007120:	d007      	beq.n	8007132 <UART_Receive_IT+0x74>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10a      	bne.n	8007140 <UART_Receive_IT+0x82>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d106      	bne.n	8007140 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	b2da      	uxtb	r2, r3
 800713a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713c:	701a      	strb	r2, [r3, #0]
 800713e:	e008      	b.n	8007152 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	b2db      	uxtb	r3, r3
 8007148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800714c:	b2da      	uxtb	r2, r3
 800714e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007150:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007156:	1c5a      	adds	r2, r3, #1
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007160:	b29b      	uxth	r3, r3
 8007162:	3b01      	subs	r3, #1
 8007164:	b29b      	uxth	r3, r3
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	4619      	mov	r1, r3
 800716a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800716c:	2b00      	cmp	r3, #0
 800716e:	d15c      	bne.n	800722a <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 0220 	bic.w	r2, r2, #32
 800717e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68da      	ldr	r2, [r3, #12]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800718e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695a      	ldr	r2, [r3, #20]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0201 	bic.w	r2, r2, #1
 800719e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d136      	bne.n	800721e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	330c      	adds	r3, #12
 80071bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	e853 3f00 	ldrex	r3, [r3]
 80071c4:	613b      	str	r3, [r7, #16]
   return(result);
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f023 0310 	bic.w	r3, r3, #16
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	330c      	adds	r3, #12
 80071d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071d6:	623a      	str	r2, [r7, #32]
 80071d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071da:	69f9      	ldr	r1, [r7, #28]
 80071dc:	6a3a      	ldr	r2, [r7, #32]
 80071de:	e841 2300 	strex	r3, r2, [r1]
 80071e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1e5      	bne.n	80071b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0310 	and.w	r3, r3, #16
 80071f4:	2b10      	cmp	r3, #16
 80071f6:	d10a      	bne.n	800720e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071f8:	2300      	movs	r3, #0
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	60fb      	str	r3, [r7, #12]
 800720c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8007216:	4611      	mov	r1, r2
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	4798      	blx	r3
 800721c:	e003      	b.n	8007226 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	e002      	b.n	8007230 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	e000      	b.n	8007230 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800722e:	2302      	movs	r3, #2
  }
}
 8007230:	4618      	mov	r0, r3
 8007232:	3730      	adds	r7, #48	; 0x30
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800723c:	b0c0      	sub	sp, #256	; 0x100
 800723e:	af00      	add	r7, sp, #0
 8007240:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007254:	68d9      	ldr	r1, [r3, #12]
 8007256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	ea40 0301 	orr.w	r3, r0, r1
 8007260:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007266:	689a      	ldr	r2, [r3, #8]
 8007268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	431a      	orrs	r2, r3
 8007270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	431a      	orrs	r2, r3
 8007278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	4313      	orrs	r3, r2
 8007280:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007290:	f021 010c 	bic.w	r1, r1, #12
 8007294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800729e:	430b      	orrs	r3, r1
 80072a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80072ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b2:	6999      	ldr	r1, [r3, #24]
 80072b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	ea40 0301 	orr.w	r3, r0, r1
 80072be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	4b8f      	ldr	r3, [pc, #572]	; (8007504 <UART_SetConfig+0x2cc>)
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d005      	beq.n	80072d8 <UART_SetConfig+0xa0>
 80072cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	4b8d      	ldr	r3, [pc, #564]	; (8007508 <UART_SetConfig+0x2d0>)
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d104      	bne.n	80072e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072d8:	f7fd fe38 	bl	8004f4c <HAL_RCC_GetPCLK2Freq>
 80072dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80072e0:	e003      	b.n	80072ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072e2:	f7fd fe1f 	bl	8004f24 <HAL_RCC_GetPCLK1Freq>
 80072e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ee:	69db      	ldr	r3, [r3, #28]
 80072f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072f4:	f040 810c 	bne.w	8007510 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072fc:	2200      	movs	r2, #0
 80072fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007302:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007306:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800730a:	4622      	mov	r2, r4
 800730c:	462b      	mov	r3, r5
 800730e:	1891      	adds	r1, r2, r2
 8007310:	65b9      	str	r1, [r7, #88]	; 0x58
 8007312:	415b      	adcs	r3, r3
 8007314:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007316:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800731a:	4621      	mov	r1, r4
 800731c:	eb12 0801 	adds.w	r8, r2, r1
 8007320:	4629      	mov	r1, r5
 8007322:	eb43 0901 	adc.w	r9, r3, r1
 8007326:	f04f 0200 	mov.w	r2, #0
 800732a:	f04f 0300 	mov.w	r3, #0
 800732e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007332:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007336:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800733a:	4690      	mov	r8, r2
 800733c:	4699      	mov	r9, r3
 800733e:	4623      	mov	r3, r4
 8007340:	eb18 0303 	adds.w	r3, r8, r3
 8007344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007348:	462b      	mov	r3, r5
 800734a:	eb49 0303 	adc.w	r3, r9, r3
 800734e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800735e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007362:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007366:	460b      	mov	r3, r1
 8007368:	18db      	adds	r3, r3, r3
 800736a:	653b      	str	r3, [r7, #80]	; 0x50
 800736c:	4613      	mov	r3, r2
 800736e:	eb42 0303 	adc.w	r3, r2, r3
 8007372:	657b      	str	r3, [r7, #84]	; 0x54
 8007374:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007378:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800737c:	f7f8 ff34 	bl	80001e8 <__aeabi_uldivmod>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	4b61      	ldr	r3, [pc, #388]	; (800750c <UART_SetConfig+0x2d4>)
 8007386:	fba3 2302 	umull	r2, r3, r3, r2
 800738a:	095b      	lsrs	r3, r3, #5
 800738c:	011c      	lsls	r4, r3, #4
 800738e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007392:	2200      	movs	r2, #0
 8007394:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007398:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800739c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80073a0:	4642      	mov	r2, r8
 80073a2:	464b      	mov	r3, r9
 80073a4:	1891      	adds	r1, r2, r2
 80073a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80073a8:	415b      	adcs	r3, r3
 80073aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80073b0:	4641      	mov	r1, r8
 80073b2:	eb12 0a01 	adds.w	sl, r2, r1
 80073b6:	4649      	mov	r1, r9
 80073b8:	eb43 0b01 	adc.w	fp, r3, r1
 80073bc:	f04f 0200 	mov.w	r2, #0
 80073c0:	f04f 0300 	mov.w	r3, #0
 80073c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073d0:	4692      	mov	sl, r2
 80073d2:	469b      	mov	fp, r3
 80073d4:	4643      	mov	r3, r8
 80073d6:	eb1a 0303 	adds.w	r3, sl, r3
 80073da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073de:	464b      	mov	r3, r9
 80073e0:	eb4b 0303 	adc.w	r3, fp, r3
 80073e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80073e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80073f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80073fc:	460b      	mov	r3, r1
 80073fe:	18db      	adds	r3, r3, r3
 8007400:	643b      	str	r3, [r7, #64]	; 0x40
 8007402:	4613      	mov	r3, r2
 8007404:	eb42 0303 	adc.w	r3, r2, r3
 8007408:	647b      	str	r3, [r7, #68]	; 0x44
 800740a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800740e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007412:	f7f8 fee9 	bl	80001e8 <__aeabi_uldivmod>
 8007416:	4602      	mov	r2, r0
 8007418:	460b      	mov	r3, r1
 800741a:	4611      	mov	r1, r2
 800741c:	4b3b      	ldr	r3, [pc, #236]	; (800750c <UART_SetConfig+0x2d4>)
 800741e:	fba3 2301 	umull	r2, r3, r3, r1
 8007422:	095b      	lsrs	r3, r3, #5
 8007424:	2264      	movs	r2, #100	; 0x64
 8007426:	fb02 f303 	mul.w	r3, r2, r3
 800742a:	1acb      	subs	r3, r1, r3
 800742c:	00db      	lsls	r3, r3, #3
 800742e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007432:	4b36      	ldr	r3, [pc, #216]	; (800750c <UART_SetConfig+0x2d4>)
 8007434:	fba3 2302 	umull	r2, r3, r3, r2
 8007438:	095b      	lsrs	r3, r3, #5
 800743a:	005b      	lsls	r3, r3, #1
 800743c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007440:	441c      	add	r4, r3
 8007442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007446:	2200      	movs	r2, #0
 8007448:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800744c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007450:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007454:	4642      	mov	r2, r8
 8007456:	464b      	mov	r3, r9
 8007458:	1891      	adds	r1, r2, r2
 800745a:	63b9      	str	r1, [r7, #56]	; 0x38
 800745c:	415b      	adcs	r3, r3
 800745e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007460:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007464:	4641      	mov	r1, r8
 8007466:	1851      	adds	r1, r2, r1
 8007468:	6339      	str	r1, [r7, #48]	; 0x30
 800746a:	4649      	mov	r1, r9
 800746c:	414b      	adcs	r3, r1
 800746e:	637b      	str	r3, [r7, #52]	; 0x34
 8007470:	f04f 0200 	mov.w	r2, #0
 8007474:	f04f 0300 	mov.w	r3, #0
 8007478:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800747c:	4659      	mov	r1, fp
 800747e:	00cb      	lsls	r3, r1, #3
 8007480:	4651      	mov	r1, sl
 8007482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007486:	4651      	mov	r1, sl
 8007488:	00ca      	lsls	r2, r1, #3
 800748a:	4610      	mov	r0, r2
 800748c:	4619      	mov	r1, r3
 800748e:	4603      	mov	r3, r0
 8007490:	4642      	mov	r2, r8
 8007492:	189b      	adds	r3, r3, r2
 8007494:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007498:	464b      	mov	r3, r9
 800749a:	460a      	mov	r2, r1
 800749c:	eb42 0303 	adc.w	r3, r2, r3
 80074a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80074b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80074b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80074b8:	460b      	mov	r3, r1
 80074ba:	18db      	adds	r3, r3, r3
 80074bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80074be:	4613      	mov	r3, r2
 80074c0:	eb42 0303 	adc.w	r3, r2, r3
 80074c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80074ce:	f7f8 fe8b 	bl	80001e8 <__aeabi_uldivmod>
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	4b0d      	ldr	r3, [pc, #52]	; (800750c <UART_SetConfig+0x2d4>)
 80074d8:	fba3 1302 	umull	r1, r3, r3, r2
 80074dc:	095b      	lsrs	r3, r3, #5
 80074de:	2164      	movs	r1, #100	; 0x64
 80074e0:	fb01 f303 	mul.w	r3, r1, r3
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	00db      	lsls	r3, r3, #3
 80074e8:	3332      	adds	r3, #50	; 0x32
 80074ea:	4a08      	ldr	r2, [pc, #32]	; (800750c <UART_SetConfig+0x2d4>)
 80074ec:	fba2 2303 	umull	r2, r3, r2, r3
 80074f0:	095b      	lsrs	r3, r3, #5
 80074f2:	f003 0207 	and.w	r2, r3, #7
 80074f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4422      	add	r2, r4
 80074fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007500:	e106      	b.n	8007710 <UART_SetConfig+0x4d8>
 8007502:	bf00      	nop
 8007504:	40011000 	.word	0x40011000
 8007508:	40011400 	.word	0x40011400
 800750c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007514:	2200      	movs	r2, #0
 8007516:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800751a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800751e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007522:	4642      	mov	r2, r8
 8007524:	464b      	mov	r3, r9
 8007526:	1891      	adds	r1, r2, r2
 8007528:	6239      	str	r1, [r7, #32]
 800752a:	415b      	adcs	r3, r3
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
 800752e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007532:	4641      	mov	r1, r8
 8007534:	1854      	adds	r4, r2, r1
 8007536:	4649      	mov	r1, r9
 8007538:	eb43 0501 	adc.w	r5, r3, r1
 800753c:	f04f 0200 	mov.w	r2, #0
 8007540:	f04f 0300 	mov.w	r3, #0
 8007544:	00eb      	lsls	r3, r5, #3
 8007546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800754a:	00e2      	lsls	r2, r4, #3
 800754c:	4614      	mov	r4, r2
 800754e:	461d      	mov	r5, r3
 8007550:	4643      	mov	r3, r8
 8007552:	18e3      	adds	r3, r4, r3
 8007554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007558:	464b      	mov	r3, r9
 800755a:	eb45 0303 	adc.w	r3, r5, r3
 800755e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800756e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007572:	f04f 0200 	mov.w	r2, #0
 8007576:	f04f 0300 	mov.w	r3, #0
 800757a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800757e:	4629      	mov	r1, r5
 8007580:	008b      	lsls	r3, r1, #2
 8007582:	4621      	mov	r1, r4
 8007584:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007588:	4621      	mov	r1, r4
 800758a:	008a      	lsls	r2, r1, #2
 800758c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007590:	f7f8 fe2a 	bl	80001e8 <__aeabi_uldivmod>
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	4b60      	ldr	r3, [pc, #384]	; (800771c <UART_SetConfig+0x4e4>)
 800759a:	fba3 2302 	umull	r2, r3, r3, r2
 800759e:	095b      	lsrs	r3, r3, #5
 80075a0:	011c      	lsls	r4, r3, #4
 80075a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075a6:	2200      	movs	r2, #0
 80075a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80075ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80075b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80075b4:	4642      	mov	r2, r8
 80075b6:	464b      	mov	r3, r9
 80075b8:	1891      	adds	r1, r2, r2
 80075ba:	61b9      	str	r1, [r7, #24]
 80075bc:	415b      	adcs	r3, r3
 80075be:	61fb      	str	r3, [r7, #28]
 80075c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075c4:	4641      	mov	r1, r8
 80075c6:	1851      	adds	r1, r2, r1
 80075c8:	6139      	str	r1, [r7, #16]
 80075ca:	4649      	mov	r1, r9
 80075cc:	414b      	adcs	r3, r1
 80075ce:	617b      	str	r3, [r7, #20]
 80075d0:	f04f 0200 	mov.w	r2, #0
 80075d4:	f04f 0300 	mov.w	r3, #0
 80075d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075dc:	4659      	mov	r1, fp
 80075de:	00cb      	lsls	r3, r1, #3
 80075e0:	4651      	mov	r1, sl
 80075e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075e6:	4651      	mov	r1, sl
 80075e8:	00ca      	lsls	r2, r1, #3
 80075ea:	4610      	mov	r0, r2
 80075ec:	4619      	mov	r1, r3
 80075ee:	4603      	mov	r3, r0
 80075f0:	4642      	mov	r2, r8
 80075f2:	189b      	adds	r3, r3, r2
 80075f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075f8:	464b      	mov	r3, r9
 80075fa:	460a      	mov	r2, r1
 80075fc:	eb42 0303 	adc.w	r3, r2, r3
 8007600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	67bb      	str	r3, [r7, #120]	; 0x78
 800760e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007610:	f04f 0200 	mov.w	r2, #0
 8007614:	f04f 0300 	mov.w	r3, #0
 8007618:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800761c:	4649      	mov	r1, r9
 800761e:	008b      	lsls	r3, r1, #2
 8007620:	4641      	mov	r1, r8
 8007622:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007626:	4641      	mov	r1, r8
 8007628:	008a      	lsls	r2, r1, #2
 800762a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800762e:	f7f8 fddb 	bl	80001e8 <__aeabi_uldivmod>
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	4611      	mov	r1, r2
 8007638:	4b38      	ldr	r3, [pc, #224]	; (800771c <UART_SetConfig+0x4e4>)
 800763a:	fba3 2301 	umull	r2, r3, r3, r1
 800763e:	095b      	lsrs	r3, r3, #5
 8007640:	2264      	movs	r2, #100	; 0x64
 8007642:	fb02 f303 	mul.w	r3, r2, r3
 8007646:	1acb      	subs	r3, r1, r3
 8007648:	011b      	lsls	r3, r3, #4
 800764a:	3332      	adds	r3, #50	; 0x32
 800764c:	4a33      	ldr	r2, [pc, #204]	; (800771c <UART_SetConfig+0x4e4>)
 800764e:	fba2 2303 	umull	r2, r3, r2, r3
 8007652:	095b      	lsrs	r3, r3, #5
 8007654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007658:	441c      	add	r4, r3
 800765a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800765e:	2200      	movs	r2, #0
 8007660:	673b      	str	r3, [r7, #112]	; 0x70
 8007662:	677a      	str	r2, [r7, #116]	; 0x74
 8007664:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007668:	4642      	mov	r2, r8
 800766a:	464b      	mov	r3, r9
 800766c:	1891      	adds	r1, r2, r2
 800766e:	60b9      	str	r1, [r7, #8]
 8007670:	415b      	adcs	r3, r3
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007678:	4641      	mov	r1, r8
 800767a:	1851      	adds	r1, r2, r1
 800767c:	6039      	str	r1, [r7, #0]
 800767e:	4649      	mov	r1, r9
 8007680:	414b      	adcs	r3, r1
 8007682:	607b      	str	r3, [r7, #4]
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	f04f 0300 	mov.w	r3, #0
 800768c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007690:	4659      	mov	r1, fp
 8007692:	00cb      	lsls	r3, r1, #3
 8007694:	4651      	mov	r1, sl
 8007696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800769a:	4651      	mov	r1, sl
 800769c:	00ca      	lsls	r2, r1, #3
 800769e:	4610      	mov	r0, r2
 80076a0:	4619      	mov	r1, r3
 80076a2:	4603      	mov	r3, r0
 80076a4:	4642      	mov	r2, r8
 80076a6:	189b      	adds	r3, r3, r2
 80076a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80076aa:	464b      	mov	r3, r9
 80076ac:	460a      	mov	r2, r1
 80076ae:	eb42 0303 	adc.w	r3, r2, r3
 80076b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	663b      	str	r3, [r7, #96]	; 0x60
 80076be:	667a      	str	r2, [r7, #100]	; 0x64
 80076c0:	f04f 0200 	mov.w	r2, #0
 80076c4:	f04f 0300 	mov.w	r3, #0
 80076c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80076cc:	4649      	mov	r1, r9
 80076ce:	008b      	lsls	r3, r1, #2
 80076d0:	4641      	mov	r1, r8
 80076d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076d6:	4641      	mov	r1, r8
 80076d8:	008a      	lsls	r2, r1, #2
 80076da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80076de:	f7f8 fd83 	bl	80001e8 <__aeabi_uldivmod>
 80076e2:	4602      	mov	r2, r0
 80076e4:	460b      	mov	r3, r1
 80076e6:	4b0d      	ldr	r3, [pc, #52]	; (800771c <UART_SetConfig+0x4e4>)
 80076e8:	fba3 1302 	umull	r1, r3, r3, r2
 80076ec:	095b      	lsrs	r3, r3, #5
 80076ee:	2164      	movs	r1, #100	; 0x64
 80076f0:	fb01 f303 	mul.w	r3, r1, r3
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	011b      	lsls	r3, r3, #4
 80076f8:	3332      	adds	r3, #50	; 0x32
 80076fa:	4a08      	ldr	r2, [pc, #32]	; (800771c <UART_SetConfig+0x4e4>)
 80076fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007700:	095b      	lsrs	r3, r3, #5
 8007702:	f003 020f 	and.w	r2, r3, #15
 8007706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4422      	add	r2, r4
 800770e:	609a      	str	r2, [r3, #8]
}
 8007710:	bf00      	nop
 8007712:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007716:	46bd      	mov	sp, r7
 8007718:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800771c:	51eb851f 	.word	0x51eb851f

08007720 <malloc>:
 8007720:	4b02      	ldr	r3, [pc, #8]	; (800772c <malloc+0xc>)
 8007722:	4601      	mov	r1, r0
 8007724:	6818      	ldr	r0, [r3, #0]
 8007726:	f000 b82b 	b.w	8007780 <_malloc_r>
 800772a:	bf00      	nop
 800772c:	20000088 	.word	0x20000088

08007730 <free>:
 8007730:	4b02      	ldr	r3, [pc, #8]	; (800773c <free+0xc>)
 8007732:	4601      	mov	r1, r0
 8007734:	6818      	ldr	r0, [r3, #0]
 8007736:	f000 b979 	b.w	8007a2c <_free_r>
 800773a:	bf00      	nop
 800773c:	20000088 	.word	0x20000088

08007740 <sbrk_aligned>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	4e0e      	ldr	r6, [pc, #56]	; (800777c <sbrk_aligned+0x3c>)
 8007744:	460c      	mov	r4, r1
 8007746:	6831      	ldr	r1, [r6, #0]
 8007748:	4605      	mov	r5, r0
 800774a:	b911      	cbnz	r1, 8007752 <sbrk_aligned+0x12>
 800774c:	f000 f924 	bl	8007998 <_sbrk_r>
 8007750:	6030      	str	r0, [r6, #0]
 8007752:	4621      	mov	r1, r4
 8007754:	4628      	mov	r0, r5
 8007756:	f000 f91f 	bl	8007998 <_sbrk_r>
 800775a:	1c43      	adds	r3, r0, #1
 800775c:	d00a      	beq.n	8007774 <sbrk_aligned+0x34>
 800775e:	1cc4      	adds	r4, r0, #3
 8007760:	f024 0403 	bic.w	r4, r4, #3
 8007764:	42a0      	cmp	r0, r4
 8007766:	d007      	beq.n	8007778 <sbrk_aligned+0x38>
 8007768:	1a21      	subs	r1, r4, r0
 800776a:	4628      	mov	r0, r5
 800776c:	f000 f914 	bl	8007998 <_sbrk_r>
 8007770:	3001      	adds	r0, #1
 8007772:	d101      	bne.n	8007778 <sbrk_aligned+0x38>
 8007774:	f04f 34ff 	mov.w	r4, #4294967295
 8007778:	4620      	mov	r0, r4
 800777a:	bd70      	pop	{r4, r5, r6, pc}
 800777c:	20000f14 	.word	0x20000f14

08007780 <_malloc_r>:
 8007780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007784:	1ccd      	adds	r5, r1, #3
 8007786:	f025 0503 	bic.w	r5, r5, #3
 800778a:	3508      	adds	r5, #8
 800778c:	2d0c      	cmp	r5, #12
 800778e:	bf38      	it	cc
 8007790:	250c      	movcc	r5, #12
 8007792:	2d00      	cmp	r5, #0
 8007794:	4607      	mov	r7, r0
 8007796:	db01      	blt.n	800779c <_malloc_r+0x1c>
 8007798:	42a9      	cmp	r1, r5
 800779a:	d905      	bls.n	80077a8 <_malloc_r+0x28>
 800779c:	230c      	movs	r3, #12
 800779e:	603b      	str	r3, [r7, #0]
 80077a0:	2600      	movs	r6, #0
 80077a2:	4630      	mov	r0, r6
 80077a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800787c <_malloc_r+0xfc>
 80077ac:	f000 f868 	bl	8007880 <__malloc_lock>
 80077b0:	f8d8 3000 	ldr.w	r3, [r8]
 80077b4:	461c      	mov	r4, r3
 80077b6:	bb5c      	cbnz	r4, 8007810 <_malloc_r+0x90>
 80077b8:	4629      	mov	r1, r5
 80077ba:	4638      	mov	r0, r7
 80077bc:	f7ff ffc0 	bl	8007740 <sbrk_aligned>
 80077c0:	1c43      	adds	r3, r0, #1
 80077c2:	4604      	mov	r4, r0
 80077c4:	d155      	bne.n	8007872 <_malloc_r+0xf2>
 80077c6:	f8d8 4000 	ldr.w	r4, [r8]
 80077ca:	4626      	mov	r6, r4
 80077cc:	2e00      	cmp	r6, #0
 80077ce:	d145      	bne.n	800785c <_malloc_r+0xdc>
 80077d0:	2c00      	cmp	r4, #0
 80077d2:	d048      	beq.n	8007866 <_malloc_r+0xe6>
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	4631      	mov	r1, r6
 80077d8:	4638      	mov	r0, r7
 80077da:	eb04 0903 	add.w	r9, r4, r3
 80077de:	f000 f8db 	bl	8007998 <_sbrk_r>
 80077e2:	4581      	cmp	r9, r0
 80077e4:	d13f      	bne.n	8007866 <_malloc_r+0xe6>
 80077e6:	6821      	ldr	r1, [r4, #0]
 80077e8:	1a6d      	subs	r5, r5, r1
 80077ea:	4629      	mov	r1, r5
 80077ec:	4638      	mov	r0, r7
 80077ee:	f7ff ffa7 	bl	8007740 <sbrk_aligned>
 80077f2:	3001      	adds	r0, #1
 80077f4:	d037      	beq.n	8007866 <_malloc_r+0xe6>
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	442b      	add	r3, r5
 80077fa:	6023      	str	r3, [r4, #0]
 80077fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d038      	beq.n	8007876 <_malloc_r+0xf6>
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	42a2      	cmp	r2, r4
 8007808:	d12b      	bne.n	8007862 <_malloc_r+0xe2>
 800780a:	2200      	movs	r2, #0
 800780c:	605a      	str	r2, [r3, #4]
 800780e:	e00f      	b.n	8007830 <_malloc_r+0xb0>
 8007810:	6822      	ldr	r2, [r4, #0]
 8007812:	1b52      	subs	r2, r2, r5
 8007814:	d41f      	bmi.n	8007856 <_malloc_r+0xd6>
 8007816:	2a0b      	cmp	r2, #11
 8007818:	d917      	bls.n	800784a <_malloc_r+0xca>
 800781a:	1961      	adds	r1, r4, r5
 800781c:	42a3      	cmp	r3, r4
 800781e:	6025      	str	r5, [r4, #0]
 8007820:	bf18      	it	ne
 8007822:	6059      	strne	r1, [r3, #4]
 8007824:	6863      	ldr	r3, [r4, #4]
 8007826:	bf08      	it	eq
 8007828:	f8c8 1000 	streq.w	r1, [r8]
 800782c:	5162      	str	r2, [r4, r5]
 800782e:	604b      	str	r3, [r1, #4]
 8007830:	4638      	mov	r0, r7
 8007832:	f104 060b 	add.w	r6, r4, #11
 8007836:	f000 f829 	bl	800788c <__malloc_unlock>
 800783a:	f026 0607 	bic.w	r6, r6, #7
 800783e:	1d23      	adds	r3, r4, #4
 8007840:	1af2      	subs	r2, r6, r3
 8007842:	d0ae      	beq.n	80077a2 <_malloc_r+0x22>
 8007844:	1b9b      	subs	r3, r3, r6
 8007846:	50a3      	str	r3, [r4, r2]
 8007848:	e7ab      	b.n	80077a2 <_malloc_r+0x22>
 800784a:	42a3      	cmp	r3, r4
 800784c:	6862      	ldr	r2, [r4, #4]
 800784e:	d1dd      	bne.n	800780c <_malloc_r+0x8c>
 8007850:	f8c8 2000 	str.w	r2, [r8]
 8007854:	e7ec      	b.n	8007830 <_malloc_r+0xb0>
 8007856:	4623      	mov	r3, r4
 8007858:	6864      	ldr	r4, [r4, #4]
 800785a:	e7ac      	b.n	80077b6 <_malloc_r+0x36>
 800785c:	4634      	mov	r4, r6
 800785e:	6876      	ldr	r6, [r6, #4]
 8007860:	e7b4      	b.n	80077cc <_malloc_r+0x4c>
 8007862:	4613      	mov	r3, r2
 8007864:	e7cc      	b.n	8007800 <_malloc_r+0x80>
 8007866:	230c      	movs	r3, #12
 8007868:	603b      	str	r3, [r7, #0]
 800786a:	4638      	mov	r0, r7
 800786c:	f000 f80e 	bl	800788c <__malloc_unlock>
 8007870:	e797      	b.n	80077a2 <_malloc_r+0x22>
 8007872:	6025      	str	r5, [r4, #0]
 8007874:	e7dc      	b.n	8007830 <_malloc_r+0xb0>
 8007876:	605b      	str	r3, [r3, #4]
 8007878:	deff      	udf	#255	; 0xff
 800787a:	bf00      	nop
 800787c:	20000f10 	.word	0x20000f10

08007880 <__malloc_lock>:
 8007880:	4801      	ldr	r0, [pc, #4]	; (8007888 <__malloc_lock+0x8>)
 8007882:	f000 b8c3 	b.w	8007a0c <__retarget_lock_acquire_recursive>
 8007886:	bf00      	nop
 8007888:	20001054 	.word	0x20001054

0800788c <__malloc_unlock>:
 800788c:	4801      	ldr	r0, [pc, #4]	; (8007894 <__malloc_unlock+0x8>)
 800788e:	f000 b8be 	b.w	8007a0e <__retarget_lock_release_recursive>
 8007892:	bf00      	nop
 8007894:	20001054 	.word	0x20001054

08007898 <memset>:
 8007898:	4402      	add	r2, r0
 800789a:	4603      	mov	r3, r0
 800789c:	4293      	cmp	r3, r2
 800789e:	d100      	bne.n	80078a2 <memset+0xa>
 80078a0:	4770      	bx	lr
 80078a2:	f803 1b01 	strb.w	r1, [r3], #1
 80078a6:	e7f9      	b.n	800789c <memset+0x4>

080078a8 <_init_signal_r>:
 80078a8:	b538      	push	{r3, r4, r5, lr}
 80078aa:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80078ac:	4604      	mov	r4, r0
 80078ae:	b955      	cbnz	r5, 80078c6 <_init_signal_r+0x1e>
 80078b0:	2180      	movs	r1, #128	; 0x80
 80078b2:	f7ff ff65 	bl	8007780 <_malloc_r>
 80078b6:	63e0      	str	r0, [r4, #60]	; 0x3c
 80078b8:	b138      	cbz	r0, 80078ca <_init_signal_r+0x22>
 80078ba:	1f03      	subs	r3, r0, #4
 80078bc:	307c      	adds	r0, #124	; 0x7c
 80078be:	f843 5f04 	str.w	r5, [r3, #4]!
 80078c2:	4283      	cmp	r3, r0
 80078c4:	d1fb      	bne.n	80078be <_init_signal_r+0x16>
 80078c6:	2000      	movs	r0, #0
 80078c8:	bd38      	pop	{r3, r4, r5, pc}
 80078ca:	f04f 30ff 	mov.w	r0, #4294967295
 80078ce:	e7fb      	b.n	80078c8 <_init_signal_r+0x20>

080078d0 <_signal_r>:
 80078d0:	291f      	cmp	r1, #31
 80078d2:	b570      	push	{r4, r5, r6, lr}
 80078d4:	4604      	mov	r4, r0
 80078d6:	460d      	mov	r5, r1
 80078d8:	4616      	mov	r6, r2
 80078da:	d904      	bls.n	80078e6 <_signal_r+0x16>
 80078dc:	2316      	movs	r3, #22
 80078de:	6003      	str	r3, [r0, #0]
 80078e0:	f04f 30ff 	mov.w	r0, #4294967295
 80078e4:	e006      	b.n	80078f4 <_signal_r+0x24>
 80078e6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80078e8:	b12b      	cbz	r3, 80078f6 <_signal_r+0x26>
 80078ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80078ec:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80078f0:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 80078f4:	bd70      	pop	{r4, r5, r6, pc}
 80078f6:	f7ff ffd7 	bl	80078a8 <_init_signal_r>
 80078fa:	2800      	cmp	r0, #0
 80078fc:	d0f5      	beq.n	80078ea <_signal_r+0x1a>
 80078fe:	e7ef      	b.n	80078e0 <_signal_r+0x10>

08007900 <_raise_r>:
 8007900:	291f      	cmp	r1, #31
 8007902:	b538      	push	{r3, r4, r5, lr}
 8007904:	4604      	mov	r4, r0
 8007906:	460d      	mov	r5, r1
 8007908:	d904      	bls.n	8007914 <_raise_r+0x14>
 800790a:	2316      	movs	r3, #22
 800790c:	6003      	str	r3, [r0, #0]
 800790e:	f04f 30ff 	mov.w	r0, #4294967295
 8007912:	bd38      	pop	{r3, r4, r5, pc}
 8007914:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007916:	b112      	cbz	r2, 800791e <_raise_r+0x1e>
 8007918:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800791c:	b94b      	cbnz	r3, 8007932 <_raise_r+0x32>
 800791e:	4620      	mov	r0, r4
 8007920:	f000 f838 	bl	8007994 <_getpid_r>
 8007924:	462a      	mov	r2, r5
 8007926:	4601      	mov	r1, r0
 8007928:	4620      	mov	r0, r4
 800792a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800792e:	f000 b81f 	b.w	8007970 <_kill_r>
 8007932:	2b01      	cmp	r3, #1
 8007934:	d00a      	beq.n	800794c <_raise_r+0x4c>
 8007936:	1c59      	adds	r1, r3, #1
 8007938:	d103      	bne.n	8007942 <_raise_r+0x42>
 800793a:	2316      	movs	r3, #22
 800793c:	6003      	str	r3, [r0, #0]
 800793e:	2001      	movs	r0, #1
 8007940:	e7e7      	b.n	8007912 <_raise_r+0x12>
 8007942:	2400      	movs	r4, #0
 8007944:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007948:	4628      	mov	r0, r5
 800794a:	4798      	blx	r3
 800794c:	2000      	movs	r0, #0
 800794e:	e7e0      	b.n	8007912 <_raise_r+0x12>

08007950 <raise>:
 8007950:	4b02      	ldr	r3, [pc, #8]	; (800795c <raise+0xc>)
 8007952:	4601      	mov	r1, r0
 8007954:	6818      	ldr	r0, [r3, #0]
 8007956:	f7ff bfd3 	b.w	8007900 <_raise_r>
 800795a:	bf00      	nop
 800795c:	20000088 	.word	0x20000088

08007960 <signal>:
 8007960:	4b02      	ldr	r3, [pc, #8]	; (800796c <signal+0xc>)
 8007962:	460a      	mov	r2, r1
 8007964:	4601      	mov	r1, r0
 8007966:	6818      	ldr	r0, [r3, #0]
 8007968:	f7ff bfb2 	b.w	80078d0 <_signal_r>
 800796c:	20000088 	.word	0x20000088

08007970 <_kill_r>:
 8007970:	b538      	push	{r3, r4, r5, lr}
 8007972:	4d07      	ldr	r5, [pc, #28]	; (8007990 <_kill_r+0x20>)
 8007974:	2300      	movs	r3, #0
 8007976:	4604      	mov	r4, r0
 8007978:	4608      	mov	r0, r1
 800797a:	4611      	mov	r1, r2
 800797c:	602b      	str	r3, [r5, #0]
 800797e:	f7fb f805 	bl	800298c <_kill>
 8007982:	1c43      	adds	r3, r0, #1
 8007984:	d102      	bne.n	800798c <_kill_r+0x1c>
 8007986:	682b      	ldr	r3, [r5, #0]
 8007988:	b103      	cbz	r3, 800798c <_kill_r+0x1c>
 800798a:	6023      	str	r3, [r4, #0]
 800798c:	bd38      	pop	{r3, r4, r5, pc}
 800798e:	bf00      	nop
 8007990:	20001050 	.word	0x20001050

08007994 <_getpid_r>:
 8007994:	f7fa bff2 	b.w	800297c <_getpid>

08007998 <_sbrk_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	4d06      	ldr	r5, [pc, #24]	; (80079b4 <_sbrk_r+0x1c>)
 800799c:	2300      	movs	r3, #0
 800799e:	4604      	mov	r4, r0
 80079a0:	4608      	mov	r0, r1
 80079a2:	602b      	str	r3, [r5, #0]
 80079a4:	f7fb f802 	bl	80029ac <_sbrk>
 80079a8:	1c43      	adds	r3, r0, #1
 80079aa:	d102      	bne.n	80079b2 <_sbrk_r+0x1a>
 80079ac:	682b      	ldr	r3, [r5, #0]
 80079ae:	b103      	cbz	r3, 80079b2 <_sbrk_r+0x1a>
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	bd38      	pop	{r3, r4, r5, pc}
 80079b4:	20001050 	.word	0x20001050

080079b8 <__errno>:
 80079b8:	4b01      	ldr	r3, [pc, #4]	; (80079c0 <__errno+0x8>)
 80079ba:	6818      	ldr	r0, [r3, #0]
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	20000088 	.word	0x20000088

080079c4 <__libc_init_array>:
 80079c4:	b570      	push	{r4, r5, r6, lr}
 80079c6:	4d0d      	ldr	r5, [pc, #52]	; (80079fc <__libc_init_array+0x38>)
 80079c8:	4c0d      	ldr	r4, [pc, #52]	; (8007a00 <__libc_init_array+0x3c>)
 80079ca:	1b64      	subs	r4, r4, r5
 80079cc:	10a4      	asrs	r4, r4, #2
 80079ce:	2600      	movs	r6, #0
 80079d0:	42a6      	cmp	r6, r4
 80079d2:	d109      	bne.n	80079e8 <__libc_init_array+0x24>
 80079d4:	4d0b      	ldr	r5, [pc, #44]	; (8007a04 <__libc_init_array+0x40>)
 80079d6:	4c0c      	ldr	r4, [pc, #48]	; (8007a08 <__libc_init_array+0x44>)
 80079d8:	f000 f874 	bl	8007ac4 <_init>
 80079dc:	1b64      	subs	r4, r4, r5
 80079de:	10a4      	asrs	r4, r4, #2
 80079e0:	2600      	movs	r6, #0
 80079e2:	42a6      	cmp	r6, r4
 80079e4:	d105      	bne.n	80079f2 <__libc_init_array+0x2e>
 80079e6:	bd70      	pop	{r4, r5, r6, pc}
 80079e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ec:	4798      	blx	r3
 80079ee:	3601      	adds	r6, #1
 80079f0:	e7ee      	b.n	80079d0 <__libc_init_array+0xc>
 80079f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079f6:	4798      	blx	r3
 80079f8:	3601      	adds	r6, #1
 80079fa:	e7f2      	b.n	80079e2 <__libc_init_array+0x1e>
 80079fc:	08007c0c 	.word	0x08007c0c
 8007a00:	08007c0c 	.word	0x08007c0c
 8007a04:	08007c0c 	.word	0x08007c0c
 8007a08:	08007c10 	.word	0x08007c10

08007a0c <__retarget_lock_acquire_recursive>:
 8007a0c:	4770      	bx	lr

08007a0e <__retarget_lock_release_recursive>:
 8007a0e:	4770      	bx	lr

08007a10 <memcpy>:
 8007a10:	440a      	add	r2, r1
 8007a12:	4291      	cmp	r1, r2
 8007a14:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a18:	d100      	bne.n	8007a1c <memcpy+0xc>
 8007a1a:	4770      	bx	lr
 8007a1c:	b510      	push	{r4, lr}
 8007a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a26:	4291      	cmp	r1, r2
 8007a28:	d1f9      	bne.n	8007a1e <memcpy+0xe>
 8007a2a:	bd10      	pop	{r4, pc}

08007a2c <_free_r>:
 8007a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a2e:	2900      	cmp	r1, #0
 8007a30:	d044      	beq.n	8007abc <_free_r+0x90>
 8007a32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a36:	9001      	str	r0, [sp, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f1a1 0404 	sub.w	r4, r1, #4
 8007a3e:	bfb8      	it	lt
 8007a40:	18e4      	addlt	r4, r4, r3
 8007a42:	f7ff ff1d 	bl	8007880 <__malloc_lock>
 8007a46:	4a1e      	ldr	r2, [pc, #120]	; (8007ac0 <_free_r+0x94>)
 8007a48:	9801      	ldr	r0, [sp, #4]
 8007a4a:	6813      	ldr	r3, [r2, #0]
 8007a4c:	b933      	cbnz	r3, 8007a5c <_free_r+0x30>
 8007a4e:	6063      	str	r3, [r4, #4]
 8007a50:	6014      	str	r4, [r2, #0]
 8007a52:	b003      	add	sp, #12
 8007a54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a58:	f7ff bf18 	b.w	800788c <__malloc_unlock>
 8007a5c:	42a3      	cmp	r3, r4
 8007a5e:	d908      	bls.n	8007a72 <_free_r+0x46>
 8007a60:	6825      	ldr	r5, [r4, #0]
 8007a62:	1961      	adds	r1, r4, r5
 8007a64:	428b      	cmp	r3, r1
 8007a66:	bf01      	itttt	eq
 8007a68:	6819      	ldreq	r1, [r3, #0]
 8007a6a:	685b      	ldreq	r3, [r3, #4]
 8007a6c:	1949      	addeq	r1, r1, r5
 8007a6e:	6021      	streq	r1, [r4, #0]
 8007a70:	e7ed      	b.n	8007a4e <_free_r+0x22>
 8007a72:	461a      	mov	r2, r3
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	b10b      	cbz	r3, 8007a7c <_free_r+0x50>
 8007a78:	42a3      	cmp	r3, r4
 8007a7a:	d9fa      	bls.n	8007a72 <_free_r+0x46>
 8007a7c:	6811      	ldr	r1, [r2, #0]
 8007a7e:	1855      	adds	r5, r2, r1
 8007a80:	42a5      	cmp	r5, r4
 8007a82:	d10b      	bne.n	8007a9c <_free_r+0x70>
 8007a84:	6824      	ldr	r4, [r4, #0]
 8007a86:	4421      	add	r1, r4
 8007a88:	1854      	adds	r4, r2, r1
 8007a8a:	42a3      	cmp	r3, r4
 8007a8c:	6011      	str	r1, [r2, #0]
 8007a8e:	d1e0      	bne.n	8007a52 <_free_r+0x26>
 8007a90:	681c      	ldr	r4, [r3, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	6053      	str	r3, [r2, #4]
 8007a96:	440c      	add	r4, r1
 8007a98:	6014      	str	r4, [r2, #0]
 8007a9a:	e7da      	b.n	8007a52 <_free_r+0x26>
 8007a9c:	d902      	bls.n	8007aa4 <_free_r+0x78>
 8007a9e:	230c      	movs	r3, #12
 8007aa0:	6003      	str	r3, [r0, #0]
 8007aa2:	e7d6      	b.n	8007a52 <_free_r+0x26>
 8007aa4:	6825      	ldr	r5, [r4, #0]
 8007aa6:	1961      	adds	r1, r4, r5
 8007aa8:	428b      	cmp	r3, r1
 8007aaa:	bf04      	itt	eq
 8007aac:	6819      	ldreq	r1, [r3, #0]
 8007aae:	685b      	ldreq	r3, [r3, #4]
 8007ab0:	6063      	str	r3, [r4, #4]
 8007ab2:	bf04      	itt	eq
 8007ab4:	1949      	addeq	r1, r1, r5
 8007ab6:	6021      	streq	r1, [r4, #0]
 8007ab8:	6054      	str	r4, [r2, #4]
 8007aba:	e7ca      	b.n	8007a52 <_free_r+0x26>
 8007abc:	b003      	add	sp, #12
 8007abe:	bd30      	pop	{r4, r5, pc}
 8007ac0:	20000f10 	.word	0x20000f10

08007ac4 <_init>:
 8007ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac6:	bf00      	nop
 8007ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aca:	bc08      	pop	{r3}
 8007acc:	469e      	mov	lr, r3
 8007ace:	4770      	bx	lr

08007ad0 <_fini>:
 8007ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad2:	bf00      	nop
 8007ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ad6:	bc08      	pop	{r3}
 8007ad8:	469e      	mov	lr, r3
 8007ada:	4770      	bx	lr
