
F411_D1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c20  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08004db8  08004db8  00014db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ee0  08004ee0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ee0  08004ee0  00014ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ee8  08004ee8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ee8  08004ee8  00014ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004eec  08004eec  00014eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fcc  2000008c  08004f7c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001058  08004f7c  00021058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028913  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049e5  00000000  00000000  00048a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00018a0f  00000000  00000000  0004d3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001080  00000000  00000000  00065e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000295a  00000000  00000000  00066e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022274  00000000  00000000  000697e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007584  00000000  00000000  0008ba56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003da0  00000000  00000000  00092fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00096d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000008c 	.word	0x2000008c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004da0 	.word	0x08004da0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000090 	.word	0x20000090
 80001d4:	08004da0 	.word	0x08004da0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b970 	b.w	80004e0 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	460f      	mov	r7, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4694      	mov	ip, r2
 800022c:	d965      	bls.n	80002fa <__udivmoddi4+0xe2>
 800022e:	fab2 f382 	clz	r3, r2
 8000232:	b143      	cbz	r3, 8000246 <__udivmoddi4+0x2e>
 8000234:	fa02 fc03 	lsl.w	ip, r2, r3
 8000238:	f1c3 0220 	rsb	r2, r3, #32
 800023c:	409f      	lsls	r7, r3
 800023e:	fa20 f202 	lsr.w	r2, r0, r2
 8000242:	4317      	orrs	r7, r2
 8000244:	409c      	lsls	r4, r3
 8000246:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024a:	fa1f f58c 	uxth.w	r5, ip
 800024e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000252:	0c22      	lsrs	r2, r4, #16
 8000254:	fb0e 7711 	mls	r7, lr, r1, r7
 8000258:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800025c:	fb01 f005 	mul.w	r0, r1, r5
 8000260:	4290      	cmp	r0, r2
 8000262:	d90a      	bls.n	800027a <__udivmoddi4+0x62>
 8000264:	eb1c 0202 	adds.w	r2, ip, r2
 8000268:	f101 37ff 	add.w	r7, r1, #4294967295
 800026c:	f080 811c 	bcs.w	80004a8 <__udivmoddi4+0x290>
 8000270:	4290      	cmp	r0, r2
 8000272:	f240 8119 	bls.w	80004a8 <__udivmoddi4+0x290>
 8000276:	3902      	subs	r1, #2
 8000278:	4462      	add	r2, ip
 800027a:	1a12      	subs	r2, r2, r0
 800027c:	b2a4      	uxth	r4, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028a:	fb00 f505 	mul.w	r5, r0, r5
 800028e:	42a5      	cmp	r5, r4
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x90>
 8000292:	eb1c 0404 	adds.w	r4, ip, r4
 8000296:	f100 32ff 	add.w	r2, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x294>
 800029e:	42a5      	cmp	r5, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x294>
 80002a4:	4464      	add	r4, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11e      	cbz	r6, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40dc      	lsrs	r4, r3
 80002b4:	2300      	movs	r3, #0
 80002b6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0xbc>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80ed 	beq.w	80004a2 <__udivmoddi4+0x28a>
 80002c8:	2100      	movs	r1, #0
 80002ca:	e9c6 0500 	strd	r0, r5, [r6]
 80002ce:	4608      	mov	r0, r1
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	fab3 f183 	clz	r1, r3
 80002d8:	2900      	cmp	r1, #0
 80002da:	d149      	bne.n	8000370 <__udivmoddi4+0x158>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	d302      	bcc.n	80002e6 <__udivmoddi4+0xce>
 80002e0:	4282      	cmp	r2, r0
 80002e2:	f200 80f8 	bhi.w	80004d6 <__udivmoddi4+0x2be>
 80002e6:	1a84      	subs	r4, r0, r2
 80002e8:	eb65 0203 	sbc.w	r2, r5, r3
 80002ec:	2001      	movs	r0, #1
 80002ee:	4617      	mov	r7, r2
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d0e2      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	e9c6 4700 	strd	r4, r7, [r6]
 80002f8:	e7df      	b.n	80002ba <__udivmoddi4+0xa2>
 80002fa:	b902      	cbnz	r2, 80002fe <__udivmoddi4+0xe6>
 80002fc:	deff      	udf	#255	; 0xff
 80002fe:	fab2 f382 	clz	r3, r2
 8000302:	2b00      	cmp	r3, #0
 8000304:	f040 8090 	bne.w	8000428 <__udivmoddi4+0x210>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2101      	movs	r1, #1
 8000314:	fbb2 f5f7 	udiv	r5, r2, r7
 8000318:	fb07 2015 	mls	r0, r7, r5, r2
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000322:	fb0e f005 	mul.w	r0, lr, r5
 8000326:	4290      	cmp	r0, r2
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x124>
 800032a:	eb1c 0202 	adds.w	r2, ip, r2
 800032e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4290      	cmp	r0, r2
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2b8>
 800033a:	4645      	mov	r5, r8
 800033c:	1a12      	subs	r2, r2, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb2 f0f7 	udiv	r0, r2, r7
 8000344:	fb07 2210 	mls	r2, r7, r0, r2
 8000348:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x14e>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 32ff 	add.w	r2, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x14c>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2c2>
 8000364:	4610      	mov	r0, r2
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036e:	e79f      	b.n	80002b0 <__udivmoddi4+0x98>
 8000370:	f1c1 0720 	rsb	r7, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa05 f401 	lsl.w	r4, r5, r1
 8000382:	fa20 f307 	lsr.w	r3, r0, r7
 8000386:	40fd      	lsrs	r5, r7
 8000388:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038c:	4323      	orrs	r3, r4
 800038e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	fb09 5518 	mls	r5, r9, r8, r5
 800039a:	0c1c      	lsrs	r4, r3, #16
 800039c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a0:	fb08 f50e 	mul.w	r5, r8, lr
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	fa00 f001 	lsl.w	r0, r0, r1
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2b4>
 80003bc:	42a5      	cmp	r5, r4
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2b4>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4464      	add	r4, ip
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	b29d      	uxth	r5, r3
 80003cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d0:	fb09 4413 	mls	r4, r9, r3, r4
 80003d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2ac>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2ac>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fba3 9502 	umull	r9, r5, r3, r2
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	42ac      	cmp	r4, r5
 8000400:	46c8      	mov	r8, r9
 8000402:	46ae      	mov	lr, r5
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x29c>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x298>
 8000408:	b156      	cbz	r6, 8000420 <__udivmoddi4+0x208>
 800040a:	ebb0 0208 	subs.w	r2, r0, r8
 800040e:	eb64 040e 	sbc.w	r4, r4, lr
 8000412:	fa04 f707 	lsl.w	r7, r4, r7
 8000416:	40ca      	lsrs	r2, r1
 8000418:	40cc      	lsrs	r4, r1
 800041a:	4317      	orrs	r7, r2
 800041c:	e9c6 7400 	strd	r7, r4, [r6]
 8000420:	4618      	mov	r0, r3
 8000422:	2100      	movs	r1, #0
 8000424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000428:	f1c3 0120 	rsb	r1, r3, #32
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	fa20 f201 	lsr.w	r2, r0, r1
 8000434:	fa25 f101 	lsr.w	r1, r5, r1
 8000438:	409d      	lsls	r5, r3
 800043a:	432a      	orrs	r2, r5
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb1 f0f7 	udiv	r0, r1, r7
 8000448:	fb07 1510 	mls	r5, r7, r0, r1
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000452:	fb00 f50e 	mul.w	r5, r0, lr
 8000456:	428d      	cmp	r5, r1
 8000458:	fa04 f403 	lsl.w	r4, r4, r3
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x258>
 800045e:	eb1c 0101 	adds.w	r1, ip, r1
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 8000468:	428d      	cmp	r5, r1
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800046c:	3802      	subs	r0, #2
 800046e:	4461      	add	r1, ip
 8000470:	1b49      	subs	r1, r1, r5
 8000472:	b292      	uxth	r2, r2
 8000474:	fbb1 f5f7 	udiv	r5, r1, r7
 8000478:	fb07 1115 	mls	r1, r7, r5, r1
 800047c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000480:	fb05 f10e 	mul.w	r1, r5, lr
 8000484:	4291      	cmp	r1, r2
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x282>
 8000488:	eb1c 0202 	adds.w	r2, ip, r2
 800048c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 8000492:	4291      	cmp	r1, r2
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000496:	3d02      	subs	r5, #2
 8000498:	4462      	add	r2, ip
 800049a:	1a52      	subs	r2, r2, r1
 800049c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0xfc>
 80004a2:	4631      	mov	r1, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e708      	b.n	80002ba <__udivmoddi4+0xa2>
 80004a8:	4639      	mov	r1, r7
 80004aa:	e6e6      	b.n	800027a <__udivmoddi4+0x62>
 80004ac:	4610      	mov	r0, r2
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x90>
 80004b0:	4548      	cmp	r0, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004bc:	3b01      	subs	r3, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004c0:	4645      	mov	r5, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x282>
 80004c4:	462b      	mov	r3, r5
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x258>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004d0:	3d02      	subs	r5, #2
 80004d2:	4462      	add	r2, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x124>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e70a      	b.n	80002f0 <__udivmoddi4+0xd8>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x14e>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <receive>:
			(const uint8_t*) fc_bridge.port->data_out,
			strlen(fc_bridge.port->data_out));
}

static HAL_StatusTypeDef receive() {
	return HAL_UART_Receive_IT(fc_bridge.fc_uart, fc_bridge.rx_data,
 80004e4:	4902      	ldr	r1, [pc, #8]	; (80004f0 <receive+0xc>)
 80004e6:	2223      	movs	r2, #35	; 0x23
 80004e8:	f851 0b0c 	ldr.w	r0, [r1], #12
 80004ec:	f004 b8d2 	b.w	8004694 <HAL_UART_Receive_IT>
 80004f0:	20000000 	.word	0x20000000

080004f4 <transmit>:
static HAL_StatusTypeDef transmit() {
 80004f4:	b510      	push	{r4, lr}
			(const uint8_t*) fc_bridge.port->data_out,
 80004f6:	4c08      	ldr	r4, [pc, #32]	; (8000518 <transmit+0x24>)
 80004f8:	68a3      	ldr	r3, [r4, #8]
 80004fa:	6859      	ldr	r1, [r3, #4]
static HAL_StatusTypeDef transmit() {
 80004fc:	b082      	sub	sp, #8
			strlen(fc_bridge.port->data_out));
 80004fe:	4608      	mov	r0, r1
 8000500:	9101      	str	r1, [sp, #4]
 8000502:	f7ff fe69 	bl	80001d8 <strlen>
	return HAL_UART_Transmit_IT(fc_bridge.fc_uart,
 8000506:	9901      	ldr	r1, [sp, #4]
 8000508:	b282      	uxth	r2, r0
 800050a:	6820      	ldr	r0, [r4, #0]
}
 800050c:	b002      	add	sp, #8
 800050e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return HAL_UART_Transmit_IT(fc_bridge.fc_uart,
 8000512:	f004 b89d 	b.w	8004650 <HAL_UART_Transmit_IT>
 8000516:	bf00      	nop
 8000518:	20000000 	.word	0x20000000

0800051c <bridge_rc_motor_rx_callback>:
			get_imu()->running = true;
		}
	}
}

static void bridge_rc_motor_rx_callback(UART_HandleTypeDef *huart) {
 800051c:	b538      	push	{r3, r4, r5, lr}
	bool data_valid = bridge_validate_data((char*) fc_bridge.rx_data,
 800051e:	4c17      	ldr	r4, [pc, #92]	; (800057c <bridge_rc_motor_rx_callback+0x60>)
 8000520:	2123      	movs	r1, #35	; 0x23
 8000522:	f104 000c 	add.w	r0, r4, #12
 8000526:	f001 fc6b 	bl	8001e00 <bridge_validate_data>
	BRIDGE_DATA_SIZE);
	if (data_valid) {
 800052a:	b940      	cbnz	r0, 800053e <bridge_rc_motor_rx_callback+0x22>
		free(fc_bridge.port->data_in); // deallocate memory
	}
	// TODO 1 get radio data from queues

	// TODO process Servo channel GEAR
	HAL_StatusTypeDef status_transmit = fc_bridge.port->transmit(); // send radio data of motors to flight controller D2
 800052c:	68a3      	ldr	r3, [r4, #8]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	4798      	blx	r3
	if (HAL_OK != status_transmit) {
 8000532:	b998      	cbnz	r0, 800055c <bridge_rc_motor_rx_callback+0x40>
		raise(bridge_get_transmit_sigint());
	}
	HAL_StatusTypeDef status_receive = fc_bridge.port->receive();
 8000534:	68a3      	ldr	r3, [r4, #8]
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	4798      	blx	r3
	if (HAL_OK != status_receive) {
 800053a:	b9c0      	cbnz	r0, 800056e <bridge_rc_motor_rx_callback+0x52>
		raise(bridge_get_receive_sigint());
	}
}
 800053c:	bd38      	pop	{r3, r4, r5, pc}
		fc_bridge.port->data_in = bridge_format_string(
 800053e:	f104 000c 	add.w	r0, r4, #12
 8000542:	68a5      	ldr	r5, [r4, #8]
 8000544:	f001 fc66 	bl	8001e14 <bridge_format_string>
		free(fc_bridge.port->data_in); // deallocate memory
 8000548:	68a3      	ldr	r3, [r4, #8]
		fc_bridge.port->data_in = bridge_format_string(
 800054a:	6028      	str	r0, [r5, #0]
		free(fc_bridge.port->data_in); // deallocate memory
 800054c:	6818      	ldr	r0, [r3, #0]
 800054e:	f004 fa5d 	bl	8004a0c <free>
	HAL_StatusTypeDef status_transmit = fc_bridge.port->transmit(); // send radio data of motors to flight controller D2
 8000552:	68a3      	ldr	r3, [r4, #8]
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	4798      	blx	r3
	if (HAL_OK != status_transmit) {
 8000558:	2800      	cmp	r0, #0
 800055a:	d0eb      	beq.n	8000534 <bridge_rc_motor_rx_callback+0x18>
		raise(bridge_get_transmit_sigint());
 800055c:	f001 fc94 	bl	8001e88 <bridge_get_transmit_sigint>
 8000560:	f004 fb64 	bl	8004c2c <raise>
	HAL_StatusTypeDef status_receive = fc_bridge.port->receive();
 8000564:	68a3      	ldr	r3, [r4, #8]
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	4798      	blx	r3
	if (HAL_OK != status_receive) {
 800056a:	2800      	cmp	r0, #0
 800056c:	d0e6      	beq.n	800053c <bridge_rc_motor_rx_callback+0x20>
		raise(bridge_get_receive_sigint());
 800056e:	f001 fc8f 	bl	8001e90 <bridge_get_receive_sigint>
}
 8000572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		raise(bridge_get_receive_sigint());
 8000576:	f004 bb59 	b.w	8004c2c <raise>
 800057a:	bf00      	nop
 800057c:	20000000 	.word	0x20000000

08000580 <bridge_signal_transmit_handler>:
inline static void bridge_signal_transmit_handler(int status) {
 8000580:	b510      	push	{r4, lr}
	fc_bridge.port->signalStatusTransmit = status;
 8000582:	4c0c      	ldr	r4, [pc, #48]	; (80005b4 <bridge_signal_transmit_handler+0x34>)
 8000584:	68a3      	ldr	r3, [r4, #8]
	HAL_StatusTypeDef status_transmit = fc_bridge.port->transmit(); // try retransmission
 8000586:	689a      	ldr	r2, [r3, #8]
	fc_bridge.port->signalStatusTransmit = status;
 8000588:	6158      	str	r0, [r3, #20]
	HAL_StatusTypeDef status_transmit = fc_bridge.port->transmit(); // try retransmission
 800058a:	4790      	blx	r2
	if (HAL_OK != status_transmit && !get_imu()->running) {
 800058c:	b900      	cbnz	r0, 8000590 <bridge_signal_transmit_handler+0x10>
}
 800058e:	bd10      	pop	{r4, pc}
	if (HAL_OK != status_transmit && !get_imu()->running) {
 8000590:	f000 f974 	bl	800087c <get_imu>
 8000594:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1f8      	bne.n	800058e <bridge_signal_transmit_handler+0xe>
		if (BMI160_OK == imu_init(fc_bridge.imu_i2c)) {
 800059c:	6860      	ldr	r0, [r4, #4]
 800059e:	f000 f92f 	bl	8000800 <imu_init>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	d1f3      	bne.n	800058e <bridge_signal_transmit_handler+0xe>
			get_imu()->running = true;
 80005a6:	f000 f969 	bl	800087c <get_imu>
 80005aa:	2301      	movs	r3, #1
 80005ac:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
}
 80005b0:	bd10      	pop	{r4, pc}
 80005b2:	bf00      	nop
 80005b4:	20000000 	.word	0x20000000

080005b8 <bridge_signal_receive_handler>:
inline static void bridge_signal_receive_handler(int status) {
 80005b8:	b510      	push	{r4, lr}
	fc_bridge.port->signalStatusReceive = status;
 80005ba:	4c0c      	ldr	r4, [pc, #48]	; (80005ec <bridge_signal_receive_handler+0x34>)
 80005bc:	68a3      	ldr	r3, [r4, #8]
	HAL_StatusTypeDef status_receive = fc_bridge.port->receive(); // try retransmission
 80005be:	68da      	ldr	r2, [r3, #12]
	fc_bridge.port->signalStatusReceive = status;
 80005c0:	6118      	str	r0, [r3, #16]
	HAL_StatusTypeDef status_receive = fc_bridge.port->receive(); // try retransmission
 80005c2:	4790      	blx	r2
	if (HAL_OK != status_receive && !get_imu()->running) {
 80005c4:	b900      	cbnz	r0, 80005c8 <bridge_signal_receive_handler+0x10>
}
 80005c6:	bd10      	pop	{r4, pc}
	if (HAL_OK != status_receive && !get_imu()->running) {
 80005c8:	f000 f958 	bl	800087c <get_imu>
 80005cc:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d1f8      	bne.n	80005c6 <bridge_signal_receive_handler+0xe>
		if (BMI160_OK == imu_init(fc_bridge.imu_i2c)) {
 80005d4:	6860      	ldr	r0, [r4, #4]
 80005d6:	f000 f913 	bl	8000800 <imu_init>
 80005da:	2800      	cmp	r0, #0
 80005dc:	d1f3      	bne.n	80005c6 <bridge_signal_receive_handler+0xe>
			get_imu()->running = true;
 80005de:	f000 f94d 	bl	800087c <get_imu>
 80005e2:	2301      	movs	r3, #1
 80005e4:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
}
 80005e8:	bd10      	pop	{r4, pc}
 80005ea:	bf00      	nop
 80005ec:	20000000 	.word	0x20000000

080005f0 <bridge_init>:
	if (queue_data_available(get_speed_queue_rc())) {
		queue_dequeue(get_speed_queue_rc(), &data);
	}
}

HAL_StatusTypeDef bridge_init(UART_HandleTypeDef *uart, I2C_HandleTypeDef *i2c) {
 80005f0:	b538      	push	{r3, r4, r5, lr}
 80005f2:	4604      	mov	r4, r0
 80005f4:	460d      	mov	r5, r1
	signal(bridge_get_receive_sigint(), &bridge_signal_receive_handler);
 80005f6:	f001 fc4b 	bl	8001e90 <bridge_get_receive_sigint>
 80005fa:	490b      	ldr	r1, [pc, #44]	; (8000628 <bridge_init+0x38>)
 80005fc:	f004 fb1e 	bl	8004c3c <signal>
	signal(bridge_get_transmit_sigint(), &bridge_signal_transmit_handler);
 8000600:	f001 fc42 	bl	8001e88 <bridge_get_transmit_sigint>
 8000604:	4909      	ldr	r1, [pc, #36]	; (800062c <bridge_init+0x3c>)
 8000606:	f004 fb19 	bl	8004c3c <signal>
	fc_bridge.fc_uart = uart;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <bridge_init+0x40>)
	fc_bridge.imu_i2c = i2c;
	fc_bridge.port->transmit = &transmit;
 800060c:	4909      	ldr	r1, [pc, #36]	; (8000634 <bridge_init+0x44>)
 800060e:	689a      	ldr	r2, [r3, #8]
	fc_bridge.fc_uart = uart;
 8000610:	601c      	str	r4, [r3, #0]
	fc_bridge.port->transmit = &transmit;
 8000612:	6091      	str	r1, [r2, #8]
	fc_bridge.port->receive = &receive;
 8000614:	4908      	ldr	r1, [pc, #32]	; (8000638 <bridge_init+0x48>)
 8000616:	60d1      	str	r1, [r2, #12]
	return HAL_UART_RegisterCallback(fc_bridge.fc_uart,
 8000618:	4620      	mov	r0, r4
	fc_bridge.imu_i2c = i2c;
 800061a:	605d      	str	r5, [r3, #4]
	return HAL_UART_RegisterCallback(fc_bridge.fc_uart,
 800061c:	4a07      	ldr	r2, [pc, #28]	; (800063c <bridge_init+0x4c>)
			HAL_UART_RX_COMPLETE_CB_ID, bridge_rc_motor_rx_callback);
}
 800061e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return HAL_UART_RegisterCallback(fc_bridge.fc_uart,
 8000622:	2103      	movs	r1, #3
 8000624:	f003 bfb4 	b.w	8004590 <HAL_UART_RegisterCallback>
 8000628:	080005b9 	.word	0x080005b9
 800062c:	08000581 	.word	0x08000581
 8000630:	20000000 	.word	0x20000000
 8000634:	080004f5 	.word	0x080004f5
 8000638:	080004e5 	.word	0x080004e5
 800063c:	0800051d 	.word	0x0800051d

08000640 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000640:	b500      	push	{lr}
 8000642:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000644:	2200      	movs	r2, #0
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_DMA_Init+0x30>)
 8000648:	9201      	str	r2, [sp, #4]
 800064a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800064c:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8000650:	6319      	str	r1, [r3, #48]	; 0x30
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000658:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800065a:	200f      	movs	r0, #15
 800065c:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800065e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000660:	f001 fd00 	bl	8002064 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000664:	200f      	movs	r0, #15

}
 8000666:	b003      	add	sp, #12
 8000668:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800066c:	f001 bd38 	b.w	80020e0 <HAL_NVIC_EnableIRQ>
 8000670:	40023800 	.word	0x40023800

08000674 <flight_recovery>:
	ahrs_fusion_ag(&accel, &gyro, &ahrsState);
	quaternion_to_euler(&ahrsState.q, &ahrsState.ea);
}

void flight_recovery() {
}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000678:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_GPIO_Init+0x34>)
 800067c:	2100      	movs	r1, #0
 800067e:	9100      	str	r1, [sp, #0]
 8000680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000682:	f042 0201 	orr.w	r2, r2, #1
 8000686:	631a      	str	r2, [r3, #48]	; 0x30
 8000688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800068a:	f002 0201 	and.w	r2, r2, #1
 800068e:	9200      	str	r2, [sp, #0]
 8000690:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	9101      	str	r1, [sp, #4]
 8000694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000696:	f042 0202 	orr.w	r2, r2, #2
 800069a:	631a      	str	r2, [r3, #48]	; 0x30
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b01      	ldr	r3, [sp, #4]

}
 80006a6:	b002      	add	sp, #8
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800

080006b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006b0:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b2:	480b      	ldr	r0, [pc, #44]	; (80006e0 <MX_I2C1_Init+0x30>)
 80006b4:	4c0b      	ldr	r4, [pc, #44]	; (80006e4 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 80006b6:	490c      	ldr	r1, [pc, #48]	; (80006e8 <MX_I2C1_Init+0x38>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b8:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 80006be:	e9c0 4100 	strd	r4, r1, [r0]
  hi2c1.Init.OwnAddress1 = 0;
 80006c2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c6:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ca:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ce:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d0:	f001 fff2 	bl	80026b8 <HAL_I2C_Init>
 80006d4:	b900      	cbnz	r0, 80006d8 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d6:	bd10      	pop	{r4, pc}
 80006d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80006dc:	f000 b956 	b.w	800098c <Error_Handler>
 80006e0:	200000c0 	.word	0x200000c0
 80006e4:	40005400 	.word	0x40005400
 80006e8:	00061a80 	.word	0x00061a80

080006ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006ec:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 80006ee:	4b18      	ldr	r3, [pc, #96]	; (8000750 <HAL_I2C_MspInit+0x64>)
 80006f0:	6802      	ldr	r2, [r0, #0]
{
 80006f2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 80006f6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80006fc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000700:	9406      	str	r4, [sp, #24]
  if(i2cHandle->Instance==I2C1)
 8000702:	d001      	beq.n	8000708 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000704:	b009      	add	sp, #36	; 0x24
 8000706:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000708:	4d12      	ldr	r5, [pc, #72]	; (8000754 <HAL_I2C_MspInit+0x68>)
 800070a:	9400      	str	r4, [sp, #0]
 800070c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	4812      	ldr	r0, [pc, #72]	; (8000758 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	632b      	str	r3, [r5, #48]	; 0x30
 8000716:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000718:	f003 0302 	and.w	r3, r3, #2
 800071c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 800071e:	22c0      	movs	r2, #192	; 0xc0
 8000720:	2312      	movs	r3, #18
 8000722:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000726:	2303      	movs	r3, #3
 8000728:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800072c:	2304      	movs	r3, #4
 800072e:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000730:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000732:	f001 fec7 	bl	80024c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000736:	9401      	str	r4, [sp, #4]
 8000738:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800073a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800073e:	642b      	str	r3, [r5, #64]	; 0x40
 8000740:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000746:	9301      	str	r3, [sp, #4]
 8000748:	9b01      	ldr	r3, [sp, #4]
}
 800074a:	b009      	add	sp, #36	; 0x24
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	bf00      	nop
 8000750:	40005400 	.word	0x40005400
 8000754:	40023800 	.word	0x40023800
 8000758:	40020400 	.word	0x40020400

0800075c <imu_delay_ms>:
	}
	return rslt;
}

void imu_delay_ms(uint32_t period) {
	HAL_Delay(period);
 800075c:	f001 bc5e 	b.w	800201c <HAL_Delay>

08000760 <imu_i2c_read>:
int8_t imu_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8000760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	status = HAL_I2C_Master_Transmit(imu_i2c, (uint8_t) (id << 1), &reg_addr, 1,
 8000764:	0040      	lsls	r0, r0, #1
int8_t imu_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8000766:	b084      	sub	sp, #16
	status = HAL_I2C_Master_Transmit(imu_i2c, (uint8_t) (id << 1), &reg_addr, 1,
 8000768:	4f11      	ldr	r7, [pc, #68]	; (80007b0 <imu_i2c_read+0x50>)
int8_t imu_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 800076a:	f88d 100f 	strb.w	r1, [sp, #15]
	status = HAL_I2C_Master_Transmit(imu_i2c, (uint8_t) (id << 1), &reg_addr, 1,
 800076e:	f000 04fe 	and.w	r4, r0, #254	; 0xfe
 8000772:	f04f 0864 	mov.w	r8, #100	; 0x64
int8_t imu_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8000776:	4615      	mov	r5, r2
 8000778:	461e      	mov	r6, r3
	status = HAL_I2C_Master_Transmit(imu_i2c, (uint8_t) (id << 1), &reg_addr, 1,
 800077a:	f10d 020f 	add.w	r2, sp, #15
 800077e:	4621      	mov	r1, r4
 8000780:	6838      	ldr	r0, [r7, #0]
 8000782:	f8cd 8000 	str.w	r8, [sp]
 8000786:	2301      	movs	r3, #1
 8000788:	f002 f85e 	bl	8002848 <HAL_I2C_Master_Transmit>
	status = HAL_I2C_Master_Receive(imu_i2c, (uint8_t) (id << 1), data, len,
 800078c:	4621      	mov	r1, r4
	status = HAL_I2C_Master_Transmit(imu_i2c, (uint8_t) (id << 1), &reg_addr, 1,
 800078e:	4684      	mov	ip, r0
	status = HAL_I2C_Master_Receive(imu_i2c, (uint8_t) (id << 1), data, len,
 8000790:	f8cd 8000 	str.w	r8, [sp]
 8000794:	6838      	ldr	r0, [r7, #0]
 8000796:	4633      	mov	r3, r6
 8000798:	462a      	mov	r2, r5
	status = HAL_I2C_Master_Transmit(imu_i2c, (uint8_t) (id << 1), &reg_addr, 1,
 800079a:	4664      	mov	r4, ip
	status = HAL_I2C_Master_Receive(imu_i2c, (uint8_t) (id << 1), data, len,
 800079c:	f002 f9e4 	bl	8002b68 <HAL_I2C_Master_Receive>
	if (status != HAL_OK) {
 80007a0:	2800      	cmp	r0, #0
 80007a2:	bf18      	it	ne
 80007a4:	4604      	movne	r4, r0
}
 80007a6:	b260      	sxtb	r0, r4
 80007a8:	b004      	add	sp, #16
 80007aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007ae:	bf00      	nop
 80007b0:	20000238 	.word	0x20000238

080007b4 <imu_i2c_write>:
int8_t imu_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 80007b4:	b5b0      	push	{r4, r5, r7, lr}
	uint8_t tx_buffer[len + 1];
 80007b6:	f103 0408 	add.w	r4, r3, #8
int8_t imu_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 80007ba:	b082      	sub	sp, #8
	uint8_t tx_buffer[len + 1];
 80007bc:	466d      	mov	r5, sp
 80007be:	08e4      	lsrs	r4, r4, #3
 80007c0:	eba5 04c4 	sub.w	r4, r5, r4, lsl #3
int8_t imu_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 80007c4:	af02      	add	r7, sp, #8
	uint8_t tx_buffer[len + 1];
 80007c6:	46a5      	mov	sp, r4
int8_t imu_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 80007c8:	468c      	mov	ip, r1
 80007ca:	4614      	mov	r4, r2
 80007cc:	4605      	mov	r5, r0
	memcpy(&tx_buffer[1], data, len);
 80007ce:	461a      	mov	r2, r3
 80007d0:	4621      	mov	r1, r4
	tx_buffer[0] = reg_addr;
 80007d2:	f88d c008 	strb.w	ip, [sp, #8]
	memcpy(&tx_buffer[1], data, len);
 80007d6:	f10d 0009 	add.w	r0, sp, #9
	uint8_t tx_buffer[len + 1];
 80007da:	1c5c      	adds	r4, r3, #1
	memcpy(&tx_buffer[1], data, len);
 80007dc:	f004 fa86 	bl	8004cec <memcpy>
	status = HAL_I2C_Master_Transmit(imu_i2c, (uint8_t) (id << 1), tx_buffer,
 80007e0:	4806      	ldr	r0, [pc, #24]	; (80007fc <imu_i2c_write+0x48>)
 80007e2:	0069      	lsls	r1, r5, #1
 80007e4:	2364      	movs	r3, #100	; 0x64
 80007e6:	6800      	ldr	r0, [r0, #0]
 80007e8:	9300      	str	r3, [sp, #0]
	uint8_t tx_buffer[len + 1];
 80007ea:	aa02      	add	r2, sp, #8
	status = HAL_I2C_Master_Transmit(imu_i2c, (uint8_t) (id << 1), tx_buffer,
 80007ec:	b2a3      	uxth	r3, r4
 80007ee:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80007f2:	f002 f829 	bl	8002848 <HAL_I2C_Master_Transmit>
}
 80007f6:	b240      	sxtb	r0, r0
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bdb0      	pop	{r4, r5, r7, pc}
 80007fc:	20000238 	.word	0x20000238

08000800 <imu_init>:
int8_t imu_init(I2C_HandleTypeDef *iic) {
 8000800:	b570      	push	{r4, r5, r6, lr}
	imu.bmi = &bmi_ref;
 8000802:	4c16      	ldr	r4, [pc, #88]	; (800085c <imu_init+0x5c>)
	imu_i2c = iic;
 8000804:	4a16      	ldr	r2, [pc, #88]	; (8000860 <imu_init+0x60>)
	bmi_ref.read = &imu_i2c_read;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <imu_init+0x64>)
	imu.bmi = &bmi_ref;
 8000808:	4e17      	ldr	r6, [pc, #92]	; (8000868 <imu_init+0x68>)
	bmi_ref.read = &imu_i2c_read;
 800080a:	61e3      	str	r3, [r4, #28]
	bmi_ref.write = &imu_i2c_write;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <imu_init+0x6c>)
	imu_i2c = iic;
 800080e:	6010      	str	r0, [r2, #0]
	bmi_ref.chip_id = BMI160_CHIP_ID;
 8000810:	f646 01d1 	movw	r1, #26833	; 0x68d1
	bmi_ref.intf = BMI160_I2C_INTF;
 8000814:	2200      	movs	r2, #0
	bmi_ref.write = &imu_i2c_write;
 8000816:	6223      	str	r3, [r4, #32]
	imu.result = bmi160_init(imu.bmi);
 8000818:	4620      	mov	r0, r4
	bmi_ref.delay_ms = &imu_delay_ms;
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <imu_init+0x70>)
	bmi_ref.chip_id = BMI160_CHIP_ID;
 800081c:	8021      	strh	r1, [r4, #0]
	imu.bmi = &bmi_ref;
 800081e:	6034      	str	r4, [r6, #0]
	bmi_ref.intf = BMI160_I2C_INTF;
 8000820:	70a2      	strb	r2, [r4, #2]
	bmi_ref.delay_ms = &imu_delay_ms;
 8000822:	6263      	str	r3, [r4, #36]	; 0x24
	imu.result = bmi160_init(imu.bmi);
 8000824:	f001 f924 	bl	8001a70 <bmi160_init>
 8000828:	4605      	mov	r5, r0
 800082a:	f886 00f4 	strb.w	r0, [r6, #244]	; 0xf4
	if (BMI160_OK != imu.result) {
 800082e:	b108      	cbz	r0, 8000834 <imu_init+0x34>
}
 8000830:	4628      	mov	r0, r5
 8000832:	bd70      	pop	{r4, r5, r6, pc}
	bmi_ref.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 8000834:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <imu_init+0x74>)
	bmi_ref.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <imu_init+0x78>)
	bmi_ref.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 8000838:	6062      	str	r2, [r4, #4]
	imu.result = bmi160_set_sens_conf(&bmi_ref);
 800083a:	4620      	mov	r0, r4
	bmi_ref.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 800083c:	60e3      	str	r3, [r4, #12]
	imu.result = bmi160_set_sens_conf(&bmi_ref);
 800083e:	f001 fa03 	bl	8001c48 <bmi160_set_sens_conf>
 8000842:	4605      	mov	r5, r0
 8000844:	f886 00f4 	strb.w	r0, [r6, #244]	; 0xf4
	if (BMI160_OK != imu.result) {
 8000848:	2800      	cmp	r0, #0
 800084a:	d1f1      	bne.n	8000830 <imu_init+0x30>
	HAL_Delay(10); //The device is powering up in less then 10ms. Page 13. 2.2 Power modes.
 800084c:	200a      	movs	r0, #10
 800084e:	f001 fbe5 	bl	800201c <HAL_Delay>
	imu.running = true;
 8000852:	2301      	movs	r3, #1
 8000854:	f886 30f6 	strb.w	r3, [r6, #246]	; 0xf6
}
 8000858:	4628      	mov	r0, r5
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	20000114 	.word	0x20000114
 8000860:	20000238 	.word	0x20000238
 8000864:	08000761 	.word	0x08000761
 8000868:	20000140 	.word	0x20000140
 800086c:	080007b5 	.word	0x080007b5
 8000870:	0800075d 	.word	0x0800075d
 8000874:	020c0c11 	.word	0x020c0c11
 8000878:	02010c15 	.word	0x02010c15

0800087c <get_imu>:
}

inline IMU_t* get_imu() {
	return &imu;
}
 800087c:	4800      	ldr	r0, [pc, #0]	; (8000880 <get_imu+0x4>)
 800087e:	4770      	bx	lr
 8000880:	20000140 	.word	0x20000140

08000884 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000884:	b510      	push	{r4, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000886:	2300      	movs	r3, #0
void SystemClock_Config(void) {
 8000888:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800088a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 800088e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000892:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000896:	e9cd 3305 	strd	r3, r3, [sp, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800089a:	491f      	ldr	r1, [pc, #124]	; (8000918 <SystemClock_Config+0x94>)
 800089c:	9301      	str	r3, [sp, #4]
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800089e:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008a0:	9307      	str	r3, [sp, #28]
	__HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	6c08      	ldr	r0, [r1, #64]	; 0x40
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a4:	4a1d      	ldr	r2, [pc, #116]	; (800091c <SystemClock_Config+0x98>)
	__HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80008aa:	6408      	str	r0, [r1, #64]	; 0x40
 80008ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80008ae:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80008b2:	9101      	str	r1, [sp, #4]
 80008b4:	9901      	ldr	r1, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b6:	9302      	str	r3, [sp, #8]
 80008b8:	6811      	ldr	r1, [r2, #0]
 80008ba:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80008be:	6011      	str	r1, [r2, #0]
 80008c0:	6812      	ldr	r2, [r2, #0]
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c2:	930f      	str	r3, [sp, #60]	; 0x3c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c4:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80008c8:	9202      	str	r2, [sp, #8]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ca:	2310      	movs	r3, #16
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008cc:	2101      	movs	r1, #1
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ce:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d2:	9802      	ldr	r0, [sp, #8]
	RCC_OscInitStruct.PLL.PLLM = 16;
 80008d4:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 200;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d6:	2002      	movs	r0, #2
 80008d8:	2104      	movs	r1, #4
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008da:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008dc:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 200;
 80008e0:	22c8      	movs	r2, #200	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 4;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008e2:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e4:	9408      	str	r4, [sp, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e6:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 200;
 80008e8:	9211      	str	r2, [sp, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008ea:	f002 fbad 	bl	8003048 <HAL_RCC_OscConfig>
 80008ee:	b108      	cbz	r0, 80008f4 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008f2:	e7fe      	b.n	80008f2 <SystemClock_Config+0x6e>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008f4:	210f      	movs	r1, #15
 80008f6:	4603      	mov	r3, r0
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f8:	e9cd 1403 	strd	r1, r4, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000900:	a803      	add	r0, sp, #12
 8000902:	2103      	movs	r1, #3
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000904:	e9cd 3205 	strd	r3, r2, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000908:	9307      	str	r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800090a:	f002 fdb5 	bl	8003478 <HAL_RCC_ClockConfig>
 800090e:	b108      	cbz	r0, 8000914 <SystemClock_Config+0x90>
 8000910:	b672      	cpsid	i
	while (1) {
 8000912:	e7fe      	b.n	8000912 <SystemClock_Config+0x8e>
}
 8000914:	b014      	add	sp, #80	; 0x50
 8000916:	bd10      	pop	{r4, pc}
 8000918:	40023800 	.word	0x40023800
 800091c:	40007000 	.word	0x40007000

08000920 <main>:
int main(void) {
 8000920:	b508      	push	{r3, lr}
	HAL_Init();
 8000922:	f001 fb4f 	bl	8001fc4 <HAL_Init>
	SystemClock_Config();
 8000926:	f7ff ffad 	bl	8000884 <SystemClock_Config>
	MX_GPIO_Init();
 800092a:	f7ff fea5 	bl	8000678 <MX_GPIO_Init>
	MX_DMA_Init();
 800092e:	f7ff fe87 	bl	8000640 <MX_DMA_Init>
	MX_TIM1_Init();
 8000932:	f000 fe91 	bl	8001658 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000936:	f000 fac3 	bl	8000ec0 <MX_TIM2_Init>
	MX_TIM5_Init();
 800093a:	f000 ff11 	bl	8001760 <MX_TIM5_Init>
	MX_TIM3_Init();
 800093e:	f000 fb13 	bl	8000f68 <MX_TIM3_Init>
	MX_TIM9_Init();
 8000942:	f000 fbb1 	bl	80010a8 <MX_TIM9_Init>
	MX_TIM10_Init();
 8000946:	f000 fbeb 	bl	8001120 <MX_TIM10_Init>
	MX_TIM11_Init();
 800094a:	f000 fc31 	bl	80011b0 <MX_TIM11_Init>
	MX_USART1_UART_Init();
 800094e:	f000 ff5f 	bl	8001810 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 8000952:	f7ff fead 	bl	80006b0 <MX_I2C1_Init>
	pre_init();
 8000956:	f001 fabb 	bl	8001ed0 <pre_init>
	if (HAL_OK != (status = bridge_init(&huart1, &hi2c1))) {
 800095a:	490a      	ldr	r1, [pc, #40]	; (8000984 <main+0x64>)
 800095c:	480a      	ldr	r0, [pc, #40]	; (8000988 <main+0x68>)
 800095e:	f7ff fe47 	bl	80005f0 <bridge_init>
 8000962:	b100      	cbz	r0, 8000966 <main+0x46>
}
 8000964:	bd08      	pop	{r3, pc}
	if (HAL_OK != (status = rc_init_all())) { //tim 2,9,10,11
 8000966:	f000 f983 	bl	8000c70 <rc_init_all>
 800096a:	b940      	cbnz	r0, 800097e <main+0x5e>
		if (get_imu()->running) { // RECOVERY MODE
 800096c:	f7ff ff86 	bl	800087c <get_imu>
 8000970:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
 8000974:	2b00      	cmp	r3, #0
 8000976:	d0f9      	beq.n	800096c <main+0x4c>
			flight_recovery();
 8000978:	f7ff fe7c 	bl	8000674 <flight_recovery>
 800097c:	e7f6      	b.n	800096c <main+0x4c>
		return HAL_ERROR;
 800097e:	2001      	movs	r0, #1
}
 8000980:	bd08      	pop	{r3, pc}
 8000982:	bf00      	nop
 8000984:	200000c0 	.word	0x200000c0
 8000988:	20000878 	.word	0x20000878

0800098c <Error_Handler>:
 800098c:	b672      	cpsid	i
	while (1) {
 800098e:	e7fe      	b.n	800098e <Error_Handler+0x2>

08000990 <rc_yaw_callback>:
void rc_roll_callback(TIM_HandleTypeDef *htim) {
	rc_calculate(htim->Instance->CCR1, &controls_rc[2], htim,
			get_roll_queue_rc());
}

void rc_yaw_callback(TIM_HandleTypeDef *htim) {
 8000990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	rc_calculate(htim->Instance->CCR1, &controls_rc[3], htim,
 8000992:	6803      	ldr	r3, [r0, #0]
	bool rising_edge = HAL_GPIO_ReadPin(control->rc_channel_port,
 8000994:	4c29      	ldr	r4, [pc, #164]	; (8000a3c <rc_yaw_callback+0xac>)
	rc_calculate(htim->Instance->CCR1, &controls_rc[3], htim,
 8000996:	6b5e      	ldr	r6, [r3, #52]	; 0x34
void rc_yaw_callback(TIM_HandleTypeDef *htim) {
 8000998:	4605      	mov	r5, r0
	rc_calculate(htim->Instance->CCR1, &controls_rc[3], htim,
 800099a:	f001 fa89 	bl	8001eb0 <get_yaw_queue_rc>
	bool rising_edge = HAL_GPIO_ReadPin(control->rc_channel_port,
 800099e:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
	rc_calculate(htim->Instance->CCR1, &controls_rc[3], htim,
 80009a2:	4607      	mov	r7, r0
	bool rising_edge = HAL_GPIO_ReadPin(control->rc_channel_port,
 80009a4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80009a8:	f001 fe80 	bl	80026ac <HAL_GPIO_ReadPin>
	if (!control->captured && rising_edge) { // is the first value captured ?
 80009ac:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
 80009b0:	b303      	cbz	r3, 80009f4 <rc_yaw_callback+0x64>
	} else if (control->captured && !rising_edge) { // if the first is captured
 80009b2:	2801      	cmp	r0, #1
 80009b4:	d01d      	beq.n	80009f2 <rc_yaw_callback+0x62>
		if (control->fall > control->rise) {
 80009b6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
		control->fall = capturedValue; // capture the second value
 80009ba:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
		if (control->fall > control->rise) {
 80009be:	429e      	cmp	r6, r3
 80009c0:	d834      	bhi.n	8000a2c <rc_yaw_callback+0x9c>
		} else if (control->fall < control->rise) {
 80009c2:	d211      	bcs.n	80009e8 <rc_yaw_callback+0x58>
			diff = control->fall + (0xFFFF - control->rise); //0xffff
 80009c4:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80009c8:	33ff      	adds	r3, #255	; 0xff
 80009ca:	441e      	add	r6, r3
		if (diff > RC_VALUE_MIN && diff < RC_VALUE_MAX) {
 80009cc:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 80009d0:	18f2      	adds	r2, r6, r3
 80009d2:	f240 33e6 	movw	r3, #998	; 0x3e6
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d806      	bhi.n	80009e8 <rc_yaw_callback+0x58>
			control->frequency = RC_TIMCLOCK / diff; 	// calculate frequency
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <rc_yaw_callback+0xb0>)
 80009dc:	fbb3 f3f6 	udiv	r3, r3, r6
 80009e0:	e9c4 6324 	strd	r6, r3, [r4, #144]	; 0x90
			control->width_us = diff * TIM_FACTOR_US; // calculate pulse width
 80009e4:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80009e8:	682a      	ldr	r2, [r5, #0]
		control->captured = false; // reset to first captured
 80009ea:	2300      	movs	r3, #0
 80009ec:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80009f0:	6253      	str	r3, [r2, #36]	; 0x24
			get_yaw_queue_rc());
}
 80009f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!control->captured && rising_edge) { // is the first value captured ?
 80009f4:	2801      	cmp	r0, #1
 80009f6:	d1fc      	bne.n	80009f2 <rc_yaw_callback+0x62>
		if (control->fall != 0) {
 80009f8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		control->rise = capturedValue; // capture the first value
 80009fc:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
		control->captured = true; // set the first value captured as true
 8000a00:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
		if (control->fall != 0) {
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0f4      	beq.n	80009f2 <rc_yaw_callback+0x62>
			control->frame_width_us = capturedValue + control->difference;
 8000a08:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000a0c:	4433      	add	r3, r6
					&& control->frame_width_us < RC_FRAME_MAX) {
 8000a0e:	f5a3 42a4 	sub.w	r2, r3, #20992	; 0x5200
			if (control->frame_width_us > RC_FRAME_MIN
 8000a12:	f640 31b6 	movw	r1, #2998	; 0xbb6
					&& control->frame_width_us < RC_FRAME_MAX) {
 8000a16:	3a09      	subs	r2, #9
			if (control->frame_width_us > RC_FRAME_MIN
 8000a18:	428a      	cmp	r2, r1
			control->frame_width_us = capturedValue + control->difference;
 8000a1a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
			if (control->frame_width_us > RC_FRAME_MIN
 8000a1e:	d907      	bls.n	8000a30 <rc_yaw_callback+0xa0>
			control->fall = 0; 				// reset fall
 8000a20:	2300      	movs	r3, #0
 8000a22:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
			control->frame_width_us = 0;	// reset frame width
 8000a26:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 8000a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			diff = control->fall - control->rise; // calculate the difference
 8000a2c:	1af6      	subs	r6, r6, r3
 8000a2e:	e7cd      	b.n	80009cc <rc_yaw_callback+0x3c>
				queue_enqueue(queue, control->width_us);
 8000a30:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8000a34:	4638      	mov	r0, r7
 8000a36:	f001 fa57 	bl	8001ee8 <queue_enqueue>
 8000a3a:	e7f1      	b.n	8000a20 <rc_yaw_callback+0x90>
 8000a3c:	2000023c 	.word	0x2000023c
 8000a40:	05f5e100 	.word	0x05f5e100

08000a44 <rc_pitch_callback>:
void rc_pitch_callback(TIM_HandleTypeDef *htim) {
 8000a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	rc_calculate(htim->Instance->CCR1, &controls_rc[1], htim,
 8000a46:	6803      	ldr	r3, [r0, #0]
	bool rising_edge = HAL_GPIO_ReadPin(control->rc_channel_port,
 8000a48:	4c23      	ldr	r4, [pc, #140]	; (8000ad8 <rc_pitch_callback+0x94>)
	rc_calculate(htim->Instance->CCR1, &controls_rc[1], htim,
 8000a4a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
void rc_pitch_callback(TIM_HandleTypeDef *htim) {
 8000a4c:	4605      	mov	r5, r0
	rc_calculate(htim->Instance->CCR1, &controls_rc[1], htim,
 8000a4e:	f001 fa27 	bl	8001ea0 <get_pitch_queue_rc>
	bool rising_edge = HAL_GPIO_ReadPin(control->rc_channel_port,
 8000a52:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
	rc_calculate(htim->Instance->CCR1, &controls_rc[1], htim,
 8000a54:	4607      	mov	r7, r0
	bool rising_edge = HAL_GPIO_ReadPin(control->rc_channel_port,
 8000a56:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000a58:	f001 fe28 	bl	80026ac <HAL_GPIO_ReadPin>
	if (!control->captured && rising_edge) { // is the first value captured ?
 8000a5c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8000a60:	b1eb      	cbz	r3, 8000a9e <rc_pitch_callback+0x5a>
	} else if (control->captured && !rising_edge) { // if the first is captured
 8000a62:	2801      	cmp	r0, #1
 8000a64:	d01a      	beq.n	8000a9c <rc_pitch_callback+0x58>
		if (control->fall > control->rise) {
 8000a66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		control->fall = capturedValue; // capture the second value
 8000a68:	63e6      	str	r6, [r4, #60]	; 0x3c
		if (control->fall > control->rise) {
 8000a6a:	429e      	cmp	r6, r3
 8000a6c:	d82d      	bhi.n	8000aca <rc_pitch_callback+0x86>
		} else if (control->fall < control->rise) {
 8000a6e:	d210      	bcs.n	8000a92 <rc_pitch_callback+0x4e>
			diff = control->fall + (0xFFFF - control->rise); //0xffff
 8000a70:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000a74:	33ff      	adds	r3, #255	; 0xff
 8000a76:	441e      	add	r6, r3
		if (diff > RC_VALUE_MIN && diff < RC_VALUE_MAX) {
 8000a78:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8000a7c:	18f2      	adds	r2, r6, r3
 8000a7e:	f240 33e6 	movw	r3, #998	; 0x3e6
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d805      	bhi.n	8000a92 <rc_pitch_callback+0x4e>
			control->frequency = RC_TIMCLOCK / diff; 	// calculate frequency
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <rc_pitch_callback+0x98>)
 8000a88:	fbb3 f3f6 	udiv	r3, r3, r6
 8000a8c:	e9c4 6310 	strd	r6, r3, [r4, #64]	; 0x40
			control->width_us = diff * TIM_FACTOR_US; // calculate pulse width
 8000a90:	64a6      	str	r6, [r4, #72]	; 0x48
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000a92:	682a      	ldr	r2, [r5, #0]
		control->captured = false; // reset to first captured
 8000a94:	2300      	movs	r3, #0
 8000a96:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000a9a:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!control->captured && rising_edge) { // is the first value captured ?
 8000a9e:	2801      	cmp	r0, #1
 8000aa0:	d1fc      	bne.n	8000a9c <rc_pitch_callback+0x58>
		if (control->fall != 0) {
 8000aa2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		control->rise = capturedValue; // capture the first value
 8000aa4:	63a6      	str	r6, [r4, #56]	; 0x38
		control->captured = true; // set the first value captured as true
 8000aa6:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
		if (control->fall != 0) {
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d0f6      	beq.n	8000a9c <rc_pitch_callback+0x58>
			control->frame_width_us = capturedValue + control->difference;
 8000aae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ab0:	4433      	add	r3, r6
					&& control->frame_width_us < RC_FRAME_MAX) {
 8000ab2:	f5a3 42a4 	sub.w	r2, r3, #20992	; 0x5200
			if (control->frame_width_us > RC_FRAME_MIN
 8000ab6:	f640 31b6 	movw	r1, #2998	; 0xbb6
					&& control->frame_width_us < RC_FRAME_MAX) {
 8000aba:	3a09      	subs	r2, #9
			if (control->frame_width_us > RC_FRAME_MIN
 8000abc:	428a      	cmp	r2, r1
			control->frame_width_us = capturedValue + control->difference;
 8000abe:	64e3      	str	r3, [r4, #76]	; 0x4c
			if (control->frame_width_us > RC_FRAME_MIN
 8000ac0:	d905      	bls.n	8000ace <rc_pitch_callback+0x8a>
			control->fall = 0; 				// reset fall
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	63e3      	str	r3, [r4, #60]	; 0x3c
			control->frame_width_us = 0;	// reset frame width
 8000ac6:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8000ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			diff = control->fall - control->rise; // calculate the difference
 8000aca:	1af6      	subs	r6, r6, r3
 8000acc:	e7d4      	b.n	8000a78 <rc_pitch_callback+0x34>
				queue_enqueue(queue, control->width_us);
 8000ace:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000ad0:	4638      	mov	r0, r7
 8000ad2:	f001 fa09 	bl	8001ee8 <queue_enqueue>
 8000ad6:	e7f4      	b.n	8000ac2 <rc_pitch_callback+0x7e>
 8000ad8:	2000023c 	.word	0x2000023c
 8000adc:	05f5e100 	.word	0x05f5e100

08000ae0 <rc_roll_callback>:
void rc_roll_callback(TIM_HandleTypeDef *htim) {
 8000ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	rc_calculate(htim->Instance->CCR1, &controls_rc[2], htim,
 8000ae2:	6803      	ldr	r3, [r0, #0]
	bool rising_edge = HAL_GPIO_ReadPin(control->rc_channel_port,
 8000ae4:	4c24      	ldr	r4, [pc, #144]	; (8000b78 <rc_roll_callback+0x98>)
	rc_calculate(htim->Instance->CCR1, &controls_rc[2], htim,
 8000ae6:	6b5e      	ldr	r6, [r3, #52]	; 0x34
void rc_roll_callback(TIM_HandleTypeDef *htim) {
 8000ae8:	4605      	mov	r5, r0
	rc_calculate(htim->Instance->CCR1, &controls_rc[2], htim,
 8000aea:	f001 f9dd 	bl	8001ea8 <get_roll_queue_rc>
	bool rising_edge = HAL_GPIO_ReadPin(control->rc_channel_port,
 8000aee:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
	rc_calculate(htim->Instance->CCR1, &controls_rc[2], htim,
 8000af2:	4607      	mov	r7, r0
	bool rising_edge = HAL_GPIO_ReadPin(control->rc_channel_port,
 8000af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000af6:	f001 fdd9 	bl	80026ac <HAL_GPIO_ReadPin>
	if (!control->captured && rising_edge) { // is the first value captured ?
 8000afa:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8000afe:	b1eb      	cbz	r3, 8000b3c <rc_roll_callback+0x5c>
	} else if (control->captured && !rising_edge) { // if the first is captured
 8000b00:	2801      	cmp	r0, #1
 8000b02:	d01a      	beq.n	8000b3a <rc_roll_callback+0x5a>
		if (control->fall > control->rise) {
 8000b04:	6e23      	ldr	r3, [r4, #96]	; 0x60
		control->fall = capturedValue; // capture the second value
 8000b06:	6666      	str	r6, [r4, #100]	; 0x64
		if (control->fall > control->rise) {
 8000b08:	429e      	cmp	r6, r3
 8000b0a:	d82d      	bhi.n	8000b68 <rc_roll_callback+0x88>
		} else if (control->fall < control->rise) {
 8000b0c:	d210      	bcs.n	8000b30 <rc_roll_callback+0x50>
			diff = control->fall + (0xFFFF - control->rise); //0xffff
 8000b0e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000b12:	33ff      	adds	r3, #255	; 0xff
 8000b14:	441e      	add	r6, r3
		if (diff > RC_VALUE_MIN && diff < RC_VALUE_MAX) {
 8000b16:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8000b1a:	18f2      	adds	r2, r6, r3
 8000b1c:	f240 33e6 	movw	r3, #998	; 0x3e6
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d805      	bhi.n	8000b30 <rc_roll_callback+0x50>
			control->frequency = RC_TIMCLOCK / diff; 	// calculate frequency
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <rc_roll_callback+0x9c>)
 8000b26:	fbb3 f3f6 	udiv	r3, r3, r6
 8000b2a:	e9c4 631a 	strd	r6, r3, [r4, #104]	; 0x68
			control->width_us = diff * TIM_FACTOR_US; // calculate pulse width
 8000b2e:	6726      	str	r6, [r4, #112]	; 0x70
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000b30:	682a      	ldr	r2, [r5, #0]
		control->captured = false; // reset to first captured
 8000b32:	2300      	movs	r3, #0
 8000b34:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000b38:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!control->captured && rising_edge) { // is the first value captured ?
 8000b3c:	2801      	cmp	r0, #1
 8000b3e:	d1fc      	bne.n	8000b3a <rc_roll_callback+0x5a>
		if (control->fall != 0) {
 8000b40:	6e63      	ldr	r3, [r4, #100]	; 0x64
		control->rise = capturedValue; // capture the first value
 8000b42:	6626      	str	r6, [r4, #96]	; 0x60
		control->captured = true; // set the first value captured as true
 8000b44:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
		if (control->fall != 0) {
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d0f6      	beq.n	8000b3a <rc_roll_callback+0x5a>
			control->frame_width_us = capturedValue + control->difference;
 8000b4c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8000b4e:	4433      	add	r3, r6
					&& control->frame_width_us < RC_FRAME_MAX) {
 8000b50:	f5a3 42a4 	sub.w	r2, r3, #20992	; 0x5200
			if (control->frame_width_us > RC_FRAME_MIN
 8000b54:	f640 31b6 	movw	r1, #2998	; 0xbb6
					&& control->frame_width_us < RC_FRAME_MAX) {
 8000b58:	3a09      	subs	r2, #9
			if (control->frame_width_us > RC_FRAME_MIN
 8000b5a:	428a      	cmp	r2, r1
			control->frame_width_us = capturedValue + control->difference;
 8000b5c:	6763      	str	r3, [r4, #116]	; 0x74
			if (control->frame_width_us > RC_FRAME_MIN
 8000b5e:	d905      	bls.n	8000b6c <rc_roll_callback+0x8c>
			control->fall = 0; 				// reset fall
 8000b60:	2300      	movs	r3, #0
 8000b62:	6663      	str	r3, [r4, #100]	; 0x64
			control->frame_width_us = 0;	// reset frame width
 8000b64:	6763      	str	r3, [r4, #116]	; 0x74
}
 8000b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			diff = control->fall - control->rise; // calculate the difference
 8000b68:	1af6      	subs	r6, r6, r3
 8000b6a:	e7d4      	b.n	8000b16 <rc_roll_callback+0x36>
				queue_enqueue(queue, control->width_us);
 8000b6c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8000b6e:	4638      	mov	r0, r7
 8000b70:	f001 f9ba 	bl	8001ee8 <queue_enqueue>
 8000b74:	e7f4      	b.n	8000b60 <rc_roll_callback+0x80>
 8000b76:	bf00      	nop
 8000b78:	2000023c 	.word	0x2000023c
 8000b7c:	05f5e100 	.word	0x05f5e100

08000b80 <rc_calculate>:
		TIM_HandleTypeDef *htim, Queue_t *queue) {
 8000b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b82:	460c      	mov	r4, r1
 8000b84:	4605      	mov	r5, r0
	bool rising_edge = HAL_GPIO_ReadPin(control->rc_channel_port,
 8000b86:	8989      	ldrh	r1, [r1, #12]
 8000b88:	68a0      	ldr	r0, [r4, #8]
		TIM_HandleTypeDef *htim, Queue_t *queue) {
 8000b8a:	4616      	mov	r6, r2
 8000b8c:	461f      	mov	r7, r3
	bool rising_edge = HAL_GPIO_ReadPin(control->rc_channel_port,
 8000b8e:	f001 fd8d 	bl	80026ac <HAL_GPIO_ReadPin>
	if (!control->captured && rising_edge) { // is the first value captured ?
 8000b92:	7ba1      	ldrb	r1, [r4, #14]
 8000b94:	b1e1      	cbz	r1, 8000bd0 <rc_calculate+0x50>
	} else if (control->captured && !rising_edge) { // if the first is captured
 8000b96:	2801      	cmp	r0, #1
 8000b98:	d019      	beq.n	8000bce <rc_calculate+0x4e>
		if (control->fall > control->rise) {
 8000b9a:	6923      	ldr	r3, [r4, #16]
		control->fall = capturedValue; // capture the second value
 8000b9c:	6165      	str	r5, [r4, #20]
		if (control->fall > control->rise) {
 8000b9e:	429d      	cmp	r5, r3
 8000ba0:	d803      	bhi.n	8000baa <rc_calculate+0x2a>
		} else if (control->fall < control->rise) {
 8000ba2:	d210      	bcs.n	8000bc6 <rc_calculate+0x46>
			diff = control->fall + (0xFFFF - control->rise); //0xffff
 8000ba4:	f505 457f 	add.w	r5, r5, #65280	; 0xff00
 8000ba8:	35ff      	adds	r5, #255	; 0xff
		if (diff > RC_VALUE_MIN && diff < RC_VALUE_MAX) {
 8000baa:	f46f 727a 	mvn.w	r2, #1000	; 0x3e8
			diff = control->fall + (0xFFFF - control->rise); //0xffff
 8000bae:	1aeb      	subs	r3, r5, r3
		if (diff > RC_VALUE_MIN && diff < RC_VALUE_MAX) {
 8000bb0:	1899      	adds	r1, r3, r2
 8000bb2:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000bb6:	4291      	cmp	r1, r2
 8000bb8:	d805      	bhi.n	8000bc6 <rc_calculate+0x46>
			control->frequency = RC_TIMCLOCK / diff; 	// calculate frequency
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <rc_calculate+0x84>)
 8000bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bc0:	e9c4 3206 	strd	r3, r2, [r4, #24]
			control->width_us = diff * TIM_FACTOR_US; // calculate pulse width
 8000bc4:	6223      	str	r3, [r4, #32]
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000bc6:	6832      	ldr	r2, [r6, #0]
		control->captured = false; // reset to first captured
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73a3      	strb	r3, [r4, #14]
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000bcc:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!control->captured && rising_edge) { // is the first value captured ?
 8000bd0:	2801      	cmp	r0, #1
 8000bd2:	d1fc      	bne.n	8000bce <rc_calculate+0x4e>
		if (control->fall != 0) {
 8000bd4:	6963      	ldr	r3, [r4, #20]
		control->rise = capturedValue; // capture the first value
 8000bd6:	6125      	str	r5, [r4, #16]
		control->captured = true; // set the first value captured as true
 8000bd8:	73a0      	strb	r0, [r4, #14]
		if (control->fall != 0) {
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d0f7      	beq.n	8000bce <rc_calculate+0x4e>
			control->frame_width_us = capturedValue + control->difference;
 8000bde:	69a3      	ldr	r3, [r4, #24]
 8000be0:	442b      	add	r3, r5
					&& control->frame_width_us < RC_FRAME_MAX) {
 8000be2:	f5a3 42a4 	sub.w	r2, r3, #20992	; 0x5200
			if (control->frame_width_us > RC_FRAME_MIN
 8000be6:	f640 31b6 	movw	r1, #2998	; 0xbb6
					&& control->frame_width_us < RC_FRAME_MAX) {
 8000bea:	3a09      	subs	r2, #9
			if (control->frame_width_us > RC_FRAME_MIN
 8000bec:	428a      	cmp	r2, r1
			control->frame_width_us = capturedValue + control->difference;
 8000bee:	6263      	str	r3, [r4, #36]	; 0x24
			if (control->frame_width_us > RC_FRAME_MIN
 8000bf0:	d903      	bls.n	8000bfa <rc_calculate+0x7a>
			control->fall = 0; 				// reset fall
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	6163      	str	r3, [r4, #20]
			control->frame_width_us = 0;	// reset frame width
 8000bf6:	6263      	str	r3, [r4, #36]	; 0x24
}
 8000bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				queue_enqueue(queue, control->width_us);
 8000bfa:	6a21      	ldr	r1, [r4, #32]
 8000bfc:	4638      	mov	r0, r7
 8000bfe:	f001 f973 	bl	8001ee8 <queue_enqueue>
 8000c02:	e7f6      	b.n	8000bf2 <rc_calculate+0x72>
 8000c04:	05f5e100 	.word	0x05f5e100

08000c08 <rc_throttle_gear_speed_callback>:
void rc_throttle_gear_speed_callback(TIM_HandleTypeDef *htim) {
 8000c08:	b570      	push	{r4, r5, r6, lr}
	switch (htim->Channel) {
 8000c0a:	7f03      	ldrb	r3, [r0, #28]
 8000c0c:	2b04      	cmp	r3, #4
void rc_throttle_gear_speed_callback(TIM_HandleTypeDef *htim) {
 8000c0e:	4604      	mov	r4, r0
	switch (htim->Channel) {
 8000c10:	d004      	beq.n	8000c1c <rc_throttle_gear_speed_callback+0x14>
 8000c12:	2b08      	cmp	r3, #8
 8000c14:	d01a      	beq.n	8000c4c <rc_throttle_gear_speed_callback+0x44>
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d00c      	beq.n	8000c34 <rc_throttle_gear_speed_callback+0x2c>
}
 8000c1a:	bd70      	pop	{r4, r5, r6, pc}
		rc_calculate(htim->Instance->CCR3, &controls_rc[4], htim,
 8000c1c:	6803      	ldr	r3, [r0, #0]
 8000c1e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000c20:	f001 f94a 	bl	8001eb8 <get_gear_queue_rc>
 8000c24:	4622      	mov	r2, r4
 8000c26:	4603      	mov	r3, r0
 8000c28:	490e      	ldr	r1, [pc, #56]	; (8000c64 <rc_throttle_gear_speed_callback+0x5c>)
 8000c2a:	4628      	mov	r0, r5
}
 8000c2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rc_calculate(htim->Instance->CCR3, &controls_rc[4], htim,
 8000c30:	f7ff bfa6 	b.w	8000b80 <rc_calculate>
		rc_calculate(htim->Instance->CCR1, &controls_rc[0], htim,
 8000c34:	6803      	ldr	r3, [r0, #0]
 8000c36:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8000c38:	f001 f92e 	bl	8001e98 <get_throttle_queue_rc>
 8000c3c:	4622      	mov	r2, r4
 8000c3e:	4603      	mov	r3, r0
 8000c40:	4909      	ldr	r1, [pc, #36]	; (8000c68 <rc_throttle_gear_speed_callback+0x60>)
 8000c42:	4628      	mov	r0, r5
}
 8000c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rc_calculate(htim->Instance->CCR1, &controls_rc[0], htim,
 8000c48:	f7ff bf9a 	b.w	8000b80 <rc_calculate>
		rc_calculate(htim->Instance->CCR4, &controls_rc[5], htim,
 8000c4c:	6803      	ldr	r3, [r0, #0]
 8000c4e:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8000c50:	f001 f936 	bl	8001ec0 <get_speed_queue_rc>
 8000c54:	4622      	mov	r2, r4
 8000c56:	4603      	mov	r3, r0
 8000c58:	4904      	ldr	r1, [pc, #16]	; (8000c6c <rc_throttle_gear_speed_callback+0x64>)
 8000c5a:	4628      	mov	r0, r5
}
 8000c5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rc_calculate(htim->Instance->CCR4, &controls_rc[5], htim,
 8000c60:	f7ff bf8e 	b.w	8000b80 <rc_calculate>
 8000c64:	200002dc 	.word	0x200002dc
 8000c68:	2000023c 	.word	0x2000023c
 8000c6c:	20000304 	.word	0x20000304

08000c70 <rc_init_all>:

HAL_StatusTypeDef rc_init_all() {
 8000c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	control->rc_timer_instance = timer;
 8000c72:	4b4d      	ldr	r3, [pc, #308]	; (8000da8 <rc_init_all+0x138>)
 8000c74:	4a4d      	ldr	r2, [pc, #308]	; (8000dac <rc_init_all+0x13c>)
	control->rc_channel_port = port;
 8000c76:	4d4e      	ldr	r5, [pc, #312]	; (8000db0 <rc_init_all+0x140>)
 8000c78:	4f4e      	ldr	r7, [pc, #312]	; (8000db4 <rc_init_all+0x144>)
	control->rc_timer_instance = timer;
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28
	control->rc_channel_pin = pin;
 8000c7c:	f04f 0c20 	mov.w	ip, #32
 8000c80:	f8a3 c00c 	strh.w	ip, [r3, #12]
 8000c84:	f04f 0c04 	mov.w	ip, #4
	control->rc_timer_instance = timer;
 8000c88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
	control->rc_channel_pin = pin;
 8000c8c:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8000c90:	f44f 7c80 	mov.w	ip, #256	; 0x100
	control->rc_channel = channel;
 8000c94:	2100      	movs	r1, #0
	control->rc_timer_instance = timer;
 8000c96:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8000c9a:	651a      	str	r2, [r3, #80]	; 0x50
	control->rc_channel_pin = pin;
 8000c9c:	f8a3 c05c 	strh.w	ip, [r3, #92]	; 0x5c
	control->rc_timer_instance = timer;
 8000ca0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
	control->rc_channel_pin = pin;
 8000ca4:	f44f 7c00 	mov.w	ip, #512	; 0x200
	control->rc_channel_port = port;
 8000ca8:	e9c3 150b 	strd	r1, r5, [r3, #44]	; 0x2c
	control->rc_channel = channel;
 8000cac:	e9c3 6100 	strd	r6, r1, [r3]
	control->fall = 0;
 8000cb0:	e9c3 1104 	strd	r1, r1, [r3, #16]
 8000cb4:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
	control->rc_channel_port = port;
 8000cb8:	e9c3 1715 	strd	r1, r7, [r3, #84]	; 0x54
	control->fall = 0;
 8000cbc:	e9c3 1118 	strd	r1, r1, [r3, #96]	; 0x60
	control->rc_channel_port = port;
 8000cc0:	e9c3 171f 	strd	r1, r7, [r3, #124]	; 0x7c
	control->fall = 0;
 8000cc4:	e9c3 1122 	strd	r1, r1, [r3, #136]	; 0x88
	control->rc_channel_port = port;
 8000cc8:	609d      	str	r5, [r3, #8]
	control->captured = false;
 8000cca:	7399      	strb	r1, [r3, #14]
	control->frame_width_us = 0;
 8000ccc:	6259      	str	r1, [r3, #36]	; 0x24
	control->captured = false;
 8000cce:	f883 1036 	strb.w	r1, [r3, #54]	; 0x36
	control->frame_width_us = 0;
 8000cd2:	64d9      	str	r1, [r3, #76]	; 0x4c
	control->captured = false;
 8000cd4:	f883 105e 	strb.w	r1, [r3, #94]	; 0x5e
	control->frame_width_us = 0;
 8000cd8:	6759      	str	r1, [r3, #116]	; 0x74
	control->captured = false;
 8000cda:	f883 1086 	strb.w	r1, [r3, #134]	; 0x86
	control->frame_width_us = 0;
 8000cde:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	control->rc_timer_instance = timer;
 8000ce2:	679a      	str	r2, [r3, #120]	; 0x78
	control->rc_channel_pin = pin;
 8000ce4:	f8a3 c084 	strh.w	ip, [r3, #132]	; 0x84
	control->rc_channel_port = port;
 8000ce8:	f8c3 50d0 	str.w	r5, [r3, #208]	; 0xd0
	control->rc_channel_pin = pin;
 8000cec:	f44f 6580 	mov.w	r5, #1024	; 0x400
	control->rc_channel = channel;
 8000cf0:	2408      	movs	r4, #8
	control->rc_channel_pin = pin;
 8000cf2:	f8a3 50ac 	strh.w	r5, [r3, #172]	; 0xac
	control->rc_channel = channel;
 8000cf6:	250c      	movs	r5, #12
	control->fall = 0;
 8000cf8:	e9c3 112c 	strd	r1, r1, [r3, #176]	; 0xb0
 8000cfc:	e9c3 1136 	strd	r1, r1, [r3, #216]	; 0xd8
	control->captured = false;
 8000d00:	f883 10ae 	strb.w	r1, [r3, #174]	; 0xae
	control->frame_width_us = 0;
 8000d04:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
	control->captured = false;
 8000d08:	f883 10d6 	strb.w	r1, [r3, #214]	; 0xd6
	control->frame_width_us = 0;
 8000d0c:	f8c3 10ec 	str.w	r1, [r3, #236]	; 0xec
	GEAR_GPIO_Port, GEAR_Pin);
	rc_control_defaults(&controls_rc[5], TIM2, TIM_CHANNEL_4,
	SPEED_GPIO_Port, SPEED_Pin);

	HAL_StatusTypeDef status = HAL_OK;
	status = HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID,
 8000d10:	4a29      	ldr	r2, [pc, #164]	; (8000db8 <rc_init_all+0x148>)
 8000d12:	482a      	ldr	r0, [pc, #168]	; (8000dbc <rc_init_all+0x14c>)
	control->rc_timer_instance = timer;
 8000d14:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
	control->rc_channel_port = port;
 8000d18:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	control->rc_timer_instance = timer;
 8000d1c:	f8c3 60c8 	str.w	r6, [r3, #200]	; 0xc8
	control->rc_channel = channel;
 8000d20:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	control->rc_channel_pin = pin;
 8000d24:	f8a3 40d4 	strh.w	r4, [r3, #212]	; 0xd4
	status = HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID,
 8000d28:	2112      	movs	r1, #18
	control->rc_channel = channel;
 8000d2a:	f8c3 50cc 	str.w	r5, [r3, #204]	; 0xcc
	status = HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID,
 8000d2e:	f003 f9d5 	bl	80040dc <HAL_TIM_RegisterCallback>
			rc_throttle_gear_speed_callback);
	if (HAL_OK != status) {
 8000d32:	b100      	cbz	r0, 8000d36 <rc_init_all+0xc6>
	status = HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4); // speed
	if (HAL_OK != status) {
		return status;
	}
	return status;
}
 8000d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	status = HAL_TIM_RegisterCallback(&htim9, HAL_TIM_IC_CAPTURE_CB_ID,
 8000d36:	4a22      	ldr	r2, [pc, #136]	; (8000dc0 <rc_init_all+0x150>)
 8000d38:	4822      	ldr	r0, [pc, #136]	; (8000dc4 <rc_init_all+0x154>)
 8000d3a:	2112      	movs	r1, #18
 8000d3c:	f003 f9ce 	bl	80040dc <HAL_TIM_RegisterCallback>
	if (HAL_OK != status) {
 8000d40:	2800      	cmp	r0, #0
 8000d42:	d1f7      	bne.n	8000d34 <rc_init_all+0xc4>
	status = HAL_TIM_RegisterCallback(&htim10, HAL_TIM_IC_CAPTURE_CB_ID,
 8000d44:	4a20      	ldr	r2, [pc, #128]	; (8000dc8 <rc_init_all+0x158>)
 8000d46:	4821      	ldr	r0, [pc, #132]	; (8000dcc <rc_init_all+0x15c>)
 8000d48:	2112      	movs	r1, #18
 8000d4a:	f003 f9c7 	bl	80040dc <HAL_TIM_RegisterCallback>
	if (HAL_OK != status) {
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	d1f0      	bne.n	8000d34 <rc_init_all+0xc4>
	status = HAL_TIM_RegisterCallback(&htim11, HAL_TIM_IC_CAPTURE_CB_ID,
 8000d52:	4a1f      	ldr	r2, [pc, #124]	; (8000dd0 <rc_init_all+0x160>)
 8000d54:	481f      	ldr	r0, [pc, #124]	; (8000dd4 <rc_init_all+0x164>)
 8000d56:	2112      	movs	r1, #18
 8000d58:	f003 f9c0 	bl	80040dc <HAL_TIM_RegisterCallback>
	if (HAL_OK != status) {
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	d1e9      	bne.n	8000d34 <rc_init_all+0xc4>
	status = HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // throttle
 8000d60:	4601      	mov	r1, r0
 8000d62:	4816      	ldr	r0, [pc, #88]	; (8000dbc <rc_init_all+0x14c>)
 8000d64:	f002 fe88 	bl	8003a78 <HAL_TIM_IC_Start_IT>
	if (HAL_OK != status) {
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	d1e3      	bne.n	8000d34 <rc_init_all+0xc4>
	status = HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_1); // pitch
 8000d6c:	4601      	mov	r1, r0
 8000d6e:	4815      	ldr	r0, [pc, #84]	; (8000dc4 <rc_init_all+0x154>)
 8000d70:	f002 fe82 	bl	8003a78 <HAL_TIM_IC_Start_IT>
	if (HAL_OK != status) {
 8000d74:	2800      	cmp	r0, #0
 8000d76:	d1dd      	bne.n	8000d34 <rc_init_all+0xc4>
	status = HAL_TIM_IC_Start_IT(&htim10, TIM_CHANNEL_1); // roll
 8000d78:	4601      	mov	r1, r0
 8000d7a:	4814      	ldr	r0, [pc, #80]	; (8000dcc <rc_init_all+0x15c>)
 8000d7c:	f002 fe7c 	bl	8003a78 <HAL_TIM_IC_Start_IT>
	if (HAL_OK != status) {
 8000d80:	2800      	cmp	r0, #0
 8000d82:	d1d7      	bne.n	8000d34 <rc_init_all+0xc4>
	status = HAL_TIM_IC_Start_IT(&htim11, TIM_CHANNEL_1); // yaw
 8000d84:	4601      	mov	r1, r0
 8000d86:	4813      	ldr	r0, [pc, #76]	; (8000dd4 <rc_init_all+0x164>)
 8000d88:	f002 fe76 	bl	8003a78 <HAL_TIM_IC_Start_IT>
	if (HAL_OK != status) {
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d1d1      	bne.n	8000d34 <rc_init_all+0xc4>
	status = HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3); // gear
 8000d90:	480a      	ldr	r0, [pc, #40]	; (8000dbc <rc_init_all+0x14c>)
 8000d92:	4621      	mov	r1, r4
 8000d94:	f002 fe70 	bl	8003a78 <HAL_TIM_IC_Start_IT>
	if (HAL_OK != status) {
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	d1cb      	bne.n	8000d34 <rc_init_all+0xc4>
	status = HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4); // speed
 8000d9c:	4629      	mov	r1, r5
 8000d9e:	4807      	ldr	r0, [pc, #28]	; (8000dbc <rc_init_all+0x14c>)
}
 8000da0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	status = HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4); // speed
 8000da4:	f002 be68 	b.w	8003a78 <HAL_TIM_IC_Start_IT>
 8000da8:	2000023c 	.word	0x2000023c
 8000dac:	40014000 	.word	0x40014000
 8000db0:	40020000 	.word	0x40020000
 8000db4:	40020400 	.word	0x40020400
 8000db8:	08000c09 	.word	0x08000c09
 8000dbc:	200005a8 	.word	0x200005a8
 8000dc0:	08000a45 	.word	0x08000a45
 8000dc4:	200007c4 	.word	0x200007c4
 8000dc8:	08000ae1 	.word	0x08000ae1
 8000dcc:	20000440 	.word	0x20000440
 8000dd0:	08000991 	.word	0x08000991
 8000dd4:	200004f4 	.word	0x200004f4

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <HAL_MspInit+0x34>)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	9100      	str	r1, [sp, #0]
 8000de0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000de2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000de6:	645a      	str	r2, [r3, #68]	; 0x44
 8000de8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000dea:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000dee:	9200      	str	r2, [sp, #0]
 8000df0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	9101      	str	r1, [sp, #4]
 8000df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000df6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000dfa:	641a      	str	r2, [r3, #64]	; 0x40
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	b002      	add	sp, #8
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800

08000e10 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <NMI_Handler>
 8000e12:	bf00      	nop

08000e14 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <HardFault_Handler>
 8000e16:	bf00      	nop

08000e18 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <MemManage_Handler>
 8000e1a:	bf00      	nop

08000e1c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <BusFault_Handler>
 8000e1e:	bf00      	nop

08000e20 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler>
 8000e22:	bf00      	nop

08000e24 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <DebugMon_Handler>:
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <PendSV_Handler>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e30:	f001 b8e2 	b.w	8001ff8 <HAL_IncTick>

08000e34 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000e34:	4801      	ldr	r0, [pc, #4]	; (8000e3c <DMA1_Stream4_IRQHandler+0x8>)
 8000e36:	f001 ba6f 	b.w	8002318 <HAL_DMA_IRQHandler>
 8000e3a:	bf00      	nop
 8000e3c:	2000032c 	.word	0x2000032c

08000e40 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000e40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e42:	4804      	ldr	r0, [pc, #16]	; (8000e54 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8000e44:	f002 feb6 	bl	8003bb4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000e48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim9);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8000e4e:	f002 beb1 	b.w	8003bb4 <HAL_TIM_IRQHandler>
 8000e52:	bf00      	nop
 8000e54:	2000038c 	.word	0x2000038c
 8000e58:	200007c4 	.word	0x200007c4

08000e5c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e5e:	4804      	ldr	r0, [pc, #16]	; (8000e70 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8000e60:	f002 fea8 	bl	8003bb4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim10);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000e6a:	f002 bea3 	b.w	8003bb4 <HAL_TIM_IRQHandler>
 8000e6e:	bf00      	nop
 8000e70:	2000038c 	.word	0x2000038c
 8000e74:	20000440 	.word	0x20000440

08000e78 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e7a:	4804      	ldr	r0, [pc, #16]	; (8000e8c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8000e7c:	f002 fe9a 	bl	8003bb4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim11);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8000e86:	f002 be95 	b.w	8003bb4 <HAL_TIM_IRQHandler>
 8000e8a:	bf00      	nop
 8000e8c:	2000038c 	.word	0x2000038c
 8000e90:	200004f4 	.word	0x200004f4

08000e94 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e94:	4801      	ldr	r0, [pc, #4]	; (8000e9c <TIM2_IRQHandler+0x8>)
 8000e96:	f002 be8d 	b.w	8003bb4 <HAL_TIM_IRQHandler>
 8000e9a:	bf00      	nop
 8000e9c:	200005a8 	.word	0x200005a8

08000ea0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ea0:	4801      	ldr	r0, [pc, #4]	; (8000ea8 <USART1_IRQHandler+0x8>)
 8000ea2:	f003 bc23 	b.w	80046ec <HAL_UART_IRQHandler>
 8000ea6:	bf00      	nop
 8000ea8:	20000878 	.word	0x20000878

08000eac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eac:	4a03      	ldr	r2, [pc, #12]	; (8000ebc <SystemInit+0x10>)
 8000eae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000eb2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ec0:	b500      	push	{lr}
  TIM_IC_InitTypeDef sConfigIC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ec2:	4827      	ldr	r0, [pc, #156]	; (8000f60 <MX_TIM2_Init+0xa0>)
 8000ec4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec8:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 100-1;
 8000eca:	2263      	movs	r2, #99	; 0x63
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ecc:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 100-1;
 8000ece:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 0xFFFF-1;
 8000ed0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
{
 8000ed4:	b087      	sub	sp, #28
  htim2.Init.Period = 0xFFFF-1;
 8000ed6:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eda:	2280      	movs	r2, #128	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000edc:	e9cd 3300 	strd	r3, r3, [sp]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ee0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000ee4:	e9cd 3304 	strd	r3, r3, [sp, #16]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee8:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eea:	6182      	str	r2, [r0, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000eec:	f002 fd0a 	bl	8003904 <HAL_TIM_IC_Init>
 8000ef0:	bb20      	cbnz	r0, 8000f3c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef6:	481a      	ldr	r0, [pc, #104]	; (8000f60 <MX_TIM2_Init+0xa0>)
 8000ef8:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efa:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000efe:	f003 f9a3 	bl	8004248 <HAL_TIMEx_MasterConfigSynchronization>
 8000f02:	bb48      	cbnz	r0, 8000f58 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f04:	210a      	movs	r1, #10
 8000f06:	2301      	movs	r3, #1
 8000f08:	e9cd 1302 	strd	r1, r3, [sp, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f0c:	2200      	movs	r2, #0
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f0e:	4814      	ldr	r0, [pc, #80]	; (8000f60 <MX_TIM2_Init+0xa0>)
 8000f10:	a902      	add	r1, sp, #8
  sConfigIC.ICFilter = 0;
 8000f12:	e9cd 2204 	strd	r2, r2, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f16:	f002 ff0b 	bl	8003d30 <HAL_TIM_IC_ConfigChannel>
 8000f1a:	b9d0      	cbnz	r0, 8000f52 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f1c:	2208      	movs	r2, #8
 8000f1e:	4810      	ldr	r0, [pc, #64]	; (8000f60 <MX_TIM2_Init+0xa0>)
 8000f20:	eb0d 0102 	add.w	r1, sp, r2
 8000f24:	f002 ff04 	bl	8003d30 <HAL_TIM_IC_ConfigChannel>
 8000f28:	b980      	cbnz	r0, 8000f4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000f2a:	480d      	ldr	r0, [pc, #52]	; (8000f60 <MX_TIM2_Init+0xa0>)
 8000f2c:	220c      	movs	r2, #12
 8000f2e:	a902      	add	r1, sp, #8
 8000f30:	f002 fefe 	bl	8003d30 <HAL_TIM_IC_ConfigChannel>
 8000f34:	b928      	cbnz	r0, 8000f42 <MX_TIM2_Init+0x82>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f36:	b007      	add	sp, #28
 8000f38:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f3c:	f7ff fd26 	bl	800098c <Error_Handler>
 8000f40:	e7d7      	b.n	8000ef2 <MX_TIM2_Init+0x32>
    Error_Handler();
 8000f42:	f7ff fd23 	bl	800098c <Error_Handler>
}
 8000f46:	b007      	add	sp, #28
 8000f48:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f4c:	f7ff fd1e 	bl	800098c <Error_Handler>
 8000f50:	e7eb      	b.n	8000f2a <MX_TIM2_Init+0x6a>
    Error_Handler();
 8000f52:	f7ff fd1b 	bl	800098c <Error_Handler>
 8000f56:	e7e1      	b.n	8000f1c <MX_TIM2_Init+0x5c>
    Error_Handler();
 8000f58:	f7ff fd18 	bl	800098c <Error_Handler>
 8000f5c:	e7d2      	b.n	8000f04 <MX_TIM2_Init+0x44>
 8000f5e:	bf00      	nop
 8000f60:	200005a8 	.word	0x200005a8
 8000f64:	00000000 	.word	0x00000000

08000f68 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f68:	b530      	push	{r4, r5, lr}
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f6a:	4c49      	ldr	r4, [pc, #292]	; (8001090 <MX_TIM3_Init+0x128>)
 8000f6c:	4a49      	ldr	r2, [pc, #292]	; (8001094 <MX_TIM3_Init+0x12c>)
 8000f6e:	6022      	str	r2, [r4, #0]
{
 8000f70:	b095      	sub	sp, #84	; 0x54
  htim3.Init.Prescaler = 2000-1;
 8000f72:	f240 72cf 	movw	r2, #1999	; 0x7cf
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f76:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 2000-1;
 8000f78:	6062      	str	r2, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1000-1;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f7a:	4620      	mov	r0, r4
  htim3.Init.Period = 1000-1;
 8000f7c:	f240 32e7 	movw	r2, #999	; 0x3e7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f84:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8000f88:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8000f8c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  htim3.Init.Period = 1000-1;
 8000f90:	e9c4 3202 	strd	r3, r2, [r4, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f94:	9312      	str	r3, [sp, #72]	; 0x48
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f96:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f98:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f9a:	f002 fbf9 	bl	8003790 <HAL_TIM_PWM_Init>
 8000f9e:	bb30      	cbnz	r0, 8000fee <MX_TIM3_Init+0x86>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fa4:	483a      	ldr	r0, [pc, #232]	; (8001090 <MX_TIM3_Init+0x128>)
 8000fa6:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fac:	f003 f94c 	bl	8004248 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb0:	bb18      	cbnz	r0, 8000ffa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fb2:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8001088 <MX_TIM3_Init+0x120>
  sConfigOC.Pulse = 2000;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb6:	2200      	movs	r2, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb8:	4835      	ldr	r0, [pc, #212]	; (8001090 <MX_TIM3_Init+0x128>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fba:	920e      	str	r2, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fbc:	a90c      	add	r1, sp, #48	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fbe:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc2:	9210      	str	r2, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fc4:	f002 ff8a 	bl	8003edc <HAL_TIM_PWM_ConfigChannel>
 8000fc8:	b9a0      	cbnz	r0, 8000ff4 <MX_TIM3_Init+0x8c>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8000fca:	6822      	ldr	r2, [r4, #0]
 8000fcc:	4932      	ldr	r1, [pc, #200]	; (8001098 <MX_TIM3_Init+0x130>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 8000fd0:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8000fd6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8000fda:	930b      	str	r3, [sp, #44]	; 0x2c
  if(timHandle->Instance==TIM1)
 8000fdc:	d010      	beq.n	8001000 <MX_TIM3_Init+0x98>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 8000fde:	492d      	ldr	r1, [pc, #180]	; (8001094 <MX_TIM3_Init+0x12c>)
 8000fe0:	428a      	cmp	r2, r1
 8000fe2:	d027      	beq.n	8001034 <MX_TIM3_Init+0xcc>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM5)
 8000fe4:	492d      	ldr	r1, [pc, #180]	; (800109c <MX_TIM3_Init+0x134>)
 8000fe6:	428a      	cmp	r2, r1
 8000fe8:	d03c      	beq.n	8001064 <MX_TIM3_Init+0xfc>
}
 8000fea:	b015      	add	sp, #84	; 0x54
 8000fec:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000fee:	f7ff fccd 	bl	800098c <Error_Handler>
 8000ff2:	e7d5      	b.n	8000fa0 <MX_TIM3_Init+0x38>
    Error_Handler();
 8000ff4:	f7ff fcca 	bl	800098c <Error_Handler>
 8000ff8:	e7e7      	b.n	8000fca <MX_TIM3_Init+0x62>
    Error_Handler();
 8000ffa:	f7ff fcc7 	bl	800098c <Error_Handler>
 8000ffe:	e7d8      	b.n	8000fb2 <MX_TIM3_Init+0x4a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001000:	4a27      	ldr	r2, [pc, #156]	; (80010a0 <MX_TIM3_Init+0x138>)
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	4827      	ldr	r0, [pc, #156]	; (80010a4 <MX_TIM3_Init+0x13c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	f041 0101 	orr.w	r1, r1, #1
 800100c:	6311      	str	r1, [r2, #48]	; 0x30
 800100e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001010:	f002 0201 	and.w	r2, r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = TAROT_L1_Pin|TAROT_L2_Pin|TAROT_R1_Pin|TAROT_R2_Pin;
 8001018:	f44f 6470 	mov.w	r4, #3840	; 0xf00
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800101c:	2201      	movs	r2, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	e9cd 4307 	strd	r4, r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001024:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001028:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800102a:	920b      	str	r2, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f001 fa4a 	bl	80024c4 <HAL_GPIO_Init>
}
 8001030:	b015      	add	sp, #84	; 0x54
 8001032:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	4a1a      	ldr	r2, [pc, #104]	; (80010a0 <MX_TIM3_Init+0x138>)
 8001036:	9302      	str	r3, [sp, #8]
 8001038:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 800103a:	481a      	ldr	r0, [pc, #104]	; (80010a4 <MX_TIM3_Init+0x13c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103c:	f041 0101 	orr.w	r1, r1, #1
 8001040:	6311      	str	r1, [r2, #48]	; 0x30
 8001042:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001044:	f002 0201 	and.w	r2, r2, #1
 8001048:	9202      	str	r2, [sp, #8]
 800104a:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = SERVO_Pin;
 800104e:	2440      	movs	r4, #64	; 0x40
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8001050:	a907      	add	r1, sp, #28
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = EDF_L1_Pin|EDF_R1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	e9cd 4307 	strd	r4, r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001056:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800105a:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f001 fa32 	bl	80024c4 <HAL_GPIO_Init>
}
 8001060:	b015      	add	sp, #84	; 0x54
 8001062:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <MX_TIM3_Init+0x138>)
 8001066:	9303      	str	r3, [sp, #12]
 8001068:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	480e      	ldr	r0, [pc, #56]	; (80010a4 <MX_TIM3_Init+0x13c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106c:	f041 0101 	orr.w	r1, r1, #1
 8001070:	6311      	str	r1, [r2, #48]	; 0x30
 8001072:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001074:	f002 0201 	and.w	r2, r2, #1
 8001078:	9203      	str	r2, [sp, #12]
 800107a:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = EDF_L1_Pin|EDF_R1_Pin;
 800107e:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	a907      	add	r1, sp, #28
 8001082:	e7e6      	b.n	8001052 <MX_TIM3_Init+0xea>
 8001084:	f3af 8000 	nop.w
 8001088:	00000060 	.word	0x00000060
 800108c:	000007d0 	.word	0x000007d0
 8001090:	2000065c 	.word	0x2000065c
 8001094:	40000400 	.word	0x40000400
 8001098:	40010000 	.word	0x40010000
 800109c:	40000c00 	.word	0x40000c00
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020000 	.word	0x40020000

080010a8 <MX_TIM9_Init>:
{
 80010a8:	b500      	push	{lr}
  htim9.Instance = TIM9;
 80010aa:	481b      	ldr	r0, [pc, #108]	; (8001118 <MX_TIM9_Init+0x70>)
 80010ac:	491b      	ldr	r1, [pc, #108]	; (800111c <MX_TIM9_Init+0x74>)
  htim9.Init.Prescaler = 100-1;
 80010ae:	2263      	movs	r2, #99	; 0x63
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010b0:	2300      	movs	r3, #0
{
 80010b2:	b085      	sub	sp, #20
  htim9.Init.Prescaler = 100-1;
 80010b4:	e9c0 1200 	strd	r1, r2, [r0]
  htim9.Init.Period = 0xFFFF-1;
 80010b8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010bc:	2280      	movs	r2, #128	; 0x80
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010be:	e9cd 3300 	strd	r3, r3, [sp]
 80010c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
  htim9.Init.Period = 0xFFFF-1;
 80010c6:	e9c0 3102 	strd	r3, r1, [r0, #8]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ca:	6103      	str	r3, [r0, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010cc:	6182      	str	r2, [r0, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 80010ce:	f002 fc19 	bl	8003904 <HAL_TIM_IC_Init>
 80010d2:	b980      	cbnz	r0, 80010f6 <MX_TIM9_Init+0x4e>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80010d4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8001108 <MX_TIM9_Init+0x60>
 80010d8:	ed8d 7b00 	vstr	d7, [sp]
 80010dc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8001110 <MX_TIM9_Init+0x68>
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010e0:	480d      	ldr	r0, [pc, #52]	; (8001118 <MX_TIM9_Init+0x70>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	4669      	mov	r1, sp
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80010e6:	ed8d 7b02 	vstr	d7, [sp, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010ea:	f002 fe21 	bl	8003d30 <HAL_TIM_IC_ConfigChannel>
 80010ee:	b928      	cbnz	r0, 80010fc <MX_TIM9_Init+0x54>
}
 80010f0:	b005      	add	sp, #20
 80010f2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80010f6:	f7ff fc49 	bl	800098c <Error_Handler>
 80010fa:	e7eb      	b.n	80010d4 <MX_TIM9_Init+0x2c>
    Error_Handler();
 80010fc:	f7ff fc46 	bl	800098c <Error_Handler>
}
 8001100:	b005      	add	sp, #20
 8001102:	f85d fb04 	ldr.w	pc, [sp], #4
 8001106:	bf00      	nop
 8001108:	0000000a 	.word	0x0000000a
 800110c:	00000001 	.word	0x00000001
	...
 8001118:	200007c4 	.word	0x200007c4
 800111c:	40014000 	.word	0x40014000

08001120 <MX_TIM10_Init>:
{
 8001120:	b500      	push	{lr}
  htim10.Instance = TIM10;
 8001122:	4821      	ldr	r0, [pc, #132]	; (80011a8 <MX_TIM10_Init+0x88>)
 8001124:	4921      	ldr	r1, [pc, #132]	; (80011ac <MX_TIM10_Init+0x8c>)
  htim10.Init.Prescaler = 100-1;
 8001126:	2263      	movs	r2, #99	; 0x63
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001128:	2300      	movs	r3, #0
{
 800112a:	b085      	sub	sp, #20
  htim10.Init.Prescaler = 100-1;
 800112c:	e9c0 1200 	strd	r1, r2, [r0]
  htim10.Init.Period = 0xFFFF-1;
 8001130:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001134:	2280      	movs	r2, #128	; 0x80
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001136:	e9cd 3300 	strd	r3, r3, [sp]
 800113a:	e9cd 3302 	strd	r3, r3, [sp, #8]
  htim10.Init.Period = 0xFFFF-1;
 800113e:	e9c0 3102 	strd	r3, r1, [r0, #8]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001142:	6103      	str	r3, [r0, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001144:	6182      	str	r2, [r0, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001146:	f002 fa69 	bl	800361c <HAL_TIM_Base_Init>
 800114a:	b9a0      	cbnz	r0, 8001176 <MX_TIM10_Init+0x56>
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 800114c:	4816      	ldr	r0, [pc, #88]	; (80011a8 <MX_TIM10_Init+0x88>)
 800114e:	f002 fbd9 	bl	8003904 <HAL_TIM_IC_Init>
 8001152:	b9b8      	cbnz	r0, 8001184 <MX_TIM10_Init+0x64>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001154:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8001198 <MX_TIM10_Init+0x78>
 8001158:	ed8d 7b00 	vstr	d7, [sp]
 800115c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80011a0 <MX_TIM10_Init+0x80>
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001160:	4811      	ldr	r0, [pc, #68]	; (80011a8 <MX_TIM10_Init+0x88>)
 8001162:	2200      	movs	r2, #0
 8001164:	4669      	mov	r1, sp
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001166:	ed8d 7b02 	vstr	d7, [sp, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800116a:	f002 fde1 	bl	8003d30 <HAL_TIM_IC_ConfigChannel>
 800116e:	b960      	cbnz	r0, 800118a <MX_TIM10_Init+0x6a>
}
 8001170:	b005      	add	sp, #20
 8001172:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001176:	f7ff fc09 	bl	800098c <Error_Handler>
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 800117a:	480b      	ldr	r0, [pc, #44]	; (80011a8 <MX_TIM10_Init+0x88>)
 800117c:	f002 fbc2 	bl	8003904 <HAL_TIM_IC_Init>
 8001180:	2800      	cmp	r0, #0
 8001182:	d0e7      	beq.n	8001154 <MX_TIM10_Init+0x34>
    Error_Handler();
 8001184:	f7ff fc02 	bl	800098c <Error_Handler>
 8001188:	e7e4      	b.n	8001154 <MX_TIM10_Init+0x34>
    Error_Handler();
 800118a:	f7ff fbff 	bl	800098c <Error_Handler>
}
 800118e:	b005      	add	sp, #20
 8001190:	f85d fb04 	ldr.w	pc, [sp], #4
 8001194:	f3af 8000 	nop.w
 8001198:	0000000a 	.word	0x0000000a
 800119c:	00000001 	.word	0x00000001
	...
 80011a8:	20000440 	.word	0x20000440
 80011ac:	40014400 	.word	0x40014400

080011b0 <MX_TIM11_Init>:
{
 80011b0:	b500      	push	{lr}
  htim11.Instance = TIM11;
 80011b2:	4821      	ldr	r0, [pc, #132]	; (8001238 <MX_TIM11_Init+0x88>)
 80011b4:	4921      	ldr	r1, [pc, #132]	; (800123c <MX_TIM11_Init+0x8c>)
  htim11.Init.Prescaler = 100-1;
 80011b6:	2263      	movs	r2, #99	; 0x63
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011b8:	2300      	movs	r3, #0
{
 80011ba:	b085      	sub	sp, #20
  htim11.Init.Prescaler = 100-1;
 80011bc:	e9c0 1200 	strd	r1, r2, [r0]
  htim11.Init.Period = 0xFFFF-1;
 80011c0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011c4:	2280      	movs	r2, #128	; 0x80
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011c6:	e9cd 3300 	strd	r3, r3, [sp]
 80011ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
  htim11.Init.Period = 0xFFFF-1;
 80011ce:	e9c0 3102 	strd	r3, r1, [r0, #8]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d2:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011d4:	6182      	str	r2, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80011d6:	f002 fa21 	bl	800361c <HAL_TIM_Base_Init>
 80011da:	b9a0      	cbnz	r0, 8001206 <MX_TIM11_Init+0x56>
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 80011dc:	4816      	ldr	r0, [pc, #88]	; (8001238 <MX_TIM11_Init+0x88>)
 80011de:	f002 fb91 	bl	8003904 <HAL_TIM_IC_Init>
 80011e2:	b9b8      	cbnz	r0, 8001214 <MX_TIM11_Init+0x64>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80011e4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8001228 <MX_TIM11_Init+0x78>
 80011e8:	ed8d 7b00 	vstr	d7, [sp]
 80011ec:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8001230 <MX_TIM11_Init+0x80>
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011f0:	4811      	ldr	r0, [pc, #68]	; (8001238 <MX_TIM11_Init+0x88>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	4669      	mov	r1, sp
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80011f6:	ed8d 7b02 	vstr	d7, [sp, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011fa:	f002 fd99 	bl	8003d30 <HAL_TIM_IC_ConfigChannel>
 80011fe:	b960      	cbnz	r0, 800121a <MX_TIM11_Init+0x6a>
}
 8001200:	b005      	add	sp, #20
 8001202:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001206:	f7ff fbc1 	bl	800098c <Error_Handler>
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 800120a:	480b      	ldr	r0, [pc, #44]	; (8001238 <MX_TIM11_Init+0x88>)
 800120c:	f002 fb7a 	bl	8003904 <HAL_TIM_IC_Init>
 8001210:	2800      	cmp	r0, #0
 8001212:	d0e7      	beq.n	80011e4 <MX_TIM11_Init+0x34>
    Error_Handler();
 8001214:	f7ff fbba 	bl	800098c <Error_Handler>
 8001218:	e7e4      	b.n	80011e4 <MX_TIM11_Init+0x34>
    Error_Handler();
 800121a:	f7ff fbb7 	bl	800098c <Error_Handler>
}
 800121e:	b005      	add	sp, #20
 8001220:	f85d fb04 	ldr.w	pc, [sp], #4
 8001224:	f3af 8000 	nop.w
 8001228:	0000000a 	.word	0x0000000a
 800122c:	00000001 	.word	0x00000001
	...
 8001238:	200004f4 	.word	0x200004f4
 800123c:	40014800 	.word	0x40014800

08001240 <HAL_TIM_PWM_MspInit>:
{
 8001240:	b530      	push	{r4, r5, lr}
  if(tim_pwmHandle->Instance==TIM1)
 8001242:	4a3c      	ldr	r2, [pc, #240]	; (8001334 <HAL_TIM_PWM_MspInit+0xf4>)
 8001244:	6803      	ldr	r3, [r0, #0]
 8001246:	4293      	cmp	r3, r2
{
 8001248:	b085      	sub	sp, #20
  if(tim_pwmHandle->Instance==TIM1)
 800124a:	d015      	beq.n	8001278 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800124c:	4a3a      	ldr	r2, [pc, #232]	; (8001338 <HAL_TIM_PWM_MspInit+0xf8>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d038      	beq.n	80012c4 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM5)
 8001252:	4a3a      	ldr	r2, [pc, #232]	; (800133c <HAL_TIM_PWM_MspInit+0xfc>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d001      	beq.n	800125c <HAL_TIM_PWM_MspInit+0x1c>
}
 8001258:	b005      	add	sp, #20
 800125a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM5_CLK_ENABLE();
 800125c:	4b38      	ldr	r3, [pc, #224]	; (8001340 <HAL_TIM_PWM_MspInit+0x100>)
 800125e:	2200      	movs	r2, #0
 8001260:	9203      	str	r2, [sp, #12]
 8001262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001264:	f042 0208 	orr.w	r2, r2, #8
 8001268:	641a      	str	r2, [r3, #64]	; 0x40
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	9303      	str	r3, [sp, #12]
 8001272:	9b03      	ldr	r3, [sp, #12]
}
 8001274:	b005      	add	sp, #20
 8001276:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001278:	2200      	movs	r2, #0
 800127a:	4b31      	ldr	r3, [pc, #196]	; (8001340 <HAL_TIM_PWM_MspInit+0x100>)
 800127c:	9201      	str	r2, [sp, #4]
 800127e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001280:	f041 0101 	orr.w	r1, r1, #1
 8001284:	6459      	str	r1, [r3, #68]	; 0x44
 8001286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001288:	f003 0301 	and.w	r3, r3, #1
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800128c:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 800128e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001290:	2018      	movs	r0, #24
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001292:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001294:	f000 fee6 	bl	8002064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001298:	2018      	movs	r0, #24
 800129a:	f000 ff21 	bl	80020e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	4611      	mov	r1, r2
 80012a2:	2019      	movs	r0, #25
 80012a4:	f000 fede 	bl	8002064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012a8:	2019      	movs	r0, #25
 80012aa:	f000 ff19 	bl	80020e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	4611      	mov	r1, r2
 80012b2:	201a      	movs	r0, #26
 80012b4:	f000 fed6 	bl	8002064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80012b8:	201a      	movs	r0, #26
}
 80012ba:	b005      	add	sp, #20
 80012bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80012c0:	f000 bf0e 	b.w	80020e0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	f502 320d 	add.w	r2, r2, #144384	; 0x23400
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	6c11      	ldr	r1, [r2, #64]	; 0x40
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80012ce:	4d1d      	ldr	r5, [pc, #116]	; (8001344 <HAL_TIM_PWM_MspInit+0x104>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012d0:	f041 0102 	orr.w	r1, r1, #2
 80012d4:	6411      	str	r1, [r2, #64]	; 0x40
 80012d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80012d8:	491b      	ldr	r1, [pc, #108]	; (8001348 <HAL_TIM_PWM_MspInit+0x108>)
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80012da:	60eb      	str	r3, [r5, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012dc:	f002 0202 	and.w	r2, r2, #2
 80012e0:	9202      	str	r2, [sp, #8]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80012e2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80012e6:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ea:	2140      	movs	r1, #64	; 0x40
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80012ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012f0:	60a9      	str	r1, [r5, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80012f2:	612a      	str	r2, [r5, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012fc:	e9c5 1205 	strd	r1, r2, [r5, #20]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8001300:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001304:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001308:	e9c5 1207 	strd	r1, r2, [r5, #28]
 800130c:	4604      	mov	r4, r0
    hdma_tim3_ch1_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800130e:	2104      	movs	r1, #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001310:	9802      	ldr	r0, [sp, #8]
    hdma_tim3_ch1_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001312:	2203      	movs	r2, #3
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001314:	4628      	mov	r0, r5
    hdma_tim3_ch1_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001316:	e9c5 1209 	strd	r1, r2, [r5, #36]	; 0x24
    hdma_tim3_ch1_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800131a:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800131e:	f000 ff07 	bl	8002130 <HAL_DMA_Init>
 8001322:	b920      	cbnz	r0, 800132e <HAL_TIM_PWM_MspInit+0xee>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001324:	6265      	str	r5, [r4, #36]	; 0x24
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001326:	63a5      	str	r5, [r4, #56]	; 0x38
 8001328:	63ac      	str	r4, [r5, #56]	; 0x38
}
 800132a:	b005      	add	sp, #20
 800132c:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 800132e:	f7ff fb2d 	bl	800098c <Error_Handler>
 8001332:	e7f7      	b.n	8001324 <HAL_TIM_PWM_MspInit+0xe4>
 8001334:	40010000 	.word	0x40010000
 8001338:	40000400 	.word	0x40000400
 800133c:	40000c00 	.word	0x40000c00
 8001340:	40023800 	.word	0x40023800
 8001344:	2000032c 	.word	0x2000032c
 8001348:	40026070 	.word	0x40026070

0800134c <HAL_TIM_IC_MspInit>:
{
 800134c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(tim_icHandle->Instance==TIM2)
 800134e:	6803      	ldr	r3, [r0, #0]
{
 8001350:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	2400      	movs	r4, #0
  if(tim_icHandle->Instance==TIM2)
 8001354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800135c:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8001360:	940a      	str	r4, [sp, #40]	; 0x28
  if(tim_icHandle->Instance==TIM2)
 8001362:	d004      	beq.n	800136e <HAL_TIM_IC_MspInit+0x22>
  else if(tim_icHandle->Instance==TIM9)
 8001364:	4a3a      	ldr	r2, [pc, #232]	; (8001450 <HAL_TIM_IC_MspInit+0x104>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d045      	beq.n	80013f6 <HAL_TIM_IC_MspInit+0xaa>
}
 800136a:	b00d      	add	sp, #52	; 0x34
 800136c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800136e:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001372:	9401      	str	r4, [sp, #4]
 8001374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	4837      	ldr	r0, [pc, #220]	; (8001454 <HAL_TIM_IC_MspInit+0x108>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001378:	f042 0201 	orr.w	r2, r2, #1
 800137c:	641a      	str	r2, [r3, #64]	; 0x40
 800137e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001380:	f002 0201 	and.w	r2, r2, #1
 8001384:	9201      	str	r2, [sp, #4]
 8001386:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001388:	9402      	str	r4, [sp, #8]
 800138a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800138c:	f042 0201 	orr.w	r2, r2, #1
 8001390:	631a      	str	r2, [r3, #48]	; 0x30
 8001392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001394:	f002 0201 	and.w	r2, r2, #1
 8001398:	9202      	str	r2, [sp, #8]
 800139a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	9403      	str	r4, [sp, #12]
 800139e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a0:	f042 0202 	orr.w	r2, r2, #2
 80013a4:	631a      	str	r2, [r3, #48]	; 0x30
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013ae:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = SPEED_Pin|THROTTLE_Pin;
 80013b2:	2228      	movs	r2, #40	; 0x28
 80013b4:	2602      	movs	r6, #2
 80013b6:	2702      	movs	r7, #2
 80013b8:	2302      	movs	r3, #2
 80013ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80013be:	e9cd 6708 	strd	r6, r7, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013c4:	950a      	str	r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f001 f87d 	bl	80024c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GEAR_Pin;
 80013ca:	2302      	movs	r3, #2
    HAL_GPIO_Init(GEAR_GPIO_Port, &GPIO_InitStruct);
 80013cc:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GEAR_Pin;
 80013ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
    HAL_GPIO_Init(GEAR_GPIO_Port, &GPIO_InitStruct);
 80013d2:	4821      	ldr	r0, [pc, #132]	; (8001458 <HAL_TIM_IC_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013d4:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GEAR_Pin;
 80013d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80013da:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GEAR_GPIO_Port, &GPIO_InitStruct);
 80013de:	f001 f871 	bl	80024c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013e2:	4622      	mov	r2, r4
 80013e4:	4621      	mov	r1, r4
 80013e6:	201c      	movs	r0, #28
 80013e8:	f000 fe3c 	bl	8002064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013ec:	201c      	movs	r0, #28
 80013ee:	f000 fe77 	bl	80020e0 <HAL_NVIC_EnableIRQ>
}
 80013f2:	b00d      	add	sp, #52	; 0x34
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM9_CLK_ENABLE();
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <HAL_TIM_IC_MspInit+0x110>)
 80013f8:	9404      	str	r4, [sp, #16]
 80013fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(PITCH_GPIO_Port, &GPIO_InitStruct);
 80013fc:	4815      	ldr	r0, [pc, #84]	; (8001454 <HAL_TIM_IC_MspInit+0x108>)
    __HAL_RCC_TIM9_CLK_ENABLE();
 80013fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001402:	645a      	str	r2, [r3, #68]	; 0x44
 8001404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001406:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800140a:	9204      	str	r2, [sp, #16]
 800140c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	9405      	str	r4, [sp, #20]
 8001410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001412:	f042 0201 	orr.w	r2, r2, #1
 8001416:	631a      	str	r2, [r3, #48]	; 0x30
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = PITCH_Pin;
 8001420:	2204      	movs	r2, #4
 8001422:	2302      	movs	r3, #2
 8001424:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001428:	2202      	movs	r2, #2
 800142a:	2302      	movs	r3, #2
 800142c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(PITCH_GPIO_Port, &GPIO_InitStruct);
 8001430:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001432:	2303      	movs	r3, #3
 8001434:	930a      	str	r3, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	9a05      	ldr	r2, [sp, #20]
    HAL_GPIO_Init(PITCH_GPIO_Port, &GPIO_InitStruct);
 8001438:	f001 f844 	bl	80024c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800143c:	4622      	mov	r2, r4
 800143e:	4621      	mov	r1, r4
 8001440:	2018      	movs	r0, #24
 8001442:	f000 fe0f 	bl	8002064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001446:	2018      	movs	r0, #24
 8001448:	f000 fe4a 	bl	80020e0 <HAL_NVIC_EnableIRQ>
}
 800144c:	b00d      	add	sp, #52	; 0x34
 800144e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001450:	40014000 	.word	0x40014000
 8001454:	40020000 	.word	0x40020000
 8001458:	40020400 	.word	0x40020400
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_TIM_Base_MspInit>:
{
 8001460:	b510      	push	{r4, lr}
  if(tim_baseHandle->Instance==TIM10)
 8001462:	6803      	ldr	r3, [r0, #0]
 8001464:	4a35      	ldr	r2, [pc, #212]	; (800153c <HAL_TIM_Base_MspInit+0xdc>)
{
 8001466:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	2400      	movs	r4, #0
  if(tim_baseHandle->Instance==TIM10)
 800146a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001470:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001474:	9408      	str	r4, [sp, #32]
  if(tim_baseHandle->Instance==TIM10)
 8001476:	d004      	beq.n	8001482 <HAL_TIM_Base_MspInit+0x22>
  else if(tim_baseHandle->Instance==TIM11)
 8001478:	4a31      	ldr	r2, [pc, #196]	; (8001540 <HAL_TIM_Base_MspInit+0xe0>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d02f      	beq.n	80014de <HAL_TIM_Base_MspInit+0x7e>
}
 800147e:	b00a      	add	sp, #40	; 0x28
 8001480:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001482:	4b30      	ldr	r3, [pc, #192]	; (8001544 <HAL_TIM_Base_MspInit+0xe4>)
 8001484:	9400      	str	r4, [sp, #0]
 8001486:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(ROLL_GPIO_Port, &GPIO_InitStruct);
 8001488:	482f      	ldr	r0, [pc, #188]	; (8001548 <HAL_TIM_Base_MspInit+0xe8>)
    __HAL_RCC_TIM10_CLK_ENABLE();
 800148a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800148e:	645a      	str	r2, [r3, #68]	; 0x44
 8001490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001492:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001496:	9200      	str	r2, [sp, #0]
 8001498:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	9401      	str	r4, [sp, #4]
 800149c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800149e:	f042 0202 	orr.w	r2, r2, #2
 80014a2:	631a      	str	r2, [r3, #48]	; 0x30
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = ROLL_Pin;
 80014ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b0:	2302      	movs	r3, #2
 80014b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80014b6:	2202      	movs	r2, #2
 80014b8:	2302      	movs	r3, #2
 80014ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(ROLL_GPIO_Port, &GPIO_InitStruct);
 80014be:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80014c0:	2303      	movs	r3, #3
 80014c2:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c4:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(ROLL_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f000 fffd 	bl	80024c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80014ca:	4622      	mov	r2, r4
 80014cc:	4621      	mov	r1, r4
 80014ce:	2019      	movs	r0, #25
 80014d0:	f000 fdc8 	bl	8002064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014d4:	2019      	movs	r0, #25
 80014d6:	f000 fe03 	bl	80020e0 <HAL_NVIC_EnableIRQ>
}
 80014da:	b00a      	add	sp, #40	; 0x28
 80014dc:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM11_CLK_ENABLE();
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <HAL_TIM_Base_MspInit+0xe4>)
 80014e0:	9402      	str	r4, [sp, #8]
 80014e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(YAW_GPIO_Port, &GPIO_InitStruct);
 80014e4:	4818      	ldr	r0, [pc, #96]	; (8001548 <HAL_TIM_Base_MspInit+0xe8>)
    __HAL_RCC_TIM11_CLK_ENABLE();
 80014e6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80014ea:	645a      	str	r2, [r3, #68]	; 0x44
 80014ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014ee:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80014f2:	9202      	str	r2, [sp, #8]
 80014f4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	9403      	str	r4, [sp, #12]
 80014f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014fa:	f042 0202 	orr.w	r2, r2, #2
 80014fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = YAW_Pin;
 8001508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800150c:	2302      	movs	r3, #2
 800150e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001512:	2202      	movs	r2, #2
 8001514:	2302      	movs	r3, #2
 8001516:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(YAW_GPIO_Port, &GPIO_InitStruct);
 800151a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800151c:	2303      	movs	r3, #3
 800151e:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001520:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(YAW_GPIO_Port, &GPIO_InitStruct);
 8001522:	f000 ffcf 	bl	80024c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001526:	4622      	mov	r2, r4
 8001528:	4621      	mov	r1, r4
 800152a:	201a      	movs	r0, #26
 800152c:	f000 fd9a 	bl	8002064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001530:	201a      	movs	r0, #26
 8001532:	f000 fdd5 	bl	80020e0 <HAL_NVIC_EnableIRQ>
}
 8001536:	b00a      	add	sp, #40	; 0x28
 8001538:	bd10      	pop	{r4, pc}
 800153a:	bf00      	nop
 800153c:	40014400 	.word	0x40014400
 8001540:	40014800 	.word	0x40014800
 8001544:	40023800 	.word	0x40023800
 8001548:	40020400 	.word	0x40020400
 800154c:	00000000 	.word	0x00000000

08001550 <HAL_TIM_MspPostInit>:
{
 8001550:	b500      	push	{lr}
  if(timHandle->Instance==TIM1)
 8001552:	6802      	ldr	r2, [r0, #0]
 8001554:	493a      	ldr	r1, [pc, #232]	; (8001640 <HAL_TIM_MspPostInit+0xf0>)
{
 8001556:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 800155a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001560:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001564:	9308      	str	r3, [sp, #32]
  if(timHandle->Instance==TIM1)
 8001566:	d008      	beq.n	800157a <HAL_TIM_MspPostInit+0x2a>
  else if(timHandle->Instance==TIM3)
 8001568:	4936      	ldr	r1, [pc, #216]	; (8001644 <HAL_TIM_MspPostInit+0xf4>)
 800156a:	428a      	cmp	r2, r1
 800156c:	d021      	beq.n	80015b2 <HAL_TIM_MspPostInit+0x62>
  else if(timHandle->Instance==TIM5)
 800156e:	4936      	ldr	r1, [pc, #216]	; (8001648 <HAL_TIM_MspPostInit+0xf8>)
 8001570:	428a      	cmp	r2, r1
 8001572:	d03a      	beq.n	80015ea <HAL_TIM_MspPostInit+0x9a>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001574:	b00b      	add	sp, #44	; 0x2c
 8001576:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	4a34      	ldr	r2, [pc, #208]	; (800164c <HAL_TIM_MspPostInit+0xfc>)
 800157c:	9301      	str	r3, [sp, #4]
 800157e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	4833      	ldr	r0, [pc, #204]	; (8001650 <HAL_TIM_MspPostInit+0x100>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6313      	str	r3, [r2, #48]	; 0x30
 8001588:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = TAROT_L1_Pin|TAROT_L2_Pin|TAROT_R1_Pin|TAROT_R2_Pin;
 800158a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8001628 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = TAROT_L1_Pin|TAROT_L2_Pin|TAROT_R1_Pin|TAROT_R2_Pin;
 8001594:	2202      	movs	r2, #2
 8001596:	2302      	movs	r3, #2
 8001598:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800159e:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = TAROT_L1_Pin|TAROT_L2_Pin|TAROT_R1_Pin|TAROT_R2_Pin;
 80015a0:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015a6:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	f000 ff8c 	bl	80024c4 <HAL_GPIO_Init>
}
 80015ac:	b00b      	add	sp, #44	; 0x2c
 80015ae:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	4a26      	ldr	r2, [pc, #152]	; (800164c <HAL_TIM_MspPostInit+0xfc>)
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 80015b8:	4825      	ldr	r0, [pc, #148]	; (8001650 <HAL_TIM_MspPostInit+0x100>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6313      	str	r3, [r2, #48]	; 0x30
 80015c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = SERVO_Pin;
 80015c2:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8001630 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = SERVO_Pin;
 80015cc:	2202      	movs	r2, #2
 80015ce:	2302      	movs	r3, #2
 80015d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 80015d4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015d6:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = SERVO_Pin;
 80015d8:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015dc:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015de:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f000 ff70 	bl	80024c4 <HAL_GPIO_Init>
}
 80015e4:	b00b      	add	sp, #44	; 0x2c
 80015e6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	4a18      	ldr	r2, [pc, #96]	; (800164c <HAL_TIM_MspPostInit+0xfc>)
 80015ec:	9303      	str	r3, [sp, #12]
 80015ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	4817      	ldr	r0, [pc, #92]	; (8001650 <HAL_TIM_MspPostInit+0x100>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6313      	str	r3, [r2, #48]	; 0x30
 80015f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = EDF_L1_Pin|EDF_R1_Pin;
 80015fa:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8001638 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = EDF_L1_Pin|EDF_R1_Pin;
 8001604:	2202      	movs	r2, #2
 8001606:	2302      	movs	r3, #2
 8001608:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800160e:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = EDF_L1_Pin|EDF_R1_Pin;
 8001610:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001616:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	f000 ff54 	bl	80024c4 <HAL_GPIO_Init>
}
 800161c:	b00b      	add	sp, #44	; 0x2c
 800161e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001622:	bf00      	nop
 8001624:	f3af 8000 	nop.w
 8001628:	00000f00 	.word	0x00000f00
 800162c:	00000002 	.word	0x00000002
 8001630:	00000040 	.word	0x00000040
 8001634:	00000002 	.word	0x00000002
 8001638:	00000003 	.word	0x00000003
 800163c:	00000002 	.word	0x00000002
 8001640:	40010000 	.word	0x40010000
 8001644:	40000400 	.word	0x40000400
 8001648:	40000c00 	.word	0x40000c00
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000
 8001654:	00000000 	.word	0x00000000

08001658 <MX_TIM1_Init>:
{
 8001658:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165a:	2400      	movs	r4, #0
{
 800165c:	b092      	sub	sp, #72	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800165e:	2220      	movs	r2, #32
 8001660:	4621      	mov	r1, r4
 8001662:	a80a      	add	r0, sp, #40	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001664:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001668:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800166c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001670:	e9cd 4407 	strd	r4, r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001674:	9400      	str	r4, [sp, #0]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001676:	f003 fa7d 	bl	8004b74 <memset>
  htim1.Instance = TIM1;
 800167a:	4837      	ldr	r0, [pc, #220]	; (8001758 <MX_TIM1_Init+0x100>)
 800167c:	4a37      	ldr	r2, [pc, #220]	; (800175c <MX_TIM1_Init+0x104>)
  htim1.Init.Period = 8400-1;
 800167e:	f242 03cf 	movw	r3, #8399	; 0x20cf
 8001682:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001686:	2380      	movs	r3, #128	; 0x80
  htim1.Init.Prescaler = 0;
 8001688:	e9c0 2400 	strd	r2, r4, [r0]
  htim1.Init.RepetitionCounter = 0;
 800168c:	e9c0 4404 	strd	r4, r4, [r0, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001690:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001692:	f002 f87d 	bl	8003790 <HAL_TIM_PWM_Init>
 8001696:	2800      	cmp	r0, #0
 8001698:	d141      	bne.n	800171e <MX_TIM1_Init+0xc6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169a:	2200      	movs	r2, #0
 800169c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800169e:	482e      	ldr	r0, [pc, #184]	; (8001758 <MX_TIM1_Init+0x100>)
 80016a0:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a2:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016a6:	f002 fdcf 	bl	8004248 <HAL_TIMEx_MasterConfigSynchronization>
 80016aa:	2800      	cmp	r0, #0
 80016ac:	d14d      	bne.n	800174a <MX_TIM1_Init+0xf2>
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ae:	2000      	movs	r0, #0
 80016b0:	2100      	movs	r1, #0
  sConfigOC.Pulse = 0;
 80016b2:	2200      	movs	r2, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b8:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ba:	4827      	ldr	r0, [pc, #156]	; (8001758 <MX_TIM1_Init+0x100>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016bc:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016be:	a902      	add	r1, sp, #8
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c0:	e9cd 2203 	strd	r2, r2, [sp, #12]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016c4:	9205      	str	r2, [sp, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016c6:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016c8:	f002 fc08 	bl	8003edc <HAL_TIM_PWM_ConfigChannel>
 80016cc:	2800      	cmp	r0, #0
 80016ce:	d139      	bne.n	8001744 <MX_TIM1_Init+0xec>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016d0:	4821      	ldr	r0, [pc, #132]	; (8001758 <MX_TIM1_Init+0x100>)
 80016d2:	2204      	movs	r2, #4
 80016d4:	a902      	add	r1, sp, #8
 80016d6:	f002 fc01 	bl	8003edc <HAL_TIM_PWM_ConfigChannel>
 80016da:	bb80      	cbnz	r0, 800173e <MX_TIM1_Init+0xe6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016dc:	2208      	movs	r2, #8
 80016de:	481e      	ldr	r0, [pc, #120]	; (8001758 <MX_TIM1_Init+0x100>)
 80016e0:	eb0d 0102 	add.w	r1, sp, r2
 80016e4:	f002 fbfa 	bl	8003edc <HAL_TIM_PWM_ConfigChannel>
 80016e8:	bb30      	cbnz	r0, 8001738 <MX_TIM1_Init+0xe0>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016ea:	481b      	ldr	r0, [pc, #108]	; (8001758 <MX_TIM1_Init+0x100>)
 80016ec:	220c      	movs	r2, #12
 80016ee:	a902      	add	r1, sp, #8
 80016f0:	f002 fbf4 	bl	8003edc <HAL_TIM_PWM_ConfigChannel>
 80016f4:	b9e8      	cbnz	r0, 8001732 <MX_TIM1_Init+0xda>
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016f6:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8001750 <MX_TIM1_Init+0xf8>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016fa:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016fc:	4816      	ldr	r0, [pc, #88]	; (8001758 <MX_TIM1_Init+0x100>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016fe:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001700:	a90a      	add	r1, sp, #40	; 0x28
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001702:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001706:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.DeadTime = 0;
 800170a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800170e:	f002 fdd3 	bl	80042b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001712:	b938      	cbnz	r0, 8001724 <MX_TIM1_Init+0xcc>
  HAL_TIM_MspPostInit(&htim1);
 8001714:	4810      	ldr	r0, [pc, #64]	; (8001758 <MX_TIM1_Init+0x100>)
 8001716:	f7ff ff1b 	bl	8001550 <HAL_TIM_MspPostInit>
}
 800171a:	b012      	add	sp, #72	; 0x48
 800171c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800171e:	f7ff f935 	bl	800098c <Error_Handler>
 8001722:	e7ba      	b.n	800169a <MX_TIM1_Init+0x42>
    Error_Handler();
 8001724:	f7ff f932 	bl	800098c <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8001728:	480b      	ldr	r0, [pc, #44]	; (8001758 <MX_TIM1_Init+0x100>)
 800172a:	f7ff ff11 	bl	8001550 <HAL_TIM_MspPostInit>
}
 800172e:	b012      	add	sp, #72	; 0x48
 8001730:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001732:	f7ff f92b 	bl	800098c <Error_Handler>
 8001736:	e7de      	b.n	80016f6 <MX_TIM1_Init+0x9e>
    Error_Handler();
 8001738:	f7ff f928 	bl	800098c <Error_Handler>
 800173c:	e7d5      	b.n	80016ea <MX_TIM1_Init+0x92>
    Error_Handler();
 800173e:	f7ff f925 	bl	800098c <Error_Handler>
 8001742:	e7cb      	b.n	80016dc <MX_TIM1_Init+0x84>
    Error_Handler();
 8001744:	f7ff f922 	bl	800098c <Error_Handler>
 8001748:	e7c2      	b.n	80016d0 <MX_TIM1_Init+0x78>
    Error_Handler();
 800174a:	f7ff f91f 	bl	800098c <Error_Handler>
 800174e:	e7ae      	b.n	80016ae <MX_TIM1_Init+0x56>
 8001750:	00000000 	.word	0x00000000
 8001754:	00002000 	.word	0x00002000
 8001758:	2000038c 	.word	0x2000038c
 800175c:	40010000 	.word	0x40010000

08001760 <MX_TIM5_Init>:
{
 8001760:	b500      	push	{lr}
  htim5.Instance = TIM5;
 8001762:	4829      	ldr	r0, [pc, #164]	; (8001808 <MX_TIM5_Init+0xa8>)
 8001764:	4a29      	ldr	r2, [pc, #164]	; (800180c <MX_TIM5_Init+0xac>)
 8001766:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 100-1;
 8001768:	2263      	movs	r2, #99	; 0x63
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176a:	2300      	movs	r3, #0
{
 800176c:	b08b      	sub	sp, #44	; 0x2c
  htim5.Init.Prescaler = 100-1;
 800176e:	6042      	str	r2, [r0, #4]
  htim5.Init.Period = 2000-1;
 8001770:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001774:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001778:	2280      	movs	r2, #128	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177a:	e9cd 3300 	strd	r3, r3, [sp]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800177e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001782:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001786:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800178a:	9308      	str	r3, [sp, #32]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178c:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800178e:	6182      	str	r2, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001790:	f001 fffe 	bl	8003790 <HAL_TIM_PWM_Init>
 8001794:	bb00      	cbnz	r0, 80017d8 <MX_TIM5_Init+0x78>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001796:	2200      	movs	r2, #0
 8001798:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800179a:	481b      	ldr	r0, [pc, #108]	; (8001808 <MX_TIM5_Init+0xa8>)
 800179c:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017a2:	f002 fd51 	bl	8004248 <HAL_TIMEx_MasterConfigSynchronization>
 80017a6:	bb28      	cbnz	r0, 80017f4 <MX_TIM5_Init+0x94>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8001800 <MX_TIM5_Init+0xa0>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ac:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ae:	4816      	ldr	r0, [pc, #88]	; (8001808 <MX_TIM5_Init+0xa8>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b0:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017b2:	a902      	add	r1, sp, #8
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b4:	ed8d 7b02 	vstr	d7, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b8:	9206      	str	r2, [sp, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ba:	f002 fb8f 	bl	8003edc <HAL_TIM_PWM_ConfigChannel>
 80017be:	b9b0      	cbnz	r0, 80017ee <MX_TIM5_Init+0x8e>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017c0:	4811      	ldr	r0, [pc, #68]	; (8001808 <MX_TIM5_Init+0xa8>)
 80017c2:	2204      	movs	r2, #4
 80017c4:	a902      	add	r1, sp, #8
 80017c6:	f002 fb89 	bl	8003edc <HAL_TIM_PWM_ConfigChannel>
 80017ca:	b940      	cbnz	r0, 80017de <MX_TIM5_Init+0x7e>
  HAL_TIM_MspPostInit(&htim5);
 80017cc:	480e      	ldr	r0, [pc, #56]	; (8001808 <MX_TIM5_Init+0xa8>)
 80017ce:	f7ff febf 	bl	8001550 <HAL_TIM_MspPostInit>
}
 80017d2:	b00b      	add	sp, #44	; 0x2c
 80017d4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80017d8:	f7ff f8d8 	bl	800098c <Error_Handler>
 80017dc:	e7db      	b.n	8001796 <MX_TIM5_Init+0x36>
    Error_Handler();
 80017de:	f7ff f8d5 	bl	800098c <Error_Handler>
  HAL_TIM_MspPostInit(&htim5);
 80017e2:	4809      	ldr	r0, [pc, #36]	; (8001808 <MX_TIM5_Init+0xa8>)
 80017e4:	f7ff feb4 	bl	8001550 <HAL_TIM_MspPostInit>
}
 80017e8:	b00b      	add	sp, #44	; 0x2c
 80017ea:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80017ee:	f7ff f8cd 	bl	800098c <Error_Handler>
 80017f2:	e7e5      	b.n	80017c0 <MX_TIM5_Init+0x60>
    Error_Handler();
 80017f4:	f7ff f8ca 	bl	800098c <Error_Handler>
 80017f8:	e7d6      	b.n	80017a8 <MX_TIM5_Init+0x48>
 80017fa:	bf00      	nop
 80017fc:	f3af 8000 	nop.w
 8001800:	00000060 	.word	0x00000060
 8001804:	00000000 	.word	0x00000000
 8001808:	20000710 	.word	0x20000710
 800180c:	40000c00 	.word	0x40000c00

08001810 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001810:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001812:	480b      	ldr	r0, [pc, #44]	; (8001840 <MX_USART1_UART_Init+0x30>)
 8001814:	4c0b      	ldr	r4, [pc, #44]	; (8001844 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001816:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 115200;
 8001818:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800181c:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 800181e:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001822:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001826:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800182a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800182e:	f002 fdeb 	bl	8004408 <HAL_UART_Init>
 8001832:	b900      	cbnz	r0, 8001836 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001834:	bd10      	pop	{r4, pc}
 8001836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800183a:	f7ff b8a7 	b.w	800098c <Error_Handler>
 800183e:	bf00      	nop
 8001840:	20000878 	.word	0x20000878
 8001844:	40011000 	.word	0x40011000

08001848 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001848:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 800184a:	4b27      	ldr	r3, [pc, #156]	; (80018e8 <HAL_UART_MspInit+0xa0>)
 800184c:	6802      	ldr	r2, [r0, #0]
{
 800184e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8001852:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001858:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800185c:	9408      	str	r4, [sp, #32]
  if(uartHandle->Instance==USART1)
 800185e:	d001      	beq.n	8001864 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001860:	b00a      	add	sp, #40	; 0x28
 8001862:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001864:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8001868:	9401      	str	r4, [sp, #4]
 800186a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(FC_TX_GPIO_Port, &GPIO_InitStruct);
 800186c:	481f      	ldr	r0, [pc, #124]	; (80018ec <HAL_UART_MspInit+0xa4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800186e:	f042 0210 	orr.w	r2, r2, #16
 8001872:	645a      	str	r2, [r3, #68]	; 0x44
 8001874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001876:	f002 0210 	and.w	r2, r2, #16
 800187a:	9201      	str	r2, [sp, #4]
 800187c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	9402      	str	r4, [sp, #8]
 8001880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001882:	f042 0201 	orr.w	r2, r2, #1
 8001886:	631a      	str	r2, [r3, #48]	; 0x30
 8001888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800188a:	f002 0201 	and.w	r2, r2, #1
 800188e:	9202      	str	r2, [sp, #8]
 8001890:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	9403      	str	r4, [sp, #12]
 8001894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001896:	f042 0202 	orr.w	r2, r2, #2
 800189a:	631a      	str	r2, [r3, #48]	; 0x30
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = FC_TX_Pin;
 80018a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018aa:	2507      	movs	r5, #7
    HAL_GPIO_Init(FC_TX_GPIO_Port, &GPIO_InitStruct);
 80018ac:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = FC_TX_Pin;
 80018ae:	2302      	movs	r3, #2
 80018b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018b4:	e9cd 6507 	strd	r6, r5, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b8:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(FC_TX_GPIO_Port, &GPIO_InitStruct);
 80018ba:	f000 fe03 	bl	80024c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FC_RX_Pin;
 80018be:	2308      	movs	r3, #8
    HAL_GPIO_Init(FC_RX_GPIO_Port, &GPIO_InitStruct);
 80018c0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = FC_RX_Pin;
 80018c2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(FC_RX_GPIO_Port, &GPIO_InitStruct);
 80018c4:	480a      	ldr	r0, [pc, #40]	; (80018f0 <HAL_UART_MspInit+0xa8>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018c6:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	e9cd 4606 	strd	r4, r6, [sp, #24]
    HAL_GPIO_Init(FC_RX_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f000 fdf8 	bl	80024c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018d4:	4622      	mov	r2, r4
 80018d6:	4621      	mov	r1, r4
 80018d8:	2025      	movs	r0, #37	; 0x25
 80018da:	f000 fbc3 	bl	8002064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018de:	2025      	movs	r0, #37	; 0x25
 80018e0:	f000 fbfe 	bl	80020e0 <HAL_NVIC_EnableIRQ>
}
 80018e4:	b00a      	add	sp, #40	; 0x28
 80018e6:	bd70      	pop	{r4, r5, r6, pc}
 80018e8:	40011000 	.word	0x40011000
 80018ec:	40020000 	.word	0x40020000
 80018f0:	40020400 	.word	0x40020400

080018f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800192c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f8:	480d      	ldr	r0, [pc, #52]	; (8001930 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018fa:	490e      	ldr	r1, [pc, #56]	; (8001934 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018fc:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001900:	e002      	b.n	8001908 <LoopCopyDataInit>

08001902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001906:	3304      	adds	r3, #4

08001908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800190c:	d3f9      	bcc.n	8001902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190e:	4a0b      	ldr	r2, [pc, #44]	; (800193c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001910:	4c0b      	ldr	r4, [pc, #44]	; (8001940 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001914:	e001      	b.n	800191a <LoopFillZerobss>

08001916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001918:	3204      	adds	r2, #4

0800191a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800191c:	d3fb      	bcc.n	8001916 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800191e:	f7ff fac5 	bl	8000eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001922:	f003 f9bd 	bl	8004ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001926:	f7fe fffb 	bl	8000920 <main>
  bx  lr    
 800192a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800192c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001934:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001938:	08004ef0 	.word	0x08004ef0
  ldr r2, =_sbss
 800193c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001940:	20001058 	.word	0x20001058

08001944 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001944:	e7fe      	b.n	8001944 <ADC_IRQHandler>
	...

08001948 <bmi160_set_regs.constprop.0>:

/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
 8001948:	b538      	push	{r3, r4, r5, lr}
{
    int8_t rslt = BMI160_OK;
    uint8_t count = 0;

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 800194a:	b1ba      	cbz	r2, 800197c <bmi160_set_regs.constprop.0+0x34>
 800194c:	6a15      	ldr	r5, [r2, #32]
 800194e:	4614      	mov	r4, r2
 8001950:	b1a5      	cbz	r5, 800197c <bmi160_set_regs.constprop.0+0x34>
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8001952:	7893      	ldrb	r3, [r2, #2]
 8001954:	2b01      	cmp	r3, #1
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 8001956:	bf08      	it	eq
 8001958:	f000 007f 	andeq.w	r0, r0, #127	; 0x7f
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 800195c:	460a      	mov	r2, r1
 800195e:	2301      	movs	r3, #1
 8001960:	4601      	mov	r1, r0
 8001962:	7860      	ldrb	r0, [r4, #1]
 8001964:	47a8      	blx	r5
 8001966:	4603      	mov	r3, r0

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8001968:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800196a:	2001      	movs	r0, #1
            rslt = dev->write(dev->id, reg_addr, data, len);
 800196c:	461c      	mov	r4, r3
            dev->delay_ms(1);
 800196e:	4790      	blx	r2
            }
        }

        if (rslt != BMI160_OK)
        {
            rslt = BMI160_E_COM_FAIL;
 8001970:	2c00      	cmp	r4, #0
 8001972:	bf18      	it	ne
 8001974:	f06f 0401 	mvnne.w	r4, #1
        }
    }

    return rslt;
}
 8001978:	4620      	mov	r0, r4
 800197a:	bd38      	pop	{r3, r4, r5, pc}
        rslt = BMI160_E_NULL_PTR;
 800197c:	f04f 34ff 	mov.w	r4, #4294967295
 8001980:	e7fa      	b.n	8001978 <bmi160_set_regs.constprop.0+0x30>
 8001982:	bf00      	nop

08001984 <bmi160_set_regs>:
{
 8001984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if ((dev == NULL) || (dev->write == NULL))
 8001988:	2b00      	cmp	r3, #0
 800198a:	d03a      	beq.n	8001a02 <bmi160_set_regs+0x7e>
 800198c:	6a1d      	ldr	r5, [r3, #32]
 800198e:	461e      	mov	r6, r3
 8001990:	2d00      	cmp	r5, #0
 8001992:	d036      	beq.n	8001a02 <bmi160_set_regs+0x7e>
    else if (len == 0)
 8001994:	4617      	mov	r7, r2
 8001996:	b38a      	cbz	r2, 80019fc <bmi160_set_regs+0x78>
        if (dev->intf == BMI160_SPI_INTF)
 8001998:	789b      	ldrb	r3, [r3, #2]
 800199a:	2b01      	cmp	r3, #1
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 800199c:	7a33      	ldrb	r3, [r6, #8]
 800199e:	4680      	mov	r8, r0
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 80019a0:	bf08      	it	eq
 80019a2:	f000 087f 	andeq.w	r8, r0, #127	; 0x7f
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 80019a6:	2b11      	cmp	r3, #17
 80019a8:	4689      	mov	r9, r1
 80019aa:	d017      	beq.n	80019dc <bmi160_set_regs+0x58>
 80019ac:	7c33      	ldrb	r3, [r6, #16]
 80019ae:	2b15      	cmp	r3, #21
 80019b0:	d014      	beq.n	80019dc <bmi160_set_regs+0x58>
    uint8_t count = 0;
 80019b2:	2400      	movs	r4, #0
 80019b4:	e000      	b.n	80019b8 <bmi160_set_regs+0x34>
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 80019b6:	6a35      	ldr	r5, [r6, #32]
 80019b8:	7870      	ldrb	r0, [r6, #1]
 80019ba:	eb08 0104 	add.w	r1, r8, r4
 80019be:	eb09 0204 	add.w	r2, r9, r4
 80019c2:	2301      	movs	r3, #1
 80019c4:	b2c9      	uxtb	r1, r1
 80019c6:	47a8      	blx	r5
            for (; count < len; count++)
 80019c8:	3401      	adds	r4, #1
                dev->delay_ms(1);
 80019ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 80019cc:	4605      	mov	r5, r0
                dev->delay_ms(1);
 80019ce:	2001      	movs	r0, #1
 80019d0:	4798      	blx	r3
            for (; count < len; count++)
 80019d2:	b2e3      	uxtb	r3, r4
 80019d4:	42bb      	cmp	r3, r7
 80019d6:	461c      	mov	r4, r3
 80019d8:	d3ed      	bcc.n	80019b6 <bmi160_set_regs+0x32>
 80019da:	e008      	b.n	80019ee <bmi160_set_regs+0x6a>
            rslt = dev->write(dev->id, reg_addr, data, len);
 80019dc:	463b      	mov	r3, r7
 80019de:	7870      	ldrb	r0, [r6, #1]
 80019e0:	464a      	mov	r2, r9
 80019e2:	4641      	mov	r1, r8
 80019e4:	47a8      	blx	r5
            dev->delay_ms(1);
 80019e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
            rslt = dev->write(dev->id, reg_addr, data, len);
 80019e8:	4605      	mov	r5, r0
            dev->delay_ms(1);
 80019ea:	2001      	movs	r0, #1
 80019ec:	4798      	blx	r3
            rslt = BMI160_E_COM_FAIL;
 80019ee:	2d00      	cmp	r5, #0
 80019f0:	bf18      	it	ne
 80019f2:	f06f 0501 	mvnne.w	r5, #1
}
 80019f6:	4628      	mov	r0, r5
 80019f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 80019fc:	f06f 050b 	mvn.w	r5, #11
 8001a00:	e7f9      	b.n	80019f6 <bmi160_set_regs+0x72>
        rslt = BMI160_E_NULL_PTR;
 8001a02:	f04f 35ff 	mov.w	r5, #4294967295
 8001a06:	e7f6      	b.n	80019f6 <bmi160_set_regs+0x72>

08001a08 <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 8001a08:	b570      	push	{r4, r5, r6, lr}
 8001a0a:	b082      	sub	sp, #8
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 8001a0c:	23b6      	movs	r3, #182	; 0xb6
 8001a0e:	f88d 3007 	strb.w	r3, [sp, #7]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8001a12:	b330      	cbz	r0, 8001a62 <bmi160_soft_reset+0x5a>
 8001a14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a16:	4604      	mov	r4, r0
 8001a18:	b31b      	cbz	r3, 8001a62 <bmi160_soft_reset+0x5a>
        rslt = BMI160_E_NULL_PTR;
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	f10d 0107 	add.w	r1, sp, #7
 8001a20:	207e      	movs	r0, #126	; 0x7e
 8001a22:	f7ff ff91 	bl	8001948 <bmi160_set_regs.constprop.0>
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 8001a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8001a28:	4605      	mov	r5, r0
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8001a2e:	b945      	cbnz	r5, 8001a42 <bmi160_soft_reset+0x3a>
 8001a30:	78a3      	ldrb	r3, [r4, #2]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d008      	beq.n	8001a48 <bmi160_soft_reset+0x40>
{
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8001a36:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <bmi160_soft_reset+0x60>)
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <bmi160_soft_reset+0x64>)
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8001a3a:	6062      	str	r2, [r4, #4]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8001a3c:	e9c4 2302 	strd	r2, r3, [r4, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 8001a40:	6123      	str	r3, [r4, #16]
}
 8001a42:	4628      	mov	r0, r5
 8001a44:	b002      	add	sp, #8
 8001a46:	bd70      	pop	{r4, r5, r6, pc}
    if ((dev == NULL) || (dev->read == NULL))
 8001a48:	69e6      	ldr	r6, [r4, #28]
 8001a4a:	b156      	cbz	r6, 8001a62 <bmi160_soft_reset+0x5a>
        rslt = dev->read(dev->id, reg_addr, data, len);
 8001a4c:	7860      	ldrb	r0, [r4, #1]
 8001a4e:	f10d 0207 	add.w	r2, sp, #7
 8001a52:	21ff      	movs	r1, #255	; 0xff
 8001a54:	47b0      	blx	r6
        if (rslt == BMI160_OK)
 8001a56:	2800      	cmp	r0, #0
 8001a58:	d0ed      	beq.n	8001a36 <bmi160_soft_reset+0x2e>
 8001a5a:	4605      	mov	r5, r0
}
 8001a5c:	4628      	mov	r0, r5
 8001a5e:	b002      	add	sp, #8
 8001a60:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BMI160_E_NULL_PTR;
 8001a62:	f04f 35ff 	mov.w	r5, #4294967295
 8001a66:	e7ec      	b.n	8001a42 <bmi160_soft_reset+0x3a>
 8001a68:	02030810 	.word	0x02030810
 8001a6c:	02000814 	.word	0x02000814

08001a70 <bmi160_init>:
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001a70:	2800      	cmp	r0, #0
 8001a72:	d047      	beq.n	8001b04 <bmi160_init+0x94>
{
 8001a74:	b570      	push	{r4, r5, r6, lr}
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001a76:	69c6      	ldr	r6, [r0, #28]
{
 8001a78:	b082      	sub	sp, #8
 8001a7a:	4604      	mov	r4, r0
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001a7c:	2e00      	cmp	r6, #0
 8001a7e:	d03e      	beq.n	8001afe <bmi160_init+0x8e>
 8001a80:	6a03      	ldr	r3, [r0, #32]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d03b      	beq.n	8001afe <bmi160_init+0x8e>
 8001a86:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d038      	beq.n	8001afe <bmi160_init+0x8e>
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8001a8c:	7883      	ldrb	r3, [r0, #2]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d027      	beq.n	8001ae2 <bmi160_init+0x72>
        dev->chip_id = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	7023      	strb	r3, [r4, #0]
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8001a96:	2503      	movs	r5, #3
        rslt = dev->read(dev->id, reg_addr, data, len);
 8001a98:	2301      	movs	r3, #1
 8001a9a:	4622      	mov	r2, r4
    if ((dev == NULL) || (dev->read == NULL))
 8001a9c:	b19e      	cbz	r6, 8001ac6 <bmi160_init+0x56>
        if (dev->intf == BMI160_SPI_INTF)
 8001a9e:	78a1      	ldrb	r1, [r4, #2]
        rslt = dev->read(dev->id, reg_addr, data, len);
 8001aa0:	7860      	ldrb	r0, [r4, #1]
        if (dev->intf == BMI160_SPI_INTF)
 8001aa2:	1ac9      	subs	r1, r1, r3
 8001aa4:	fab1 f181 	clz	r1, r1
 8001aa8:	0949      	lsrs	r1, r1, #5
        rslt = dev->read(dev->id, reg_addr, data, len);
 8001aaa:	01c9      	lsls	r1, r1, #7
 8001aac:	47b0      	blx	r6
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8001aae:	1e6b      	subs	r3, r5, #1
 8001ab0:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 8001ab4:	d00a      	beq.n	8001acc <bmi160_init+0x5c>
 8001ab6:	7823      	ldrb	r3, [r4, #0]
 8001ab8:	2bd1      	cmp	r3, #209	; 0xd1
 8001aba:	d01b      	beq.n	8001af4 <bmi160_init+0x84>
    if ((dev == NULL) || (dev->read == NULL))
 8001abc:	69e6      	ldr	r6, [r4, #28]
        rslt = dev->read(dev->id, reg_addr, data, len);
 8001abe:	2301      	movs	r3, #1
 8001ac0:	4622      	mov	r2, r4
    if ((dev == NULL) || (dev->read == NULL))
 8001ac2:	2e00      	cmp	r6, #0
 8001ac4:	d1eb      	bne.n	8001a9e <bmi160_init+0x2e>
        rslt = BMI160_E_NULL_PTR;
 8001ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8001aca:	e7f0      	b.n	8001aae <bmi160_init+0x3e>
        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 8001acc:	b9a0      	cbnz	r0, 8001af8 <bmi160_init+0x88>
 8001ace:	7823      	ldrb	r3, [r4, #0]
 8001ad0:	2bd1      	cmp	r3, #209	; 0xd1
 8001ad2:	d111      	bne.n	8001af8 <bmi160_init+0x88>
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8001ad4:	23ff      	movs	r3, #255	; 0xff
 8001ad6:	70e3      	strb	r3, [r4, #3]
            rslt = bmi160_soft_reset(dev);
 8001ad8:	4620      	mov	r0, r4
 8001ada:	f7ff ff95 	bl	8001a08 <bmi160_soft_reset>
}
 8001ade:	b002      	add	sp, #8
 8001ae0:	bd70      	pop	{r4, r5, r6, pc}
        rslt = dev->read(dev->id, reg_addr, data, len);
 8001ae2:	7840      	ldrb	r0, [r0, #1]
 8001ae4:	f10d 0207 	add.w	r2, sp, #7
 8001ae8:	21ff      	movs	r1, #255	; 0xff
 8001aea:	47b0      	blx	r6
    if (rslt == BMI160_OK)
 8001aec:	2800      	cmp	r0, #0
 8001aee:	d1f6      	bne.n	8001ade <bmi160_init+0x6e>
    if ((dev == NULL) || (dev->read == NULL))
 8001af0:	69e6      	ldr	r6, [r4, #28]
 8001af2:	e7ce      	b.n	8001a92 <bmi160_init+0x22>
        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 8001af4:	2800      	cmp	r0, #0
 8001af6:	d0ed      	beq.n	8001ad4 <bmi160_init+0x64>
            rslt = BMI160_E_DEV_NOT_FOUND;
 8001af8:	f06f 0002 	mvn.w	r0, #2
    return rslt;
 8001afc:	e7ef      	b.n	8001ade <bmi160_init+0x6e>
        rslt = BMI160_E_NULL_PTR;
 8001afe:	f04f 30ff 	mov.w	r0, #4294967295
 8001b02:	e7ec      	b.n	8001ade <bmi160_init+0x6e>
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop

08001b0c <bmi160_set_power_mode>:
{
 8001b0c:	b530      	push	{r4, r5, lr}
 8001b0e:	b083      	sub	sp, #12
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8001b10:	2800      	cmp	r0, #0
 8001b12:	f000 8096 	beq.w	8001c42 <bmi160_set_power_mode+0x136>
 8001b16:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b18:	4604      	mov	r4, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 8091 	beq.w	8001c42 <bmi160_set_power_mode+0x136>
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
    int8_t rslt = 0;
    uint8_t data = 0;

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8001b20:	7903      	ldrb	r3, [r0, #4]
 8001b22:	f1a3 0110 	sub.w	r1, r3, #16
    uint8_t data = 0;
 8001b26:	2200      	movs	r2, #0
    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8001b28:	2902      	cmp	r1, #2
    uint8_t data = 0;
 8001b2a:	f88d 2003 	strb.w	r2, [sp, #3]
    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8001b2e:	d877      	bhi.n	8001c20 <bmi160_set_power_mode+0x114>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001b30:	7a01      	ldrb	r1, [r0, #8]
 8001b32:	4299      	cmp	r1, r3
 8001b34:	d10d      	bne.n	8001b52 <bmi160_set_power_mode+0x46>
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
    int8_t rslt = 0;

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8001b36:	7b23      	ldrb	r3, [r4, #12]
 8001b38:	f1a3 0214 	sub.w	r2, r3, #20
 8001b3c:	2a01      	cmp	r2, #1
 8001b3e:	d901      	bls.n	8001b44 <bmi160_set_power_mode+0x38>
 8001b40:	2b17      	cmp	r3, #23
 8001b42:	d16d      	bne.n	8001c20 <bmi160_set_power_mode+0x114>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8001b44:	7c22      	ldrb	r2, [r4, #16]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d132      	bne.n	8001bb0 <bmi160_set_power_mode+0xa4>
    int8_t rslt = 0;
 8001b4a:	2500      	movs	r5, #0
}
 8001b4c:	4628      	mov	r0, r5
 8001b4e:	b003      	add	sp, #12
 8001b50:	bd30      	pop	{r4, r5, pc}
    if ((dev == NULL) || (dev->read == NULL))
 8001b52:	69c5      	ldr	r5, [r0, #28]
    uint8_t pre_filter[2] = { 0 };
 8001b54:	f8ad 2004 	strh.w	r2, [sp, #4]
    if ((dev == NULL) || (dev->read == NULL))
 8001b58:	2d00      	cmp	r5, #0
 8001b5a:	d072      	beq.n	8001c42 <bmi160_set_power_mode+0x136>
        if (dev->intf == BMI160_SPI_INTF)
 8001b5c:	7883      	ldrb	r3, [r0, #2]
        rslt = dev->read(dev->id, reg_addr, data, len);
 8001b5e:	7840      	ldrb	r0, [r0, #1]
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8001b60:	2b01      	cmp	r3, #1
        rslt = dev->read(dev->id, reg_addr, data, len);
 8001b62:	f10d 0203 	add.w	r2, sp, #3
 8001b66:	f04f 0301 	mov.w	r3, #1
 8001b6a:	bf14      	ite	ne
 8001b6c:	2140      	movne	r1, #64	; 0x40
 8001b6e:	21c0      	moveq	r1, #192	; 0xc0
 8001b70:	47a8      	blx	r5
    if (rslt == BMI160_OK)
 8001b72:	4605      	mov	r5, r0
 8001b74:	2800      	cmp	r0, #0
 8001b76:	d1e9      	bne.n	8001b4c <bmi160_set_power_mode+0x40>
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 8001b78:	7923      	ldrb	r3, [r4, #4]
 8001b7a:	2b12      	cmp	r3, #18
 8001b7c:	d02f      	beq.n	8001bde <bmi160_set_power_mode+0xd2>
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 8001b7e:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 8001b82:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db4d      	blt.n	8001c26 <bmi160_set_power_mode+0x11a>
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 8001b8a:	4622      	mov	r2, r4
 8001b8c:	1d21      	adds	r1, r4, #4
 8001b8e:	207e      	movs	r0, #126	; 0x7e
 8001b90:	f7ff feda 	bl	8001948 <bmi160_set_regs.constprop.0>
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 8001b94:	7a23      	ldrb	r3, [r4, #8]
 8001b96:	2b10      	cmp	r3, #16
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 8001b98:	4605      	mov	r5, r0
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 8001b9a:	d102      	bne.n	8001ba2 <bmi160_set_power_mode+0x96>
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 8001b9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b9e:	2005      	movs	r0, #5
 8001ba0:	4798      	blx	r3
                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 8001ba2:	7923      	ldrb	r3, [r4, #4]
 8001ba4:	7223      	strb	r3, [r4, #8]
        if (rslt == BMI160_OK)
 8001ba6:	2d00      	cmp	r5, #0
 8001ba8:	d0c5      	beq.n	8001b36 <bmi160_set_power_mode+0x2a>
}
 8001baa:	4628      	mov	r0, r5
 8001bac:	b003      	add	sp, #12
 8001bae:	bd30      	pop	{r4, r5, pc}
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 8001bb0:	4622      	mov	r2, r4
 8001bb2:	f104 010c 	add.w	r1, r4, #12
 8001bb6:	207e      	movs	r0, #126	; 0x7e
 8001bb8:	f7ff fec6 	bl	8001948 <bmi160_set_regs.constprop.0>
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 8001bbc:	7c23      	ldrb	r3, [r4, #16]
 8001bbe:	2b14      	cmp	r3, #20
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 8001bc0:	4605      	mov	r5, r0
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 8001bc2:	d006      	beq.n	8001bd2 <bmi160_set_power_mode+0xc6>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8001bc4:	2b17      	cmp	r3, #23
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8001bc6:	7b23      	ldrb	r3, [r4, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8001bc8:	d022      	beq.n	8001c10 <bmi160_set_power_mode+0x104>
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 8001bca:	7423      	strb	r3, [r4, #16]
}
 8001bcc:	4628      	mov	r0, r5
 8001bce:	b003      	add	sp, #12
 8001bd0:	bd30      	pop	{r4, r5, pc}
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 8001bd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bd4:	2050      	movs	r0, #80	; 0x50
 8001bd6:	4798      	blx	r3
            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 8001bd8:	7b23      	ldrb	r3, [r4, #12]
 8001bda:	7423      	strb	r3, [r4, #16]
 8001bdc:	e7f6      	b.n	8001bcc <bmi160_set_power_mode+0xc0>
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8001bde:	f89d 3003 	ldrb.w	r3, [sp, #3]
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001be2:	4622      	mov	r2, r4
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 8001be4:	f063 037f 	orn	r3, r3, #127	; 0x7f
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001be8:	f10d 0103 	add.w	r1, sp, #3
 8001bec:	2040      	movs	r0, #64	; 0x40
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 8001bee:	f88d 3003 	strb.w	r3, [sp, #3]
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001bf2:	f7ff fea9 	bl	8001948 <bmi160_set_regs.constprop.0>
            if (rslt == BMI160_OK)
 8001bf6:	4605      	mov	r5, r0
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	d1a7      	bne.n	8001b4c <bmi160_set_power_mode+0x40>
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 8001bfc:	4623      	mov	r3, r4
 8001bfe:	2202      	movs	r2, #2
 8001c00:	a901      	add	r1, sp, #4
 8001c02:	2058      	movs	r0, #88	; 0x58
 8001c04:	f7ff febe 	bl	8001984 <bmi160_set_regs>
 8001c08:	4605      	mov	r5, r0
            if (rslt == BMI160_OK)
 8001c0a:	2d00      	cmp	r5, #0
 8001c0c:	d0bd      	beq.n	8001b8a <bmi160_set_power_mode+0x7e>
 8001c0e:	e79d      	b.n	8001b4c <bmi160_set_power_mode+0x40>
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8001c10:	2b15      	cmp	r3, #21
 8001c12:	d1da      	bne.n	8001bca <bmi160_set_power_mode+0xbe>
                dev->delay_ms(10);
 8001c14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c16:	200a      	movs	r0, #10
 8001c18:	4798      	blx	r3
            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 8001c1a:	7b23      	ldrb	r3, [r4, #12]
 8001c1c:	7423      	strb	r3, [r4, #16]
 8001c1e:	e7d5      	b.n	8001bcc <bmi160_set_power_mode+0xc0>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 8001c20:	f06f 050c 	mvn.w	r5, #12
 8001c24:	e792      	b.n	8001b4c <bmi160_set_power_mode+0x40>
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8001c26:	f002 037f 	and.w	r3, r2, #127	; 0x7f
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001c2a:	f10d 0103 	add.w	r1, sp, #3
 8001c2e:	4622      	mov	r2, r4
 8001c30:	2040      	movs	r0, #64	; 0x40
            *data = temp;
 8001c32:	f88d 3003 	strb.w	r3, [sp, #3]
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001c36:	f7ff fe87 	bl	8001948 <bmi160_set_regs.constprop.0>
 8001c3a:	4605      	mov	r5, r0
            if (rslt == BMI160_OK)
 8001c3c:	2d00      	cmp	r5, #0
 8001c3e:	d0a4      	beq.n	8001b8a <bmi160_set_power_mode+0x7e>
 8001c40:	e784      	b.n	8001b4c <bmi160_set_power_mode+0x40>
        rslt = BMI160_E_NULL_PTR;
 8001c42:	f04f 35ff 	mov.w	r5, #4294967295
 8001c46:	e781      	b.n	8001b4c <bmi160_set_power_mode+0x40>

08001c48 <bmi160_set_sens_conf>:
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8001c48:	2800      	cmp	r0, #0
 8001c4a:	f000 80cc 	beq.w	8001de6 <bmi160_set_sens_conf+0x19e>
{
 8001c4e:	b530      	push	{r4, r5, lr}
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8001c50:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001c52:	b083      	sub	sp, #12
 8001c54:	4604      	mov	r4, r0
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 80c2 	beq.w	8001de0 <bmi160_set_sens_conf+0x198>
    if ((dev == NULL) || (dev->read == NULL))
 8001c5c:	69c5      	ldr	r5, [r0, #28]
    uint8_t data[2] = { 0 };
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f8ad 3004 	strh.w	r3, [sp, #4]
    if ((dev == NULL) || (dev->read == NULL))
 8001c64:	2d00      	cmp	r5, #0
 8001c66:	f000 80bb 	beq.w	8001de0 <bmi160_set_sens_conf+0x198>
        if (dev->intf == BMI160_SPI_INTF)
 8001c6a:	7883      	ldrb	r3, [r0, #2]
        rslt = dev->read(dev->id, reg_addr, data, len);
 8001c6c:	7840      	ldrb	r0, [r0, #1]
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8001c6e:	2b01      	cmp	r3, #1
        rslt = dev->read(dev->id, reg_addr, data, len);
 8001c70:	bf14      	ite	ne
 8001c72:	2140      	movne	r1, #64	; 0x40
 8001c74:	21c0      	moveq	r1, #192	; 0xc0
 8001c76:	2302      	movs	r3, #2
 8001c78:	aa01      	add	r2, sp, #4
 8001c7a:	47a8      	blx	r5
    if (rslt == BMI160_OK)
 8001c7c:	bb80      	cbnz	r0, 8001ce0 <bmi160_set_sens_conf+0x98>
    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 8001c7e:	7963      	ldrb	r3, [r4, #5]
 8001c80:	2b0c      	cmp	r3, #12
 8001c82:	f200 80aa 	bhi.w	8001dda <bmi160_set_sens_conf+0x192>
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 8001c86:	7a62      	ldrb	r2, [r4, #9]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d006      	beq.n	8001c9a <bmi160_set_sens_conf+0x52>
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 8001c8c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001c90:	f022 020f 	bic.w	r2, r2, #15
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 8001c94:	4313      	orrs	r3, r2
 8001c96:	f88d 3004 	strb.w	r3, [sp, #4]
    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 8001c9a:	79e2      	ldrb	r2, [r4, #7]
 8001c9c:	2a07      	cmp	r2, #7
 8001c9e:	f200 809c 	bhi.w	8001dda <bmi160_set_sens_conf+0x192>
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 8001ca2:	7ae3      	ldrb	r3, [r4, #11]
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d007      	beq.n	8001cb8 <bmi160_set_sens_conf+0x70>
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 8001ca8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 8001cb0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001cb4:	f88d 3004 	strb.w	r3, [sp, #4]
    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 8001cb8:	79a3      	ldrb	r3, [r4, #6]
 8001cba:	2b0c      	cmp	r3, #12
 8001cbc:	f200 808d 	bhi.w	8001dda <bmi160_set_sens_conf+0x192>
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 8001cc0:	7aa2      	ldrb	r2, [r4, #10]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d006      	beq.n	8001cd4 <bmi160_set_sens_conf+0x8c>
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 8001cc6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001cca:	f022 020f 	bic.w	r2, r2, #15
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	f88d 3005 	strb.w	r3, [sp, #5]
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 8001cd4:	4622      	mov	r2, r4
 8001cd6:	a901      	add	r1, sp, #4
 8001cd8:	2040      	movs	r0, #64	; 0x40
 8001cda:	f7ff fe35 	bl	8001948 <bmi160_set_regs.constprop.0>
        if (rslt == BMI160_OK)
 8001cde:	b108      	cbz	r0, 8001ce4 <bmi160_set_sens_conf+0x9c>
}
 8001ce0:	b003      	add	sp, #12
 8001ce2:	bd30      	pop	{r4, r5, pc}
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 8001ce4:	7962      	ldrb	r2, [r4, #5]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 8001ce6:	79e3      	ldrb	r3, [r4, #7]
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 8001ce8:	7262      	strb	r2, [r4, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 8001cea:	72e3      	strb	r3, [r4, #11]
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 8001cec:	4622      	mov	r2, r4
 8001cee:	f10d 0105 	add.w	r1, sp, #5
 8001cf2:	2041      	movs	r0, #65	; 0x41
 8001cf4:	f7ff fe28 	bl	8001948 <bmi160_set_regs.constprop.0>
            if (rslt == BMI160_OK)
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	d1f1      	bne.n	8001ce0 <bmi160_set_sens_conf+0x98>
    if ((dev == NULL) || (dev->read == NULL))
 8001cfc:	69e5      	ldr	r5, [r4, #28]
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 8001cfe:	79a3      	ldrb	r3, [r4, #6]
 8001d00:	72a3      	strb	r3, [r4, #10]
    uint8_t data[2] = { 0 };
 8001d02:	f8ad 0004 	strh.w	r0, [sp, #4]
    if ((dev == NULL) || (dev->read == NULL))
 8001d06:	2d00      	cmp	r5, #0
 8001d08:	d06a      	beq.n	8001de0 <bmi160_set_sens_conf+0x198>
        if (dev->intf == BMI160_SPI_INTF)
 8001d0a:	78a3      	ldrb	r3, [r4, #2]
        rslt = dev->read(dev->id, reg_addr, data, len);
 8001d0c:	7860      	ldrb	r0, [r4, #1]
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8001d0e:	2b01      	cmp	r3, #1
        rslt = dev->read(dev->id, reg_addr, data, len);
 8001d10:	bf14      	ite	ne
 8001d12:	2142      	movne	r1, #66	; 0x42
 8001d14:	21c2      	moveq	r1, #194	; 0xc2
 8001d16:	2302      	movs	r3, #2
 8001d18:	aa01      	add	r2, sp, #4
 8001d1a:	47a8      	blx	r5
    if (rslt == BMI160_OK)
 8001d1c:	2800      	cmp	r0, #0
 8001d1e:	d1df      	bne.n	8001ce0 <bmi160_set_sens_conf+0x98>
    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 8001d20:	7b63      	ldrb	r3, [r4, #13]
 8001d22:	2b0d      	cmp	r3, #13
 8001d24:	d859      	bhi.n	8001dda <bmi160_set_sens_conf+0x192>
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 8001d26:	7c62      	ldrb	r2, [r4, #17]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d006      	beq.n	8001d3a <bmi160_set_sens_conf+0xf2>
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8001d2c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001d30:	f022 020f 	bic.w	r2, r2, #15
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 8001d34:	4313      	orrs	r3, r2
 8001d36:	f88d 3004 	strb.w	r3, [sp, #4]
    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 8001d3a:	7be2      	ldrb	r2, [r4, #15]
 8001d3c:	2a02      	cmp	r2, #2
 8001d3e:	d84c      	bhi.n	8001dda <bmi160_set_sens_conf+0x192>
        temp = *data & ~BMI160_GYRO_BW_MASK;
 8001d40:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001d44:	f023 0330 	bic.w	r3, r3, #48	; 0x30
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 8001d48:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 8001d4c:	7ba2      	ldrb	r2, [r4, #14]
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 8001d4e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 8001d52:	2a04      	cmp	r2, #4
 8001d54:	d841      	bhi.n	8001dda <bmi160_set_sens_conf+0x192>
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 8001d56:	7ca3      	ldrb	r3, [r4, #18]
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d006      	beq.n	8001d6a <bmi160_set_sens_conf+0x122>
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 8001d5c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001d60:	f023 0307 	bic.w	r3, r3, #7
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 8001d64:	431a      	orrs	r2, r3
 8001d66:	f88d 2005 	strb.w	r2, [sp, #5]
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 8001d6a:	4622      	mov	r2, r4
 8001d6c:	a901      	add	r1, sp, #4
 8001d6e:	2042      	movs	r0, #66	; 0x42
 8001d70:	f7ff fdea 	bl	8001948 <bmi160_set_regs.constprop.0>
        if (rslt == BMI160_OK)
 8001d74:	2800      	cmp	r0, #0
 8001d76:	d1b3      	bne.n	8001ce0 <bmi160_set_sens_conf+0x98>
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 8001d78:	7b62      	ldrb	r2, [r4, #13]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 8001d7a:	7be3      	ldrb	r3, [r4, #15]
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 8001d7c:	7462      	strb	r2, [r4, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 8001d7e:	74e3      	strb	r3, [r4, #19]
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 8001d80:	4622      	mov	r2, r4
 8001d82:	f10d 0105 	add.w	r1, sp, #5
 8001d86:	2043      	movs	r0, #67	; 0x43
 8001d88:	f7ff fdde 	bl	8001948 <bmi160_set_regs.constprop.0>
            if (rslt == BMI160_OK)
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	d1a7      	bne.n	8001ce0 <bmi160_set_sens_conf+0x98>
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 8001d90:	7ba3      	ldrb	r3, [r4, #14]
 8001d92:	74a3      	strb	r3, [r4, #18]
                rslt = bmi160_set_power_mode(dev);
 8001d94:	4620      	mov	r0, r4
 8001d96:	f7ff feb9 	bl	8001b0c <bmi160_set_power_mode>
                if (rslt == BMI160_OK)
 8001d9a:	2800      	cmp	r0, #0
 8001d9c:	d1a0      	bne.n	8001ce0 <bmi160_set_sens_conf+0x98>
    if ((dev == NULL) || (dev->read == NULL))
 8001d9e:	69e5      	ldr	r5, [r4, #28]
    uint8_t data = 0;
 8001da0:	f88d 0004 	strb.w	r0, [sp, #4]
    if ((dev == NULL) || (dev->read == NULL))
 8001da4:	b1e5      	cbz	r5, 8001de0 <bmi160_set_sens_conf+0x198>
        if (dev->intf == BMI160_SPI_INTF)
 8001da6:	78a3      	ldrb	r3, [r4, #2]
        rslt = dev->read(dev->id, reg_addr, data, len);
 8001da8:	7860      	ldrb	r0, [r4, #1]
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8001daa:	2b01      	cmp	r3, #1
        rslt = dev->read(dev->id, reg_addr, data, len);
 8001dac:	bf18      	it	ne
 8001dae:	2102      	movne	r1, #2
 8001db0:	f04f 0301 	mov.w	r3, #1
 8001db4:	bf08      	it	eq
 8001db6:	2182      	moveq	r1, #130	; 0x82
 8001db8:	aa01      	add	r2, sp, #4
 8001dba:	47a8      	blx	r5
    data = data >> 1;
 8001dbc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    data = data & BMI160_ERR_REG_MASK;
 8001dc0:	f3c3 0343 	ubfx	r3, r3, #1, #4
    if (data == 1)
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d017      	beq.n	8001df8 <bmi160_set_sens_conf+0x1b0>
    else if (data == 2)
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d012      	beq.n	8001df2 <bmi160_set_sens_conf+0x1aa>
    else if (data == 3)
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d00d      	beq.n	8001dec <bmi160_set_sens_conf+0x1a4>
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 8001dd0:	2b07      	cmp	r3, #7
 8001dd2:	bf08      	it	eq
 8001dd4:	f06f 0008 	mvneq.w	r0, #8
 8001dd8:	e782      	b.n	8001ce0 <bmi160_set_sens_conf+0x98>
        rslt = BMI160_E_OUT_OF_RANGE;
 8001dda:	f06f 0003 	mvn.w	r0, #3
    return rslt;
 8001dde:	e77f      	b.n	8001ce0 <bmi160_set_sens_conf+0x98>
        rslt = BMI160_E_NULL_PTR;
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	e77c      	b.n	8001ce0 <bmi160_set_sens_conf+0x98>
        rslt = BMI160_E_NULL_PTR;
 8001de6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001dea:	4770      	bx	lr
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 8001dec:	f06f 0007 	mvn.w	r0, #7
    return rslt;
 8001df0:	e776      	b.n	8001ce0 <bmi160_set_sens_conf+0x98>
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 8001df2:	f06f 0006 	mvn.w	r0, #6
 8001df6:	e773      	b.n	8001ce0 <bmi160_set_sens_conf+0x98>
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 8001df8:	f06f 0005 	mvn.w	r0, #5
 8001dfc:	e770      	b.n	8001ce0 <bmi160_set_sens_conf+0x98>
 8001dfe:	bf00      	nop

08001e00 <bridge_validate_data>:

const char space = ' ';
const char semicolon = ';';

// "1097;1919;1508;1508;1919;"
bool bridge_validate_data(char *s, int size) {
 8001e00:	b510      	push	{r4, lr}
 8001e02:	460c      	mov	r4, r1
	int length = strlen(s);
 8001e04:	f7fe f9e8 	bl	80001d8 <strlen>
	if (s == NULL || length < size) {
		return false;
	}
	return true;
}
 8001e08:	42a0      	cmp	r0, r4
 8001e0a:	bfb4      	ite	lt
 8001e0c:	2000      	movlt	r0, #0
 8001e0e:	2001      	movge	r0, #1
 8001e10:	bd10      	pop	{r4, pc}
 8001e12:	bf00      	nop

08001e14 <bridge_format_string>:

// fc_bridge.port->data_in = bridge_format_string((char*) fc_bridge.rx_data); // allocate memory
// process data
// free(fc_bridge.port->data_in); // deallocate memory
char* bridge_format_string(char *s) {
 8001e14:	b538      	push	{r3, r4, r5, lr}
 8001e16:	4604      	mov	r4, r0
	char *d = (char*) malloc(strlen(s));
 8001e18:	f7fe f9de 	bl	80001d8 <strlen>
 8001e1c:	f002 fdee 	bl	80049fc <malloc>
	int counter = 0, space_num = 0;
	while (*s++) {
 8001e20:	4622      	mov	r2, r4
 8001e22:	f812 3b01 	ldrb.w	r3, [r2], #1
 8001e26:	b34b      	cbz	r3, 8001e7c <bridge_format_string+0x68>
	int counter = 0, space_num = 0;
 8001e28:	f04f 0c00 	mov.w	ip, #0
 8001e2c:	4d15      	ldr	r5, [pc, #84]	; (8001e84 <bridge_format_string+0x70>)
 8001e2e:	4661      	mov	r1, ip
		if (*s != semicolon && isdigit((int )*s)) {
			if (counter != 0 && (counter - space_num) % 4 == 0) {
				d[counter++] = space;
 8001e30:	f04f 0e20 	mov.w	lr, #32
		if (*s != semicolon && isdigit((int )*s)) {
 8001e34:	f812 3b01 	ldrb.w	r3, [r2], #1
 8001e38:	2b3b      	cmp	r3, #59	; 0x3b
 8001e3a:	d0fb      	beq.n	8001e34 <bridge_format_string+0x20>
 8001e3c:	5cec      	ldrb	r4, [r5, r3]
 8001e3e:	0764      	lsls	r4, r4, #29
 8001e40:	d50a      	bpl.n	8001e58 <bridge_format_string+0x44>
			if (counter != 0 && (counter - space_num) % 4 == 0) {
 8001e42:	eba1 040c 	sub.w	r4, r1, ip
 8001e46:	b169      	cbz	r1, 8001e64 <bridge_format_string+0x50>
 8001e48:	f014 0f03 	tst.w	r4, #3
				d[counter++] = space;
 8001e4c:	f101 0401 	add.w	r4, r1, #1
			if (counter != 0 && (counter - space_num) % 4 == 0) {
 8001e50:	d00c      	beq.n	8001e6c <bridge_format_string+0x58>
				d[counter++] = space;
 8001e52:	1844      	adds	r4, r0, r1
 8001e54:	3101      	adds	r1, #1
				space_num++;
			}
			d[counter++] = *s;
 8001e56:	7023      	strb	r3, [r4, #0]
	while (*s++) {
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1eb      	bne.n	8001e34 <bridge_format_string+0x20>
		}
	}
	d[counter] = (char) 0; //'\0'
 8001e5c:	4401      	add	r1, r0
 8001e5e:	2300      	movs	r3, #0
 8001e60:	700b      	strb	r3, [r1, #0]
	return d;
}
 8001e62:	bd38      	pop	{r3, r4, r5, pc}
 8001e64:	4604      	mov	r4, r0
 8001e66:	2101      	movs	r1, #1
			d[counter++] = *s;
 8001e68:	7023      	strb	r3, [r4, #0]
 8001e6a:	e7f5      	b.n	8001e58 <bridge_format_string+0x44>
 8001e6c:	4404      	add	r4, r0
				d[counter++] = space;
 8001e6e:	f800 e001 	strb.w	lr, [r0, r1]
				space_num++;
 8001e72:	f10c 0c01 	add.w	ip, ip, #1
			d[counter++] = *s;
 8001e76:	3102      	adds	r1, #2
 8001e78:	7023      	strb	r3, [r4, #0]
 8001e7a:	e7ed      	b.n	8001e58 <bridge_format_string+0x44>
	while (*s++) {
 8001e7c:	4601      	mov	r1, r0
	d[counter] = (char) 0; //'\0'
 8001e7e:	2300      	movs	r3, #0
 8001e80:	700b      	strb	r3, [r1, #0]
}
 8001e82:	bd38      	pop	{r3, r4, r5, pc}
 8001e84:	08004ddd 	.word	0x08004ddd

08001e88 <bridge_get_transmit_sigint>:

inline const short bridge_get_transmit_sigint() {
	return FC_BRIDGE_TRANSMIT_SIGINT;
}
 8001e88:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop

08001e90 <bridge_get_receive_sigint>:

inline const short bridge_get_receive_sigint() {
	return FC_BRIDGE_RECEIVE_SIGINT;
}
 8001e90:	f240 102d 	movw	r0, #301	; 0x12d
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop

08001e98 <get_throttle_queue_rc>:
	}
}

inline Queue_t* get_throttle_queue_rc() {
	return &queues_rc[0];
}
 8001e98:	4800      	ldr	r0, [pc, #0]	; (8001e9c <get_throttle_queue_rc+0x4>)
 8001e9a:	4770      	bx	lr
 8001e9c:	200008ec 	.word	0x200008ec

08001ea0 <get_pitch_queue_rc>:

inline Queue_t* get_pitch_queue_rc() {
	return &queues_rc[1];
}
 8001ea0:	4800      	ldr	r0, [pc, #0]	; (8001ea4 <get_pitch_queue_rc+0x4>)
 8001ea2:	4770      	bx	lr
 8001ea4:	200009f0 	.word	0x200009f0

08001ea8 <get_roll_queue_rc>:

inline Queue_t* get_roll_queue_rc() {
	return &queues_rc[2];
}
 8001ea8:	4800      	ldr	r0, [pc, #0]	; (8001eac <get_roll_queue_rc+0x4>)
 8001eaa:	4770      	bx	lr
 8001eac:	20000af4 	.word	0x20000af4

08001eb0 <get_yaw_queue_rc>:

inline Queue_t* get_yaw_queue_rc() {
	return &queues_rc[3];
}
 8001eb0:	4800      	ldr	r0, [pc, #0]	; (8001eb4 <get_yaw_queue_rc+0x4>)
 8001eb2:	4770      	bx	lr
 8001eb4:	20000bf8 	.word	0x20000bf8

08001eb8 <get_gear_queue_rc>:

inline Queue_t* get_gear_queue_rc() {
	return &queues_rc[4];
}
 8001eb8:	4800      	ldr	r0, [pc, #0]	; (8001ebc <get_gear_queue_rc+0x4>)
 8001eba:	4770      	bx	lr
 8001ebc:	20000cfc 	.word	0x20000cfc

08001ec0 <get_speed_queue_rc>:

inline Queue_t* get_speed_queue_rc() {
	return &queues_rc[5];
}
 8001ec0:	4800      	ldr	r0, [pc, #0]	; (8001ec4 <get_speed_queue_rc+0x4>)
 8001ec2:	4770      	bx	lr
 8001ec4:	20000e00 	.word	0x20000e00

08001ec8 <get_memory_order>:
static volatile bool initialized = false;
static const memory_order memory_order_drone = memory_order_seq_cst;

inline const memory_order* get_memory_order() {
	return &memory_order_drone;
}
 8001ec8:	4800      	ldr	r0, [pc, #0]	; (8001ecc <get_memory_order+0x4>)
 8001eca:	4770      	bx	lr
 8001ecc:	08004dd0 	.word	0x08004dd0

08001ed0 <pre_init>:

void pre_init() {
	if (!initialized) {
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <pre_init+0x14>)
 8001ed2:	781a      	ldrb	r2, [r3, #0]
 8001ed4:	b102      	cbz	r2, 8001ed8 <pre_init+0x8>
		atomic_signal_fence(memory_order_drone);
		atomic_thread_fence(memory_order_drone);
		initialized = true;
	}
}
 8001ed6:	4770      	bx	lr
		initialized = true;
 8001ed8:	2201      	movs	r2, #1
		atomic_thread_fence(memory_order_drone);
 8001eda:	f3bf 8f5b 	dmb	ish
		initialized = true;
 8001ede:	701a      	strb	r2, [r3, #0]
}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000f04 	.word	0x20000f04

08001ee8 <queue_enqueue>:

inline bool queue_data_available(Queue_t *queue) {
	return (queue->pW > queue->pR);
}

bool queue_enqueue(Queue_t *queue, uint32_t data) {
 8001ee8:	b570      	push	{r4, r5, r6, lr}
	return (((queue->pW + 1) % QUEUE_SIZE) == queue->pR);
 8001eea:	8845      	ldrh	r5, [r0, #2]
 8001eec:	8803      	ldrh	r3, [r0, #0]
 8001eee:	3501      	adds	r5, #1
 8001ef0:	f005 023f 	and.w	r2, r5, #63	; 0x3f
	if (queue_full(queue)) {
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d101      	bne.n	8001efc <queue_enqueue+0x14>
		return false;
 8001ef8:	2000      	movs	r0, #0
	} else {
		queue_store_data(queue, data);
		queue->pW = ((queue->pW + 1) == QUEUE_SIZE) ? 0 : queue->pW + 1;
		return true;
	}
}
 8001efa:	bd70      	pop	{r4, r5, r6, pc}
 8001efc:	4604      	mov	r4, r0
 8001efe:	460e      	mov	r6, r1
	atomic_store_explicit(&queue->q[queue->pW], data, *get_memory_order());
 8001f00:	f7ff ffe2 	bl	8001ec8 <get_memory_order>
 8001f04:	f3bf 8f5b 	dmb	ish
 8001f08:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
 8001f0c:	f3bf 8f5b 	dmb	ish
		queue->pW = ((queue->pW + 1) == QUEUE_SIZE) ? 0 : queue->pW + 1;
 8001f10:	8863      	ldrh	r3, [r4, #2]
 8001f12:	2b3f      	cmp	r3, #63	; 0x3f
 8001f14:	bf1a      	itte	ne
 8001f16:	3301      	addne	r3, #1
 8001f18:	b29b      	uxthne	r3, r3
 8001f1a:	2300      	moveq	r3, #0
 8001f1c:	8063      	strh	r3, [r4, #2]
		return true;
 8001f1e:	2001      	movs	r0, #1
}
 8001f20:	bd70      	pop	{r4, r5, r6, pc}
 8001f22:	bf00      	nop

08001f24 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001f24:	2001      	movs	r0, #1
 8001f26:	4770      	bx	lr

08001f28 <_kill>:

int _kill(int pid, int sig)
{
 8001f28:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f2a:	f002 feb3 	bl	8004c94 <__errno>
 8001f2e:	2316      	movs	r3, #22
 8001f30:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001f32:	f04f 30ff 	mov.w	r0, #4294967295
 8001f36:	bd08      	pop	{r3, pc}

08001f38 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f38:	490c      	ldr	r1, [pc, #48]	; (8001f6c <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f3a:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001f3c:	680b      	ldr	r3, [r1, #0]
{
 8001f3e:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f40:	4c0c      	ldr	r4, [pc, #48]	; (8001f74 <_sbrk+0x3c>)
 8001f42:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001f44:	b12b      	cbz	r3, 8001f52 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f46:	4418      	add	r0, r3
 8001f48:	4290      	cmp	r0, r2
 8001f4a:	d807      	bhi.n	8001f5c <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001f4c:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <_sbrk+0x40>)
 8001f54:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001f56:	4418      	add	r0, r3
 8001f58:	4290      	cmp	r0, r2
 8001f5a:	d9f7      	bls.n	8001f4c <_sbrk+0x14>
    errno = ENOMEM;
 8001f5c:	f002 fe9a 	bl	8004c94 <__errno>
 8001f60:	230c      	movs	r3, #12
 8001f62:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001f64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd10      	pop	{r4, pc}
 8001f6c:	20000f08 	.word	0x20000f08
 8001f70:	20020000 	.word	0x20020000
 8001f74:	00000400 	.word	0x00000400
 8001f78:	20001058 	.word	0x20001058

08001f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f7e:	4a0e      	ldr	r2, [pc, #56]	; (8001fb8 <HAL_InitTick+0x3c>)
 8001f80:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <HAL_InitTick+0x40>)
 8001f82:	7812      	ldrb	r2, [r2, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
{
 8001f86:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f8c:	fbb0 f0f2 	udiv	r0, r0, r2
 8001f90:	fbb3 f0f0 	udiv	r0, r3, r0
 8001f94:	f000 f8b2 	bl	80020fc <HAL_SYSTICK_Config>
 8001f98:	b908      	cbnz	r0, 8001f9e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9a:	2d0f      	cmp	r5, #15
 8001f9c:	d901      	bls.n	8001fa2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001f9e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001fa0:	bd38      	pop	{r3, r4, r5, pc}
 8001fa2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	f000 f85a 	bl	8002064 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <HAL_InitTick+0x44>)
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	601d      	str	r5, [r3, #0]
}
 8001fb6:	bd38      	pop	{r3, r4, r5, pc}
 8001fb8:	20000034 	.word	0x20000034
 8001fbc:	20000030 	.word	0x20000030
 8001fc0:	20000038 	.word	0x20000038

08001fc4 <HAL_Init>:
{
 8001fc4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_Init+0x30>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fce:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fd6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fde:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	f000 f82d 	bl	8002040 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fe6:	200f      	movs	r0, #15
 8001fe8:	f7ff ffc8 	bl	8001f7c <HAL_InitTick>
  HAL_MspInit();
 8001fec:	f7fe fef4 	bl	8000dd8 <HAL_MspInit>
}
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	bd08      	pop	{r3, pc}
 8001ff4:	40023c00 	.word	0x40023c00

08001ff8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001ff8:	4a03      	ldr	r2, [pc, #12]	; (8002008 <HAL_IncTick+0x10>)
 8001ffa:	4b04      	ldr	r3, [pc, #16]	; (800200c <HAL_IncTick+0x14>)
 8001ffc:	6811      	ldr	r1, [r2, #0]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	440b      	add	r3, r1
 8002002:	6013      	str	r3, [r2, #0]
}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20000f0c 	.word	0x20000f0c
 800200c:	20000034 	.word	0x20000034

08002010 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002010:	4b01      	ldr	r3, [pc, #4]	; (8002018 <HAL_GetTick+0x8>)
 8002012:	6818      	ldr	r0, [r3, #0]
}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000f0c 	.word	0x20000f0c

0800201c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800201c:	b538      	push	{r3, r4, r5, lr}
 800201e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002020:	f7ff fff6 	bl	8002010 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002024:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002026:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002028:	d002      	beq.n	8002030 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800202a:	4b04      	ldr	r3, [pc, #16]	; (800203c <HAL_Delay+0x20>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002030:	f7ff ffee 	bl	8002010 <HAL_GetTick>
 8002034:	1b43      	subs	r3, r0, r5
 8002036:	42a3      	cmp	r3, r4
 8002038:	d3fa      	bcc.n	8002030 <HAL_Delay+0x14>
  {
  }
}
 800203a:	bd38      	pop	{r3, r4, r5, pc}
 800203c:	20000034 	.word	0x20000034

08002040 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002040:	4907      	ldr	r1, [pc, #28]	; (8002060 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002042:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002044:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002046:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800204a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002050:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002052:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800205a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <HAL_NVIC_SetPriority+0x74>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800206c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800206e:	f1c3 0e07 	rsb	lr, r3, #7
 8002072:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002076:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800207a:	bf28      	it	cs
 800207c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002080:	f1bc 0f06 	cmp.w	ip, #6
 8002084:	d91b      	bls.n	80020be <HAL_NVIC_SetPriority+0x5a>
 8002086:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002088:	f04f 3cff 	mov.w	ip, #4294967295
 800208c:	fa0c fc03 	lsl.w	ip, ip, r3
 8002090:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	f04f 3cff 	mov.w	ip, #4294967295
 8002098:	fa0c fc0e 	lsl.w	ip, ip, lr
 800209c:	ea21 010c 	bic.w	r1, r1, ip
 80020a0:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80020a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80020a8:	db0c      	blt.n	80020c4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020aa:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80020ae:	0109      	lsls	r1, r1, #4
 80020b0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80020b4:	b2c9      	uxtb	r1, r1
 80020b6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80020ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80020be:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020c0:	4613      	mov	r3, r2
 80020c2:	e7e7      	b.n	8002094 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <HAL_NVIC_SetPriority+0x78>)
 80020c6:	f000 000f 	and.w	r0, r0, #15
 80020ca:	0109      	lsls	r1, r1, #4
 80020cc:	4403      	add	r3, r0
 80020ce:	b2c9      	uxtb	r1, r1
 80020d0:	7619      	strb	r1, [r3, #24]
 80020d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80020d6:	bf00      	nop
 80020d8:	e000ed00 	.word	0xe000ed00
 80020dc:	e000ecfc 	.word	0xe000ecfc

080020e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80020e0:	2800      	cmp	r0, #0
 80020e2:	db07      	blt.n	80020f4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e4:	0941      	lsrs	r1, r0, #5
 80020e6:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <HAL_NVIC_EnableIRQ+0x18>)
 80020e8:	f000 001f 	and.w	r0, r0, #31
 80020ec:	2301      	movs	r3, #1
 80020ee:	4083      	lsls	r3, r0
 80020f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000e100 	.word	0xe000e100

080020fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020fc:	3801      	subs	r0, #1
 80020fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002102:	d210      	bcs.n	8002126 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002104:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002106:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210a:	4c08      	ldr	r4, [pc, #32]	; (800212c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8002112:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002116:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002118:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800211a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800211c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800211e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002122:	6119      	str	r1, [r3, #16]
 8002124:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002126:	2001      	movs	r0, #1
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002130:	b538      	push	{r3, r4, r5, lr}
 8002132:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8002134:	f7ff ff6c 	bl	8002010 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002138:	2c00      	cmp	r4, #0
 800213a:	d052      	beq.n	80021e2 <HAL_DMA_Init+0xb2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800213c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800213e:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002140:	2102      	movs	r1, #2
 8002142:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8002146:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	f022 0201 	bic.w	r2, r2, #1
 8002150:	4605      	mov	r5, r0
 8002152:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002154:	e005      	b.n	8002162 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002156:	f7ff ff5b 	bl	8002010 <HAL_GetTick>
 800215a:	1b43      	subs	r3, r0, r5
 800215c:	2b05      	cmp	r3, #5
 800215e:	d839      	bhi.n	80021d4 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	07d1      	lsls	r1, r2, #31
 8002166:	d4f6      	bmi.n	8002156 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002168:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800216c:	68e1      	ldr	r1, [r4, #12]
 800216e:	4302      	orrs	r2, r0
 8002170:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002172:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002176:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002178:	432a      	orrs	r2, r5
 800217a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800217c:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 800217e:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002180:	4302      	orrs	r2, r0
 8002182:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002184:	4933      	ldr	r1, [pc, #204]	; (8002254 <HAL_DMA_Init+0x124>)
 8002186:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002188:	6a25      	ldr	r5, [r4, #32]
 800218a:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800218c:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800218e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002190:	2904      	cmp	r1, #4
 8002192:	d028      	beq.n	80021e6 <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002194:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002196:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002198:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800219c:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800219e:	b2d8      	uxtb	r0, r3
 80021a0:	4a2d      	ldr	r2, [pc, #180]	; (8002258 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 80021a2:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021a4:	3810      	subs	r0, #16
 80021a6:	fba2 5200 	umull	r5, r2, r2, r0
 80021aa:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021ac:	492b      	ldr	r1, [pc, #172]	; (800225c <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021b2:	5c89      	ldrb	r1, [r1, r2]
 80021b4:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021b6:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 80021ba:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021bc:	bf88      	it	hi
 80021be:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c0:	223f      	movs	r2, #63	; 0x3f
 80021c2:	408a      	lsls	r2, r1
 80021c4:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c6:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c8:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 80021ca:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021cc:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80021ce:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80021d2:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021d6:	2220      	movs	r2, #32
 80021d8:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 80021de:	4618      	mov	r0, r3
}
 80021e0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80021e2:	2001      	movs	r0, #1
}
 80021e4:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021e6:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 80021ea:	4329      	orrs	r1, r5
 80021ec:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 80021ee:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 80021f0:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 80021f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021f4:	f021 0107 	bic.w	r1, r1, #7
 80021f8:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 80021fa:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021fe:	2d00      	cmp	r5, #0
 8002200:	d0cd      	beq.n	800219e <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002202:	b178      	cbz	r0, 8002224 <HAL_DMA_Init+0xf4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002204:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002208:	d016      	beq.n	8002238 <HAL_DMA_Init+0x108>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800220a:	2a02      	cmp	r2, #2
 800220c:	d903      	bls.n	8002216 <HAL_DMA_Init+0xe6>
 800220e:	2a03      	cmp	r2, #3
 8002210:	d1c5      	bne.n	800219e <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002212:	01ea      	lsls	r2, r5, #7
 8002214:	d5c3      	bpl.n	800219e <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 8002216:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002218:	2240      	movs	r2, #64	; 0x40
 800221a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800221c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002220:	4618      	mov	r0, r3
}
 8002222:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8002224:	2a01      	cmp	r2, #1
 8002226:	d003      	beq.n	8002230 <HAL_DMA_Init+0x100>
 8002228:	f032 0202 	bics.w	r2, r2, #2
 800222c:	d1b7      	bne.n	800219e <HAL_DMA_Init+0x6e>
 800222e:	e7f0      	b.n	8002212 <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002230:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002234:	d1b3      	bne.n	800219e <HAL_DMA_Init+0x6e>
 8002236:	e7ee      	b.n	8002216 <HAL_DMA_Init+0xe6>
    switch (tmp)
 8002238:	2a03      	cmp	r2, #3
 800223a:	d8b0      	bhi.n	800219e <HAL_DMA_Init+0x6e>
 800223c:	a001      	add	r0, pc, #4	; (adr r0, 8002244 <HAL_DMA_Init+0x114>)
 800223e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002242:	bf00      	nop
 8002244:	08002217 	.word	0x08002217
 8002248:	08002213 	.word	0x08002213
 800224c:	08002217 	.word	0x08002217
 8002250:	08002231 	.word	0x08002231
 8002254:	f010803f 	.word	0xf010803f
 8002258:	aaaaaaab 	.word	0xaaaaaaab
 800225c:	08004dd4 	.word	0x08004dd4

08002260 <HAL_DMA_Abort>:
{
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002264:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8002266:	f7ff fed3 	bl	8002010 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800226a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800226e:	2b02      	cmp	r3, #2
 8002270:	d006      	beq.n	8002280 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002276:	2300      	movs	r3, #0
 8002278:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800227c:	2001      	movs	r0, #1
}
 800227e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002280:	6823      	ldr	r3, [r4, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	f022 0216 	bic.w	r2, r2, #22
 8002288:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002290:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002292:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002294:	4605      	mov	r5, r0
 8002296:	b342      	cbz	r2, 80022ea <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	f022 0208 	bic.w	r2, r2, #8
 800229e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	f022 0201 	bic.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a8:	e005      	b.n	80022b6 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022aa:	f7ff feb1 	bl	8002010 <HAL_GetTick>
 80022ae:	1b43      	subs	r3, r0, r5
 80022b0:	2b05      	cmp	r3, #5
 80022b2:	d810      	bhi.n	80022d6 <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f013 0301 	ands.w	r3, r3, #1
 80022bc:	d1f5      	bne.n	80022aa <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022be:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80022c0:	223f      	movs	r2, #63	; 0x3f
 80022c2:	408a      	lsls	r2, r1
  return HAL_OK;
 80022c4:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 80022c6:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 80022c8:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ca:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80022cc:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80022d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80022d4:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022d8:	2220      	movs	r2, #32
 80022da:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80022dc:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022de:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80022e2:	2300      	movs	r3, #0
 80022e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80022e8:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80022ec:	2a00      	cmp	r2, #0
 80022ee:	d1d3      	bne.n	8002298 <HAL_DMA_Abort+0x38>
 80022f0:	e7d6      	b.n	80022a0 <HAL_DMA_Abort+0x40>
 80022f2:	bf00      	nop

080022f4 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022f4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d003      	beq.n	8002304 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002300:	2001      	movs	r0, #1
 8002302:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8002304:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8002306:	2305      	movs	r3, #5
 8002308:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800230c:	6813      	ldr	r3, [r2, #0]
 800230e:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 8002312:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8002314:	6013      	str	r3, [r2, #0]
}
 8002316:	4770      	bx	lr

08002318 <HAL_DMA_IRQHandler>:
{
 8002318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800231a:	b083      	sub	sp, #12
  uint32_t timeout = SystemCoreClock / 9600U;
 800231c:	4a67      	ldr	r2, [pc, #412]	; (80024bc <HAL_DMA_IRQHandler+0x1a4>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800231e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8002320:	6816      	ldr	r6, [r2, #0]
  __IO uint32_t count = 0U;
 8002322:	2300      	movs	r3, #0
 8002324:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002326:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8002328:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800232a:	2208      	movs	r2, #8
 800232c:	409a      	lsls	r2, r3
 800232e:	422a      	tst	r2, r5
{
 8002330:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002332:	d003      	beq.n	800233c <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002334:	6801      	ldr	r1, [r0, #0]
 8002336:	6808      	ldr	r0, [r1, #0]
 8002338:	0740      	lsls	r0, r0, #29
 800233a:	d478      	bmi.n	800242e <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800233c:	2201      	movs	r2, #1
 800233e:	409a      	lsls	r2, r3
 8002340:	422a      	tst	r2, r5
 8002342:	d003      	beq.n	800234c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002344:	6821      	ldr	r1, [r4, #0]
 8002346:	6949      	ldr	r1, [r1, #20]
 8002348:	0608      	lsls	r0, r1, #24
 800234a:	d46a      	bmi.n	8002422 <HAL_DMA_IRQHandler+0x10a>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800234c:	2204      	movs	r2, #4
 800234e:	409a      	lsls	r2, r3
 8002350:	422a      	tst	r2, r5
 8002352:	d003      	beq.n	800235c <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002354:	6821      	ldr	r1, [r4, #0]
 8002356:	6809      	ldr	r1, [r1, #0]
 8002358:	0789      	lsls	r1, r1, #30
 800235a:	d45c      	bmi.n	8002416 <HAL_DMA_IRQHandler+0xfe>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800235c:	2210      	movs	r2, #16
 800235e:	409a      	lsls	r2, r3
 8002360:	422a      	tst	r2, r5
 8002362:	d003      	beq.n	800236c <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002364:	6821      	ldr	r1, [r4, #0]
 8002366:	6808      	ldr	r0, [r1, #0]
 8002368:	0700      	lsls	r0, r0, #28
 800236a:	d441      	bmi.n	80023f0 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800236c:	2220      	movs	r2, #32
 800236e:	409a      	lsls	r2, r3
 8002370:	422a      	tst	r2, r5
 8002372:	d014      	beq.n	800239e <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002374:	6821      	ldr	r1, [r4, #0]
 8002376:	6808      	ldr	r0, [r1, #0]
 8002378:	06c0      	lsls	r0, r0, #27
 800237a:	d510      	bpl.n	800239e <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800237c:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800237e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002382:	2a05      	cmp	r2, #5
 8002384:	d063      	beq.n	800244e <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002386:	680b      	ldr	r3, [r1, #0]
 8002388:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800238c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800238e:	d07e      	beq.n	800248e <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002390:	0319      	lsls	r1, r3, #12
 8002392:	f140 8089 	bpl.w	80024a8 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8002396:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002398:	b10b      	cbz	r3, 800239e <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 800239a:	4620      	mov	r0, r4
 800239c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800239e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80023a0:	b323      	cbz	r3, 80023ec <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80023a4:	07da      	lsls	r2, r3, #31
 80023a6:	d51a      	bpl.n	80023de <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 80023a8:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023aa:	4945      	ldr	r1, [pc, #276]	; (80024c0 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80023ac:	2305      	movs	r3, #5
 80023ae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80023b2:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023b4:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 80023b8:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80023bc:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	e002      	b.n	80023c8 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023c2:	6813      	ldr	r3, [r2, #0]
 80023c4:	07db      	lsls	r3, r3, #31
 80023c6:	d504      	bpl.n	80023d2 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 80023c8:	9b01      	ldr	r3, [sp, #4]
 80023ca:	3301      	adds	r3, #1
 80023cc:	42b3      	cmp	r3, r6
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	d9f7      	bls.n	80023c2 <HAL_DMA_IRQHandler+0xaa>
      hdma->State = HAL_DMA_STATE_READY;
 80023d2:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 80023d4:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 80023d6:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80023da:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 80023de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80023e0:	b123      	cbz	r3, 80023ec <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 80023e2:	4620      	mov	r0, r4
}
 80023e4:	b003      	add	sp, #12
 80023e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80023ea:	4718      	bx	r3
}
 80023ec:	b003      	add	sp, #12
 80023ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023f0:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023f2:	680a      	ldr	r2, [r1, #0]
 80023f4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023f8:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023fa:	d122      	bne.n	8002442 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023fc:	05d2      	lsls	r2, r2, #23
 80023fe:	d403      	bmi.n	8002408 <HAL_DMA_IRQHandler+0xf0>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002400:	680a      	ldr	r2, [r1, #0]
 8002402:	f022 0208 	bic.w	r2, r2, #8
 8002406:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002408:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800240a:	2a00      	cmp	r2, #0
 800240c:	d0ae      	beq.n	800236c <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 800240e:	4620      	mov	r0, r4
 8002410:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002412:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002414:	e7aa      	b.n	800236c <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002416:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002418:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800241a:	f042 0204 	orr.w	r2, r2, #4
 800241e:	6562      	str	r2, [r4, #84]	; 0x54
 8002420:	e79c      	b.n	800235c <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002422:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002424:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002426:	f042 0202 	orr.w	r2, r2, #2
 800242a:	6562      	str	r2, [r4, #84]	; 0x54
 800242c:	e78e      	b.n	800234c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800242e:	6808      	ldr	r0, [r1, #0]
 8002430:	f020 0004 	bic.w	r0, r0, #4
 8002434:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002436:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002438:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	6562      	str	r2, [r4, #84]	; 0x54
 8002440:	e77c      	b.n	800233c <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002442:	0311      	lsls	r1, r2, #12
 8002444:	d5e0      	bpl.n	8002408 <HAL_DMA_IRQHandler+0xf0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002446:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002448:	2a00      	cmp	r2, #0
 800244a:	d1e0      	bne.n	800240e <HAL_DMA_IRQHandler+0xf6>
 800244c:	e78e      	b.n	800236c <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800244e:	680a      	ldr	r2, [r1, #0]
 8002450:	f022 0216 	bic.w	r2, r2, #22
 8002454:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002456:	694a      	ldr	r2, [r1, #20]
 8002458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800245c:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800245e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002460:	b33a      	cbz	r2, 80024b2 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002462:	680a      	ldr	r2, [r1, #0]
 8002464:	f022 0208 	bic.w	r2, r2, #8
 8002468:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800246a:	223f      	movs	r2, #63	; 0x3f
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8002470:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002472:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002474:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 8002476:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8002478:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800247c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8002480:	2900      	cmp	r1, #0
 8002482:	d0b3      	beq.n	80023ec <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8002484:	4620      	mov	r0, r4
}
 8002486:	b003      	add	sp, #12
 8002488:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 800248c:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800248e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002492:	d180      	bne.n	8002396 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002494:	680a      	ldr	r2, [r1, #0]
 8002496:	f022 0210 	bic.w	r2, r2, #16
 800249a:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800249c:	2201      	movs	r2, #1
 800249e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80024a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80024a6:	e776      	b.n	8002396 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 80024a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f47f af75 	bne.w	800239a <HAL_DMA_IRQHandler+0x82>
 80024b0:	e775      	b.n	800239e <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024b2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80024b4:	2a00      	cmp	r2, #0
 80024b6:	d1d4      	bne.n	8002462 <HAL_DMA_IRQHandler+0x14a>
 80024b8:	e7d7      	b.n	800246a <HAL_DMA_IRQHandler+0x152>
 80024ba:	bf00      	nop
 80024bc:	20000030 	.word	0x20000030
 80024c0:	1b4e81b5 	.word	0x1b4e81b5

080024c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c8:	2200      	movs	r2, #0
 80024ca:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024cc:	4e71      	ldr	r6, [pc, #452]	; (8002694 <HAL_GPIO_Init+0x1d0>)
{
 80024ce:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d0:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 80024d2:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d6:	4689      	mov	r9, r1
 80024d8:	e004      	b.n	80024e4 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024da:	3301      	adds	r3, #1
 80024dc:	2b10      	cmp	r3, #16
 80024de:	f102 0202 	add.w	r2, r2, #2
 80024e2:	d079      	beq.n	80025d8 <HAL_GPIO_Init+0x114>
    ioposition = 0x01U << position;
 80024e4:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024e8:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 80024ec:	43a1      	bics	r1, r4
 80024ee:	d1f4      	bne.n	80024da <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024f0:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80024f4:	f00c 0103 	and.w	r1, ip, #3
 80024f8:	1e4d      	subs	r5, r1, #1
 80024fa:	2d01      	cmp	r5, #1
 80024fc:	d96f      	bls.n	80025de <HAL_GPIO_Init+0x11a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024fe:	2903      	cmp	r1, #3
 8002500:	f040 80b0 	bne.w	8002664 <HAL_GPIO_Init+0x1a0>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002504:	4091      	lsls	r1, r2
 8002506:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8002508:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800250a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800250c:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800250e:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002512:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002514:	d0e1      	beq.n	80024da <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002516:	4d60      	ldr	r5, [pc, #384]	; (8002698 <HAL_GPIO_Init+0x1d4>)
 8002518:	2100      	movs	r1, #0
 800251a:	9103      	str	r1, [sp, #12]
 800251c:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800251e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002522:	6469      	str	r1, [r5, #68]	; 0x44
 8002524:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002526:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800252a:	9103      	str	r1, [sp, #12]
 800252c:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800252e:	f023 0103 	bic.w	r1, r3, #3
 8002532:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002536:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800253a:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800253e:	688d      	ldr	r5, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002540:	00bf      	lsls	r7, r7, #2
 8002542:	f04f 0e0f 	mov.w	lr, #15
 8002546:	fa0e fe07 	lsl.w	lr, lr, r7
 800254a:	ea25 080e 	bic.w	r8, r5, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800254e:	4d53      	ldr	r5, [pc, #332]	; (800269c <HAL_GPIO_Init+0x1d8>)
 8002550:	42a8      	cmp	r0, r5
 8002552:	d017      	beq.n	8002584 <HAL_GPIO_Init+0xc0>
 8002554:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002558:	42a8      	cmp	r0, r5
 800255a:	f000 8087 	beq.w	800266c <HAL_GPIO_Init+0x1a8>
 800255e:	4d50      	ldr	r5, [pc, #320]	; (80026a0 <HAL_GPIO_Init+0x1dc>)
 8002560:	42a8      	cmp	r0, r5
 8002562:	f000 8088 	beq.w	8002676 <HAL_GPIO_Init+0x1b2>
 8002566:	4d4f      	ldr	r5, [pc, #316]	; (80026a4 <HAL_GPIO_Init+0x1e0>)
 8002568:	42a8      	cmp	r0, r5
 800256a:	f000 808b 	beq.w	8002684 <HAL_GPIO_Init+0x1c0>
 800256e:	4d4e      	ldr	r5, [pc, #312]	; (80026a8 <HAL_GPIO_Init+0x1e4>)
 8002570:	42a8      	cmp	r0, r5
 8002572:	bf0c      	ite	eq
 8002574:	f04f 0e04 	moveq.w	lr, #4
 8002578:	f04f 0e07 	movne.w	lr, #7
 800257c:	fa0e f707 	lsl.w	r7, lr, r7
 8002580:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002584:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8002588:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800258a:	ea6f 050b 	mvn.w	r5, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800258e:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8002592:	bf0c      	ite	eq
 8002594:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 8002596:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 800259a:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 800259c:	68f1      	ldr	r1, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800259e:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 80025a2:	bf0c      	ite	eq
 80025a4:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 80025a6:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->FTSR = temp;
 80025aa:	60f1      	str	r1, [r6, #12]

        temp = EXTI->EMR;
 80025ac:	6871      	ldr	r1, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ae:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80025b2:	bf0c      	ite	eq
 80025b4:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 80025b6:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->EMR = temp;
 80025ba:	6071      	str	r1, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025bc:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025be:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025c2:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 80025c6:	bf0c      	ite	eq
 80025c8:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 80025ca:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ce:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 80025d0:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025d2:	f102 0202 	add.w	r2, r2, #2
 80025d6:	d185      	bne.n	80024e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80025d8:	b005      	add	sp, #20
 80025da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025de:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 80025e2:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025e6:	fa05 f702 	lsl.w	r7, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025ea:	2503      	movs	r5, #3
 80025ec:	fa05 f802 	lsl.w	r8, r5, r2
 80025f0:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025f4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80025f8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80025fa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025fc:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002600:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8002604:	409f      	lsls	r7, r3
 8002606:	ea47 070e 	orr.w	r7, r7, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800260a:	ea6f 0508 	mvn.w	r5, r8
        GPIOx->OTYPER = temp;
 800260e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002610:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002612:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002616:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800261a:	4097      	lsls	r7, r2
 800261c:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002620:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8002622:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002624:	fa01 f102 	lsl.w	r1, r1, r2
 8002628:	f47f af6e 	bne.w	8002508 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 800262c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8002630:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002634:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002638:	f8de 7020 	ldr.w	r7, [lr, #32]
 800263c:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800263e:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002642:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002646:	fa07 f708 	lsl.w	r7, r7, r8
 800264a:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800264c:	270f      	movs	r7, #15
 800264e:	fa07 f808 	lsl.w	r8, r7, r8
 8002652:	9f00      	ldr	r7, [sp, #0]
 8002654:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002658:	9f01      	ldr	r7, [sp, #4]
 800265a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 800265e:	f8ce 7020 	str.w	r7, [lr, #32]
 8002662:	e751      	b.n	8002508 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002664:	2503      	movs	r5, #3
 8002666:	4095      	lsls	r5, r2
 8002668:	43ed      	mvns	r5, r5
 800266a:	e7d1      	b.n	8002610 <HAL_GPIO_Init+0x14c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800266c:	fa0a f707 	lsl.w	r7, sl, r7
 8002670:	ea48 0807 	orr.w	r8, r8, r7
 8002674:	e786      	b.n	8002584 <HAL_GPIO_Init+0xc0>
 8002676:	f04f 0e02 	mov.w	lr, #2
 800267a:	fa0e f707 	lsl.w	r7, lr, r7
 800267e:	ea48 0807 	orr.w	r8, r8, r7
 8002682:	e77f      	b.n	8002584 <HAL_GPIO_Init+0xc0>
 8002684:	f04f 0e03 	mov.w	lr, #3
 8002688:	fa0e f707 	lsl.w	r7, lr, r7
 800268c:	ea48 0807 	orr.w	r8, r8, r7
 8002690:	e778      	b.n	8002584 <HAL_GPIO_Init+0xc0>
 8002692:	bf00      	nop
 8002694:	40013c00 	.word	0x40013c00
 8002698:	40023800 	.word	0x40023800
 800269c:	40020000 	.word	0x40020000
 80026a0:	40020800 	.word	0x40020800
 80026a4:	40020c00 	.word	0x40020c00
 80026a8:	40021000 	.word	0x40021000

080026ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026ac:	6903      	ldr	r3, [r0, #16]
 80026ae:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80026b0:	bf14      	ite	ne
 80026b2:	2001      	movne	r0, #1
 80026b4:	2000      	moveq	r0, #0
 80026b6:	4770      	bx	lr

080026b8 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026b8:	2800      	cmp	r0, #0
 80026ba:	f000 80b9 	beq.w	8002830 <HAL_I2C_Init+0x178>
{
 80026be:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80026c4:	4604      	mov	r4, r0
 80026c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 8098 	beq.w	8002800 <HAL_I2C_Init+0x148>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026d0:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d2:	2224      	movs	r2, #36	; 0x24
 80026d4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026f0:	f000 ff60 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026f4:	6865      	ldr	r5, [r4, #4]
 80026f6:	4b4f      	ldr	r3, [pc, #316]	; (8002834 <HAL_I2C_Init+0x17c>)
 80026f8:	429d      	cmp	r5, r3
 80026fa:	d84f      	bhi.n	800279c <HAL_I2C_Init+0xe4>
 80026fc:	4b4e      	ldr	r3, [pc, #312]	; (8002838 <HAL_I2C_Init+0x180>)
 80026fe:	4298      	cmp	r0, r3
 8002700:	d97c      	bls.n	80027fc <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002702:	4b4e      	ldr	r3, [pc, #312]	; (800283c <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002704:	006a      	lsls	r2, r5, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8002706:	fba3 3500 	umull	r3, r5, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800270a:	1e43      	subs	r3, r0, #1
 800270c:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002710:	6822      	ldr	r2, [r4, #0]
 8002712:	6851      	ldr	r1, [r2, #4]
 8002714:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002718:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 800271c:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800271e:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8002720:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002724:	f10c 0c01 	add.w	ip, ip, #1
 8002728:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800272c:	ea41 010c 	orr.w	r1, r1, ip
 8002730:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002732:	69d1      	ldr	r1, [r2, #28]
 8002734:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002738:	3301      	adds	r3, #1
 800273a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800273e:	4203      	tst	r3, r0
 8002740:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002744:	d161      	bne.n	800280a <HAL_I2C_Init+0x152>
 8002746:	2304      	movs	r3, #4
 8002748:	430b      	orrs	r3, r1
 800274a:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800274c:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002750:	6811      	ldr	r1, [r2, #0]
 8002752:	4303      	orrs	r3, r0
 8002754:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002758:	430b      	orrs	r3, r1
 800275a:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800275c:	6891      	ldr	r1, [r2, #8]
 800275e:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002762:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002766:	4303      	orrs	r3, r0
 8002768:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800276c:	430b      	orrs	r3, r1
 800276e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002770:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002774:	68d1      	ldr	r1, [r2, #12]
 8002776:	4303      	orrs	r3, r0
 8002778:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800277c:	430b      	orrs	r3, r1
 800277e:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002780:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002782:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8002784:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8002788:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 800278a:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800278c:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800278e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002792:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002794:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

  return HAL_OK;
 8002798:	4618      	mov	r0, r3
}
 800279a:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800279c:	4b28      	ldr	r3, [pc, #160]	; (8002840 <HAL_I2C_Init+0x188>)
 800279e:	4298      	cmp	r0, r3
 80027a0:	d92c      	bls.n	80027fc <HAL_I2C_Init+0x144>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027a2:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80027a4:	4b25      	ldr	r3, [pc, #148]	; (800283c <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027a6:	6851      	ldr	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027a8:	4e26      	ldr	r6, [pc, #152]	; (8002844 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 80027aa:	fba3 3c00 	umull	r3, ip, r3, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ae:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80027b2:	ea41 419c 	orr.w	r1, r1, ip, lsr #18
 80027b6:	6051      	str	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80027b8:	ea4f 439c 	mov.w	r3, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027bc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	fba6 6303 	umull	r6, r3, r6, r3
 80027c8:	6a11      	ldr	r1, [r2, #32]
 80027ca:	099b      	lsrs	r3, r3, #6
 80027cc:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80027d0:	3301      	adds	r3, #1
 80027d2:	430b      	orrs	r3, r1
 80027d4:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027d6:	69d1      	ldr	r1, [r2, #28]
 80027d8:	68a3      	ldr	r3, [r4, #8]
 80027da:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80027de:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80027e2:	b9ab      	cbnz	r3, 8002810 <HAL_I2C_Init+0x158>
 80027e4:	1e43      	subs	r3, r0, #1
 80027e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027ea:	fbb3 f3f5 	udiv	r3, r3, r5
 80027ee:	3301      	adds	r3, #1
 80027f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f4:	b1d3      	cbz	r3, 800282c <HAL_I2C_Init+0x174>
 80027f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027fa:	e7a5      	b.n	8002748 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80027fc:	2001      	movs	r0, #1
}
 80027fe:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002800:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002804:	f7fd ff72 	bl	80006ec <HAL_I2C_MspInit>
 8002808:	e762      	b.n	80026d0 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800280a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280e:	e79b      	b.n	8002748 <HAL_I2C_Init+0x90>
 8002810:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002814:	1e43      	subs	r3, r0, #1
 8002816:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800281a:	fbb3 f3f5 	udiv	r3, r3, r5
 800281e:	3301      	adds	r3, #1
 8002820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002824:	b113      	cbz	r3, 800282c <HAL_I2C_Init+0x174>
 8002826:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800282a:	e78d      	b.n	8002748 <HAL_I2C_Init+0x90>
 800282c:	2301      	movs	r3, #1
 800282e:	e78b      	b.n	8002748 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002830:	2001      	movs	r0, #1
}
 8002832:	4770      	bx	lr
 8002834:	000186a0 	.word	0x000186a0
 8002838:	001e847f 	.word	0x001e847f
 800283c:	431bde83 	.word	0x431bde83
 8002840:	003d08ff 	.word	0x003d08ff
 8002844:	10624dd3 	.word	0x10624dd3

08002848 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800284c:	4605      	mov	r5, r0
 800284e:	b083      	sub	sp, #12
 8002850:	4699      	mov	r9, r3
 8002852:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8002854:	4688      	mov	r8, r1
 8002856:	4692      	mov	sl, r2
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002858:	f7ff fbda 	bl	8002010 <HAL_GetTick>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800285c:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8002860:	2b20      	cmp	r3, #32
 8002862:	d003      	beq.n	800286c <HAL_I2C_Master_Transmit+0x24>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
    {
      return HAL_BUSY;
 8002864:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002866:	b003      	add	sp, #12
 8002868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800286c:	4606      	mov	r6, r0
 800286e:	e005      	b.n	800287c <HAL_I2C_Master_Transmit+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002870:	f7ff fbce 	bl	8002010 <HAL_GetTick>
 8002874:	1b80      	subs	r0, r0, r6
 8002876:	2819      	cmp	r0, #25
 8002878:	f200 80f7 	bhi.w	8002a6a <HAL_I2C_Master_Transmit+0x222>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800287c:	682c      	ldr	r4, [r5, #0]
 800287e:	69a3      	ldr	r3, [r4, #24]
 8002880:	ea6f 0c03 	mvn.w	ip, r3
 8002884:	f01c 0b02 	ands.w	fp, ip, #2
 8002888:	d0f2      	beq.n	8002870 <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 800288a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800288e:	2b01      	cmp	r3, #1
 8002890:	d0e8      	beq.n	8002864 <HAL_I2C_Master_Transmit+0x1c>
 8002892:	2301      	movs	r3, #1
 8002894:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	07d9      	lsls	r1, r3, #31
 800289c:	d571      	bpl.n	8002982 <HAL_I2C_Master_Transmit+0x13a>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800289e:	6823      	ldr	r3, [r4, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028a0:	4a98      	ldr	r2, [pc, #608]	; (8002b04 <HAL_I2C_Master_Transmit+0x2bc>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028a6:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028a8:	2321      	movs	r3, #33	; 0x21
 80028aa:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028ae:	2310      	movs	r3, #16
 80028b0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 80028b8:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028bc:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028be:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80028c0:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028c2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80028c4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d006      	beq.n	80028da <HAL_I2C_Master_Transmit+0x92>
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d004      	beq.n	80028da <HAL_I2C_Master_Transmit+0x92>
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d002      	beq.n	80028da <HAL_I2C_Master_Transmit+0x92>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80028d6:	2b12      	cmp	r3, #18
 80028d8:	d103      	bne.n	80028e2 <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028da:	6823      	ldr	r3, [r4, #0]
 80028dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e0:	6023      	str	r3, [r4, #0]
 80028e2:	1c7b      	adds	r3, r7, #1
 80028e4:	d13f      	bne.n	8002966 <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028e6:	6963      	ldr	r3, [r4, #20]
 80028e8:	07d8      	lsls	r0, r3, #31
 80028ea:	d5fc      	bpl.n	80028e6 <HAL_I2C_Master_Transmit+0x9e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028ec:	692b      	ldr	r3, [r5, #16]
 80028ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028f2:	d14b      	bne.n	800298c <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028f4:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 80028f8:	6123      	str	r3, [r4, #16]
 80028fa:	1c78      	adds	r0, r7, #1
 80028fc:	d004      	beq.n	8002908 <HAL_I2C_Master_Transmit+0xc0>
 80028fe:	e0da      	b.n	8002ab6 <HAL_I2C_Master_Transmit+0x26e>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002900:	6963      	ldr	r3, [r4, #20]
 8002902:	055a      	lsls	r2, r3, #21
 8002904:	f100 80bf 	bmi.w	8002a86 <HAL_I2C_Master_Transmit+0x23e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002908:	6963      	ldr	r3, [r4, #20]
 800290a:	0799      	lsls	r1, r3, #30
 800290c:	d5f8      	bpl.n	8002900 <HAL_I2C_Master_Transmit+0xb8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290e:	2300      	movs	r3, #0
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	6963      	ldr	r3, [r4, #20]
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	69a3      	ldr	r3, [r4, #24]
 8002918:	9301      	str	r3, [sp, #4]
    while (hi2c->XferSize > 0U)
 800291a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800291c:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 800291e:	2b00      	cmp	r3, #0
 8002920:	d076      	beq.n	8002a10 <HAL_I2C_Master_Transmit+0x1c8>
 8002922:	1c79      	adds	r1, r7, #1
 8002924:	f040 8081 	bne.w	8002a2a <HAL_I2C_Master_Transmit+0x1e2>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002928:	6963      	ldr	r3, [r4, #20]
 800292a:	061a      	lsls	r2, r3, #24
 800292c:	d442      	bmi.n	80029b4 <HAL_I2C_Master_Transmit+0x16c>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800292e:	6963      	ldr	r3, [r4, #20]
 8002930:	055b      	lsls	r3, r3, #21
 8002932:	d5f9      	bpl.n	8002928 <HAL_I2C_Master_Transmit+0xe0>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002934:	2300      	movs	r3, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002936:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 800293a:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800293c:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800293e:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002940:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002944:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002948:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800294a:	f043 0304 	orr.w	r3, r3, #4
 800294e:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002950:	6c2b      	ldr	r3, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002952:	2200      	movs	r2, #0
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002954:	2b04      	cmp	r3, #4
    __HAL_UNLOCK(hi2c);
 8002956:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800295a:	f000 80e4 	beq.w	8002b26 <HAL_I2C_Master_Transmit+0x2de>
      return HAL_ERROR;
 800295e:	2001      	movs	r0, #1
}
 8002960:	b003      	add	sp, #12
 8002962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002966:	6963      	ldr	r3, [r4, #20]
 8002968:	07d9      	lsls	r1, r3, #31
 800296a:	d4bf      	bmi.n	80028ec <HAL_I2C_Master_Transmit+0xa4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296c:	f7ff fb50 	bl	8002010 <HAL_GetTick>
 8002970:	1b80      	subs	r0, r0, r6
 8002972:	4287      	cmp	r7, r0
 8002974:	f0c0 80af 	bcc.w	8002ad6 <HAL_I2C_Master_Transmit+0x28e>
 8002978:	2f00      	cmp	r7, #0
 800297a:	f000 80ac 	beq.w	8002ad6 <HAL_I2C_Master_Transmit+0x28e>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800297e:	682c      	ldr	r4, [r5, #0]
 8002980:	e7af      	b.n	80028e2 <HAL_I2C_Master_Transmit+0x9a>
      __HAL_I2C_ENABLE(hi2c);
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6023      	str	r3, [r4, #0]
 800298a:	e788      	b.n	800289e <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800298c:	ea4f 13e8 	mov.w	r3, r8, asr #7
 8002990:	f003 0306 	and.w	r3, r3, #6
 8002994:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002998:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 800299a:	1c7b      	adds	r3, r7, #1
 800299c:	d003      	beq.n	80029a6 <HAL_I2C_Master_Transmit+0x15e>
 800299e:	e0b3      	b.n	8002b08 <HAL_I2C_Master_Transmit+0x2c0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029a0:	6963      	ldr	r3, [r4, #20]
 80029a2:	0559      	lsls	r1, r3, #21
 80029a4:	d46f      	bmi.n	8002a86 <HAL_I2C_Master_Transmit+0x23e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029a6:	6963      	ldr	r3, [r4, #20]
 80029a8:	0718      	lsls	r0, r3, #28
 80029aa:	d5f9      	bpl.n	80029a0 <HAL_I2C_Master_Transmit+0x158>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029ac:	fa5f f388 	uxtb.w	r3, r8
 80029b0:	6123      	str	r3, [r4, #16]
 80029b2:	e7a2      	b.n	80028fa <HAL_I2C_Master_Transmit+0xb2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029b4:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 80029b6:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ba:	4601      	mov	r1, r0
      hi2c->XferSize--;
 80029bc:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029c4:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 80029c6:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80029c8:	6269      	str	r1, [r5, #36]	; 0x24
      hi2c->XferCount--;
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029d0:	6963      	ldr	r3, [r4, #20]
      hi2c->XferSize--;
 80029d2:	b292      	uxth	r2, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029d4:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 80029d6:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029d8:	d50c      	bpl.n	80029f4 <HAL_I2C_Master_Transmit+0x1ac>
 80029da:	b15a      	cbz	r2, 80029f4 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029dc:	7843      	ldrb	r3, [r0, #1]
 80029de:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 80029e0:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80029e2:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 80029e4:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->pBuffPtr++;
 80029e8:	3002      	adds	r0, #2
        hi2c->XferCount--;
 80029ea:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80029ec:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 80029f0:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 80029f2:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 80029f4:	1c78      	adds	r0, r7, #1
 80029f6:	d128      	bne.n	8002a4a <HAL_I2C_Master_Transmit+0x202>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029f8:	6963      	ldr	r3, [r4, #20]
 80029fa:	0759      	lsls	r1, r3, #29
 80029fc:	d405      	bmi.n	8002a0a <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029fe:	6963      	ldr	r3, [r4, #20]
 8002a00:	055a      	lsls	r2, r3, #21
 8002a02:	d497      	bmi.n	8002934 <HAL_I2C_Master_Transmit+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a04:	6963      	ldr	r3, [r4, #20]
 8002a06:	0759      	lsls	r1, r3, #29
 8002a08:	d5f9      	bpl.n	80029fe <HAL_I2C_Master_Transmit+0x1b6>
    while (hi2c->XferSize > 0U)
 8002a0a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d188      	bne.n	8002922 <HAL_I2C_Master_Transmit+0xda>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a10:	6823      	ldr	r3, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a12:	2000      	movs	r0, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 8002a18:	2220      	movs	r2, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1a:	6023      	str	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a1c:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002a20:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a24:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    return HAL_OK;
 8002a28:	e71d      	b.n	8002866 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a2a:	6963      	ldr	r3, [r4, #20]
 8002a2c:	0618      	lsls	r0, r3, #24
 8002a2e:	d4c1      	bmi.n	80029b4 <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a30:	6963      	ldr	r3, [r4, #20]
 8002a32:	0558      	lsls	r0, r3, #21
 8002a34:	f53f af7e 	bmi.w	8002934 <HAL_I2C_Master_Transmit+0xec>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a38:	f7ff faea 	bl	8002010 <HAL_GetTick>
 8002a3c:	1b80      	subs	r0, r0, r6
 8002a3e:	4287      	cmp	r7, r0
 8002a40:	d378      	bcc.n	8002b34 <HAL_I2C_Master_Transmit+0x2ec>
 8002a42:	2f00      	cmp	r7, #0
 8002a44:	d076      	beq.n	8002b34 <HAL_I2C_Master_Transmit+0x2ec>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a46:	682c      	ldr	r4, [r5, #0]
 8002a48:	e76b      	b.n	8002922 <HAL_I2C_Master_Transmit+0xda>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a4a:	6963      	ldr	r3, [r4, #20]
 8002a4c:	075b      	lsls	r3, r3, #29
 8002a4e:	d4dc      	bmi.n	8002a0a <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a50:	6963      	ldr	r3, [r4, #20]
 8002a52:	055b      	lsls	r3, r3, #21
 8002a54:	f53f af6e 	bmi.w	8002934 <HAL_I2C_Master_Transmit+0xec>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a58:	f7ff fada 	bl	8002010 <HAL_GetTick>
 8002a5c:	1b80      	subs	r0, r0, r6
 8002a5e:	4287      	cmp	r7, r0
 8002a60:	d368      	bcc.n	8002b34 <HAL_I2C_Master_Transmit+0x2ec>
 8002a62:	2f00      	cmp	r7, #0
 8002a64:	d066      	beq.n	8002b34 <HAL_I2C_Master_Transmit+0x2ec>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a66:	682c      	ldr	r4, [r5, #0]
 8002a68:	e7c4      	b.n	80029f4 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a6a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a6c:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a70:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a74:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a78:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002a7a:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a7e:	f043 0320 	orr.w	r3, r3, #32
 8002a82:	642b      	str	r3, [r5, #64]	; 0x40
 8002a84:	e6ee      	b.n	8002864 <HAL_I2C_Master_Transmit+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a86:	6823      	ldr	r3, [r4, #0]
 8002a88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a8c:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a8e:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a90:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a94:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a96:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a98:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a9a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a9e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aa2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002aa4:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aa8:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8002aac:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aae:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002ab0:	b003      	add	sp, #12
 8002ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ab6:	6963      	ldr	r3, [r4, #20]
 8002ab8:	079b      	lsls	r3, r3, #30
 8002aba:	f53f af28 	bmi.w	800290e <HAL_I2C_Master_Transmit+0xc6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002abe:	6963      	ldr	r3, [r4, #20]
 8002ac0:	055b      	lsls	r3, r3, #21
 8002ac2:	d4e0      	bmi.n	8002a86 <HAL_I2C_Master_Transmit+0x23e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac4:	f7ff faa4 	bl	8002010 <HAL_GetTick>
 8002ac8:	1b80      	subs	r0, r0, r6
 8002aca:	4287      	cmp	r7, r0
 8002acc:	d33d      	bcc.n	8002b4a <HAL_I2C_Master_Transmit+0x302>
 8002ace:	2f00      	cmp	r7, #0
 8002ad0:	d03b      	beq.n	8002b4a <HAL_I2C_Master_Transmit+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ad2:	682c      	ldr	r4, [r5, #0]
 8002ad4:	e711      	b.n	80028fa <HAL_I2C_Master_Transmit+0xb2>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ad6:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ad8:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ada:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002adc:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ae0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ae4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ae6:	6829      	ldr	r1, [r5, #0]
        __HAL_UNLOCK(hi2c);
 8002ae8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002aec:	f042 0220 	orr.w	r2, r2, #32
 8002af0:	642a      	str	r2, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002af2:	680b      	ldr	r3, [r1, #0]
 8002af4:	05da      	lsls	r2, r3, #23
 8002af6:	f57f af32 	bpl.w	800295e <HAL_I2C_Master_Transmit+0x116>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002afe:	642b      	str	r3, [r5, #64]	; 0x40
 8002b00:	e72d      	b.n	800295e <HAL_I2C_Master_Transmit+0x116>
 8002b02:	bf00      	nop
 8002b04:	ffff0000 	.word	0xffff0000
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b08:	6963      	ldr	r3, [r4, #20]
 8002b0a:	071a      	lsls	r2, r3, #28
 8002b0c:	f53f af4e 	bmi.w	80029ac <HAL_I2C_Master_Transmit+0x164>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b10:	6963      	ldr	r3, [r4, #20]
 8002b12:	055a      	lsls	r2, r3, #21
 8002b14:	d4b7      	bmi.n	8002a86 <HAL_I2C_Master_Transmit+0x23e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b16:	f7ff fa7b 	bl	8002010 <HAL_GetTick>
 8002b1a:	1b80      	subs	r0, r0, r6
 8002b1c:	4287      	cmp	r7, r0
 8002b1e:	d314      	bcc.n	8002b4a <HAL_I2C_Master_Transmit+0x302>
 8002b20:	b19f      	cbz	r7, 8002b4a <HAL_I2C_Master_Transmit+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b22:	682c      	ldr	r4, [r5, #0]
 8002b24:	e739      	b.n	800299a <HAL_I2C_Master_Transmit+0x152>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b26:	682a      	ldr	r2, [r5, #0]
 8002b28:	6813      	ldr	r3, [r2, #0]
 8002b2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        return HAL_ERROR;
 8002b2e:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e698      	b.n	8002866 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b34:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b36:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b38:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b3a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b3e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b42:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002b44:	4313      	orrs	r3, r2
 8002b46:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8002b48:	e702      	b.n	8002950 <HAL_I2C_Master_Transmit+0x108>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4a:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b4c:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4e:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b50:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b54:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b58:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002b5a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b5e:	f043 0320 	orr.w	r3, r3, #32
 8002b62:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8002b64:	2001      	movs	r0, #1
 8002b66:	e67e      	b.n	8002866 <HAL_I2C_Master_Transmit+0x1e>

08002b68 <HAL_I2C_Master_Receive>:
{
 8002b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b6c:	4605      	mov	r5, r0
 8002b6e:	b087      	sub	sp, #28
 8002b70:	4699      	mov	r9, r3
 8002b72:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8002b74:	4688      	mov	r8, r1
 8002b76:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7ff fa4a 	bl	8002010 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b7c:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d003      	beq.n	8002b8c <HAL_I2C_Master_Receive+0x24>
      return HAL_BUSY;
 8002b84:	2002      	movs	r0, #2
}
 8002b86:	b007      	add	sp, #28
 8002b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b8c:	4607      	mov	r7, r0
 8002b8e:	e005      	b.n	8002b9c <HAL_I2C_Master_Receive+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b90:	f7ff fa3e 	bl	8002010 <HAL_GetTick>
 8002b94:	1bc0      	subs	r0, r0, r7
 8002b96:	2819      	cmp	r0, #25
 8002b98:	f200 80a7 	bhi.w	8002cea <HAL_I2C_Master_Receive+0x182>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b9c:	682c      	ldr	r4, [r5, #0]
 8002b9e:	69a0      	ldr	r0, [r4, #24]
 8002ba0:	43c0      	mvns	r0, r0
 8002ba2:	f010 0b02 	ands.w	fp, r0, #2
 8002ba6:	d0f3      	beq.n	8002b90 <HAL_I2C_Master_Receive+0x28>
    __HAL_LOCK(hi2c);
 8002ba8:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d0e9      	beq.n	8002b84 <HAL_I2C_Master_Receive+0x1c>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bb6:	6823      	ldr	r3, [r4, #0]
 8002bb8:	07db      	lsls	r3, r3, #31
 8002bba:	d560      	bpl.n	8002c7e <HAL_I2C_Master_Receive+0x116>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bbc:	6823      	ldr	r3, [r4, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bbe:	4a8d      	ldr	r2, [pc, #564]	; (8002df4 <HAL_I2C_Master_Receive+0x28c>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bc4:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002bc6:	2322      	movs	r3, #34	; 0x22
 8002bc8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bcc:	2310      	movs	r3, #16
 8002bce:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002bd6:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bda:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bdc:	62ea      	str	r2, [r5, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bde:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002be0:	852b      	strh	r3, [r5, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be2:	6823      	ldr	r3, [r4, #0]
    hi2c->pBuffPtr    = pData;
 8002be4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bec:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bee:	6023      	str	r3, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bf0:	d007      	beq.n	8002c02 <HAL_I2C_Master_Receive+0x9a>
 8002bf2:	2a01      	cmp	r2, #1
 8002bf4:	d005      	beq.n	8002c02 <HAL_I2C_Master_Receive+0x9a>
 8002bf6:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002bfa:	d002      	beq.n	8002c02 <HAL_I2C_Master_Receive+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002bfc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002bfe:	2b11      	cmp	r3, #17
 8002c00:	d103      	bne.n	8002c0a <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c08:	6023      	str	r3, [r4, #0]
 8002c0a:	1c70      	adds	r0, r6, #1
 8002c0c:	d129      	bne.n	8002c62 <HAL_I2C_Master_Receive+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c0e:	6963      	ldr	r3, [r4, #20]
 8002c10:	07d9      	lsls	r1, r3, #31
 8002c12:	d5fc      	bpl.n	8002c0e <HAL_I2C_Master_Receive+0xa6>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c14:	692b      	ldr	r3, [r5, #16]
 8002c16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c1a:	d135      	bne.n	8002c88 <HAL_I2C_Master_Receive+0x120>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c1c:	f048 0301 	orr.w	r3, r8, #1
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	6123      	str	r3, [r4, #16]
 8002c24:	1c72      	adds	r2, r6, #1
 8002c26:	d003      	beq.n	8002c30 <HAL_I2C_Master_Receive+0xc8>
 8002c28:	e107      	b.n	8002e3a <HAL_I2C_Master_Receive+0x2d2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c2a:	6963      	ldr	r3, [r4, #20]
 8002c2c:	0558      	lsls	r0, r3, #21
 8002c2e:	d46a      	bmi.n	8002d06 <HAL_I2C_Master_Receive+0x19e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c30:	6963      	ldr	r3, [r4, #20]
 8002c32:	079b      	lsls	r3, r3, #30
 8002c34:	d5f9      	bpl.n	8002c2a <HAL_I2C_Master_Receive+0xc2>
    if (hi2c->XferSize == 0U)
 8002c36:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d17c      	bne.n	8002d36 <HAL_I2C_Master_Receive+0x1ce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	6963      	ldr	r3, [r4, #20]
 8002c40:	9301      	str	r3, [sp, #4]
 8002c42:	69a3      	ldr	r3, [r4, #24]
 8002c44:	9301      	str	r3, [sp, #4]
 8002c46:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c4e:	6023      	str	r3, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c50:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002c52:	2320      	movs	r3, #32
 8002c54:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002c58:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5c:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    return HAL_OK;
 8002c60:	e791      	b.n	8002b86 <HAL_I2C_Master_Receive+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c62:	6963      	ldr	r3, [r4, #20]
 8002c64:	07da      	lsls	r2, r3, #31
 8002c66:	d4d5      	bmi.n	8002c14 <HAL_I2C_Master_Receive+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c68:	f7ff f9d2 	bl	8002010 <HAL_GetTick>
 8002c6c:	1bc0      	subs	r0, r0, r7
 8002c6e:	4286      	cmp	r6, r0
 8002c70:	f0c0 810c 	bcc.w	8002e8c <HAL_I2C_Master_Receive+0x324>
 8002c74:	2e00      	cmp	r6, #0
 8002c76:	f000 8109 	beq.w	8002e8c <HAL_I2C_Master_Receive+0x324>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c7a:	682c      	ldr	r4, [r5, #0]
 8002c7c:	e7c5      	b.n	8002c0a <HAL_I2C_Master_Receive+0xa2>
      __HAL_I2C_ENABLE(hi2c);
 8002c7e:	6823      	ldr	r3, [r4, #0]
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6023      	str	r3, [r4, #0]
 8002c86:	e799      	b.n	8002bbc <HAL_I2C_Master_Receive+0x54>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c88:	ea4f 19e8 	mov.w	r9, r8, asr #7
 8002c8c:	f009 0906 	and.w	r9, r9, #6
 8002c90:	f049 03f0 	orr.w	r3, r9, #240	; 0xf0
 8002c94:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002c96:	1c70      	adds	r0, r6, #1
 8002c98:	d003      	beq.n	8002ca2 <HAL_I2C_Master_Receive+0x13a>
 8002c9a:	e11d      	b.n	8002ed8 <HAL_I2C_Master_Receive+0x370>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c9c:	6963      	ldr	r3, [r4, #20]
 8002c9e:	055a      	lsls	r2, r3, #21
 8002ca0:	d431      	bmi.n	8002d06 <HAL_I2C_Master_Receive+0x19e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ca2:	6963      	ldr	r3, [r4, #20]
 8002ca4:	0719      	lsls	r1, r3, #28
 8002ca6:	d5f9      	bpl.n	8002c9c <HAL_I2C_Master_Receive+0x134>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ca8:	fa5f f388 	uxtb.w	r3, r8
 8002cac:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002cae:	1c71      	adds	r1, r6, #1
 8002cb0:	d003      	beq.n	8002cba <HAL_I2C_Master_Receive+0x152>
 8002cb2:	e1a6      	b.n	8003002 <HAL_I2C_Master_Receive+0x49a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cb4:	6963      	ldr	r3, [r4, #20]
 8002cb6:	055b      	lsls	r3, r3, #21
 8002cb8:	d425      	bmi.n	8002d06 <HAL_I2C_Master_Receive+0x19e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cba:	6963      	ldr	r3, [r4, #20]
 8002cbc:	079a      	lsls	r2, r3, #30
 8002cbe:	d5f9      	bpl.n	8002cb4 <HAL_I2C_Master_Receive+0x14c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	9305      	str	r3, [sp, #20]
 8002cc4:	6963      	ldr	r3, [r4, #20]
 8002cc6:	9305      	str	r3, [sp, #20]
 8002cc8:	69a3      	ldr	r3, [r4, #24]
 8002cca:	9305      	str	r3, [sp, #20]
 8002ccc:	9b05      	ldr	r3, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd4:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8002cd6:	1c72      	adds	r2, r6, #1
 8002cd8:	f040 81a6 	bne.w	8003028 <HAL_I2C_Master_Receive+0x4c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cdc:	6963      	ldr	r3, [r4, #20]
 8002cde:	07db      	lsls	r3, r3, #31
 8002ce0:	d5fc      	bpl.n	8002cdc <HAL_I2C_Master_Receive+0x174>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002ce2:	f049 03f1 	orr.w	r3, r9, #241	; 0xf1
 8002ce6:	6123      	str	r3, [r4, #16]
 8002ce8:	e79c      	b.n	8002c24 <HAL_I2C_Master_Receive+0xbc>
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cea:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cec:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cf0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cf4:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cf8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002cfa:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cfe:	f043 0320 	orr.w	r3, r3, #32
 8002d02:	642b      	str	r3, [r5, #64]	; 0x40
 8002d04:	e73e      	b.n	8002b84 <HAL_I2C_Master_Receive+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d0c:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0e:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d10:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d14:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d16:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d18:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d1a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d1e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d22:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002d24:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d28:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8002d2c:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d2e:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002d30:	b007      	add	sp, #28
 8002d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (hi2c->XferSize == 1U)
 8002d36:	2b01      	cmp	r3, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d38:	6822      	ldr	r2, [r4, #0]
    else if (hi2c->XferSize == 1U)
 8002d3a:	f000 8153 	beq.w	8002fe4 <HAL_I2C_Master_Receive+0x47c>
    else if (hi2c->XferSize == 2U)
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	f000 810b 	beq.w	8002f5a <HAL_I2C_Master_Receive+0x3f2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d48:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	9204      	str	r2, [sp, #16]
 8002d4e:	6962      	ldr	r2, [r4, #20]
 8002d50:	9204      	str	r2, [sp, #16]
 8002d52:	69a2      	ldr	r2, [r4, #24]
 8002d54:	9204      	str	r2, [sp, #16]
 8002d56:	9a04      	ldr	r2, [sp, #16]
      if (hi2c->XferSize <= 3U)
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d848      	bhi.n	8002dee <HAL_I2C_Master_Receive+0x286>
        if (hi2c->XferSize == 1U)
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	f000 8128 	beq.w	8002fb2 <HAL_I2C_Master_Receive+0x44a>
        else if (hi2c->XferSize == 2U)
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	f000 80d4 	beq.w	8002f10 <HAL_I2C_Master_Receive+0x3a8>
 8002d68:	1c72      	adds	r2, r6, #1
 8002d6a:	f040 8105 	bne.w	8002f78 <HAL_I2C_Master_Receive+0x410>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d6e:	6963      	ldr	r3, [r4, #20]
 8002d70:	075b      	lsls	r3, r3, #29
 8002d72:	d5fc      	bpl.n	8002d6e <HAL_I2C_Master_Receive+0x206>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d74:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d76:	6a6a      	ldr	r2, [r5, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d7c:	6023      	str	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d7e:	6923      	ldr	r3, [r4, #16]
 8002d80:	7013      	strb	r3, [r2, #0]
          hi2c->XferCount--;
 8002d82:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8002d84:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8002d86:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8002d88:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8002d8a:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8002d8c:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8002d8e:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8002d90:	6269      	str	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8002d92:	852a      	strh	r2, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8002d94:	856b      	strh	r3, [r5, #42]	; 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8002d96:	1c71      	adds	r1, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d98:	682a      	ldr	r2, [r5, #0]
 8002d9a:	f040 80fc 	bne.w	8002f96 <HAL_I2C_Master_Receive+0x42e>
 8002d9e:	6953      	ldr	r3, [r2, #20]
 8002da0:	075b      	lsls	r3, r3, #29
 8002da2:	d5fc      	bpl.n	8002d9e <HAL_I2C_Master_Receive+0x236>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da4:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da6:	6a69      	ldr	r1, [r5, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dac:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dae:	6913      	ldr	r3, [r2, #16]
 8002db0:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8002db2:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8002db4:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8002db6:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db8:	6828      	ldr	r0, [r5, #0]
          hi2c->XferCount--;
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	856b      	strh	r3, [r5, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc0:	6900      	ldr	r0, [r0, #16]
          hi2c->XferSize--;
 8002dc2:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 8002dc4:	1c4c      	adds	r4, r1, #1
 8002dc6:	626c      	str	r4, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8002dc8:	852b      	strh	r3, [r5, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dca:	7048      	strb	r0, [r1, #1]
          hi2c->XferSize--;
 8002dcc:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8002dce:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8002dd0:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8002dd2:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 8002dd4:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 8002dd6:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8002dd8:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8002dda:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8002ddc:	6269      	str	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8002dde:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8002de0:	856a      	strh	r2, [r5, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f43f af34 	beq.w	8002c50 <HAL_I2C_Master_Receive+0xe8>
      if (hi2c->XferSize <= 3U)
 8002de8:	2b03      	cmp	r3, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dea:	682c      	ldr	r4, [r5, #0]
      if (hi2c->XferSize <= 3U)
 8002dec:	d9b6      	bls.n	8002d5c <HAL_I2C_Master_Receive+0x1f4>
 8002dee:	b966      	cbnz	r6, 8002e0a <HAL_I2C_Master_Receive+0x2a2>
 8002df0:	e033      	b.n	8002e5a <HAL_I2C_Master_Receive+0x2f2>
 8002df2:	bf00      	nop
 8002df4:	ffff0000 	.word	0xffff0000
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002df8:	6963      	ldr	r3, [r4, #20]
 8002dfa:	06db      	lsls	r3, r3, #27
 8002dfc:	d45c      	bmi.n	8002eb8 <HAL_I2C_Master_Receive+0x350>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfe:	f7ff f907 	bl	8002010 <HAL_GetTick>
 8002e02:	1bc0      	subs	r0, r0, r7
 8002e04:	4286      	cmp	r6, r0
 8002e06:	d330      	bcc.n	8002e6a <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e08:	682c      	ldr	r4, [r5, #0]
 8002e0a:	6963      	ldr	r3, [r4, #20]
 8002e0c:	065a      	lsls	r2, r3, #25
 8002e0e:	d5f3      	bpl.n	8002df8 <HAL_I2C_Master_Receive+0x290>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002e12:	6922      	ldr	r2, [r4, #16]
 8002e14:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8002e16:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e18:	6828      	ldr	r0, [r5, #0]
        hi2c->XferSize--;
 8002e1a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 8002e1c:	6a69      	ldr	r1, [r5, #36]	; 0x24
        hi2c->XferCount--;
 8002e1e:	3a01      	subs	r2, #1
 8002e20:	b292      	uxth	r2, r2
 8002e22:	856a      	strh	r2, [r5, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e24:	6942      	ldr	r2, [r0, #20]
        hi2c->XferSize--;
 8002e26:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 8002e28:	1c4c      	adds	r4, r1, #1
        hi2c->XferSize--;
 8002e2a:	b29b      	uxth	r3, r3
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e2c:	0752      	lsls	r2, r2, #29
        hi2c->pBuffPtr++;
 8002e2e:	626c      	str	r4, [r5, #36]	; 0x24
        hi2c->XferSize--;
 8002e30:	852b      	strh	r3, [r5, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e32:	d5d6      	bpl.n	8002de2 <HAL_I2C_Master_Receive+0x27a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e34:	6903      	ldr	r3, [r0, #16]
 8002e36:	704b      	strb	r3, [r1, #1]
 8002e38:	e083      	b.n	8002f42 <HAL_I2C_Master_Receive+0x3da>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e3a:	6963      	ldr	r3, [r4, #20]
 8002e3c:	0799      	lsls	r1, r3, #30
 8002e3e:	f53f aefa 	bmi.w	8002c36 <HAL_I2C_Master_Receive+0xce>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e42:	6963      	ldr	r3, [r4, #20]
 8002e44:	0559      	lsls	r1, r3, #21
 8002e46:	f53f af5e 	bmi.w	8002d06 <HAL_I2C_Master_Receive+0x19e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4a:	f7ff f8e1 	bl	8002010 <HAL_GetTick>
 8002e4e:	1bc0      	subs	r0, r0, r7
 8002e50:	4286      	cmp	r6, r0
 8002e52:	d30a      	bcc.n	8002e6a <HAL_I2C_Master_Receive+0x302>
 8002e54:	b14e      	cbz	r6, 8002e6a <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e56:	682c      	ldr	r4, [r5, #0]
 8002e58:	e6e4      	b.n	8002c24 <HAL_I2C_Master_Receive+0xbc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e5a:	6963      	ldr	r3, [r4, #20]
 8002e5c:	0659      	lsls	r1, r3, #25
 8002e5e:	d4d7      	bmi.n	8002e10 <HAL_I2C_Master_Receive+0x2a8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e60:	6963      	ldr	r3, [r4, #20]
 8002e62:	06d8      	lsls	r0, r3, #27
 8002e64:	d428      	bmi.n	8002eb8 <HAL_I2C_Master_Receive+0x350>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e66:	f7ff f8d3 	bl	8002010 <HAL_GetTick>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e6a:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e6c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e6e:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e70:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e74:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e78:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002e7a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e7e:	f043 0320 	orr.w	r3, r3, #32
          return HAL_ERROR;
 8002e82:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e84:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002e86:	b007      	add	sp, #28
 8002e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e8c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e8e:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e90:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e92:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e96:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e9a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e9c:	6829      	ldr	r1, [r5, #0]
        __HAL_UNLOCK(hi2c);
 8002e9e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ea2:	f042 0220 	orr.w	r2, r2, #32
 8002ea6:	642a      	str	r2, [r5, #64]	; 0x40
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea8:	680b      	ldr	r3, [r1, #0]
 8002eaa:	05d9      	lsls	r1, r3, #23
 8002eac:	d512      	bpl.n	8002ed4 <HAL_I2C_Master_Receive+0x36c>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eb2:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	e666      	b.n	8002b86 <HAL_I2C_Master_Receive+0x1e>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb8:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eba:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ebc:	f06f 0110 	mvn.w	r1, #16
 8002ec0:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec2:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ec4:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec8:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ecc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002ece:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002ed0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	e656      	b.n	8002b86 <HAL_I2C_Master_Receive+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ed8:	6963      	ldr	r3, [r4, #20]
 8002eda:	071b      	lsls	r3, r3, #28
 8002edc:	f53f aee4 	bmi.w	8002ca8 <HAL_I2C_Master_Receive+0x140>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ee0:	6963      	ldr	r3, [r4, #20]
 8002ee2:	055b      	lsls	r3, r3, #21
 8002ee4:	f53f af0f 	bmi.w	8002d06 <HAL_I2C_Master_Receive+0x19e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee8:	f7ff f892 	bl	8002010 <HAL_GetTick>
 8002eec:	1bc0      	subs	r0, r0, r7
 8002eee:	4286      	cmp	r6, r0
 8002ef0:	d3bb      	bcc.n	8002e6a <HAL_I2C_Master_Receive+0x302>
 8002ef2:	2e00      	cmp	r6, #0
 8002ef4:	d0b9      	beq.n	8002e6a <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ef6:	682c      	ldr	r4, [r5, #0]
 8002ef8:	e6cd      	b.n	8002c96 <HAL_I2C_Master_Receive+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002efa:	6963      	ldr	r3, [r4, #20]
 8002efc:	0759      	lsls	r1, r3, #29
 8002efe:	d40c      	bmi.n	8002f1a <HAL_I2C_Master_Receive+0x3b2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f00:	f7ff f886 	bl	8002010 <HAL_GetTick>
 8002f04:	1bc0      	subs	r0, r0, r7
 8002f06:	4286      	cmp	r6, r0
 8002f08:	d3af      	bcc.n	8002e6a <HAL_I2C_Master_Receive+0x302>
 8002f0a:	2e00      	cmp	r6, #0
 8002f0c:	d0ad      	beq.n	8002e6a <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f0e:	682c      	ldr	r4, [r5, #0]
 8002f10:	1c73      	adds	r3, r6, #1
 8002f12:	d1f2      	bne.n	8002efa <HAL_I2C_Master_Receive+0x392>
 8002f14:	6963      	ldr	r3, [r4, #20]
 8002f16:	0758      	lsls	r0, r3, #29
 8002f18:	d5fc      	bpl.n	8002f14 <HAL_I2C_Master_Receive+0x3ac>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f20:	6023      	str	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002f24:	6922      	ldr	r2, [r4, #16]
 8002f26:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002f28:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002f2a:	1c53      	adds	r3, r2, #1
 8002f2c:	626b      	str	r3, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8002f2e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8002f30:	3b01      	subs	r3, #1
 8002f32:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8002f34:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	856b      	strh	r3, [r5, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3c:	682b      	ldr	r3, [r5, #0]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	7053      	strb	r3, [r2, #1]
          hi2c->XferSize--;
 8002f42:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8002f44:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8002f46:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8002f48:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 8002f4a:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 8002f4c:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8002f4e:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8002f50:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8002f52:	6269      	str	r1, [r5, #36]	; 0x24
          hi2c->XferCount--;
 8002f54:	856a      	strh	r2, [r5, #42]	; 0x2a
          hi2c->XferSize--;
 8002f56:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8002f58:	e743      	b.n	8002de2 <HAL_I2C_Master_Receive+0x27a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f5e:	6022      	str	r2, [r4, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f60:	6822      	ldr	r2, [r4, #0]
 8002f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f66:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	9203      	str	r2, [sp, #12]
 8002f6c:	6962      	ldr	r2, [r4, #20]
 8002f6e:	9203      	str	r2, [sp, #12]
 8002f70:	69a2      	ldr	r2, [r4, #24]
 8002f72:	9203      	str	r2, [sp, #12]
 8002f74:	9a03      	ldr	r2, [sp, #12]
 8002f76:	e6ef      	b.n	8002d58 <HAL_I2C_Master_Receive+0x1f0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f78:	6963      	ldr	r3, [r4, #20]
 8002f7a:	0758      	lsls	r0, r3, #29
 8002f7c:	f53f aefa 	bmi.w	8002d74 <HAL_I2C_Master_Receive+0x20c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f80:	f7ff f846 	bl	8002010 <HAL_GetTick>
 8002f84:	1bc0      	subs	r0, r0, r7
 8002f86:	4286      	cmp	r6, r0
 8002f88:	f4ff af6f 	bcc.w	8002e6a <HAL_I2C_Master_Receive+0x302>
 8002f8c:	2e00      	cmp	r6, #0
 8002f8e:	f43f af6c 	beq.w	8002e6a <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f92:	682c      	ldr	r4, [r5, #0]
 8002f94:	e6e8      	b.n	8002d68 <HAL_I2C_Master_Receive+0x200>
 8002f96:	6953      	ldr	r3, [r2, #20]
 8002f98:	075c      	lsls	r4, r3, #29
 8002f9a:	f53f af03 	bmi.w	8002da4 <HAL_I2C_Master_Receive+0x23c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9e:	f7ff f837 	bl	8002010 <HAL_GetTick>
 8002fa2:	1bc0      	subs	r0, r0, r7
 8002fa4:	4286      	cmp	r6, r0
 8002fa6:	f4ff af60 	bcc.w	8002e6a <HAL_I2C_Master_Receive+0x302>
 8002faa:	2e00      	cmp	r6, #0
 8002fac:	f47f aef3 	bne.w	8002d96 <HAL_I2C_Master_Receive+0x22e>
 8002fb0:	e75b      	b.n	8002e6a <HAL_I2C_Master_Receive+0x302>
 8002fb2:	b95e      	cbnz	r6, 8002fcc <HAL_I2C_Master_Receive+0x464>
 8002fb4:	e011      	b.n	8002fda <HAL_I2C_Master_Receive+0x472>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fb6:	6963      	ldr	r3, [r4, #20]
 8002fb8:	06d9      	lsls	r1, r3, #27
 8002fba:	f53f af7d 	bmi.w	8002eb8 <HAL_I2C_Master_Receive+0x350>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbe:	f7ff f827 	bl	8002010 <HAL_GetTick>
 8002fc2:	1bc0      	subs	r0, r0, r7
 8002fc4:	4286      	cmp	r6, r0
 8002fc6:	f4ff af50 	bcc.w	8002e6a <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fca:	682c      	ldr	r4, [r5, #0]
 8002fcc:	6963      	ldr	r3, [r4, #20]
 8002fce:	0658      	lsls	r0, r3, #25
 8002fd0:	d5f1      	bpl.n	8002fb6 <HAL_I2C_Master_Receive+0x44e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002fd4:	6922      	ldr	r2, [r4, #16]
 8002fd6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002fd8:	e7b3      	b.n	8002f42 <HAL_I2C_Master_Receive+0x3da>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fda:	6963      	ldr	r3, [r4, #20]
 8002fdc:	065a      	lsls	r2, r3, #25
 8002fde:	f57f af3f 	bpl.w	8002e60 <HAL_I2C_Master_Receive+0x2f8>
 8002fe2:	e7f6      	b.n	8002fd2 <HAL_I2C_Master_Receive+0x46a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe8:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fea:	2200      	movs	r2, #0
 8002fec:	9202      	str	r2, [sp, #8]
 8002fee:	6962      	ldr	r2, [r4, #20]
 8002ff0:	9202      	str	r2, [sp, #8]
 8002ff2:	69a2      	ldr	r2, [r4, #24]
 8002ff4:	9202      	str	r2, [sp, #8]
 8002ff6:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff8:	6822      	ldr	r2, [r4, #0]
 8002ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffe:	6022      	str	r2, [r4, #0]
 8003000:	e6aa      	b.n	8002d58 <HAL_I2C_Master_Receive+0x1f0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003002:	6963      	ldr	r3, [r4, #20]
 8003004:	0798      	lsls	r0, r3, #30
 8003006:	f53f ae5b 	bmi.w	8002cc0 <HAL_I2C_Master_Receive+0x158>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800300a:	6963      	ldr	r3, [r4, #20]
 800300c:	0558      	lsls	r0, r3, #21
 800300e:	f53f ae7a 	bmi.w	8002d06 <HAL_I2C_Master_Receive+0x19e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003012:	f7fe fffd 	bl	8002010 <HAL_GetTick>
 8003016:	1bc0      	subs	r0, r0, r7
 8003018:	4286      	cmp	r6, r0
 800301a:	f4ff af26 	bcc.w	8002e6a <HAL_I2C_Master_Receive+0x302>
 800301e:	2e00      	cmp	r6, #0
 8003020:	f43f af23 	beq.w	8002e6a <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003024:	682c      	ldr	r4, [r5, #0]
 8003026:	e642      	b.n	8002cae <HAL_I2C_Master_Receive+0x146>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003028:	6963      	ldr	r3, [r4, #20]
 800302a:	07d8      	lsls	r0, r3, #31
 800302c:	f53f ae59 	bmi.w	8002ce2 <HAL_I2C_Master_Receive+0x17a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003030:	f7fe ffee 	bl	8002010 <HAL_GetTick>
 8003034:	1bc0      	subs	r0, r0, r7
 8003036:	4286      	cmp	r6, r0
 8003038:	f4ff af28 	bcc.w	8002e8c <HAL_I2C_Master_Receive+0x324>
 800303c:	2e00      	cmp	r6, #0
 800303e:	f43f af25 	beq.w	8002e8c <HAL_I2C_Master_Receive+0x324>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003042:	682c      	ldr	r4, [r5, #0]
 8003044:	e647      	b.n	8002cd6 <HAL_I2C_Master_Receive+0x16e>
 8003046:	bf00      	nop

08003048 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003048:	2800      	cmp	r0, #0
 800304a:	f000 81a2 	beq.w	8003392 <HAL_RCC_OscConfig+0x34a>
{
 800304e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003052:	6803      	ldr	r3, [r0, #0]
 8003054:	07dd      	lsls	r5, r3, #31
{
 8003056:	b082      	sub	sp, #8
 8003058:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800305a:	d52f      	bpl.n	80030bc <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800305c:	499e      	ldr	r1, [pc, #632]	; (80032d8 <HAL_RCC_OscConfig+0x290>)
 800305e:	688a      	ldr	r2, [r1, #8]
 8003060:	f002 020c 	and.w	r2, r2, #12
 8003064:	2a04      	cmp	r2, #4
 8003066:	f000 80ed 	beq.w	8003244 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800306a:	688a      	ldr	r2, [r1, #8]
 800306c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003070:	2a08      	cmp	r2, #8
 8003072:	f000 80e3 	beq.w	800323c <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003076:	6863      	ldr	r3, [r4, #4]
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307c:	f000 80ec 	beq.w	8003258 <HAL_RCC_OscConfig+0x210>
 8003080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003084:	f000 8175 	beq.w	8003372 <HAL_RCC_OscConfig+0x32a>
 8003088:	4d93      	ldr	r5, [pc, #588]	; (80032d8 <HAL_RCC_OscConfig+0x290>)
 800308a:	682a      	ldr	r2, [r5, #0]
 800308c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003090:	602a      	str	r2, [r5, #0]
 8003092:	682a      	ldr	r2, [r5, #0]
 8003094:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003098:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800309a:	2b00      	cmp	r3, #0
 800309c:	f040 80e1 	bne.w	8003262 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7fe ffb6 	bl	8002010 <HAL_GetTick>
 80030a4:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a6:	e005      	b.n	80030b4 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a8:	f7fe ffb2 	bl	8002010 <HAL_GetTick>
 80030ac:	1b80      	subs	r0, r0, r6
 80030ae:	2864      	cmp	r0, #100	; 0x64
 80030b0:	f200 8101 	bhi.w	80032b6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b4:	682b      	ldr	r3, [r5, #0]
 80030b6:	039b      	lsls	r3, r3, #14
 80030b8:	d4f6      	bmi.n	80030a8 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ba:	6823      	ldr	r3, [r4, #0]
 80030bc:	079f      	lsls	r7, r3, #30
 80030be:	d528      	bpl.n	8003112 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030c0:	4a85      	ldr	r2, [pc, #532]	; (80032d8 <HAL_RCC_OscConfig+0x290>)
 80030c2:	6891      	ldr	r1, [r2, #8]
 80030c4:	f011 0f0c 	tst.w	r1, #12
 80030c8:	f000 8090 	beq.w	80031ec <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030cc:	6891      	ldr	r1, [r2, #8]
 80030ce:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030d2:	2908      	cmp	r1, #8
 80030d4:	f000 8086 	beq.w	80031e4 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030d8:	68e3      	ldr	r3, [r4, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 810e 	beq.w	80032fc <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e0:	4b7e      	ldr	r3, [pc, #504]	; (80032dc <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e2:	4e7d      	ldr	r6, [pc, #500]	; (80032d8 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80030e8:	f7fe ff92 	bl	8002010 <HAL_GetTick>
 80030ec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ee:	e005      	b.n	80030fc <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030f0:	f7fe ff8e 	bl	8002010 <HAL_GetTick>
 80030f4:	1b40      	subs	r0, r0, r5
 80030f6:	2802      	cmp	r0, #2
 80030f8:	f200 80dd 	bhi.w	80032b6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fc:	6833      	ldr	r3, [r6, #0]
 80030fe:	0798      	lsls	r0, r3, #30
 8003100:	d5f6      	bpl.n	80030f0 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003102:	6833      	ldr	r3, [r6, #0]
 8003104:	6922      	ldr	r2, [r4, #16]
 8003106:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800310a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800310e:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	071a      	lsls	r2, r3, #28
 8003114:	d451      	bmi.n	80031ba <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003116:	0758      	lsls	r0, r3, #29
 8003118:	d52f      	bpl.n	800317a <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311a:	4a6f      	ldr	r2, [pc, #444]	; (80032d8 <HAL_RCC_OscConfig+0x290>)
 800311c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800311e:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8003122:	d07f      	beq.n	8003224 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8003124:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003126:	4e6e      	ldr	r6, [pc, #440]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 8003128:	6833      	ldr	r3, [r6, #0]
 800312a:	05d9      	lsls	r1, r3, #23
 800312c:	f140 80b3 	bpl.w	8003296 <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003130:	68a3      	ldr	r3, [r4, #8]
 8003132:	2b01      	cmp	r3, #1
 8003134:	f000 80c3 	beq.w	80032be <HAL_RCC_OscConfig+0x276>
 8003138:	2b05      	cmp	r3, #5
 800313a:	f000 812c 	beq.w	8003396 <HAL_RCC_OscConfig+0x34e>
 800313e:	4e66      	ldr	r6, [pc, #408]	; (80032d8 <HAL_RCC_OscConfig+0x290>)
 8003140:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	6732      	str	r2, [r6, #112]	; 0x70
 8003148:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800314a:	f022 0204 	bic.w	r2, r2, #4
 800314e:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003150:	2b00      	cmp	r3, #0
 8003152:	f040 80b9 	bne.w	80032c8 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003156:	f7fe ff5b 	bl	8002010 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800315a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800315e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003160:	e005      	b.n	800316e <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003162:	f7fe ff55 	bl	8002010 <HAL_GetTick>
 8003166:	1bc0      	subs	r0, r0, r7
 8003168:	4540      	cmp	r0, r8
 800316a:	f200 80a4 	bhi.w	80032b6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003170:	0798      	lsls	r0, r3, #30
 8003172:	d4f6      	bmi.n	8003162 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003174:	2d00      	cmp	r5, #0
 8003176:	f040 8106 	bne.w	8003386 <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800317a:	69a0      	ldr	r0, [r4, #24]
 800317c:	b1c8      	cbz	r0, 80031b2 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800317e:	4d56      	ldr	r5, [pc, #344]	; (80032d8 <HAL_RCC_OscConfig+0x290>)
 8003180:	68ab      	ldr	r3, [r5, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b08      	cmp	r3, #8
 8003188:	f000 80c9 	beq.w	800331e <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318c:	4b53      	ldr	r3, [pc, #332]	; (80032dc <HAL_RCC_OscConfig+0x294>)
 800318e:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003190:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003192:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003194:	f000 8109 	beq.w	80033aa <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fe ff3a 	bl	8002010 <HAL_GetTick>
 800319c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319e:	e005      	b.n	80031ac <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a0:	f7fe ff36 	bl	8002010 <HAL_GetTick>
 80031a4:	1b00      	subs	r0, r0, r4
 80031a6:	2802      	cmp	r0, #2
 80031a8:	f200 8085 	bhi.w	80032b6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ac:	682b      	ldr	r3, [r5, #0]
 80031ae:	019b      	lsls	r3, r3, #6
 80031b0:	d4f6      	bmi.n	80031a0 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80031b2:	2000      	movs	r0, #0
}
 80031b4:	b002      	add	sp, #8
 80031b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031ba:	6963      	ldr	r3, [r4, #20]
 80031bc:	b30b      	cbz	r3, 8003202 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 80031be:	4b47      	ldr	r3, [pc, #284]	; (80032dc <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c0:	4e45      	ldr	r6, [pc, #276]	; (80032d8 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 80031c2:	2201      	movs	r2, #1
 80031c4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80031c8:	f7fe ff22 	bl	8002010 <HAL_GetTick>
 80031cc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ce:	e004      	b.n	80031da <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d0:	f7fe ff1e 	bl	8002010 <HAL_GetTick>
 80031d4:	1b40      	subs	r0, r0, r5
 80031d6:	2802      	cmp	r0, #2
 80031d8:	d86d      	bhi.n	80032b6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031da:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80031dc:	079b      	lsls	r3, r3, #30
 80031de:	d5f7      	bpl.n	80031d0 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e0:	6823      	ldr	r3, [r4, #0]
 80031e2:	e798      	b.n	8003116 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031e4:	6852      	ldr	r2, [r2, #4]
 80031e6:	0256      	lsls	r6, r2, #9
 80031e8:	f53f af76 	bmi.w	80030d8 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ec:	4a3a      	ldr	r2, [pc, #232]	; (80032d8 <HAL_RCC_OscConfig+0x290>)
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	0795      	lsls	r5, r2, #30
 80031f2:	d544      	bpl.n	800327e <HAL_RCC_OscConfig+0x236>
 80031f4:	68e2      	ldr	r2, [r4, #12]
 80031f6:	2a01      	cmp	r2, #1
 80031f8:	d041      	beq.n	800327e <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 80031fa:	2001      	movs	r0, #1
}
 80031fc:	b002      	add	sp, #8
 80031fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003202:	4a36      	ldr	r2, [pc, #216]	; (80032dc <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003204:	4e34      	ldr	r6, [pc, #208]	; (80032d8 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8003206:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800320a:	f7fe ff01 	bl	8002010 <HAL_GetTick>
 800320e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003210:	e004      	b.n	800321c <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003212:	f7fe fefd 	bl	8002010 <HAL_GetTick>
 8003216:	1b40      	subs	r0, r0, r5
 8003218:	2802      	cmp	r0, #2
 800321a:	d84c      	bhi.n	80032b6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800321c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800321e:	079f      	lsls	r7, r3, #30
 8003220:	d4f7      	bmi.n	8003212 <HAL_RCC_OscConfig+0x1ca>
 8003222:	e7dd      	b.n	80031e0 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003224:	9301      	str	r3, [sp, #4]
 8003226:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322c:	6413      	str	r3, [r2, #64]	; 0x40
 800322e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003234:	9301      	str	r3, [sp, #4]
 8003236:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003238:	2501      	movs	r5, #1
 800323a:	e774      	b.n	8003126 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800323c:	684a      	ldr	r2, [r1, #4]
 800323e:	0250      	lsls	r0, r2, #9
 8003240:	f57f af19 	bpl.w	8003076 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003244:	4a24      	ldr	r2, [pc, #144]	; (80032d8 <HAL_RCC_OscConfig+0x290>)
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	0391      	lsls	r1, r2, #14
 800324a:	f57f af37 	bpl.w	80030bc <HAL_RCC_OscConfig+0x74>
 800324e:	6862      	ldr	r2, [r4, #4]
 8003250:	2a00      	cmp	r2, #0
 8003252:	f47f af33 	bne.w	80030bc <HAL_RCC_OscConfig+0x74>
 8003256:	e7d0      	b.n	80031fa <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003258:	4a1f      	ldr	r2, [pc, #124]	; (80032d8 <HAL_RCC_OscConfig+0x290>)
 800325a:	6813      	ldr	r3, [r2, #0]
 800325c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003260:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003262:	f7fe fed5 	bl	8002010 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003266:	4e1c      	ldr	r6, [pc, #112]	; (80032d8 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8003268:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	e004      	b.n	8003276 <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800326c:	f7fe fed0 	bl	8002010 <HAL_GetTick>
 8003270:	1b40      	subs	r0, r0, r5
 8003272:	2864      	cmp	r0, #100	; 0x64
 8003274:	d81f      	bhi.n	80032b6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003276:	6833      	ldr	r3, [r6, #0]
 8003278:	039a      	lsls	r2, r3, #14
 800327a:	d5f7      	bpl.n	800326c <HAL_RCC_OscConfig+0x224>
 800327c:	e71d      	b.n	80030ba <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327e:	4916      	ldr	r1, [pc, #88]	; (80032d8 <HAL_RCC_OscConfig+0x290>)
 8003280:	6920      	ldr	r0, [r4, #16]
 8003282:	680a      	ldr	r2, [r1, #0]
 8003284:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003288:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800328c:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328e:	071a      	lsls	r2, r3, #28
 8003290:	f57f af41 	bpl.w	8003116 <HAL_RCC_OscConfig+0xce>
 8003294:	e791      	b.n	80031ba <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003296:	6833      	ldr	r3, [r6, #0]
 8003298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800329c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800329e:	f7fe feb7 	bl	8002010 <HAL_GetTick>
 80032a2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a4:	6833      	ldr	r3, [r6, #0]
 80032a6:	05da      	lsls	r2, r3, #23
 80032a8:	f53f af42 	bmi.w	8003130 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ac:	f7fe feb0 	bl	8002010 <HAL_GetTick>
 80032b0:	1bc0      	subs	r0, r0, r7
 80032b2:	2802      	cmp	r0, #2
 80032b4:	d9f6      	bls.n	80032a4 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 80032b6:	2003      	movs	r0, #3
}
 80032b8:	b002      	add	sp, #8
 80032ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032be:	4a06      	ldr	r2, [pc, #24]	; (80032d8 <HAL_RCC_OscConfig+0x290>)
 80032c0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80032c8:	f7fe fea2 	bl	8002010 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032cc:	4f02      	ldr	r7, [pc, #8]	; (80032d8 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 80032ce:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d4:	e00b      	b.n	80032ee <HAL_RCC_OscConfig+0x2a6>
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800
 80032dc:	42470000 	.word	0x42470000
 80032e0:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e4:	f7fe fe94 	bl	8002010 <HAL_GetTick>
 80032e8:	1b80      	subs	r0, r0, r6
 80032ea:	4540      	cmp	r0, r8
 80032ec:	d8e3      	bhi.n	80032b6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032f0:	079b      	lsls	r3, r3, #30
 80032f2:	d5f7      	bpl.n	80032e4 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 80032f4:	2d00      	cmp	r5, #0
 80032f6:	f43f af40 	beq.w	800317a <HAL_RCC_OscConfig+0x132>
 80032fa:	e044      	b.n	8003386 <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 80032fc:	4a42      	ldr	r2, [pc, #264]	; (8003408 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fe:	4e43      	ldr	r6, [pc, #268]	; (800340c <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8003300:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003302:	f7fe fe85 	bl	8002010 <HAL_GetTick>
 8003306:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003308:	e004      	b.n	8003314 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800330a:	f7fe fe81 	bl	8002010 <HAL_GetTick>
 800330e:	1b40      	subs	r0, r0, r5
 8003310:	2802      	cmp	r0, #2
 8003312:	d8d0      	bhi.n	80032b6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003314:	6833      	ldr	r3, [r6, #0]
 8003316:	0799      	lsls	r1, r3, #30
 8003318:	d4f7      	bmi.n	800330a <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800331a:	6823      	ldr	r3, [r4, #0]
 800331c:	e6f9      	b.n	8003112 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800331e:	2801      	cmp	r0, #1
 8003320:	f43f af48 	beq.w	80031b4 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8003324:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003326:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003328:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800332c:	4291      	cmp	r1, r2
 800332e:	f47f af64 	bne.w	80031fa <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003332:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003334:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003338:	4291      	cmp	r1, r2
 800333a:	f47f af5e 	bne.w	80031fa <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800333e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003340:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003344:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003346:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800334a:	f47f af56 	bne.w	80031fa <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800334e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003350:	0852      	lsrs	r2, r2, #1
 8003352:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003356:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003358:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800335c:	f47f af4d 	bne.w	80031fa <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003360:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003362:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003366:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 800336a:	bf14      	ite	ne
 800336c:	2001      	movne	r0, #1
 800336e:	2000      	moveq	r0, #0
 8003370:	e720      	b.n	80031b4 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003372:	4b26      	ldr	r3, [pc, #152]	; (800340c <HAL_RCC_OscConfig+0x3c4>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003382:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003384:	e76d      	b.n	8003262 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003386:	4a21      	ldr	r2, [pc, #132]	; (800340c <HAL_RCC_OscConfig+0x3c4>)
 8003388:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800338a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800338e:	6413      	str	r3, [r2, #64]	; 0x40
 8003390:	e6f3      	b.n	800317a <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8003392:	2001      	movs	r0, #1
}
 8003394:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003396:	4b1d      	ldr	r3, [pc, #116]	; (800340c <HAL_RCC_OscConfig+0x3c4>)
 8003398:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800339a:	f042 0204 	orr.w	r2, r2, #4
 800339e:	671a      	str	r2, [r3, #112]	; 0x70
 80033a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033a8:	e78e      	b.n	80032c8 <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 80033aa:	f7fe fe31 	bl	8002010 <HAL_GetTick>
 80033ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b0:	e005      	b.n	80033be <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b2:	f7fe fe2d 	bl	8002010 <HAL_GetTick>
 80033b6:	1b80      	subs	r0, r0, r6
 80033b8:	2802      	cmp	r0, #2
 80033ba:	f63f af7c 	bhi.w	80032b6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033be:	682b      	ldr	r3, [r5, #0]
 80033c0:	0199      	lsls	r1, r3, #6
 80033c2:	d4f6      	bmi.n	80033b2 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033c4:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80033c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80033ca:	430b      	orrs	r3, r1
 80033cc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80033d0:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 80033d4:	0852      	lsrs	r2, r2, #1
 80033d6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80033da:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80033dc:	490a      	ldr	r1, [pc, #40]	; (8003408 <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80033e2:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033e4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80033e6:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 80033e8:	f7fe fe12 	bl	8002010 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ec:	4d07      	ldr	r5, [pc, #28]	; (800340c <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 80033ee:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f0:	e005      	b.n	80033fe <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f2:	f7fe fe0d 	bl	8002010 <HAL_GetTick>
 80033f6:	1b00      	subs	r0, r0, r4
 80033f8:	2802      	cmp	r0, #2
 80033fa:	f63f af5c 	bhi.w	80032b6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fe:	682b      	ldr	r3, [r5, #0]
 8003400:	019a      	lsls	r2, r3, #6
 8003402:	d5f6      	bpl.n	80033f2 <HAL_RCC_OscConfig+0x3aa>
 8003404:	e6d5      	b.n	80031b2 <HAL_RCC_OscConfig+0x16a>
 8003406:	bf00      	nop
 8003408:	42470000 	.word	0x42470000
 800340c:	40023800 	.word	0x40023800

08003410 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003410:	4916      	ldr	r1, [pc, #88]	; (800346c <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8003412:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003414:	688b      	ldr	r3, [r1, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b04      	cmp	r3, #4
 800341c:	d01b      	beq.n	8003456 <HAL_RCC_GetSysClockFreq+0x46>
 800341e:	2b08      	cmp	r3, #8
 8003420:	d117      	bne.n	8003452 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003422:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003424:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003426:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003428:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800342c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003430:	d113      	bne.n	800345a <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003432:	480f      	ldr	r0, [pc, #60]	; (8003470 <HAL_RCC_GetSysClockFreq+0x60>)
 8003434:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003438:	fba1 0100 	umull	r0, r1, r1, r0
 800343c:	f7fc fed4 	bl	80001e8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003440:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_RCC_GetSysClockFreq+0x5c>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003448:	3301      	adds	r3, #1
 800344a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800344c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003450:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8003452:	4807      	ldr	r0, [pc, #28]	; (8003470 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8003454:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003456:	4807      	ldr	r0, [pc, #28]	; (8003474 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003458:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800345a:	4806      	ldr	r0, [pc, #24]	; (8003474 <HAL_RCC_GetSysClockFreq+0x64>)
 800345c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003460:	2300      	movs	r3, #0
 8003462:	fba1 0100 	umull	r0, r1, r1, r0
 8003466:	f7fc febf 	bl	80001e8 <__aeabi_uldivmod>
 800346a:	e7e9      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x30>
 800346c:	40023800 	.word	0x40023800
 8003470:	00f42400 	.word	0x00f42400
 8003474:	017d7840 	.word	0x017d7840

08003478 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003478:	2800      	cmp	r0, #0
 800347a:	f000 8087 	beq.w	800358c <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800347e:	4a48      	ldr	r2, [pc, #288]	; (80035a0 <HAL_RCC_ClockConfig+0x128>)
 8003480:	6813      	ldr	r3, [r2, #0]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	428b      	cmp	r3, r1
{
 8003488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800348c:	460d      	mov	r5, r1
 800348e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003490:	d209      	bcs.n	80034a6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003492:	b2cb      	uxtb	r3, r1
 8003494:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003496:	6813      	ldr	r3, [r2, #0]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	428b      	cmp	r3, r1
 800349e:	d002      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80034a0:	2001      	movs	r0, #1
}
 80034a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	0798      	lsls	r0, r3, #30
 80034aa:	d514      	bpl.n	80034d6 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ac:	0759      	lsls	r1, r3, #29
 80034ae:	d504      	bpl.n	80034ba <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b0:	493c      	ldr	r1, [pc, #240]	; (80035a4 <HAL_RCC_ClockConfig+0x12c>)
 80034b2:	688a      	ldr	r2, [r1, #8]
 80034b4:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80034b8:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ba:	071a      	lsls	r2, r3, #28
 80034bc:	d504      	bpl.n	80034c8 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034be:	4939      	ldr	r1, [pc, #228]	; (80035a4 <HAL_RCC_ClockConfig+0x12c>)
 80034c0:	688a      	ldr	r2, [r1, #8]
 80034c2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80034c6:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c8:	4936      	ldr	r1, [pc, #216]	; (80035a4 <HAL_RCC_ClockConfig+0x12c>)
 80034ca:	68a0      	ldr	r0, [r4, #8]
 80034cc:	688a      	ldr	r2, [r1, #8]
 80034ce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80034d2:	4302      	orrs	r2, r0
 80034d4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d6:	07df      	lsls	r7, r3, #31
 80034d8:	d521      	bpl.n	800351e <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034da:	6862      	ldr	r2, [r4, #4]
 80034dc:	2a01      	cmp	r2, #1
 80034de:	d057      	beq.n	8003590 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034e0:	1e93      	subs	r3, r2, #2
 80034e2:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e4:	4b2f      	ldr	r3, [pc, #188]	; (80035a4 <HAL_RCC_ClockConfig+0x12c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034e8:	d94d      	bls.n	8003586 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ea:	0799      	lsls	r1, r3, #30
 80034ec:	d5d8      	bpl.n	80034a0 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ee:	4e2d      	ldr	r6, [pc, #180]	; (80035a4 <HAL_RCC_ClockConfig+0x12c>)
 80034f0:	68b3      	ldr	r3, [r6, #8]
 80034f2:	f023 0303 	bic.w	r3, r3, #3
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80034fa:	f7fe fd89 	bl	8002010 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fe:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003502:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003504:	e004      	b.n	8003510 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003506:	f7fe fd83 	bl	8002010 <HAL_GetTick>
 800350a:	1bc0      	subs	r0, r0, r7
 800350c:	4540      	cmp	r0, r8
 800350e:	d844      	bhi.n	800359a <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003510:	68b3      	ldr	r3, [r6, #8]
 8003512:	6862      	ldr	r2, [r4, #4]
 8003514:	f003 030c 	and.w	r3, r3, #12
 8003518:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800351c:	d1f3      	bne.n	8003506 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800351e:	4a20      	ldr	r2, [pc, #128]	; (80035a0 <HAL_RCC_ClockConfig+0x128>)
 8003520:	6813      	ldr	r3, [r2, #0]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	42ab      	cmp	r3, r5
 8003528:	d906      	bls.n	8003538 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352a:	b2eb      	uxtb	r3, r5
 800352c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800352e:	6813      	ldr	r3, [r2, #0]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	42ab      	cmp	r3, r5
 8003536:	d1b3      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	075a      	lsls	r2, r3, #29
 800353c:	d506      	bpl.n	800354c <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800353e:	4919      	ldr	r1, [pc, #100]	; (80035a4 <HAL_RCC_ClockConfig+0x12c>)
 8003540:	68e0      	ldr	r0, [r4, #12]
 8003542:	688a      	ldr	r2, [r1, #8]
 8003544:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003548:	4302      	orrs	r2, r0
 800354a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800354c:	071b      	lsls	r3, r3, #28
 800354e:	d507      	bpl.n	8003560 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003550:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <HAL_RCC_ClockConfig+0x12c>)
 8003552:	6921      	ldr	r1, [r4, #16]
 8003554:	6893      	ldr	r3, [r2, #8]
 8003556:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800355a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800355e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003560:	f7ff ff56 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 8003564:	4a0f      	ldr	r2, [pc, #60]	; (80035a4 <HAL_RCC_ClockConfig+0x12c>)
 8003566:	4c10      	ldr	r4, [pc, #64]	; (80035a8 <HAL_RCC_ClockConfig+0x130>)
 8003568:	6892      	ldr	r2, [r2, #8]
 800356a:	4910      	ldr	r1, [pc, #64]	; (80035ac <HAL_RCC_ClockConfig+0x134>)
 800356c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003570:	4603      	mov	r3, r0
 8003572:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8003574:	480e      	ldr	r0, [pc, #56]	; (80035b0 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003576:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8003578:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800357a:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 800357c:	f7fe fcfe 	bl	8001f7c <HAL_InitTick>
  return HAL_OK;
 8003580:	2000      	movs	r0, #0
}
 8003582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003586:	0198      	lsls	r0, r3, #6
 8003588:	d4b1      	bmi.n	80034ee <HAL_RCC_ClockConfig+0x76>
 800358a:	e789      	b.n	80034a0 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 800358c:	2001      	movs	r0, #1
}
 800358e:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003590:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <HAL_RCC_ClockConfig+0x12c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	039e      	lsls	r6, r3, #14
 8003596:	d4aa      	bmi.n	80034ee <HAL_RCC_ClockConfig+0x76>
 8003598:	e782      	b.n	80034a0 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800359a:	2003      	movs	r0, #3
 800359c:	e781      	b.n	80034a2 <HAL_RCC_ClockConfig+0x2a>
 800359e:	bf00      	nop
 80035a0:	40023c00 	.word	0x40023c00
 80035a4:	40023800 	.word	0x40023800
 80035a8:	08004db8 	.word	0x08004db8
 80035ac:	20000030 	.word	0x20000030
 80035b0:	20000038 	.word	0x20000038

080035b4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035b4:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80035b6:	4905      	ldr	r1, [pc, #20]	; (80035cc <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80035bc:	6808      	ldr	r0, [r1, #0]
 80035be:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80035c2:	5cd3      	ldrb	r3, [r2, r3]
}
 80035c4:	40d8      	lsrs	r0, r3
 80035c6:	4770      	bx	lr
 80035c8:	40023800 	.word	0x40023800
 80035cc:	20000030 	.word	0x20000030
 80035d0:	08004dc8 	.word	0x08004dc8

080035d4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035d4:	4b04      	ldr	r3, [pc, #16]	; (80035e8 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80035d6:	4905      	ldr	r1, [pc, #20]	; (80035ec <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	4a05      	ldr	r2, [pc, #20]	; (80035f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80035dc:	6808      	ldr	r0, [r1, #0]
 80035de:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80035e2:	5cd3      	ldrb	r3, [r2, r3]
}
 80035e4:	40d8      	lsrs	r0, r3
 80035e6:	4770      	bx	lr
 80035e8:	40023800 	.word	0x40023800
 80035ec:	20000030 	.word	0x20000030
 80035f0:	08004dc8 	.word	0x08004dc8

080035f4 <HAL_TIM_PeriodElapsedCallback>:
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop

080035f8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop

080035fc <HAL_TIM_OC_DelayElapsedCallback>:
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop

08003600 <HAL_TIM_IC_CaptureCallback>:
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop

08003604 <HAL_TIM_IC_CaptureHalfCpltCallback>:
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop

08003608 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop

0800360c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop

08003610 <HAL_TIM_TriggerCallback>:
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop

08003614 <HAL_TIM_TriggerHalfCpltCallback>:
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop

08003618 <HAL_TIM_ErrorCallback>:
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop

0800361c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800361c:	2800      	cmp	r0, #0
 800361e:	f000 8093 	beq.w	8003748 <HAL_TIM_Base_Init+0x12c>
{
 8003622:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003624:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003628:	4604      	mov	r4, r0
 800362a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800362e:	bb0b      	cbnz	r3, 8003674 <HAL_TIM_Base_Init+0x58>

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);

    if (htim->Base_MspInitCallback == NULL)
 8003630:	6c83      	ldr	r3, [r0, #72]	; 0x48
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003632:	4848      	ldr	r0, [pc, #288]	; (8003754 <HAL_TIM_Base_Init+0x138>)
    htim->Lock = HAL_UNLOCKED;
 8003634:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003638:	4a47      	ldr	r2, [pc, #284]	; (8003758 <HAL_TIM_Base_Init+0x13c>)
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800363a:	4948      	ldr	r1, [pc, #288]	; (800375c <HAL_TIM_Base_Init+0x140>)
 800363c:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003640:	e9c4 0221 	strd	r0, r2, [r4, #132]	; 0x84
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003644:	4946      	ldr	r1, [pc, #280]	; (8003760 <HAL_TIM_Base_Init+0x144>)
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8003646:	4a47      	ldr	r2, [pc, #284]	; (8003764 <HAL_TIM_Base_Init+0x148>)
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8003648:	4847      	ldr	r0, [pc, #284]	; (8003768 <HAL_TIM_Base_Init+0x14c>)
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800364a:	e9c4 1223 	strd	r1, r2, [r4, #140]	; 0x8c
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800364e:	4a47      	ldr	r2, [pc, #284]	; (800376c <HAL_TIM_Base_Init+0x150>)
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8003650:	4947      	ldr	r1, [pc, #284]	; (8003770 <HAL_TIM_Base_Init+0x154>)
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003652:	e9c4 0225 	strd	r0, r2, [r4, #148]	; 0x94
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8003656:	4a47      	ldr	r2, [pc, #284]	; (8003774 <HAL_TIM_Base_Init+0x158>)
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003658:	4847      	ldr	r0, [pc, #284]	; (8003778 <HAL_TIM_Base_Init+0x15c>)
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800365a:	e9c4 1227 	strd	r1, r2, [r4, #156]	; 0x9c
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800365e:	4a47      	ldr	r2, [pc, #284]	; (800377c <HAL_TIM_Base_Init+0x160>)
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003660:	4947      	ldr	r1, [pc, #284]	; (8003780 <HAL_TIM_Base_Init+0x164>)
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8003662:	e9c4 0229 	strd	r0, r2, [r4, #164]	; 0xa4
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8003666:	4a47      	ldr	r2, [pc, #284]	; (8003784 <HAL_TIM_Base_Init+0x168>)
 8003668:	e9c4 122b 	strd	r1, r2, [r4, #172]	; 0xac
    if (htim->Base_MspInitCallback == NULL)
 800366c:	2b00      	cmp	r3, #0
 800366e:	d06d      	beq.n	800374c <HAL_TIM_Base_Init+0x130>
    htim->Base_MspInitCallback(htim);
 8003670:	4620      	mov	r0, r4
 8003672:	4798      	blx	r3
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003674:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003676:	4944      	ldr	r1, [pc, #272]	; (8003788 <HAL_TIM_Base_Init+0x16c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003678:	2302      	movs	r3, #2
 800367a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800367e:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003680:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003682:	d04d      	beq.n	8003720 <HAL_TIM_Base_Init+0x104>
 8003684:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003688:	d021      	beq.n	80036ce <HAL_TIM_Base_Init+0xb2>
 800368a:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 800368e:	428a      	cmp	r2, r1
 8003690:	d01d      	beq.n	80036ce <HAL_TIM_Base_Init+0xb2>
 8003692:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003696:	428a      	cmp	r2, r1
 8003698:	d019      	beq.n	80036ce <HAL_TIM_Base_Init+0xb2>
 800369a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800369e:	428a      	cmp	r2, r1
 80036a0:	d015      	beq.n	80036ce <HAL_TIM_Base_Init+0xb2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036a2:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 80036a6:	428a      	cmp	r2, r1
 80036a8:	d015      	beq.n	80036d6 <HAL_TIM_Base_Init+0xba>
 80036aa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80036ae:	428a      	cmp	r2, r1
 80036b0:	d011      	beq.n	80036d6 <HAL_TIM_Base_Init+0xba>
 80036b2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80036b6:	428a      	cmp	r2, r1
 80036b8:	d00d      	beq.n	80036d6 <HAL_TIM_Base_Init+0xba>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036ba:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036bc:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036c2:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80036c4:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80036c6:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c8:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80036ca:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036cc:	e010      	b.n	80036f0 <HAL_TIM_Base_Init+0xd4>
    tmpcr1 |= Structure->CounterMode;
 80036ce:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80036d4:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036d6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036d8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80036da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036de:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036e4:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036e6:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80036e8:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80036ea:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036ec:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80036ee:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80036f0:	2301      	movs	r3, #1
 80036f2:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036f4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80036fc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003700:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003704:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003708:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800370c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003710:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003714:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003718:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800371c:	2000      	movs	r0, #0
}
 800371e:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8003720:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003722:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003728:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800372a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800372e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003730:	69a1      	ldr	r1, [r4, #24]
 8003732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003736:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003738:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800373a:	68e3      	ldr	r3, [r4, #12]
 800373c:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800373e:	6863      	ldr	r3, [r4, #4]
 8003740:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003742:	6963      	ldr	r3, [r4, #20]
 8003744:	6313      	str	r3, [r2, #48]	; 0x30
 8003746:	e7d3      	b.n	80036f0 <HAL_TIM_Base_Init+0xd4>
    return HAL_ERROR;
 8003748:	2001      	movs	r0, #1
}
 800374a:	4770      	bx	lr
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800374c:	4b0f      	ldr	r3, [pc, #60]	; (800378c <HAL_TIM_Base_Init+0x170>)
 800374e:	64a3      	str	r3, [r4, #72]	; 0x48
 8003750:	e78e      	b.n	8003670 <HAL_TIM_Base_Init+0x54>
 8003752:	bf00      	nop
 8003754:	080035f9 	.word	0x080035f9
 8003758:	08003611 	.word	0x08003611
 800375c:	080035f5 	.word	0x080035f5
 8003760:	08003615 	.word	0x08003615
 8003764:	08003601 	.word	0x08003601
 8003768:	08003605 	.word	0x08003605
 800376c:	080035fd 	.word	0x080035fd
 8003770:	08003609 	.word	0x08003609
 8003774:	0800360d 	.word	0x0800360d
 8003778:	08003619 	.word	0x08003619
 800377c:	0800430d 	.word	0x0800430d
 8003780:	08004311 	.word	0x08004311
 8003784:	08004315 	.word	0x08004315
 8003788:	40010000 	.word	0x40010000
 800378c:	08001461 	.word	0x08001461

08003790 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003790:	2800      	cmp	r0, #0
 8003792:	f000 8093 	beq.w	80038bc <HAL_TIM_PWM_Init+0x12c>
{
 8003796:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003798:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800379c:	4604      	mov	r4, r0
 800379e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037a2:	bb0b      	cbnz	r3, 80037e8 <HAL_TIM_PWM_Init+0x58>
    if (htim->PWM_MspInitCallback == NULL)
 80037a4:	6e03      	ldr	r3, [r0, #96]	; 0x60
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80037a6:	4848      	ldr	r0, [pc, #288]	; (80038c8 <HAL_TIM_PWM_Init+0x138>)
    htim->Lock = HAL_UNLOCKED;
 80037a8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80037ac:	4a47      	ldr	r2, [pc, #284]	; (80038cc <HAL_TIM_PWM_Init+0x13c>)
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80037ae:	4948      	ldr	r1, [pc, #288]	; (80038d0 <HAL_TIM_PWM_Init+0x140>)
 80037b0:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80037b4:	e9c4 0221 	strd	r0, r2, [r4, #132]	; 0x84
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80037b8:	4946      	ldr	r1, [pc, #280]	; (80038d4 <HAL_TIM_PWM_Init+0x144>)
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80037ba:	4a47      	ldr	r2, [pc, #284]	; (80038d8 <HAL_TIM_PWM_Init+0x148>)
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80037bc:	4847      	ldr	r0, [pc, #284]	; (80038dc <HAL_TIM_PWM_Init+0x14c>)
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80037be:	e9c4 1223 	strd	r1, r2, [r4, #140]	; 0x8c
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80037c2:	4a47      	ldr	r2, [pc, #284]	; (80038e0 <HAL_TIM_PWM_Init+0x150>)
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80037c4:	4947      	ldr	r1, [pc, #284]	; (80038e4 <HAL_TIM_PWM_Init+0x154>)
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80037c6:	e9c4 0225 	strd	r0, r2, [r4, #148]	; 0x94
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80037ca:	4a47      	ldr	r2, [pc, #284]	; (80038e8 <HAL_TIM_PWM_Init+0x158>)
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80037cc:	4847      	ldr	r0, [pc, #284]	; (80038ec <HAL_TIM_PWM_Init+0x15c>)
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80037ce:	e9c4 1227 	strd	r1, r2, [r4, #156]	; 0x9c
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80037d2:	4a47      	ldr	r2, [pc, #284]	; (80038f0 <HAL_TIM_PWM_Init+0x160>)
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80037d4:	4947      	ldr	r1, [pc, #284]	; (80038f4 <HAL_TIM_PWM_Init+0x164>)
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80037d6:	e9c4 0229 	strd	r0, r2, [r4, #164]	; 0xa4
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80037da:	4a47      	ldr	r2, [pc, #284]	; (80038f8 <HAL_TIM_PWM_Init+0x168>)
 80037dc:	e9c4 122b 	strd	r1, r2, [r4, #172]	; 0xac
    if (htim->PWM_MspInitCallback == NULL)
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d06d      	beq.n	80038c0 <HAL_TIM_PWM_Init+0x130>
    htim->PWM_MspInitCallback(htim);
 80037e4:	4620      	mov	r0, r4
 80037e6:	4798      	blx	r3
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e8:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037ea:	4944      	ldr	r1, [pc, #272]	; (80038fc <HAL_TIM_PWM_Init+0x16c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	2302      	movs	r3, #2
 80037ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f2:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80037f4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f6:	d04d      	beq.n	8003894 <HAL_TIM_PWM_Init+0x104>
 80037f8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80037fc:	d021      	beq.n	8003842 <HAL_TIM_PWM_Init+0xb2>
 80037fe:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8003802:	428a      	cmp	r2, r1
 8003804:	d01d      	beq.n	8003842 <HAL_TIM_PWM_Init+0xb2>
 8003806:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800380a:	428a      	cmp	r2, r1
 800380c:	d019      	beq.n	8003842 <HAL_TIM_PWM_Init+0xb2>
 800380e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003812:	428a      	cmp	r2, r1
 8003814:	d015      	beq.n	8003842 <HAL_TIM_PWM_Init+0xb2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003816:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800381a:	428a      	cmp	r2, r1
 800381c:	d015      	beq.n	800384a <HAL_TIM_PWM_Init+0xba>
 800381e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003822:	428a      	cmp	r2, r1
 8003824:	d011      	beq.n	800384a <HAL_TIM_PWM_Init+0xba>
 8003826:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800382a:	428a      	cmp	r2, r1
 800382c:	d00d      	beq.n	800384a <HAL_TIM_PWM_Init+0xba>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800382e:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003830:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003836:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8003838:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800383a:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800383c:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800383e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003840:	e010      	b.n	8003864 <HAL_TIM_PWM_Init+0xd4>
    tmpcr1 |= Structure->CounterMode;
 8003842:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003848:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800384a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800384c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800384e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003852:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003858:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800385a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800385c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800385e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003860:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003862:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003864:	2301      	movs	r3, #1
 8003866:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003868:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800386c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003870:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003874:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003878:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003884:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003888:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800388c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003890:	2000      	movs	r0, #0
}
 8003892:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8003894:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003896:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800389c:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800389e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038a2:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a4:	69a1      	ldr	r1, [r4, #24]
 80038a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038aa:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80038ac:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038ae:	68e3      	ldr	r3, [r4, #12]
 80038b0:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80038b2:	6863      	ldr	r3, [r4, #4]
 80038b4:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80038b6:	6963      	ldr	r3, [r4, #20]
 80038b8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ba:	e7d3      	b.n	8003864 <HAL_TIM_PWM_Init+0xd4>
    return HAL_ERROR;
 80038bc:	2001      	movs	r0, #1
}
 80038be:	4770      	bx	lr
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80038c0:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <HAL_TIM_PWM_Init+0x170>)
 80038c2:	6623      	str	r3, [r4, #96]	; 0x60
 80038c4:	e78e      	b.n	80037e4 <HAL_TIM_PWM_Init+0x54>
 80038c6:	bf00      	nop
 80038c8:	080035f9 	.word	0x080035f9
 80038cc:	08003611 	.word	0x08003611
 80038d0:	080035f5 	.word	0x080035f5
 80038d4:	08003615 	.word	0x08003615
 80038d8:	08003601 	.word	0x08003601
 80038dc:	08003605 	.word	0x08003605
 80038e0:	080035fd 	.word	0x080035fd
 80038e4:	08003609 	.word	0x08003609
 80038e8:	0800360d 	.word	0x0800360d
 80038ec:	08003619 	.word	0x08003619
 80038f0:	0800430d 	.word	0x0800430d
 80038f4:	08004311 	.word	0x08004311
 80038f8:	08004315 	.word	0x08004315
 80038fc:	40010000 	.word	0x40010000
 8003900:	08001241 	.word	0x08001241

08003904 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8003904:	2800      	cmp	r0, #0
 8003906:	f000 8093 	beq.w	8003a30 <HAL_TIM_IC_Init+0x12c>
{
 800390a:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800390c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003910:	4604      	mov	r4, r0
 8003912:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003916:	bb0b      	cbnz	r3, 800395c <HAL_TIM_IC_Init+0x58>
    if (htim->IC_MspInitCallback == NULL)
 8003918:	6d03      	ldr	r3, [r0, #80]	; 0x50
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800391a:	4848      	ldr	r0, [pc, #288]	; (8003a3c <HAL_TIM_IC_Init+0x138>)
    htim->Lock = HAL_UNLOCKED;
 800391c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003920:	4a47      	ldr	r2, [pc, #284]	; (8003a40 <HAL_TIM_IC_Init+0x13c>)
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003922:	4948      	ldr	r1, [pc, #288]	; (8003a44 <HAL_TIM_IC_Init+0x140>)
 8003924:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003928:	e9c4 0221 	strd	r0, r2, [r4, #132]	; 0x84
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800392c:	4946      	ldr	r1, [pc, #280]	; (8003a48 <HAL_TIM_IC_Init+0x144>)
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800392e:	4a47      	ldr	r2, [pc, #284]	; (8003a4c <HAL_TIM_IC_Init+0x148>)
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8003930:	4847      	ldr	r0, [pc, #284]	; (8003a50 <HAL_TIM_IC_Init+0x14c>)
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8003932:	e9c4 1223 	strd	r1, r2, [r4, #140]	; 0x8c
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003936:	4a47      	ldr	r2, [pc, #284]	; (8003a54 <HAL_TIM_IC_Init+0x150>)
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8003938:	4947      	ldr	r1, [pc, #284]	; (8003a58 <HAL_TIM_IC_Init+0x154>)
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800393a:	e9c4 0225 	strd	r0, r2, [r4, #148]	; 0x94
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800393e:	4a47      	ldr	r2, [pc, #284]	; (8003a5c <HAL_TIM_IC_Init+0x158>)
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003940:	4847      	ldr	r0, [pc, #284]	; (8003a60 <HAL_TIM_IC_Init+0x15c>)
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8003942:	e9c4 1227 	strd	r1, r2, [r4, #156]	; 0x9c
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8003946:	4a47      	ldr	r2, [pc, #284]	; (8003a64 <HAL_TIM_IC_Init+0x160>)
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003948:	4947      	ldr	r1, [pc, #284]	; (8003a68 <HAL_TIM_IC_Init+0x164>)
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800394a:	e9c4 0229 	strd	r0, r2, [r4, #164]	; 0xa4
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800394e:	4a47      	ldr	r2, [pc, #284]	; (8003a6c <HAL_TIM_IC_Init+0x168>)
 8003950:	e9c4 122b 	strd	r1, r2, [r4, #172]	; 0xac
    if (htim->IC_MspInitCallback == NULL)
 8003954:	2b00      	cmp	r3, #0
 8003956:	d06d      	beq.n	8003a34 <HAL_TIM_IC_Init+0x130>
    htim->IC_MspInitCallback(htim);
 8003958:	4620      	mov	r0, r4
 800395a:	4798      	blx	r3
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800395c:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800395e:	4944      	ldr	r1, [pc, #272]	; (8003a70 <HAL_TIM_IC_Init+0x16c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	2302      	movs	r3, #2
 8003962:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003966:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003968:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800396a:	d04d      	beq.n	8003a08 <HAL_TIM_IC_Init+0x104>
 800396c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003970:	d021      	beq.n	80039b6 <HAL_TIM_IC_Init+0xb2>
 8003972:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8003976:	428a      	cmp	r2, r1
 8003978:	d01d      	beq.n	80039b6 <HAL_TIM_IC_Init+0xb2>
 800397a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800397e:	428a      	cmp	r2, r1
 8003980:	d019      	beq.n	80039b6 <HAL_TIM_IC_Init+0xb2>
 8003982:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003986:	428a      	cmp	r2, r1
 8003988:	d015      	beq.n	80039b6 <HAL_TIM_IC_Init+0xb2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800398a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800398e:	428a      	cmp	r2, r1
 8003990:	d015      	beq.n	80039be <HAL_TIM_IC_Init+0xba>
 8003992:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003996:	428a      	cmp	r2, r1
 8003998:	d011      	beq.n	80039be <HAL_TIM_IC_Init+0xba>
 800399a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800399e:	428a      	cmp	r2, r1
 80039a0:	d00d      	beq.n	80039be <HAL_TIM_IC_Init+0xba>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a2:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a4:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039aa:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80039ac:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80039ae:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b0:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80039b2:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039b4:	e010      	b.n	80039d8 <HAL_TIM_IC_Init+0xd4>
    tmpcr1 |= Structure->CounterMode;
 80039b6:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80039bc:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039be:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039c0:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80039c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039c6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039cc:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039ce:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80039d0:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80039d2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039d4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80039d6:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80039d8:	2301      	movs	r3, #1
 80039da:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039dc:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80039e4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80039e8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80039ec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039f8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80039fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003a00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003a04:	2000      	movs	r0, #0
}
 8003a06:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8003a08:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a0a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003a10:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a16:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a18:	69a1      	ldr	r1, [r4, #24]
 8003a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a1e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003a20:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a22:	68e3      	ldr	r3, [r4, #12]
 8003a24:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a26:	6863      	ldr	r3, [r4, #4]
 8003a28:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003a2a:	6963      	ldr	r3, [r4, #20]
 8003a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2e:	e7d3      	b.n	80039d8 <HAL_TIM_IC_Init+0xd4>
    return HAL_ERROR;
 8003a30:	2001      	movs	r0, #1
}
 8003a32:	4770      	bx	lr
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8003a34:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <HAL_TIM_IC_Init+0x170>)
 8003a36:	6523      	str	r3, [r4, #80]	; 0x50
 8003a38:	e78e      	b.n	8003958 <HAL_TIM_IC_Init+0x54>
 8003a3a:	bf00      	nop
 8003a3c:	080035f9 	.word	0x080035f9
 8003a40:	08003611 	.word	0x08003611
 8003a44:	080035f5 	.word	0x080035f5
 8003a48:	08003615 	.word	0x08003615
 8003a4c:	08003601 	.word	0x08003601
 8003a50:	08003605 	.word	0x08003605
 8003a54:	080035fd 	.word	0x080035fd
 8003a58:	08003609 	.word	0x08003609
 8003a5c:	0800360d 	.word	0x0800360d
 8003a60:	08003619 	.word	0x08003619
 8003a64:	0800430d 	.word	0x0800430d
 8003a68:	08004311 	.word	0x08004311
 8003a6c:	08004315 	.word	0x08004315
 8003a70:	40010000 	.word	0x40010000
 8003a74:	0800134d 	.word	0x0800134d

08003a78 <HAL_TIM_IC_Start_IT>:
{
 8003a78:	4603      	mov	r3, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003a7a:	2900      	cmp	r1, #0
 8003a7c:	d140      	bne.n	8003b00 <HAL_TIM_IC_Start_IT+0x88>
 8003a7e:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003a82:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003a86:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003a88:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a8a:	2801      	cmp	r0, #1
 8003a8c:	d102      	bne.n	8003a94 <HAL_TIM_IC_Start_IT+0x1c>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a8e:	2a01      	cmp	r2, #1
 8003a90:	d002      	beq.n	8003a98 <HAL_TIM_IC_Start_IT+0x20>
}
 8003a92:	4770      	bx	lr
  switch (Channel)
 8003a94:	2001      	movs	r0, #1
 8003a96:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a98:	2900      	cmp	r1, #0
 8003a9a:	d140      	bne.n	8003b1e <HAL_TIM_IC_Start_IT+0xa6>
 8003a9c:	2002      	movs	r0, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a9e:	681a      	ldr	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aa0:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aa4:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003aa8:	68d3      	ldr	r3, [r2, #12]
 8003aaa:	4303      	orrs	r3, r0
 8003aac:	60d3      	str	r3, [r2, #12]
  TIMx->CCER &= ~tmp;
 8003aae:	6a10      	ldr	r0, [r2, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	408b      	lsls	r3, r1
  TIMx->CCER &= ~tmp;
 8003ab4:	ea20 0003 	bic.w	r0, r0, r3
 8003ab8:	6210      	str	r0, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003aba:	6a10      	ldr	r0, [r2, #32]
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003abc:	493b      	ldr	r1, [pc, #236]	; (8003bac <HAL_TIM_IC_Start_IT+0x134>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003abe:	4303      	orrs	r3, r0
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac0:	428a      	cmp	r2, r1
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ac2:	6213      	str	r3, [r2, #32]
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac4:	d011      	beq.n	8003aea <HAL_TIM_IC_Start_IT+0x72>
 8003ac6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003aca:	d00e      	beq.n	8003aea <HAL_TIM_IC_Start_IT+0x72>
 8003acc:	4b38      	ldr	r3, [pc, #224]	; (8003bb0 <HAL_TIM_IC_Start_IT+0x138>)
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d00b      	beq.n	8003aea <HAL_TIM_IC_Start_IT+0x72>
 8003ad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d007      	beq.n	8003aea <HAL_TIM_IC_Start_IT+0x72>
 8003ada:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d003      	beq.n	8003aea <HAL_TIM_IC_Start_IT+0x72>
 8003ae2:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d104      	bne.n	8003af4 <HAL_TIM_IC_Start_IT+0x7c>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aea:	6893      	ldr	r3, [r2, #8]
 8003aec:	f003 0307 	and.w	r3, r3, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af0:	2b06      	cmp	r3, #6
 8003af2:	d058      	beq.n	8003ba6 <HAL_TIM_IC_Start_IT+0x12e>
      __HAL_TIM_ENABLE(htim);
 8003af4:	6813      	ldr	r3, [r2, #0]
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	2000      	movs	r0, #0
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	4770      	bx	lr
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b00:	2904      	cmp	r1, #4
 8003b02:	d049      	beq.n	8003b98 <HAL_TIM_IC_Start_IT+0x120>
 8003b04:	2908      	cmp	r1, #8
 8003b06:	bf0b      	itete	eq
 8003b08:	f890 0040 	ldrbeq.w	r0, [r0, #64]	; 0x40
 8003b0c:	f893 0041 	ldrbne.w	r0, [r3, #65]	; 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003b10:	f893 2044 	ldrbeq.w	r2, [r3, #68]	; 0x44
 8003b14:	f893 2045 	ldrbne.w	r2, [r3, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b18:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	e7b5      	b.n	8003a8a <HAL_TIM_IC_Start_IT+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b1e:	2904      	cmp	r1, #4
 8003b20:	d029      	beq.n	8003b76 <HAL_TIM_IC_Start_IT+0xfe>
 8003b22:	2908      	cmp	r1, #8
 8003b24:	d01c      	beq.n	8003b60 <HAL_TIM_IC_Start_IT+0xe8>
 8003b26:	2002      	movs	r0, #2
  switch (Channel)
 8003b28:	1f0a      	subs	r2, r1, #4
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b2a:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b2e:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
  switch (Channel)
 8003b32:	2a08      	cmp	r2, #8
 8003b34:	d8ae      	bhi.n	8003a94 <HAL_TIM_IC_Start_IT+0x1c>
 8003b36:	a001      	add	r0, pc, #4	; (adr r0, 8003b3c <HAL_TIM_IC_Start_IT+0xc4>)
 8003b38:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8003b3c:	08003b81 	.word	0x08003b81
 8003b40:	08003a95 	.word	0x08003a95
 8003b44:	08003a95 	.word	0x08003a95
 8003b48:	08003a95 	.word	0x08003a95
 8003b4c:	08003b6b 	.word	0x08003b6b
 8003b50:	08003a95 	.word	0x08003a95
 8003b54:	08003a95 	.word	0x08003a95
 8003b58:	08003a95 	.word	0x08003a95
 8003b5c:	08003b8d 	.word	0x08003b8d
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b60:	2202      	movs	r2, #2
 8003b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68d3      	ldr	r3, [r2, #12]
 8003b6e:	f043 0308 	orr.w	r3, r3, #8
 8003b72:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8003b74:	e79b      	b.n	8003aae <HAL_TIM_IC_Start_IT+0x36>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68d3      	ldr	r3, [r2, #12]
 8003b84:	f043 0304 	orr.w	r3, r3, #4
 8003b88:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8003b8a:	e790      	b.n	8003aae <HAL_TIM_IC_Start_IT+0x36>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68d3      	ldr	r3, [r2, #12]
 8003b90:	f043 0310 	orr.w	r3, r3, #16
 8003b94:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8003b96:	e78a      	b.n	8003aae <HAL_TIM_IC_Start_IT+0x36>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b98:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003b9c:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003ba0:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	e771      	b.n	8003a8a <HAL_TIM_IC_Start_IT+0x12>
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	e773      	b.n	8003a92 <HAL_TIM_IC_Start_IT+0x1a>
 8003baa:	bf00      	nop
 8003bac:	40010000 	.word	0x40010000
 8003bb0:	40000400 	.word	0x40000400

08003bb4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bb4:	6803      	ldr	r3, [r0, #0]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	0791      	lsls	r1, r2, #30
{
 8003bba:	b510      	push	{r4, lr}
 8003bbc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bbe:	d503      	bpl.n	8003bc8 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	0792      	lsls	r2, r2, #30
 8003bc4:	f100 808d 	bmi.w	8003ce2 <HAL_TIM_IRQHandler+0x12e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	0750      	lsls	r0, r2, #29
 8003bcc:	d502      	bpl.n	8003bd4 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	0751      	lsls	r1, r2, #29
 8003bd2:	d471      	bmi.n	8003cb8 <HAL_TIM_IRQHandler+0x104>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bd4:	691a      	ldr	r2, [r3, #16]
 8003bd6:	0712      	lsls	r2, r2, #28
 8003bd8:	d502      	bpl.n	8003be0 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	0710      	lsls	r0, r2, #28
 8003bde:	d457      	bmi.n	8003c90 <HAL_TIM_IRQHandler+0xdc>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	06d2      	lsls	r2, r2, #27
 8003be4:	d502      	bpl.n	8003bec <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	06d0      	lsls	r0, r2, #27
 8003bea:	d43c      	bmi.n	8003c66 <HAL_TIM_IRQHandler+0xb2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bec:	691a      	ldr	r2, [r3, #16]
 8003bee:	07d1      	lsls	r1, r2, #31
 8003bf0:	d502      	bpl.n	8003bf8 <HAL_TIM_IRQHandler+0x44>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	07d2      	lsls	r2, r2, #31
 8003bf6:	d42d      	bmi.n	8003c54 <HAL_TIM_IRQHandler+0xa0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	0610      	lsls	r0, r2, #24
 8003bfc:	d502      	bpl.n	8003c04 <HAL_TIM_IRQHandler+0x50>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	0611      	lsls	r1, r2, #24
 8003c02:	d41e      	bmi.n	8003c42 <HAL_TIM_IRQHandler+0x8e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	0652      	lsls	r2, r2, #25
 8003c08:	d502      	bpl.n	8003c10 <HAL_TIM_IRQHandler+0x5c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	0650      	lsls	r0, r2, #25
 8003c0e:	d40f      	bmi.n	8003c30 <HAL_TIM_IRQHandler+0x7c>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	0691      	lsls	r1, r2, #26
 8003c14:	d50b      	bpl.n	8003c2e <HAL_TIM_IRQHandler+0x7a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	0692      	lsls	r2, r2, #26
 8003c1a:	d508      	bpl.n	8003c2e <HAL_TIM_IRQHandler+0x7a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c1c:	f06f 0120 	mvn.w	r1, #32
      htim->CommutationCallback(htim);
 8003c20:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c24:	6119      	str	r1, [r3, #16]
      htim->CommutationCallback(htim);
 8003c26:	4620      	mov	r0, r4
}
 8003c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      htim->CommutationCallback(htim);
 8003c2c:	4710      	bx	r2
}
 8003c2e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c34:	611a      	str	r2, [r3, #16]
      htim->TriggerCallback(htim);
 8003c36:	4620      	mov	r0, r4
 8003c38:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003c3c:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	e7e6      	b.n	8003c10 <HAL_TIM_IRQHandler+0x5c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c42:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c46:	611a      	str	r2, [r3, #16]
      htim->BreakCallback(htim);
 8003c48:	4620      	mov	r0, r4
 8003c4a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003c4e:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	e7d7      	b.n	8003c04 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c54:	f06f 0201 	mvn.w	r2, #1
 8003c58:	611a      	str	r2, [r3, #16]
      htim->PeriodElapsedCallback(htim);
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8003c60:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c62:	6823      	ldr	r3, [r4, #0]
 8003c64:	e7c8      	b.n	8003bf8 <HAL_TIM_IRQHandler+0x44>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c66:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c6a:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c6c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c6e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003c76:	d155      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x170>
        htim->OC_DelayElapsedCallback(htim);
 8003c78:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003c80:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8003c84:	4620      	mov	r0, r4
 8003c86:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c88:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c8a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8c:	7722      	strb	r2, [r4, #28]
 8003c8e:	e7ad      	b.n	8003bec <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c90:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c94:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c96:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c98:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	0799      	lsls	r1, r3, #30
 8003c9e:	d13c      	bne.n	8003d1a <HAL_TIM_IRQHandler+0x166>
        htim->OC_DelayElapsedCallback(htim);
 8003ca0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003ca8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8003cac:	4620      	mov	r0, r4
 8003cae:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cb2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb4:	7722      	strb	r2, [r4, #28]
 8003cb6:	e793      	b.n	8003be0 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cb8:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cbc:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cbe:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cc0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003cc8:	d122      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x15c>
        htim->OC_DelayElapsedCallback(htim);
 8003cca:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003cce:	4620      	mov	r0, r4
 8003cd0:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003cd2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cda:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cdc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cde:	7722      	strb	r2, [r4, #28]
 8003ce0:	e778      	b.n	8003bd4 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ce2:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ce6:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ce8:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cea:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	079b      	lsls	r3, r3, #30
 8003cf0:	d10a      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x154>
          htim->OC_DelayElapsedCallback(htim);
 8003cf2:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 8003cf6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003cf8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	4798      	blx	r3
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d00:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d02:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d04:	7722      	strb	r2, [r4, #28]
 8003d06:	e75f      	b.n	8003bc8 <HAL_TIM_IRQHandler+0x14>
          htim->IC_CaptureCallback(htim);
 8003d08:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8003d0c:	4798      	blx	r3
 8003d0e:	e7f7      	b.n	8003d00 <HAL_TIM_IRQHandler+0x14c>
        htim->IC_CaptureCallback(htim);
 8003d10:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003d14:	4620      	mov	r0, r4
 8003d16:	4798      	blx	r3
 8003d18:	e7df      	b.n	8003cda <HAL_TIM_IRQHandler+0x126>
        htim->IC_CaptureCallback(htim);
 8003d1a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003d1e:	4620      	mov	r0, r4
 8003d20:	4798      	blx	r3
 8003d22:	e7c5      	b.n	8003cb0 <HAL_TIM_IRQHandler+0xfc>
        htim->IC_CaptureCallback(htim);
 8003d24:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003d28:	4620      	mov	r0, r4
 8003d2a:	4798      	blx	r3
 8003d2c:	e7ac      	b.n	8003c88 <HAL_TIM_IRQHandler+0xd4>
 8003d2e:	bf00      	nop

08003d30 <HAL_TIM_IC_ConfigChannel>:
{
 8003d30:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003d32:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8003d36:	2801      	cmp	r0, #1
 8003d38:	f000 80cc 	beq.w	8003ed4 <HAL_TIM_IC_ConfigChannel+0x1a4>
 8003d3c:	2001      	movs	r0, #1
{
 8003d3e:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8003d40:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8003d44:	b15a      	cbz	r2, 8003d5e <HAL_TIM_IC_ConfigChannel+0x2e>
  else if (Channel == TIM_CHANNEL_2)
 8003d46:	2a04      	cmp	r2, #4
 8003d48:	d04c      	beq.n	8003de4 <HAL_TIM_IC_ConfigChannel+0xb4>
  else if (Channel == TIM_CHANNEL_3)
 8003d4a:	2a08      	cmp	r2, #8
 8003d4c:	f000 809a 	beq.w	8003e84 <HAL_TIM_IC_ConfigChannel+0x154>
  else if (Channel == TIM_CHANNEL_4)
 8003d50:	2a0c      	cmp	r2, #12
 8003d52:	d071      	beq.n	8003e38 <HAL_TIM_IC_ConfigChannel+0x108>
  __HAL_UNLOCK(htim);
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003d5a:	bcf0      	pop	{r4, r5, r6, r7}
 8003d5c:	4770      	bx	lr
    TIM_TI1_SetConfig(htim->Instance,
 8003d5e:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003d60:	f8df c174 	ldr.w	ip, [pc, #372]	; 8003ed8 <HAL_TIM_IC_ConfigChannel+0x1a8>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d64:	6a16      	ldr	r6, [r2, #32]
    TIM_TI1_SetConfig(htim->Instance,
 8003d66:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d68:	f026 0601 	bic.w	r6, r6, #1
    TIM_TI1_SetConfig(htim->Instance,
 8003d6c:	e9d1 4500 	ldrd	r4, r5, [r1]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003d70:	4562      	cmp	r2, ip
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d72:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d74:	6997      	ldr	r7, [r2, #24]
  tmpccer = TIMx->CCER;
 8003d76:	6a16      	ldr	r6, [r2, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003d78:	d015      	beq.n	8003da6 <HAL_TIM_IC_ConfigChannel+0x76>
 8003d7a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003d7e:	d012      	beq.n	8003da6 <HAL_TIM_IC_ConfigChannel+0x76>
 8003d80:	f5ac 4c7c 	sub.w	ip, ip, #64512	; 0xfc00
 8003d84:	4562      	cmp	r2, ip
 8003d86:	d00e      	beq.n	8003da6 <HAL_TIM_IC_ConfigChannel+0x76>
 8003d88:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 8003d8c:	4562      	cmp	r2, ip
 8003d8e:	d00a      	beq.n	8003da6 <HAL_TIM_IC_ConfigChannel+0x76>
 8003d90:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 8003d94:	4562      	cmp	r2, ip
 8003d96:	d006      	beq.n	8003da6 <HAL_TIM_IC_ConfigChannel+0x76>
 8003d98:	f50c 3c9a 	add.w	ip, ip, #78848	; 0x13400
 8003d9c:	4562      	cmp	r2, ip
 8003d9e:	d002      	beq.n	8003da6 <HAL_TIM_IC_ConfigChannel+0x76>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003da0:	f047 0c01 	orr.w	ip, r7, #1
 8003da4:	e003      	b.n	8003dae <HAL_TIM_IC_ConfigChannel+0x7e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003da6:	f027 0703 	bic.w	r7, r7, #3
    tmpccmr1 |= TIM_ICSelection;
 8003daa:	ea45 0c07 	orr.w	ip, r5, r7
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003dae:	0100      	lsls	r0, r0, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003db0:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003db4:	b2c0      	uxtb	r0, r0
 8003db6:	ea40 000c 	orr.w	r0, r0, ip
  TIMx->CCMR1 = tmpccmr1;
 8003dba:	6190      	str	r0, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dbc:	f026 050a 	bic.w	r5, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003dc0:	f004 000a 	and.w	r0, r4, #10
 8003dc4:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8003dc6:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003dc8:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003dca:	688c      	ldr	r4, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003dcc:	f020 000c 	bic.w	r0, r0, #12
 8003dd0:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003dd2:	6991      	ldr	r1, [r2, #24]
 8003dd4:	4321      	orrs	r1, r4
 8003dd6:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8003dde:	2000      	movs	r0, #0
}
 8003de0:	bcf0      	pop	{r4, r5, r6, r7}
 8003de2:	4770      	bx	lr
    TIM_TI2_SetConfig(htim->Instance,
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de8:	6a14      	ldr	r4, [r2, #32]
 8003dea:	f024 0410 	bic.w	r4, r4, #16
    TIM_TI2_SetConfig(htim->Instance,
 8003dee:	e9d1 5600 	ldrd	r5, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003df2:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003df4:	688c      	ldr	r4, [r1, #8]
  tmpccmr1 = TIMx->CCMR1;
 8003df6:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003df8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003dfc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003e00:	0300      	lsls	r0, r0, #12
 8003e02:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e04:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003e08:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 8003e0a:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8003e0c:	6191      	str	r1, [r2, #24]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003e0e:	012d      	lsls	r5, r5, #4
 8003e10:	f005 05a0 	and.w	r5, r5, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e14:	f020 01a0 	bic.w	r1, r0, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003e18:	4329      	orrs	r1, r5
  TIMx->CCER = tmpccer;
 8003e1a:	6211      	str	r1, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003e1c:	6991      	ldr	r1, [r2, #24]
 8003e1e:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8003e22:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003e24:	6991      	ldr	r1, [r2, #24]
 8003e26:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8003e2a:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8003e32:	2000      	movs	r0, #0
}
 8003e34:	bcf0      	pop	{r4, r5, r6, r7}
 8003e36:	4770      	bx	lr
    TIM_TI4_SetConfig(htim->Instance,
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e3c:	6a14      	ldr	r4, [r2, #32]
 8003e3e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance,
 8003e42:	e9d1 5600 	ldrd	r5, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e46:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003e48:	688c      	ldr	r4, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 8003e4a:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003e4c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003e50:	0300      	lsls	r0, r0, #12
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003e52:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003e56:	b280      	uxth	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003e58:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003e5c:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 8003e5e:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR2 = tmpccmr2;
 8003e60:	61d1      	str	r1, [r2, #28]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003e62:	032d      	lsls	r5, r5, #12
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003e64:	f420 4120 	bic.w	r1, r0, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003e68:	f405 4520 	and.w	r5, r5, #40960	; 0xa000
 8003e6c:	4329      	orrs	r1, r5
  TIMx->CCER = tmpccer ;
 8003e6e:	6211      	str	r1, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003e70:	69d1      	ldr	r1, [r2, #28]
 8003e72:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8003e76:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003e78:	69d1      	ldr	r1, [r2, #28]
 8003e7a:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8003e7e:	2000      	movs	r0, #0
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003e80:	61d1      	str	r1, [r2, #28]
 8003e82:	e767      	b.n	8003d54 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e88:	6a16      	ldr	r6, [r2, #32]
 8003e8a:	f426 7680 	bic.w	r6, r6, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,
 8003e8e:	e9d1 5400 	ldrd	r5, r4, [r1]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e92:	6216      	str	r6, [r2, #32]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003e94:	688e      	ldr	r6, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 8003e96:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e98:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr2 |= TIM_ICSelection;
 8003e9c:	4321      	orrs	r1, r4
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e9e:	0100      	lsls	r0, r0, #4
 8003ea0:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003ea2:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003ea6:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 8003ea8:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR2 = tmpccmr2;
 8003eaa:	61d1      	str	r1, [r2, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003eac:	022d      	lsls	r5, r5, #8
 8003eae:	f405 6520 	and.w	r5, r5, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003eb2:	f420 6120 	bic.w	r1, r0, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003eb6:	4329      	orrs	r1, r5
  TIMx->CCER = tmpccer;
 8003eb8:	6211      	str	r1, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003eba:	69d1      	ldr	r1, [r2, #28]
 8003ebc:	f021 010c 	bic.w	r1, r1, #12
 8003ec0:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003ec2:	69d1      	ldr	r1, [r2, #28]
 8003ec4:	4331      	orrs	r1, r6
 8003ec6:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8003ece:	2000      	movs	r0, #0
}
 8003ed0:	bcf0      	pop	{r4, r5, r6, r7}
 8003ed2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003ed4:	2002      	movs	r0, #2
}
 8003ed6:	4770      	bx	lr
 8003ed8:	40010000 	.word	0x40010000

08003edc <HAL_TIM_PWM_ConfigChannel>:
{
 8003edc:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003ede:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8003ee2:	2801      	cmp	r0, #1
 8003ee4:	f000 80c5 	beq.w	8004072 <HAL_TIM_PWM_ConfigChannel+0x196>
 8003ee8:	2001      	movs	r0, #1
{
 8003eea:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8003eec:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  switch (Channel)
 8003ef0:	2a0c      	cmp	r2, #12
 8003ef2:	d808      	bhi.n	8003f06 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8003ef4:	e8df f002 	tbb	[pc, r2]
 8003ef8:	0707073b 	.word	0x0707073b
 8003efc:	07070765 	.word	0x07070765
 8003f00:	07070792 	.word	0x07070792
 8003f04:	0d          	.byte	0x0d
 8003f05:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  switch (Channel)
 8003f0c:	2001      	movs	r0, #1
}
 8003f0e:	bcf0      	pop	{r4, r5, r6, r7}
 8003f10:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f12:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f14:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f16:	6a10      	ldr	r0, [r2, #32]
 8003f18:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003f1c:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003f1e:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003f20:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8003f22:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f24:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f28:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f2c:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003f2e:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f32:	ea40 3006 	orr.w	r0, r0, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f36:	4e68      	ldr	r6, [pc, #416]	; (80040d8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003f38:	42b2      	cmp	r2, r6
 8003f3a:	f000 80b8 	beq.w	80040ae <HAL_TIM_PWM_ConfigChannel+0x1d2>
  TIMx->CR2 = tmpcr2;
 8003f3e:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003f40:	61d4      	str	r4, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003f42:	684c      	ldr	r4, [r1, #4]
 8003f44:	6414      	str	r4, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8003f46:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f48:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f4a:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f4c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8003f50:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f52:	69d1      	ldr	r1, [r2, #28]
 8003f54:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003f58:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f5a:	69d1      	ldr	r1, [r2, #28]
 8003f5c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8003f60:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8003f68:	2000      	movs	r0, #0
}
 8003f6a:	bcf0      	pop	{r4, r5, r6, r7}
 8003f6c:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f6e:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 8003f70:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f72:	6a10      	ldr	r0, [r2, #32]
 8003f74:	f020 0001 	bic.w	r0, r0, #1
 8003f78:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003f7a:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003f7c:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8003f7e:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f80:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003f84:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 8003f86:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003f88:	f020 0002 	bic.w	r0, r0, #2
  tmpccer |= OC_Config->OCPolarity;
 8003f8c:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f8e:	4e52      	ldr	r6, [pc, #328]	; (80040d8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003f90:	42b2      	cmp	r2, r6
 8003f92:	d070      	beq.n	8004076 <HAL_TIM_PWM_ConfigChannel+0x19a>
  TIMx->CR2 = tmpcr2;
 8003f94:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003f96:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003f98:	684c      	ldr	r4, [r1, #4]
 8003f9a:	6354      	str	r4, [r2, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8003f9c:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f9e:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fa0:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fa2:	f040 0008 	orr.w	r0, r0, #8
 8003fa6:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fa8:	6991      	ldr	r1, [r2, #24]
 8003faa:	f021 0104 	bic.w	r1, r1, #4
 8003fae:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fb0:	6991      	ldr	r1, [r2, #24]
 8003fb2:	4321      	orrs	r1, r4
 8003fb4:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8003fbc:	2000      	movs	r0, #0
}
 8003fbe:	bcf0      	pop	{r4, r5, r6, r7}
 8003fc0:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fc2:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc4:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fc6:	6a10      	ldr	r0, [r2, #32]
 8003fc8:	f020 0010 	bic.w	r0, r0, #16
 8003fcc:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003fce:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003fd0:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8003fd2:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fd4:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fd8:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fdc:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003fde:	f020 0020 	bic.w	r0, r0, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fe2:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fe6:	4e3c      	ldr	r6, [pc, #240]	; (80040d8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003fe8:	42b2      	cmp	r2, r6
 8003fea:	d051      	beq.n	8004090 <HAL_TIM_PWM_ConfigChannel+0x1b4>
  TIMx->CR2 = tmpcr2;
 8003fec:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003fee:	6194      	str	r4, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003ff0:	684c      	ldr	r4, [r1, #4]
 8003ff2:	6394      	str	r4, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003ff4:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ff6:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ff8:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ffa:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8003ffe:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004000:	6991      	ldr	r1, [r2, #24]
 8004002:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004006:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004008:	6991      	ldr	r1, [r2, #24]
 800400a:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 800400e:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004016:	2000      	movs	r0, #0
}
 8004018:	bcf0      	pop	{r4, r5, r6, r7}
 800401a:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800401c:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 800401e:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004020:	6a10      	ldr	r0, [r2, #32]
 8004022:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8004026:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8004028:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800402a:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 800402c:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800402e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004032:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004034:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004036:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800403a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800403e:	4e26      	ldr	r6, [pc, #152]	; (80040d8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004040:	42b2      	cmp	r2, r6
 8004042:	d03a      	beq.n	80040ba <HAL_TIM_PWM_ConfigChannel+0x1de>
  TIMx->CR2 = tmpcr2;
 8004044:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004046:	61d4      	str	r4, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004048:	684c      	ldr	r4, [r1, #4]
 800404a:	63d4      	str	r4, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800404c:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800404e:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004050:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004052:	f040 0008 	orr.w	r0, r0, #8
 8004056:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004058:	69d1      	ldr	r1, [r2, #28]
 800405a:	f021 0104 	bic.w	r1, r1, #4
 800405e:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004060:	69d1      	ldr	r1, [r2, #28]
 8004062:	4321      	orrs	r1, r4
 8004064:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800406c:	2000      	movs	r0, #0
}
 800406e:	bcf0      	pop	{r4, r5, r6, r7}
 8004070:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004072:	2002      	movs	r0, #2
}
 8004074:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8004076:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004078:	f020 0008 	bic.w	r0, r0, #8
    tmpccer |= OC_Config->OCNPolarity;
 800407c:	4330      	orrs	r0, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 800407e:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004082:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004086:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8004088:	f020 0004 	bic.w	r0, r0, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800408c:	4335      	orrs	r5, r6
 800408e:	e781      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0xb8>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004090:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004092:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004096:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800409a:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800409e:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040a2:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80040a4:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040a8:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 80040ac:	e79e      	b.n	8003fec <HAL_TIM_PWM_ConfigChannel+0x110>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040ae:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040b0:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040b4:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 80040b8:	e741      	b.n	8003f3e <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040ba:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80040bc:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040c0:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040c4:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040c8:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040cc:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 80040ce:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040d2:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 80040d6:	e7b5      	b.n	8004044 <HAL_TIM_PWM_ConfigChannel+0x168>
 80040d8:	40010000 	.word	0x40010000

080040dc <HAL_TIM_RegisterCallback>:
  if (pCallback == NULL)
 80040dc:	2a00      	cmp	r2, #0
 80040de:	d035      	beq.n	800414c <HAL_TIM_RegisterCallback+0x70>
  __HAL_LOCK(htim);
 80040e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d034      	beq.n	8004152 <HAL_TIM_RegisterCallback+0x76>
{
 80040e8:	b410      	push	{r4}
  if (htim->State == HAL_TIM_STATE_READY)
 80040ea:	f890 c03d 	ldrb.w	ip, [r0, #61]	; 0x3d
 80040ee:	f1bc 0f01 	cmp.w	ip, #1
 80040f2:	fa5f f38c 	uxtb.w	r3, ip
 80040f6:	d00f      	beq.n	8004118 <HAL_TIM_RegisterCallback+0x3c>
  else if (htim->State == HAL_TIM_STATE_RESET)
 80040f8:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80040fc:	f004 03ff 	and.w	r3, r4, #255	; 0xff
 8004100:	b9e4      	cbnz	r4, 800413c <HAL_TIM_RegisterCallback+0x60>
    switch (CallbackID)
 8004102:	290d      	cmp	r1, #13
 8004104:	d81a      	bhi.n	800413c <HAL_TIM_RegisterCallback+0x60>
 8004106:	e8df f001 	tbb	[pc, r1]
 800410a:	2a27      	.short	0x2a27
 800410c:	32302e2c 	.word	0x32302e2c
 8004110:	3a383634 	.word	0x3a383634
 8004114:	42403e3c 	.word	0x42403e3c
    switch (CallbackID)
 8004118:	291a      	cmp	r1, #26
 800411a:	d810      	bhi.n	800413e <HAL_TIM_RegisterCallback+0x62>
 800411c:	e8df f001 	tbb	[pc, r1]
 8004120:	54514e1c 	.word	0x54514e1c
 8004124:	3f3c394b 	.word	0x3f3c394b
 8004128:	57484542 	.word	0x57484542
 800412c:	64605d5a 	.word	0x64605d5a
 8004130:	74706c68 	.word	0x74706c68
 8004134:	84807c78 	.word	0x84807c78
 8004138:	8c88      	.short	0x8c88
 800413a:	90          	.byte	0x90
 800413b:	00          	.byte	0x00
    switch (CallbackID)
 800413c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800413e:	2200      	movs	r2, #0
 8004140:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8004144:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004148:	4618      	mov	r0, r3
 800414a:	4770      	bx	lr
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
}
 800414e:	4618      	mov	r0, r3
 8004150:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004152:	2302      	movs	r3, #2
}
 8004154:	4618      	mov	r0, r3
 8004156:	4770      	bx	lr
        htim->Base_MspInitCallback         = pCallback;
 8004158:	6482      	str	r2, [r0, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 800415a:	460b      	mov	r3, r1
        break;
 800415c:	e7ef      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->Base_MspDeInitCallback       = pCallback;
 800415e:	64c2      	str	r2, [r0, #76]	; 0x4c
        break;
 8004160:	e7ed      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->IC_MspInitCallback           = pCallback;
 8004162:	6502      	str	r2, [r0, #80]	; 0x50
        break;
 8004164:	e7eb      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->IC_MspDeInitCallback         = pCallback;
 8004166:	6542      	str	r2, [r0, #84]	; 0x54
        break;
 8004168:	e7e9      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->OC_MspInitCallback           = pCallback;
 800416a:	6582      	str	r2, [r0, #88]	; 0x58
        break;
 800416c:	e7e7      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->OC_MspDeInitCallback         = pCallback;
 800416e:	65c2      	str	r2, [r0, #92]	; 0x5c
        break;
 8004170:	e7e5      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->PWM_MspInitCallback          = pCallback;
 8004172:	6602      	str	r2, [r0, #96]	; 0x60
        break;
 8004174:	e7e3      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->PWM_MspDeInitCallback        = pCallback;
 8004176:	6642      	str	r2, [r0, #100]	; 0x64
        break;
 8004178:	e7e1      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->OnePulse_MspInitCallback     = pCallback;
 800417a:	6682      	str	r2, [r0, #104]	; 0x68
        break;
 800417c:	e7df      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800417e:	66c2      	str	r2, [r0, #108]	; 0x6c
        break;
 8004180:	e7dd      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->Encoder_MspInitCallback      = pCallback;
 8004182:	6702      	str	r2, [r0, #112]	; 0x70
        break;
 8004184:	e7db      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->Encoder_MspDeInitCallback    = pCallback;
 8004186:	6742      	str	r2, [r0, #116]	; 0x74
        break;
 8004188:	e7d9      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->HallSensor_MspInitCallback   = pCallback;
 800418a:	6782      	str	r2, [r0, #120]	; 0x78
        break;
 800418c:	e7d7      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->HallSensor_MspDeInitCallback = pCallback;
 800418e:	67c2      	str	r2, [r0, #124]	; 0x7c
        break;
 8004190:	e7d5      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->OC_MspDeInitCallback                 = pCallback;
 8004192:	65c2      	str	r2, [r0, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;
 8004194:	2300      	movs	r3, #0
        break;
 8004196:	e7d2      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->PWM_MspInitCallback                  = pCallback;
 8004198:	6602      	str	r2, [r0, #96]	; 0x60
  HAL_StatusTypeDef status = HAL_OK;
 800419a:	2300      	movs	r3, #0
        break;
 800419c:	e7cf      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->PWM_MspDeInitCallback                = pCallback;
 800419e:	6642      	str	r2, [r0, #100]	; 0x64
  HAL_StatusTypeDef status = HAL_OK;
 80041a0:	2300      	movs	r3, #0
        break;
 80041a2:	e7cc      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->OnePulse_MspInitCallback             = pCallback;
 80041a4:	6682      	str	r2, [r0, #104]	; 0x68
  HAL_StatusTypeDef status = HAL_OK;
 80041a6:	2300      	movs	r3, #0
        break;
 80041a8:	e7c9      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80041aa:	66c2      	str	r2, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 80041ac:	2300      	movs	r3, #0
        break;
 80041ae:	e7c6      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->Encoder_MspInitCallback              = pCallback;
 80041b0:	6702      	str	r2, [r0, #112]	; 0x70
  HAL_StatusTypeDef status = HAL_OK;
 80041b2:	2300      	movs	r3, #0
        break;
 80041b4:	e7c3      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->OC_MspInitCallback                   = pCallback;
 80041b6:	6582      	str	r2, [r0, #88]	; 0x58
  HAL_StatusTypeDef status = HAL_OK;
 80041b8:	2300      	movs	r3, #0
        break;
 80041ba:	e7c0      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->Base_MspDeInitCallback               = pCallback;
 80041bc:	64c2      	str	r2, [r0, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 80041be:	2300      	movs	r3, #0
        break;
 80041c0:	e7bd      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->IC_MspInitCallback                   = pCallback;
 80041c2:	6502      	str	r2, [r0, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 80041c4:	2300      	movs	r3, #0
        break;
 80041c6:	e7ba      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->IC_MspDeInitCallback                 = pCallback;
 80041c8:	6542      	str	r2, [r0, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 80041ca:	2300      	movs	r3, #0
        break;
 80041cc:	e7b7      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->Encoder_MspDeInitCallback            = pCallback;
 80041ce:	6742      	str	r2, [r0, #116]	; 0x74
  HAL_StatusTypeDef status = HAL_OK;
 80041d0:	2300      	movs	r3, #0
        break;
 80041d2:	e7b4      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->HallSensor_MspInitCallback           = pCallback;
 80041d4:	6782      	str	r2, [r0, #120]	; 0x78
  HAL_StatusTypeDef status = HAL_OK;
 80041d6:	2300      	movs	r3, #0
        break;
 80041d8:	e7b1      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80041da:	67c2      	str	r2, [r0, #124]	; 0x7c
  HAL_StatusTypeDef status = HAL_OK;
 80041dc:	2300      	movs	r3, #0
        break;
 80041de:	e7ae      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->PeriodElapsedCallback                = pCallback;
 80041e0:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 80041e4:	2300      	movs	r3, #0
        break;
 80041e6:	e7aa      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80041e8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  HAL_StatusTypeDef status = HAL_OK;
 80041ec:	2300      	movs	r3, #0
        break;
 80041ee:	e7a6      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->TriggerCallback                      = pCallback;
 80041f0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;
 80041f4:	2300      	movs	r3, #0
        break;
 80041f6:	e7a2      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->TriggerHalfCpltCallback              = pCallback;
 80041f8:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  HAL_StatusTypeDef status = HAL_OK;
 80041fc:	2300      	movs	r3, #0
        break;
 80041fe:	e79e      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->IC_CaptureCallback                   = pCallback;
 8004200:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;
 8004204:	2300      	movs	r3, #0
        break;
 8004206:	e79a      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8004208:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  HAL_StatusTypeDef status = HAL_OK;
 800420c:	2300      	movs	r3, #0
        break;
 800420e:	e796      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->OC_DelayElapsedCallback              = pCallback;
 8004210:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
  HAL_StatusTypeDef status = HAL_OK;
 8004214:	2300      	movs	r3, #0
        break;
 8004216:	e792      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->PWM_PulseFinishedCallback            = pCallback;
 8004218:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
  HAL_StatusTypeDef status = HAL_OK;
 800421c:	2300      	movs	r3, #0
        break;
 800421e:	e78e      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8004220:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
  HAL_StatusTypeDef status = HAL_OK;
 8004224:	2300      	movs	r3, #0
        break;
 8004226:	e78a      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->ErrorCallback                        = pCallback;
 8004228:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
  HAL_StatusTypeDef status = HAL_OK;
 800422c:	2300      	movs	r3, #0
        break;
 800422e:	e786      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->CommutationCallback                  = pCallback;
 8004230:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
  HAL_StatusTypeDef status = HAL_OK;
 8004234:	2300      	movs	r3, #0
        break;
 8004236:	e782      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->CommutationHalfCpltCallback          = pCallback;
 8004238:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
  HAL_StatusTypeDef status = HAL_OK;
 800423c:	2300      	movs	r3, #0
        break;
 800423e:	e77e      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>
        htim->BreakCallback                        = pCallback;
 8004240:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
  HAL_StatusTypeDef status = HAL_OK;
 8004244:	2300      	movs	r3, #0
        break;
 8004246:	e77a      	b.n	800413e <HAL_TIM_RegisterCallback+0x62>

08004248 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004248:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800424c:	2b01      	cmp	r3, #1
 800424e:	d02f      	beq.n	80042b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004250:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004252:	2202      	movs	r2, #2
{
 8004254:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004256:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800425a:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800425c:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 800425e:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004260:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004264:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004266:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004268:	4a12      	ldr	r2, [pc, #72]	; (80042b4 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d012      	beq.n	8004294 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800426e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004272:	d00f      	beq.n	8004294 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004274:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004278:	4293      	cmp	r3, r2
 800427a:	d00b      	beq.n	8004294 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800427c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004280:	4293      	cmp	r3, r2
 8004282:	d007      	beq.n	8004294 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004284:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004288:	4293      	cmp	r3, r2
 800428a:	d003      	beq.n	8004294 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800428c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8004290:	4293      	cmp	r3, r2
 8004292:	d104      	bne.n	800429e <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004294:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004296:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800429a:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800429c:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800429e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80042a0:	2201      	movs	r2, #1
 80042a2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80042a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80042aa:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80042ac:	4618      	mov	r0, r3
}
 80042ae:	4770      	bx	lr
  __HAL_LOCK(htim);
 80042b0:	2002      	movs	r0, #2
}
 80042b2:	4770      	bx	lr
 80042b4:	40010000 	.word	0x40010000

080042b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d023      	beq.n	8004308 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 80042c0:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042c2:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80042c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ca:	4602      	mov	r2, r0
 80042cc:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042ce:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042d0:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042d6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042dc:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042de:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042e4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042e6:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042e8:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042ee:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042f4:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 80042f6:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042f8:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 80042fa:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80042fc:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8004300:	4608      	mov	r0, r1
}
 8004302:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004306:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004308:	2002      	movs	r0, #2
}
 800430a:	4770      	bx	lr

0800430c <HAL_TIMEx_CommutCallback>:
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop

08004310 <HAL_TIMEx_CommutHalfCpltCallback>:
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop

08004314 <HAL_TIMEx_BreakCallback>:
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop

08004318 <HAL_UARTEx_RxEventCallback>:
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop

0800431c <UART_DMAAbortOnError>:
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800431c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800431e:	2300      	movs	r3, #0
 8004320:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8004322:	6d42      	ldr	r2, [r0, #84]	; 0x54
  huart->TxXferCount = 0x00U;
 8004324:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->ErrorCallback(huart);
 8004326:	4710      	bx	r2

08004328 <UART_Receive_IT.part.0.isra.0>:
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004328:	6883      	ldr	r3, [r0, #8]
 800432a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432e:	d02c      	beq.n	800438a <UART_Receive_IT.part.0.isra.0+0x62>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
      huart->pRxBuffPtr += 2U;
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004330:	6a82      	ldr	r2, [r0, #40]	; 0x28
      pdata16bits  = NULL;

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004332:	b313      	cbz	r3, 800437a <UART_Receive_IT.part.0.isra.0+0x52>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004334:	6803      	ldr	r3, [r0, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800433c:	7013      	strb	r3, [r2, #0]
      }
      huart->pRxBuffPtr += 1U;
 800433e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004340:	3201      	adds	r2, #1
    }

    if (--huart->RxXferCount == 0U)
 8004342:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 2U;
 8004344:	6282      	str	r2, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004346:	3b01      	subs	r3, #1
 8004348:	b29b      	uxth	r3, r3
 800434a:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800434c:	b9e3      	cbnz	r3, 8004388 <UART_Receive_IT.part.0.isra.0+0x60>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800434e:	6802      	ldr	r2, [r0, #0]
 8004350:	68d1      	ldr	r1, [r2, #12]
 8004352:	f021 0120 	bic.w	r1, r1, #32
 8004356:	60d1      	str	r1, [r2, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004358:	68d1      	ldr	r1, [r2, #12]
 800435a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800435e:	60d1      	str	r1, [r2, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004360:	6951      	ldr	r1, [r2, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004362:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004366:	f021 0101 	bic.w	r1, r1, #1
 800436a:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800436c:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004370:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004372:	2901      	cmp	r1, #1
 8004374:	d018      	beq.n	80043a8 <UART_Receive_IT.part.0.isra.0+0x80>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8004376:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004378:	4718      	bx	r3
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800437a:	6903      	ldr	r3, [r0, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1d9      	bne.n	8004334 <UART_Receive_IT.part.0.isra.0+0xc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004380:	6803      	ldr	r3, [r0, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	7013      	strb	r3, [r2, #0]
 8004386:	e7da      	b.n	800433e <UART_Receive_IT.part.0.isra.0+0x16>
 8004388:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800438a:	6903      	ldr	r3, [r0, #16]
 800438c:	b93b      	cbnz	r3, 800439e <UART_Receive_IT.part.0.isra.0+0x76>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800438e:	6803      	ldr	r3, [r0, #0]
 8004390:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004398:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 800439c:	e7d1      	b.n	8004342 <UART_Receive_IT.part.0.isra.0+0x1a>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800439e:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043a0:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	7013      	strb	r3, [r2, #0]
 80043a6:	e7ca      	b.n	800433e <UART_Receive_IT.part.0.isra.0+0x16>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a8:	6303      	str	r3, [r0, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043aa:	f102 030c 	add.w	r3, r2, #12
 80043ae:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b2:	f023 0310 	bic.w	r3, r3, #16
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b6:	f102 0c0c 	add.w	ip, r2, #12
 80043ba:	e84c 3100 	strex	r1, r3, [ip]
 80043be:	2900      	cmp	r1, #0
 80043c0:	d1f3      	bne.n	80043aa <UART_Receive_IT.part.0.isra.0+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043c2:	6813      	ldr	r3, [r2, #0]
 80043c4:	06db      	lsls	r3, r3, #27
 80043c6:	d50b      	bpl.n	80043e0 <UART_Receive_IT.part.0.isra.0+0xb8>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80043c8:	b082      	sub	sp, #8
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043ca:	2300      	movs	r3, #0
 80043cc:	9301      	str	r3, [sp, #4]
 80043ce:	6813      	ldr	r3, [r2, #0]
 80043d0:	9301      	str	r3, [sp, #4]
 80043d2:	6853      	ldr	r3, [r2, #4]
 80043d4:	9301      	str	r3, [sp, #4]
 80043d6:	9b01      	ldr	r3, [sp, #4]
        huart->RxEventCallback(huart, huart->RxXferSize);
 80043d8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80043da:	6e83      	ldr	r3, [r0, #104]	; 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 80043dc:	b002      	add	sp, #8
        huart->RxEventCallback(huart, huart->RxXferSize);
 80043de:	4718      	bx	r3
 80043e0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80043e2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80043e4:	4718      	bx	r3
 80043e6:	bf00      	nop

080043e8 <HAL_UART_AbortReceiveCpltCallback>:
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop

080043ec <HAL_UART_TxCpltCallback>:
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop

080043f0 <HAL_UART_TxHalfCpltCallback>:
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop

080043f4 <HAL_UART_RxCpltCallback>:
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop

080043f8 <HAL_UART_RxHalfCpltCallback>:
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop

080043fc <HAL_UART_ErrorCallback>:
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop

08004400 <HAL_UART_AbortCpltCallback>:
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop

08004404 <HAL_UART_AbortTransmitCpltCallback>:
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop

08004408 <HAL_UART_Init>:
  if (huart == NULL)
 8004408:	2800      	cmp	r0, #0
 800440a:	f000 80a2 	beq.w	8004552 <HAL_UART_Init+0x14a>
{
 800440e:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004410:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004414:	4604      	mov	r4, r0
 8004416:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800441a:	b9cb      	cbnz	r3, 8004450 <HAL_UART_Init+0x48>
    if (huart->MspInitCallback == NULL)
 800441c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800441e:	484f      	ldr	r0, [pc, #316]	; (800455c <HAL_UART_Init+0x154>)
    huart->Lock = HAL_UNLOCKED;
 8004420:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8004424:	4a4e      	ldr	r2, [pc, #312]	; (8004560 <HAL_UART_Init+0x158>)
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8004426:	494f      	ldr	r1, [pc, #316]	; (8004564 <HAL_UART_Init+0x15c>)
 8004428:	6461      	str	r1, [r4, #68]	; 0x44
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800442a:	e9c4 0212 	strd	r0, r2, [r4, #72]	; 0x48
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800442e:	494e      	ldr	r1, [pc, #312]	; (8004568 <HAL_UART_Init+0x160>)
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8004430:	4a4e      	ldr	r2, [pc, #312]	; (800456c <HAL_UART_Init+0x164>)
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8004432:	484f      	ldr	r0, [pc, #316]	; (8004570 <HAL_UART_Init+0x168>)
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8004434:	e9c4 1214 	strd	r1, r2, [r4, #80]	; 0x50
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8004438:	4a4e      	ldr	r2, [pc, #312]	; (8004574 <HAL_UART_Init+0x16c>)
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800443a:	494f      	ldr	r1, [pc, #316]	; (8004578 <HAL_UART_Init+0x170>)
 800443c:	6621      	str	r1, [r4, #96]	; 0x60
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800443e:	e9c4 0216 	strd	r0, r2, [r4, #88]	; 0x58
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8004442:	4a4e      	ldr	r2, [pc, #312]	; (800457c <HAL_UART_Init+0x174>)
 8004444:	66a2      	str	r2, [r4, #104]	; 0x68
    if (huart->MspInitCallback == NULL)
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 8085 	beq.w	8004556 <HAL_UART_Init+0x14e>
    huart->MspInitCallback(huart);
 800444c:	4620      	mov	r0, r4
 800444e:	4798      	blx	r3
  __HAL_UART_DISABLE(huart);
 8004450:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004452:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8004454:	2224      	movs	r2, #36	; 0x24
 8004456:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004460:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004462:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004464:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004466:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800446a:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800446c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800446e:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004470:	4302      	orrs	r2, r0
 8004472:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004474:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004476:	4302      	orrs	r2, r0
 8004478:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 800447a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800447e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004482:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004484:	430a      	orrs	r2, r1
 8004486:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800448c:	493c      	ldr	r1, [pc, #240]	; (8004580 <HAL_UART_Init+0x178>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800448e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004492:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004494:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004496:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004498:	d035      	beq.n	8004506 <HAL_UART_Init+0xfe>
 800449a:	4a3a      	ldr	r2, [pc, #232]	; (8004584 <HAL_UART_Init+0x17c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d032      	beq.n	8004506 <HAL_UART_Init+0xfe>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044a0:	f7ff f888 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044a4:	69e3      	ldr	r3, [r4, #28]
 80044a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044aa:	d032      	beq.n	8004512 <HAL_UART_Init+0x10a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044ac:	6863      	ldr	r3, [r4, #4]
 80044ae:	2119      	movs	r1, #25
 80044b0:	009a      	lsls	r2, r3, #2
 80044b2:	fba0 0101 	umull	r0, r1, r0, r1
 80044b6:	0f9b      	lsrs	r3, r3, #30
 80044b8:	f7fb fe96 	bl	80001e8 <__aeabi_uldivmod>
 80044bc:	4932      	ldr	r1, [pc, #200]	; (8004588 <HAL_UART_Init+0x180>)
 80044be:	fba1 3200 	umull	r3, r2, r1, r0
 80044c2:	0952      	lsrs	r2, r2, #5
 80044c4:	2564      	movs	r5, #100	; 0x64
 80044c6:	fb05 0012 	mls	r0, r5, r2, r0
 80044ca:	0100      	lsls	r0, r0, #4
 80044cc:	3032      	adds	r0, #50	; 0x32
 80044ce:	6823      	ldr	r3, [r4, #0]
 80044d0:	fba1 1000 	umull	r1, r0, r1, r0
 80044d4:	0112      	lsls	r2, r2, #4
 80044d6:	eb02 1250 	add.w	r2, r2, r0, lsr #5
 80044da:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044ea:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80044ec:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ee:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80044f0:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80044f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044f6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f8:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044fa:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044fe:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8004502:	4628      	mov	r0, r5
}
 8004504:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8004506:	f7ff f865 	bl	80035d4 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800450a:	69e3      	ldr	r3, [r4, #28]
 800450c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004510:	d1cc      	bne.n	80044ac <HAL_UART_Init+0xa4>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004512:	6862      	ldr	r2, [r4, #4]
 8004514:	2119      	movs	r1, #25
 8004516:	1892      	adds	r2, r2, r2
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	415b      	adcs	r3, r3
 800451e:	fba0 0101 	umull	r0, r1, r0, r1
 8004522:	f7fb fe61 	bl	80001e8 <__aeabi_uldivmod>
 8004526:	4b18      	ldr	r3, [pc, #96]	; (8004588 <HAL_UART_Init+0x180>)
 8004528:	fba3 2500 	umull	r2, r5, r3, r0
 800452c:	096d      	lsrs	r5, r5, #5
 800452e:	2264      	movs	r2, #100	; 0x64
 8004530:	fb02 0215 	mls	r2, r2, r5, r0
 8004534:	00d2      	lsls	r2, r2, #3
 8004536:	3232      	adds	r2, #50	; 0x32
 8004538:	fba3 3202 	umull	r3, r2, r3, r2
 800453c:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8004540:	0912      	lsrs	r2, r2, #4
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8004548:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800454c:	440a      	add	r2, r1
 800454e:	609a      	str	r2, [r3, #8]
 8004550:	e7c4      	b.n	80044dc <HAL_UART_Init+0xd4>
    return HAL_ERROR;
 8004552:	2001      	movs	r0, #1
}
 8004554:	4770      	bx	lr
      huart->MspInitCallback = HAL_UART_MspInit;
 8004556:	4b0d      	ldr	r3, [pc, #52]	; (800458c <HAL_UART_Init+0x184>)
 8004558:	66e3      	str	r3, [r4, #108]	; 0x6c
 800455a:	e777      	b.n	800444c <HAL_UART_Init+0x44>
 800455c:	080043ed 	.word	0x080043ed
 8004560:	080043f9 	.word	0x080043f9
 8004564:	080043f1 	.word	0x080043f1
 8004568:	080043f5 	.word	0x080043f5
 800456c:	080043fd 	.word	0x080043fd
 8004570:	08004401 	.word	0x08004401
 8004574:	08004405 	.word	0x08004405
 8004578:	080043e9 	.word	0x080043e9
 800457c:	08004319 	.word	0x08004319
 8004580:	40011000 	.word	0x40011000
 8004584:	40011400 	.word	0x40011400
 8004588:	51eb851f 	.word	0x51eb851f
 800458c:	08001849 	.word	0x08001849

08004590 <HAL_UART_RegisterCallback>:
{
 8004590:	4603      	mov	r3, r0
  if (pCallback == NULL)
 8004592:	b372      	cbz	r2, 80045f2 <HAL_UART_RegisterCallback+0x62>
  __HAL_LOCK(huart);
 8004594:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8004598:	2801      	cmp	r0, #1
 800459a:	d030      	beq.n	80045fe <HAL_UART_RegisterCallback+0x6e>
  if (huart->gState == HAL_UART_STATE_READY)
 800459c:	f893 c03d 	ldrb.w	ip, [r3, #61]	; 0x3d
  __HAL_LOCK(huart);
 80045a0:	2001      	movs	r0, #1
  if (huart->gState == HAL_UART_STATE_READY)
 80045a2:	f1bc 0f20 	cmp.w	ip, #32
  __HAL_LOCK(huart);
 80045a6:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (huart->gState == HAL_UART_STATE_READY)
 80045aa:	d011      	beq.n	80045d0 <HAL_UART_RegisterCallback+0x40>
{
 80045ac:	b410      	push	{r4}
  else if (huart->gState == HAL_UART_STATE_RESET)
 80045ae:	f893 403d 	ldrb.w	r4, [r3, #61]	; 0x3d
 80045b2:	b91c      	cbnz	r4, 80045bc <HAL_UART_RegisterCallback+0x2c>
    switch (CallbackID)
 80045b4:	290b      	cmp	r1, #11
 80045b6:	d019      	beq.n	80045ec <HAL_UART_RegisterCallback+0x5c>
 80045b8:	290c      	cmp	r1, #12
 80045ba:	d014      	beq.n	80045e6 <HAL_UART_RegisterCallback+0x56>
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80045bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045be:	f042 0220 	orr.w	r2, r2, #32
 80045c2:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(huart);
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80045ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045ce:	4770      	bx	lr
    switch (CallbackID)
 80045d0:	290c      	cmp	r1, #12
 80045d2:	d816      	bhi.n	8004602 <HAL_UART_RegisterCallback+0x72>
 80045d4:	e8df f001 	tbb	[pc, r1]
 80045d8:	33302724 	.word	0x33302724
 80045dc:	2d2a3936 	.word	0x2d2a3936
 80045e0:	1e151515 	.word	0x1e151515
 80045e4:	21          	.byte	0x21
 80045e5:	00          	.byte	0x00
        huart->MspDeInitCallback = pCallback;
 80045e6:	671a      	str	r2, [r3, #112]	; 0x70
  HAL_StatusTypeDef status = HAL_OK;
 80045e8:	2000      	movs	r0, #0
        break;
 80045ea:	e7eb      	b.n	80045c4 <HAL_UART_RegisterCallback+0x34>
        huart->MspInitCallback = pCallback;
 80045ec:	66da      	str	r2, [r3, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 80045ee:	2000      	movs	r0, #0
        break;
 80045f0:	e7e8      	b.n	80045c4 <HAL_UART_RegisterCallback+0x34>
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80045f2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80045f4:	f042 0220 	orr.w	r2, r2, #32
    return HAL_ERROR;
 80045f8:	2001      	movs	r0, #1
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80045fa:	641a      	str	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80045fc:	4770      	bx	lr
  __HAL_LOCK(huart);
 80045fe:	2002      	movs	r0, #2
 8004600:	4770      	bx	lr
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004604:	f042 0220 	orr.w	r2, r2, #32
        status =  HAL_ERROR;
 8004608:	2001      	movs	r0, #1
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800460a:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(huart);
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004612:	4770      	bx	lr
        huart->MspInitCallback = pCallback;
 8004614:	66da      	str	r2, [r3, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004616:	2000      	movs	r0, #0
 8004618:	e7f8      	b.n	800460c <HAL_UART_RegisterCallback+0x7c>
        huart->MspDeInitCallback = pCallback;
 800461a:	671a      	str	r2, [r3, #112]	; 0x70
  HAL_StatusTypeDef status = HAL_OK;
 800461c:	2000      	movs	r0, #0
 800461e:	e7f5      	b.n	800460c <HAL_UART_RegisterCallback+0x7c>
        huart->TxHalfCpltCallback = pCallback;
 8004620:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_StatusTypeDef status = HAL_OK;
 8004622:	4608      	mov	r0, r1
        break;
 8004624:	e7f2      	b.n	800460c <HAL_UART_RegisterCallback+0x7c>
        huart->TxCpltCallback = pCallback;
 8004626:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8004628:	2000      	movs	r0, #0
        break;
 800462a:	e7ef      	b.n	800460c <HAL_UART_RegisterCallback+0x7c>
        huart->AbortTransmitCpltCallback = pCallback;
 800462c:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;
 800462e:	2000      	movs	r0, #0
        break;
 8004630:	e7ec      	b.n	800460c <HAL_UART_RegisterCallback+0x7c>
        huart->AbortReceiveCpltCallback = pCallback;
 8004632:	661a      	str	r2, [r3, #96]	; 0x60
  HAL_StatusTypeDef status = HAL_OK;
 8004634:	2000      	movs	r0, #0
        break;
 8004636:	e7e9      	b.n	800460c <HAL_UART_RegisterCallback+0x7c>
        huart->RxHalfCpltCallback = pCallback;
 8004638:	64da      	str	r2, [r3, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 800463a:	2000      	movs	r0, #0
        break;
 800463c:	e7e6      	b.n	800460c <HAL_UART_RegisterCallback+0x7c>
        huart->RxCpltCallback = pCallback;
 800463e:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8004640:	2000      	movs	r0, #0
        break;
 8004642:	e7e3      	b.n	800460c <HAL_UART_RegisterCallback+0x7c>
        huart->ErrorCallback = pCallback;
 8004644:	655a      	str	r2, [r3, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8004646:	2000      	movs	r0, #0
        break;
 8004648:	e7e0      	b.n	800460c <HAL_UART_RegisterCallback+0x7c>
        huart->AbortCpltCallback = pCallback;
 800464a:	659a      	str	r2, [r3, #88]	; 0x58
  HAL_StatusTypeDef status = HAL_OK;
 800464c:	2000      	movs	r0, #0
        break;
 800464e:	e7dd      	b.n	800460c <HAL_UART_RegisterCallback+0x7c>

08004650 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8004650:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004654:	2b20      	cmp	r3, #32
 8004656:	d11b      	bne.n	8004690 <HAL_UART_Transmit_IT+0x40>
    if ((pData == NULL) || (Size == 0U))
 8004658:	b1c1      	cbz	r1, 800468c <HAL_UART_Transmit_IT+0x3c>
 800465a:	b1ba      	cbz	r2, 800468c <HAL_UART_Transmit_IT+0x3c>
    __HAL_LOCK(huart);
 800465c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004660:	2b01      	cmp	r3, #1
 8004662:	d015      	beq.n	8004690 <HAL_UART_Transmit_IT+0x40>
{
 8004664:	b410      	push	{r4}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004666:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004668:	2421      	movs	r4, #33	; 0x21
    huart->TxXferCount = Size;
 800466a:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800466c:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800466e:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004672:	6804      	ldr	r4, [r0, #0]
    __HAL_UNLOCK(huart);
 8004674:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->TxXferSize = Size;
 8004678:	8482      	strh	r2, [r0, #36]	; 0x24
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800467a:	68e2      	ldr	r2, [r4, #12]
    huart->pTxBuffPtr = pData;
 800467c:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800467e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    return HAL_OK;
 8004682:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004684:	60e2      	str	r2, [r4, #12]
}
 8004686:	f85d 4b04 	ldr.w	r4, [sp], #4
 800468a:	4770      	bx	lr
      return HAL_ERROR;
 800468c:	2001      	movs	r0, #1
 800468e:	4770      	bx	lr
    return HAL_BUSY;
 8004690:	2002      	movs	r0, #2
}
 8004692:	4770      	bx	lr

08004694 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004694:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004698:	2b20      	cmp	r3, #32
 800469a:	d11f      	bne.n	80046dc <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 800469c:	b1e1      	cbz	r1, 80046d8 <HAL_UART_Receive_IT+0x44>
 800469e:	b1da      	cbz	r2, 80046d8 <HAL_UART_Receive_IT+0x44>
    __HAL_LOCK(huart);
 80046a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d019      	beq.n	80046dc <HAL_UART_Receive_IT+0x48>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a8:	2300      	movs	r3, #0
 80046aa:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 80046ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 80046b0:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b2:	6403      	str	r3, [r0, #64]	; 0x40
  if (huart->Init.Parity != UART_PARITY_NONE)
 80046b4:	6903      	ldr	r3, [r0, #16]
  huart->pRxBuffPtr = pData;
 80046b6:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046b8:	2122      	movs	r1, #34	; 0x22
  huart->RxXferSize = Size;
 80046ba:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046bc:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
  if (huart->Init.Parity != UART_PARITY_NONE)
 80046c0:	b973      	cbnz	r3, 80046e0 <HAL_UART_Receive_IT+0x4c>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80046c2:	6803      	ldr	r3, [r0, #0]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80046c4:	695a      	ldr	r2, [r3, #20]
 80046c6:	f042 0201 	orr.w	r2, r2, #1
 80046ca:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 80046d2:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80046d4:	60da      	str	r2, [r3, #12]
    return (UART_Start_Receive_IT(huart, pData, Size));
 80046d6:	4770      	bx	lr
      return HAL_ERROR;
 80046d8:	2001      	movs	r0, #1
 80046da:	4770      	bx	lr
    return HAL_BUSY;
 80046dc:	2002      	movs	r0, #2
}
 80046de:	4770      	bx	lr
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80046e0:	6803      	ldr	r3, [r0, #0]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046e8:	60da      	str	r2, [r3, #12]
 80046ea:	e7eb      	b.n	80046c4 <HAL_UART_Receive_IT+0x30>

080046ec <HAL_UART_IRQHandler>:
{
 80046ec:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046ee:	6803      	ldr	r3, [r0, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046f2:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046f4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80046f6:	f012 0f0f 	tst.w	r2, #15
{
 80046fa:	b083      	sub	sp, #12
 80046fc:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80046fe:	d16c      	bne.n	80047da <HAL_UART_IRQHandler+0xee>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004700:	0695      	lsls	r5, r2, #26
 8004702:	d502      	bpl.n	800470a <HAL_UART_IRQHandler+0x1e>
 8004704:	068d      	lsls	r5, r1, #26
 8004706:	f100 80bd 	bmi.w	8004884 <HAL_UART_IRQHandler+0x198>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800470a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800470c:	2801      	cmp	r0, #1
 800470e:	d00b      	beq.n	8004728 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004710:	0610      	lsls	r0, r2, #24
 8004712:	d502      	bpl.n	800471a <HAL_UART_IRQHandler+0x2e>
 8004714:	060d      	lsls	r5, r1, #24
 8004716:	f100 80bf 	bmi.w	8004898 <HAL_UART_IRQHandler+0x1ac>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800471a:	0650      	lsls	r0, r2, #25
 800471c:	d502      	bpl.n	8004724 <HAL_UART_IRQHandler+0x38>
 800471e:	064a      	lsls	r2, r1, #25
 8004720:	f100 80a3 	bmi.w	800486a <HAL_UART_IRQHandler+0x17e>
}
 8004724:	b003      	add	sp, #12
 8004726:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004728:	06d5      	lsls	r5, r2, #27
 800472a:	d5f1      	bpl.n	8004710 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800472c:	06c8      	lsls	r0, r1, #27
 800472e:	d5ef      	bpl.n	8004710 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004730:	2200      	movs	r2, #0
 8004732:	9201      	str	r2, [sp, #4]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	9201      	str	r2, [sp, #4]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	9201      	str	r2, [sp, #4]
 800473c:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800473e:	695a      	ldr	r2, [r3, #20]
 8004740:	0655      	lsls	r5, r2, #25
 8004742:	f140 8112 	bpl.w	800496a <HAL_UART_IRQHandler+0x27e>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004746:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004748:	6802      	ldr	r2, [r0, #0]
 800474a:	6852      	ldr	r2, [r2, #4]
 800474c:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800474e:	2a00      	cmp	r2, #0
 8004750:	d0e8      	beq.n	8004724 <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004752:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004754:	4291      	cmp	r1, r2
 8004756:	d9e5      	bls.n	8004724 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8004758:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800475a:	69c2      	ldr	r2, [r0, #28]
 800475c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004760:	d036      	beq.n	80047d0 <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	f103 020c 	add.w	r2, r3, #12
 8004766:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800476a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476e:	f103 050c 	add.w	r5, r3, #12
 8004772:	e845 2100 	strex	r1, r2, [r5]
 8004776:	2900      	cmp	r1, #0
 8004778:	d1f3      	bne.n	8004762 <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477a:	f103 0214 	add.w	r2, r3, #20
 800477e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004782:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	f103 0514 	add.w	r5, r3, #20
 800478a:	e845 2100 	strex	r1, r2, [r5]
 800478e:	2900      	cmp	r1, #0
 8004790:	d1f3      	bne.n	800477a <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	f103 0214 	add.w	r2, r3, #20
 8004796:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800479a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479e:	f103 0514 	add.w	r5, r3, #20
 80047a2:	e845 2100 	strex	r1, r2, [r5]
 80047a6:	2900      	cmp	r1, #0
 80047a8:	d1f3      	bne.n	8004792 <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 80047aa:	2220      	movs	r2, #32
 80047ac:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b0:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b2:	f103 020c 	add.w	r2, r3, #12
 80047b6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ba:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047be:	f103 050c 	add.w	r5, r3, #12
 80047c2:	e845 2100 	strex	r1, r2, [r5]
 80047c6:	2900      	cmp	r1, #0
 80047c8:	d1f3      	bne.n	80047b2 <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047ca:	f7fd fd49 	bl	8002260 <HAL_DMA_Abort>
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047ce:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80047d0:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80047d2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80047d4:	1a89      	subs	r1, r1, r2
 80047d6:	b289      	uxth	r1, r1
 80047d8:	e0fd      	b.n	80049d6 <HAL_UART_IRQHandler+0x2ea>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047da:	f005 0501 	and.w	r5, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047de:	f401 7090 	and.w	r0, r1, #288	; 0x120
 80047e2:	4328      	orrs	r0, r5
 80047e4:	d091      	beq.n	800470a <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047e6:	07d0      	lsls	r0, r2, #31
 80047e8:	d505      	bpl.n	80047f6 <HAL_UART_IRQHandler+0x10a>
 80047ea:	05c8      	lsls	r0, r1, #23
 80047ec:	d503      	bpl.n	80047f6 <HAL_UART_IRQHandler+0x10a>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047ee:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80047f0:	f040 0001 	orr.w	r0, r0, #1
 80047f4:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047f6:	0750      	lsls	r0, r2, #29
 80047f8:	d532      	bpl.n	8004860 <HAL_UART_IRQHandler+0x174>
 80047fa:	b14d      	cbz	r5, 8004810 <HAL_UART_IRQHandler+0x124>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047fc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80047fe:	f040 0002 	orr.w	r0, r0, #2
 8004802:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004804:	0790      	lsls	r0, r2, #30
 8004806:	d503      	bpl.n	8004810 <HAL_UART_IRQHandler+0x124>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004808:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800480a:	f040 0004 	orr.w	r0, r0, #4
 800480e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004810:	0710      	lsls	r0, r2, #28
 8004812:	d507      	bpl.n	8004824 <HAL_UART_IRQHandler+0x138>
 8004814:	f001 0020 	and.w	r0, r1, #32
 8004818:	4328      	orrs	r0, r5
 800481a:	d003      	beq.n	8004824 <HAL_UART_IRQHandler+0x138>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800481c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800481e:	f040 0008 	orr.w	r0, r0, #8
 8004822:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004824:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004826:	2800      	cmp	r0, #0
 8004828:	f43f af7c 	beq.w	8004724 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800482c:	0690      	lsls	r0, r2, #26
 800482e:	d509      	bpl.n	8004844 <HAL_UART_IRQHandler+0x158>
 8004830:	0689      	lsls	r1, r1, #26
 8004832:	d507      	bpl.n	8004844 <HAL_UART_IRQHandler+0x158>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004834:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004838:	2a22      	cmp	r2, #34	; 0x22
 800483a:	d103      	bne.n	8004844 <HAL_UART_IRQHandler+0x158>
 800483c:	4620      	mov	r0, r4
 800483e:	f7ff fd73 	bl	8004328 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004846:	6c21      	ldr	r1, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004848:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800484c:	f001 0108 	and.w	r1, r1, #8
 8004850:	ea52 0501 	orrs.w	r5, r2, r1
 8004854:	d13f      	bne.n	80048d6 <HAL_UART_IRQHandler+0x1ea>
        huart->ErrorCallback(huart);
 8004856:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004858:	4620      	mov	r0, r4
 800485a:	4798      	blx	r3
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800485c:	6425      	str	r5, [r4, #64]	; 0x40
 800485e:	e761      	b.n	8004724 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004860:	0790      	lsls	r0, r2, #30
 8004862:	d5d5      	bpl.n	8004810 <HAL_UART_IRQHandler+0x124>
 8004864:	2d00      	cmp	r5, #0
 8004866:	d1cf      	bne.n	8004808 <HAL_UART_IRQHandler+0x11c>
 8004868:	e7d2      	b.n	8004810 <HAL_UART_IRQHandler+0x124>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004870:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004872:	2120      	movs	r1, #32
  huart->TxCpltCallback(huart);
 8004874:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  huart->gState = HAL_UART_STATE_READY;
 8004876:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->TxCpltCallback(huart);
 800487a:	4620      	mov	r0, r4
}
 800487c:	b003      	add	sp, #12
 800487e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  huart->TxCpltCallback(huart);
 8004882:	4718      	bx	r3
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004884:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004888:	2b22      	cmp	r3, #34	; 0x22
 800488a:	f47f af4b 	bne.w	8004724 <HAL_UART_IRQHandler+0x38>
}
 800488e:	b003      	add	sp, #12
 8004890:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004894:	f7ff bd48 	b.w	8004328 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004898:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800489c:	2a21      	cmp	r2, #33	; 0x21
 800489e:	f47f af41 	bne.w	8004724 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a2:	68a2      	ldr	r2, [r4, #8]
 80048a4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80048a8:	f000 809a 	beq.w	80049e0 <HAL_UART_IRQHandler+0x2f4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048ac:	6a22      	ldr	r2, [r4, #32]
 80048ae:	1c51      	adds	r1, r2, #1
 80048b0:	6221      	str	r1, [r4, #32]
 80048b2:	7812      	ldrb	r2, [r2, #0]
 80048b4:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80048b6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80048b8:	3a01      	subs	r2, #1
 80048ba:	b292      	uxth	r2, r2
 80048bc:	84e2      	strh	r2, [r4, #38]	; 0x26
 80048be:	2a00      	cmp	r2, #0
 80048c0:	f47f af30 	bne.w	8004724 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048ca:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048d2:	60da      	str	r2, [r3, #12]
 80048d4:	e726      	b.n	8004724 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d6:	f103 020c 	add.w	r2, r3, #12
 80048da:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e2:	f103 000c 	add.w	r0, r3, #12
 80048e6:	e840 2100 	strex	r1, r2, [r0]
 80048ea:	2900      	cmp	r1, #0
 80048ec:	d1f3      	bne.n	80048d6 <HAL_UART_IRQHandler+0x1ea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	f103 0214 	add.w	r2, r3, #20
 80048f2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fa:	f103 0014 	add.w	r0, r3, #20
 80048fe:	e840 2100 	strex	r1, r2, [r0]
 8004902:	2900      	cmp	r1, #0
 8004904:	d1f3      	bne.n	80048ee <HAL_UART_IRQHandler+0x202>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004906:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004908:	2a01      	cmp	r2, #1
 800490a:	d01f      	beq.n	800494c <HAL_UART_IRQHandler+0x260>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800490e:	2120      	movs	r1, #32
 8004910:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004914:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004916:	695a      	ldr	r2, [r3, #20]
 8004918:	0652      	lsls	r2, r2, #25
 800491a:	d524      	bpl.n	8004966 <HAL_UART_IRQHandler+0x27a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	f103 0214 	add.w	r2, r3, #20
 8004920:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004928:	f103 0014 	add.w	r0, r3, #20
 800492c:	e840 2100 	strex	r1, r2, [r0]
 8004930:	2900      	cmp	r1, #0
 8004932:	d1f3      	bne.n	800491c <HAL_UART_IRQHandler+0x230>
          if (huart->hdmarx != NULL)
 8004934:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004936:	b1b0      	cbz	r0, 8004966 <HAL_UART_IRQHandler+0x27a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004938:	4b2f      	ldr	r3, [pc, #188]	; (80049f8 <HAL_UART_IRQHandler+0x30c>)
 800493a:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800493c:	f7fd fcda 	bl	80022f4 <HAL_DMA_Abort_IT>
 8004940:	2800      	cmp	r0, #0
 8004942:	f43f aeef 	beq.w	8004724 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004946:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004948:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800494a:	e797      	b.n	800487c <HAL_UART_IRQHandler+0x190>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494c:	f103 020c 	add.w	r2, r3, #12
 8004950:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004954:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004958:	f103 000c 	add.w	r0, r3, #12
 800495c:	e840 2100 	strex	r1, r2, [r0]
 8004960:	2900      	cmp	r1, #0
 8004962:	d1f3      	bne.n	800494c <HAL_UART_IRQHandler+0x260>
 8004964:	e7d2      	b.n	800490c <HAL_UART_IRQHandler+0x220>
          huart->ErrorCallback(huart);
 8004966:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004968:	e787      	b.n	800487a <HAL_UART_IRQHandler+0x18e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800496a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 800496c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800496e:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 8004970:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004972:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8004974:	2a00      	cmp	r2, #0
 8004976:	f43f aed5 	beq.w	8004724 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800497a:	1a41      	subs	r1, r0, r1
 800497c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800497e:	2900      	cmp	r1, #0
 8004980:	f43f aed0 	beq.w	8004724 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	f103 020c 	add.w	r2, r3, #12
 8004988:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800498c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004990:	f103 050c 	add.w	r5, r3, #12
 8004994:	e845 2000 	strex	r0, r2, [r5]
 8004998:	2800      	cmp	r0, #0
 800499a:	d1f3      	bne.n	8004984 <HAL_UART_IRQHandler+0x298>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	f103 0214 	add.w	r2, r3, #20
 80049a0:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	f103 0514 	add.w	r5, r3, #20
 80049ac:	e845 2000 	strex	r0, r2, [r5]
 80049b0:	2800      	cmp	r0, #0
 80049b2:	d1f3      	bne.n	800499c <HAL_UART_IRQHandler+0x2b0>
        huart->RxState = HAL_UART_STATE_READY;
 80049b4:	2220      	movs	r2, #32
 80049b6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ba:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	f103 020c 	add.w	r2, r3, #12
 80049c0:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c8:	f103 050c 	add.w	r5, r3, #12
 80049cc:	e845 2000 	strex	r0, r2, [r5]
 80049d0:	2800      	cmp	r0, #0
 80049d2:	d1f3      	bne.n	80049bc <HAL_UART_IRQHandler+0x2d0>
        huart->RxEventCallback(huart, nb_rx_data);
 80049d4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80049d6:	4620      	mov	r0, r4
}
 80049d8:	b003      	add	sp, #12
 80049da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        huart->RxEventCallback(huart, nb_rx_data);
 80049de:	4718      	bx	r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e0:	6922      	ldr	r2, [r4, #16]
 80049e2:	2a00      	cmp	r2, #0
 80049e4:	f47f af62 	bne.w	80048ac <HAL_UART_IRQHandler+0x1c0>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049e8:	6a22      	ldr	r2, [r4, #32]
 80049ea:	f832 1b02 	ldrh.w	r1, [r2], #2
 80049ee:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80049f2:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049f4:	6222      	str	r2, [r4, #32]
 80049f6:	e75e      	b.n	80048b6 <HAL_UART_IRQHandler+0x1ca>
 80049f8:	0800431d 	.word	0x0800431d

080049fc <malloc>:
 80049fc:	4b02      	ldr	r3, [pc, #8]	; (8004a08 <malloc+0xc>)
 80049fe:	4601      	mov	r1, r0
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	f000 b82b 	b.w	8004a5c <_malloc_r>
 8004a06:	bf00      	nop
 8004a08:	20000088 	.word	0x20000088

08004a0c <free>:
 8004a0c:	4b02      	ldr	r3, [pc, #8]	; (8004a18 <free+0xc>)
 8004a0e:	4601      	mov	r1, r0
 8004a10:	6818      	ldr	r0, [r3, #0]
 8004a12:	f000 b979 	b.w	8004d08 <_free_r>
 8004a16:	bf00      	nop
 8004a18:	20000088 	.word	0x20000088

08004a1c <sbrk_aligned>:
 8004a1c:	b570      	push	{r4, r5, r6, lr}
 8004a1e:	4e0e      	ldr	r6, [pc, #56]	; (8004a58 <sbrk_aligned+0x3c>)
 8004a20:	460c      	mov	r4, r1
 8004a22:	6831      	ldr	r1, [r6, #0]
 8004a24:	4605      	mov	r5, r0
 8004a26:	b911      	cbnz	r1, 8004a2e <sbrk_aligned+0x12>
 8004a28:	f000 f924 	bl	8004c74 <_sbrk_r>
 8004a2c:	6030      	str	r0, [r6, #0]
 8004a2e:	4621      	mov	r1, r4
 8004a30:	4628      	mov	r0, r5
 8004a32:	f000 f91f 	bl	8004c74 <_sbrk_r>
 8004a36:	1c43      	adds	r3, r0, #1
 8004a38:	d00a      	beq.n	8004a50 <sbrk_aligned+0x34>
 8004a3a:	1cc4      	adds	r4, r0, #3
 8004a3c:	f024 0403 	bic.w	r4, r4, #3
 8004a40:	42a0      	cmp	r0, r4
 8004a42:	d007      	beq.n	8004a54 <sbrk_aligned+0x38>
 8004a44:	1a21      	subs	r1, r4, r0
 8004a46:	4628      	mov	r0, r5
 8004a48:	f000 f914 	bl	8004c74 <_sbrk_r>
 8004a4c:	3001      	adds	r0, #1
 8004a4e:	d101      	bne.n	8004a54 <sbrk_aligned+0x38>
 8004a50:	f04f 34ff 	mov.w	r4, #4294967295
 8004a54:	4620      	mov	r0, r4
 8004a56:	bd70      	pop	{r4, r5, r6, pc}
 8004a58:	20000f14 	.word	0x20000f14

08004a5c <_malloc_r>:
 8004a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a60:	1ccd      	adds	r5, r1, #3
 8004a62:	f025 0503 	bic.w	r5, r5, #3
 8004a66:	3508      	adds	r5, #8
 8004a68:	2d0c      	cmp	r5, #12
 8004a6a:	bf38      	it	cc
 8004a6c:	250c      	movcc	r5, #12
 8004a6e:	2d00      	cmp	r5, #0
 8004a70:	4607      	mov	r7, r0
 8004a72:	db01      	blt.n	8004a78 <_malloc_r+0x1c>
 8004a74:	42a9      	cmp	r1, r5
 8004a76:	d905      	bls.n	8004a84 <_malloc_r+0x28>
 8004a78:	230c      	movs	r3, #12
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	2600      	movs	r6, #0
 8004a7e:	4630      	mov	r0, r6
 8004a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004b58 <_malloc_r+0xfc>
 8004a88:	f000 f868 	bl	8004b5c <__malloc_lock>
 8004a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a90:	461c      	mov	r4, r3
 8004a92:	bb5c      	cbnz	r4, 8004aec <_malloc_r+0x90>
 8004a94:	4629      	mov	r1, r5
 8004a96:	4638      	mov	r0, r7
 8004a98:	f7ff ffc0 	bl	8004a1c <sbrk_aligned>
 8004a9c:	1c43      	adds	r3, r0, #1
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	d155      	bne.n	8004b4e <_malloc_r+0xf2>
 8004aa2:	f8d8 4000 	ldr.w	r4, [r8]
 8004aa6:	4626      	mov	r6, r4
 8004aa8:	2e00      	cmp	r6, #0
 8004aaa:	d145      	bne.n	8004b38 <_malloc_r+0xdc>
 8004aac:	2c00      	cmp	r4, #0
 8004aae:	d048      	beq.n	8004b42 <_malloc_r+0xe6>
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	4631      	mov	r1, r6
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	eb04 0903 	add.w	r9, r4, r3
 8004aba:	f000 f8db 	bl	8004c74 <_sbrk_r>
 8004abe:	4581      	cmp	r9, r0
 8004ac0:	d13f      	bne.n	8004b42 <_malloc_r+0xe6>
 8004ac2:	6821      	ldr	r1, [r4, #0]
 8004ac4:	1a6d      	subs	r5, r5, r1
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	4638      	mov	r0, r7
 8004aca:	f7ff ffa7 	bl	8004a1c <sbrk_aligned>
 8004ace:	3001      	adds	r0, #1
 8004ad0:	d037      	beq.n	8004b42 <_malloc_r+0xe6>
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	442b      	add	r3, r5
 8004ad6:	6023      	str	r3, [r4, #0]
 8004ad8:	f8d8 3000 	ldr.w	r3, [r8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d038      	beq.n	8004b52 <_malloc_r+0xf6>
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	42a2      	cmp	r2, r4
 8004ae4:	d12b      	bne.n	8004b3e <_malloc_r+0xe2>
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	605a      	str	r2, [r3, #4]
 8004aea:	e00f      	b.n	8004b0c <_malloc_r+0xb0>
 8004aec:	6822      	ldr	r2, [r4, #0]
 8004aee:	1b52      	subs	r2, r2, r5
 8004af0:	d41f      	bmi.n	8004b32 <_malloc_r+0xd6>
 8004af2:	2a0b      	cmp	r2, #11
 8004af4:	d917      	bls.n	8004b26 <_malloc_r+0xca>
 8004af6:	1961      	adds	r1, r4, r5
 8004af8:	42a3      	cmp	r3, r4
 8004afa:	6025      	str	r5, [r4, #0]
 8004afc:	bf18      	it	ne
 8004afe:	6059      	strne	r1, [r3, #4]
 8004b00:	6863      	ldr	r3, [r4, #4]
 8004b02:	bf08      	it	eq
 8004b04:	f8c8 1000 	streq.w	r1, [r8]
 8004b08:	5162      	str	r2, [r4, r5]
 8004b0a:	604b      	str	r3, [r1, #4]
 8004b0c:	4638      	mov	r0, r7
 8004b0e:	f104 060b 	add.w	r6, r4, #11
 8004b12:	f000 f829 	bl	8004b68 <__malloc_unlock>
 8004b16:	f026 0607 	bic.w	r6, r6, #7
 8004b1a:	1d23      	adds	r3, r4, #4
 8004b1c:	1af2      	subs	r2, r6, r3
 8004b1e:	d0ae      	beq.n	8004a7e <_malloc_r+0x22>
 8004b20:	1b9b      	subs	r3, r3, r6
 8004b22:	50a3      	str	r3, [r4, r2]
 8004b24:	e7ab      	b.n	8004a7e <_malloc_r+0x22>
 8004b26:	42a3      	cmp	r3, r4
 8004b28:	6862      	ldr	r2, [r4, #4]
 8004b2a:	d1dd      	bne.n	8004ae8 <_malloc_r+0x8c>
 8004b2c:	f8c8 2000 	str.w	r2, [r8]
 8004b30:	e7ec      	b.n	8004b0c <_malloc_r+0xb0>
 8004b32:	4623      	mov	r3, r4
 8004b34:	6864      	ldr	r4, [r4, #4]
 8004b36:	e7ac      	b.n	8004a92 <_malloc_r+0x36>
 8004b38:	4634      	mov	r4, r6
 8004b3a:	6876      	ldr	r6, [r6, #4]
 8004b3c:	e7b4      	b.n	8004aa8 <_malloc_r+0x4c>
 8004b3e:	4613      	mov	r3, r2
 8004b40:	e7cc      	b.n	8004adc <_malloc_r+0x80>
 8004b42:	230c      	movs	r3, #12
 8004b44:	603b      	str	r3, [r7, #0]
 8004b46:	4638      	mov	r0, r7
 8004b48:	f000 f80e 	bl	8004b68 <__malloc_unlock>
 8004b4c:	e797      	b.n	8004a7e <_malloc_r+0x22>
 8004b4e:	6025      	str	r5, [r4, #0]
 8004b50:	e7dc      	b.n	8004b0c <_malloc_r+0xb0>
 8004b52:	605b      	str	r3, [r3, #4]
 8004b54:	deff      	udf	#255	; 0xff
 8004b56:	bf00      	nop
 8004b58:	20000f10 	.word	0x20000f10

08004b5c <__malloc_lock>:
 8004b5c:	4801      	ldr	r0, [pc, #4]	; (8004b64 <__malloc_lock+0x8>)
 8004b5e:	f000 b8c3 	b.w	8004ce8 <__retarget_lock_acquire_recursive>
 8004b62:	bf00      	nop
 8004b64:	20001054 	.word	0x20001054

08004b68 <__malloc_unlock>:
 8004b68:	4801      	ldr	r0, [pc, #4]	; (8004b70 <__malloc_unlock+0x8>)
 8004b6a:	f000 b8be 	b.w	8004cea <__retarget_lock_release_recursive>
 8004b6e:	bf00      	nop
 8004b70:	20001054 	.word	0x20001054

08004b74 <memset>:
 8004b74:	4402      	add	r2, r0
 8004b76:	4603      	mov	r3, r0
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d100      	bne.n	8004b7e <memset+0xa>
 8004b7c:	4770      	bx	lr
 8004b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b82:	e7f9      	b.n	8004b78 <memset+0x4>

08004b84 <_init_signal_r>:
 8004b84:	b538      	push	{r3, r4, r5, lr}
 8004b86:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8004b88:	4604      	mov	r4, r0
 8004b8a:	b955      	cbnz	r5, 8004ba2 <_init_signal_r+0x1e>
 8004b8c:	2180      	movs	r1, #128	; 0x80
 8004b8e:	f7ff ff65 	bl	8004a5c <_malloc_r>
 8004b92:	63e0      	str	r0, [r4, #60]	; 0x3c
 8004b94:	b138      	cbz	r0, 8004ba6 <_init_signal_r+0x22>
 8004b96:	1f03      	subs	r3, r0, #4
 8004b98:	307c      	adds	r0, #124	; 0x7c
 8004b9a:	f843 5f04 	str.w	r5, [r3, #4]!
 8004b9e:	4283      	cmp	r3, r0
 8004ba0:	d1fb      	bne.n	8004b9a <_init_signal_r+0x16>
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	bd38      	pop	{r3, r4, r5, pc}
 8004ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8004baa:	e7fb      	b.n	8004ba4 <_init_signal_r+0x20>

08004bac <_signal_r>:
 8004bac:	291f      	cmp	r1, #31
 8004bae:	b570      	push	{r4, r5, r6, lr}
 8004bb0:	4604      	mov	r4, r0
 8004bb2:	460d      	mov	r5, r1
 8004bb4:	4616      	mov	r6, r2
 8004bb6:	d904      	bls.n	8004bc2 <_signal_r+0x16>
 8004bb8:	2316      	movs	r3, #22
 8004bba:	6003      	str	r3, [r0, #0]
 8004bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc0:	e006      	b.n	8004bd0 <_signal_r+0x24>
 8004bc2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004bc4:	b12b      	cbz	r3, 8004bd2 <_signal_r+0x26>
 8004bc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004bc8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004bcc:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 8004bd0:	bd70      	pop	{r4, r5, r6, pc}
 8004bd2:	f7ff ffd7 	bl	8004b84 <_init_signal_r>
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d0f5      	beq.n	8004bc6 <_signal_r+0x1a>
 8004bda:	e7ef      	b.n	8004bbc <_signal_r+0x10>

08004bdc <_raise_r>:
 8004bdc:	291f      	cmp	r1, #31
 8004bde:	b538      	push	{r3, r4, r5, lr}
 8004be0:	4604      	mov	r4, r0
 8004be2:	460d      	mov	r5, r1
 8004be4:	d904      	bls.n	8004bf0 <_raise_r+0x14>
 8004be6:	2316      	movs	r3, #22
 8004be8:	6003      	str	r3, [r0, #0]
 8004bea:	f04f 30ff 	mov.w	r0, #4294967295
 8004bee:	bd38      	pop	{r3, r4, r5, pc}
 8004bf0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004bf2:	b112      	cbz	r2, 8004bfa <_raise_r+0x1e>
 8004bf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004bf8:	b94b      	cbnz	r3, 8004c0e <_raise_r+0x32>
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f000 f838 	bl	8004c70 <_getpid_r>
 8004c00:	462a      	mov	r2, r5
 8004c02:	4601      	mov	r1, r0
 8004c04:	4620      	mov	r0, r4
 8004c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c0a:	f000 b81f 	b.w	8004c4c <_kill_r>
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d00a      	beq.n	8004c28 <_raise_r+0x4c>
 8004c12:	1c59      	adds	r1, r3, #1
 8004c14:	d103      	bne.n	8004c1e <_raise_r+0x42>
 8004c16:	2316      	movs	r3, #22
 8004c18:	6003      	str	r3, [r0, #0]
 8004c1a:	2001      	movs	r0, #1
 8004c1c:	e7e7      	b.n	8004bee <_raise_r+0x12>
 8004c1e:	2400      	movs	r4, #0
 8004c20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004c24:	4628      	mov	r0, r5
 8004c26:	4798      	blx	r3
 8004c28:	2000      	movs	r0, #0
 8004c2a:	e7e0      	b.n	8004bee <_raise_r+0x12>

08004c2c <raise>:
 8004c2c:	4b02      	ldr	r3, [pc, #8]	; (8004c38 <raise+0xc>)
 8004c2e:	4601      	mov	r1, r0
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	f7ff bfd3 	b.w	8004bdc <_raise_r>
 8004c36:	bf00      	nop
 8004c38:	20000088 	.word	0x20000088

08004c3c <signal>:
 8004c3c:	4b02      	ldr	r3, [pc, #8]	; (8004c48 <signal+0xc>)
 8004c3e:	460a      	mov	r2, r1
 8004c40:	4601      	mov	r1, r0
 8004c42:	6818      	ldr	r0, [r3, #0]
 8004c44:	f7ff bfb2 	b.w	8004bac <_signal_r>
 8004c48:	20000088 	.word	0x20000088

08004c4c <_kill_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4d07      	ldr	r5, [pc, #28]	; (8004c6c <_kill_r+0x20>)
 8004c50:	2300      	movs	r3, #0
 8004c52:	4604      	mov	r4, r0
 8004c54:	4608      	mov	r0, r1
 8004c56:	4611      	mov	r1, r2
 8004c58:	602b      	str	r3, [r5, #0]
 8004c5a:	f7fd f965 	bl	8001f28 <_kill>
 8004c5e:	1c43      	adds	r3, r0, #1
 8004c60:	d102      	bne.n	8004c68 <_kill_r+0x1c>
 8004c62:	682b      	ldr	r3, [r5, #0]
 8004c64:	b103      	cbz	r3, 8004c68 <_kill_r+0x1c>
 8004c66:	6023      	str	r3, [r4, #0]
 8004c68:	bd38      	pop	{r3, r4, r5, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20001050 	.word	0x20001050

08004c70 <_getpid_r>:
 8004c70:	f7fd b958 	b.w	8001f24 <_getpid>

08004c74 <_sbrk_r>:
 8004c74:	b538      	push	{r3, r4, r5, lr}
 8004c76:	4d06      	ldr	r5, [pc, #24]	; (8004c90 <_sbrk_r+0x1c>)
 8004c78:	2300      	movs	r3, #0
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	4608      	mov	r0, r1
 8004c7e:	602b      	str	r3, [r5, #0]
 8004c80:	f7fd f95a 	bl	8001f38 <_sbrk>
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	d102      	bne.n	8004c8e <_sbrk_r+0x1a>
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	b103      	cbz	r3, 8004c8e <_sbrk_r+0x1a>
 8004c8c:	6023      	str	r3, [r4, #0]
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
 8004c90:	20001050 	.word	0x20001050

08004c94 <__errno>:
 8004c94:	4b01      	ldr	r3, [pc, #4]	; (8004c9c <__errno+0x8>)
 8004c96:	6818      	ldr	r0, [r3, #0]
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	20000088 	.word	0x20000088

08004ca0 <__libc_init_array>:
 8004ca0:	b570      	push	{r4, r5, r6, lr}
 8004ca2:	4d0d      	ldr	r5, [pc, #52]	; (8004cd8 <__libc_init_array+0x38>)
 8004ca4:	4c0d      	ldr	r4, [pc, #52]	; (8004cdc <__libc_init_array+0x3c>)
 8004ca6:	1b64      	subs	r4, r4, r5
 8004ca8:	10a4      	asrs	r4, r4, #2
 8004caa:	2600      	movs	r6, #0
 8004cac:	42a6      	cmp	r6, r4
 8004cae:	d109      	bne.n	8004cc4 <__libc_init_array+0x24>
 8004cb0:	4d0b      	ldr	r5, [pc, #44]	; (8004ce0 <__libc_init_array+0x40>)
 8004cb2:	4c0c      	ldr	r4, [pc, #48]	; (8004ce4 <__libc_init_array+0x44>)
 8004cb4:	f000 f874 	bl	8004da0 <_init>
 8004cb8:	1b64      	subs	r4, r4, r5
 8004cba:	10a4      	asrs	r4, r4, #2
 8004cbc:	2600      	movs	r6, #0
 8004cbe:	42a6      	cmp	r6, r4
 8004cc0:	d105      	bne.n	8004cce <__libc_init_array+0x2e>
 8004cc2:	bd70      	pop	{r4, r5, r6, pc}
 8004cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc8:	4798      	blx	r3
 8004cca:	3601      	adds	r6, #1
 8004ccc:	e7ee      	b.n	8004cac <__libc_init_array+0xc>
 8004cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cd2:	4798      	blx	r3
 8004cd4:	3601      	adds	r6, #1
 8004cd6:	e7f2      	b.n	8004cbe <__libc_init_array+0x1e>
 8004cd8:	08004ee8 	.word	0x08004ee8
 8004cdc:	08004ee8 	.word	0x08004ee8
 8004ce0:	08004ee8 	.word	0x08004ee8
 8004ce4:	08004eec 	.word	0x08004eec

08004ce8 <__retarget_lock_acquire_recursive>:
 8004ce8:	4770      	bx	lr

08004cea <__retarget_lock_release_recursive>:
 8004cea:	4770      	bx	lr

08004cec <memcpy>:
 8004cec:	440a      	add	r2, r1
 8004cee:	4291      	cmp	r1, r2
 8004cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cf4:	d100      	bne.n	8004cf8 <memcpy+0xc>
 8004cf6:	4770      	bx	lr
 8004cf8:	b510      	push	{r4, lr}
 8004cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d02:	4291      	cmp	r1, r2
 8004d04:	d1f9      	bne.n	8004cfa <memcpy+0xe>
 8004d06:	bd10      	pop	{r4, pc}

08004d08 <_free_r>:
 8004d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d0a:	2900      	cmp	r1, #0
 8004d0c:	d044      	beq.n	8004d98 <_free_r+0x90>
 8004d0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d12:	9001      	str	r0, [sp, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f1a1 0404 	sub.w	r4, r1, #4
 8004d1a:	bfb8      	it	lt
 8004d1c:	18e4      	addlt	r4, r4, r3
 8004d1e:	f7ff ff1d 	bl	8004b5c <__malloc_lock>
 8004d22:	4a1e      	ldr	r2, [pc, #120]	; (8004d9c <_free_r+0x94>)
 8004d24:	9801      	ldr	r0, [sp, #4]
 8004d26:	6813      	ldr	r3, [r2, #0]
 8004d28:	b933      	cbnz	r3, 8004d38 <_free_r+0x30>
 8004d2a:	6063      	str	r3, [r4, #4]
 8004d2c:	6014      	str	r4, [r2, #0]
 8004d2e:	b003      	add	sp, #12
 8004d30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d34:	f7ff bf18 	b.w	8004b68 <__malloc_unlock>
 8004d38:	42a3      	cmp	r3, r4
 8004d3a:	d908      	bls.n	8004d4e <_free_r+0x46>
 8004d3c:	6825      	ldr	r5, [r4, #0]
 8004d3e:	1961      	adds	r1, r4, r5
 8004d40:	428b      	cmp	r3, r1
 8004d42:	bf01      	itttt	eq
 8004d44:	6819      	ldreq	r1, [r3, #0]
 8004d46:	685b      	ldreq	r3, [r3, #4]
 8004d48:	1949      	addeq	r1, r1, r5
 8004d4a:	6021      	streq	r1, [r4, #0]
 8004d4c:	e7ed      	b.n	8004d2a <_free_r+0x22>
 8004d4e:	461a      	mov	r2, r3
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	b10b      	cbz	r3, 8004d58 <_free_r+0x50>
 8004d54:	42a3      	cmp	r3, r4
 8004d56:	d9fa      	bls.n	8004d4e <_free_r+0x46>
 8004d58:	6811      	ldr	r1, [r2, #0]
 8004d5a:	1855      	adds	r5, r2, r1
 8004d5c:	42a5      	cmp	r5, r4
 8004d5e:	d10b      	bne.n	8004d78 <_free_r+0x70>
 8004d60:	6824      	ldr	r4, [r4, #0]
 8004d62:	4421      	add	r1, r4
 8004d64:	1854      	adds	r4, r2, r1
 8004d66:	42a3      	cmp	r3, r4
 8004d68:	6011      	str	r1, [r2, #0]
 8004d6a:	d1e0      	bne.n	8004d2e <_free_r+0x26>
 8004d6c:	681c      	ldr	r4, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	6053      	str	r3, [r2, #4]
 8004d72:	440c      	add	r4, r1
 8004d74:	6014      	str	r4, [r2, #0]
 8004d76:	e7da      	b.n	8004d2e <_free_r+0x26>
 8004d78:	d902      	bls.n	8004d80 <_free_r+0x78>
 8004d7a:	230c      	movs	r3, #12
 8004d7c:	6003      	str	r3, [r0, #0]
 8004d7e:	e7d6      	b.n	8004d2e <_free_r+0x26>
 8004d80:	6825      	ldr	r5, [r4, #0]
 8004d82:	1961      	adds	r1, r4, r5
 8004d84:	428b      	cmp	r3, r1
 8004d86:	bf04      	itt	eq
 8004d88:	6819      	ldreq	r1, [r3, #0]
 8004d8a:	685b      	ldreq	r3, [r3, #4]
 8004d8c:	6063      	str	r3, [r4, #4]
 8004d8e:	bf04      	itt	eq
 8004d90:	1949      	addeq	r1, r1, r5
 8004d92:	6021      	streq	r1, [r4, #0]
 8004d94:	6054      	str	r4, [r2, #4]
 8004d96:	e7ca      	b.n	8004d2e <_free_r+0x26>
 8004d98:	b003      	add	sp, #12
 8004d9a:	bd30      	pop	{r4, r5, pc}
 8004d9c:	20000f10 	.word	0x20000f10

08004da0 <_init>:
 8004da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da2:	bf00      	nop
 8004da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da6:	bc08      	pop	{r3}
 8004da8:	469e      	mov	lr, r3
 8004daa:	4770      	bx	lr

08004dac <_fini>:
 8004dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dae:	bf00      	nop
 8004db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db2:	bc08      	pop	{r3}
 8004db4:	469e      	mov	lr, r3
 8004db6:	4770      	bx	lr
