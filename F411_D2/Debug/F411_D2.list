
F411_D2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  0800ea48  0800ea48  0001ea48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eddc  0800eddc  00020250  2**0
                  CONTENTS
  4 .ARM          00000008  0800eddc  0800eddc  0001eddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ede4  0800ede4  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ede4  0800ede4  0001ede4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ede8  0800ede8  0001ede8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0800edec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d9c  20000250  0800f03c  00020250  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000fec  0800f03c  00020fec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002020a  00000000  00000000  000202c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c4f  00000000  00000000  000404cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b90  00000000  00000000  00045120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000155d  00000000  00000000  00046cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d621  00000000  00000000  0004820d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000246fb  00000000  00000000  0006582e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a08a1  00000000  00000000  00089f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007f44  00000000  00000000  0012a7cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00132710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000250 	.word	0x20000250
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ea30 	.word	0x0800ea30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000254 	.word	0x20000254
 80001dc:	0800ea30 	.word	0x0800ea30

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b970 	b.w	8000e84 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	460d      	mov	r5, r1
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	460f      	mov	r7, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14a      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4694      	mov	ip, r2
 8000bd0:	d965      	bls.n	8000c9e <__udivmoddi4+0xe2>
 8000bd2:	fab2 f382 	clz	r3, r2
 8000bd6:	b143      	cbz	r3, 8000bea <__udivmoddi4+0x2e>
 8000bd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bdc:	f1c3 0220 	rsb	r2, r3, #32
 8000be0:	409f      	lsls	r7, r3
 8000be2:	fa20 f202 	lsr.w	r2, r0, r2
 8000be6:	4317      	orrs	r7, r2
 8000be8:	409c      	lsls	r4, r3
 8000bea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bee:	fa1f f58c 	uxth.w	r5, ip
 8000bf2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bf6:	0c22      	lsrs	r2, r4, #16
 8000bf8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c00:	fb01 f005 	mul.w	r0, r1, r5
 8000c04:	4290      	cmp	r0, r2
 8000c06:	d90a      	bls.n	8000c1e <__udivmoddi4+0x62>
 8000c08:	eb1c 0202 	adds.w	r2, ip, r2
 8000c0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c10:	f080 811c 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c14:	4290      	cmp	r0, r2
 8000c16:	f240 8119 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c1a:	3902      	subs	r1, #2
 8000c1c:	4462      	add	r2, ip
 8000c1e:	1a12      	subs	r2, r2, r0
 8000c20:	b2a4      	uxth	r4, r4
 8000c22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c2e:	fb00 f505 	mul.w	r5, r0, r5
 8000c32:	42a5      	cmp	r5, r4
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x90>
 8000c36:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c3e:	f080 8107 	bcs.w	8000e50 <__udivmoddi4+0x294>
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	f240 8104 	bls.w	8000e50 <__udivmoddi4+0x294>
 8000c48:	4464      	add	r4, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c50:	1b64      	subs	r4, r4, r5
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11e      	cbz	r6, 8000c5e <__udivmoddi4+0xa2>
 8000c56:	40dc      	lsrs	r4, r3
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0xbc>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80ed 	beq.w	8000e46 <__udivmoddi4+0x28a>
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c72:	4608      	mov	r0, r1
 8000c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c78:	fab3 f183 	clz	r1, r3
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	d149      	bne.n	8000d14 <__udivmoddi4+0x158>
 8000c80:	42ab      	cmp	r3, r5
 8000c82:	d302      	bcc.n	8000c8a <__udivmoddi4+0xce>
 8000c84:	4282      	cmp	r2, r0
 8000c86:	f200 80f8 	bhi.w	8000e7a <__udivmoddi4+0x2be>
 8000c8a:	1a84      	subs	r4, r0, r2
 8000c8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c90:	2001      	movs	r0, #1
 8000c92:	4617      	mov	r7, r2
 8000c94:	2e00      	cmp	r6, #0
 8000c96:	d0e2      	beq.n	8000c5e <__udivmoddi4+0xa2>
 8000c98:	e9c6 4700 	strd	r4, r7, [r6]
 8000c9c:	e7df      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xe6>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f382 	clz	r3, r2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8090 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cac:	1a8a      	subs	r2, r1, r2
 8000cae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb2:	fa1f fe8c 	uxth.w	lr, ip
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cc0:	0c22      	lsrs	r2, r4, #16
 8000cc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cc6:	fb0e f005 	mul.w	r0, lr, r5
 8000cca:	4290      	cmp	r0, r2
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cce:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4290      	cmp	r0, r2
 8000cda:	f200 80cb 	bhi.w	8000e74 <__udivmoddi4+0x2b8>
 8000cde:	4645      	mov	r5, r8
 8000ce0:	1a12      	subs	r2, r2, r0
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ce8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf4:	45a6      	cmp	lr, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x14e>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d00:	d202      	bcs.n	8000d08 <__udivmoddi4+0x14c>
 8000d02:	45a6      	cmp	lr, r4
 8000d04:	f200 80bb 	bhi.w	8000e7e <__udivmoddi4+0x2c2>
 8000d08:	4610      	mov	r0, r2
 8000d0a:	eba4 040e 	sub.w	r4, r4, lr
 8000d0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d12:	e79f      	b.n	8000c54 <__udivmoddi4+0x98>
 8000d14:	f1c1 0720 	rsb	r7, r1, #32
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d22:	fa05 f401 	lsl.w	r4, r5, r1
 8000d26:	fa20 f307 	lsr.w	r3, r0, r7
 8000d2a:	40fd      	lsrs	r5, r7
 8000d2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d3e:	0c1c      	lsrs	r4, r3, #16
 8000d40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d44:	fb08 f50e 	mul.w	r5, r8, lr
 8000d48:	42a5      	cmp	r5, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d5c:	f080 8088 	bcs.w	8000e70 <__udivmoddi4+0x2b4>
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	f240 8085 	bls.w	8000e70 <__udivmoddi4+0x2b4>
 8000d66:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6a:	4464      	add	r4, ip
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	b29d      	uxth	r5, r3
 8000d70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d74:	fb09 4413 	mls	r4, r9, r3, r4
 8000d78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d8c:	d26c      	bcs.n	8000e68 <__udivmoddi4+0x2ac>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	d96a      	bls.n	8000e68 <__udivmoddi4+0x2ac>
 8000d92:	3b02      	subs	r3, #2
 8000d94:	4464      	add	r4, ip
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	42ac      	cmp	r4, r5
 8000da4:	46c8      	mov	r8, r9
 8000da6:	46ae      	mov	lr, r5
 8000da8:	d356      	bcc.n	8000e58 <__udivmoddi4+0x29c>
 8000daa:	d053      	beq.n	8000e54 <__udivmoddi4+0x298>
 8000dac:	b156      	cbz	r6, 8000dc4 <__udivmoddi4+0x208>
 8000dae:	ebb0 0208 	subs.w	r2, r0, r8
 8000db2:	eb64 040e 	sbc.w	r4, r4, lr
 8000db6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dba:	40ca      	lsrs	r2, r1
 8000dbc:	40cc      	lsrs	r4, r1
 8000dbe:	4317      	orrs	r7, r2
 8000dc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dcc:	f1c3 0120 	rsb	r1, r3, #32
 8000dd0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dd4:	fa20 f201 	lsr.w	r2, r0, r1
 8000dd8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ddc:	409d      	lsls	r5, r3
 8000dde:	432a      	orrs	r2, r5
 8000de0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de4:	fa1f fe8c 	uxth.w	lr, ip
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1510 	mls	r5, r7, r0, r1
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000df6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dfa:	428d      	cmp	r5, r1
 8000dfc:	fa04 f403 	lsl.w	r4, r4, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x258>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e0a:	d22f      	bcs.n	8000e6c <__udivmoddi4+0x2b0>
 8000e0c:	428d      	cmp	r5, r1
 8000e0e:	d92d      	bls.n	8000e6c <__udivmoddi4+0x2b0>
 8000e10:	3802      	subs	r0, #2
 8000e12:	4461      	add	r1, ip
 8000e14:	1b49      	subs	r1, r1, r5
 8000e16:	b292      	uxth	r2, r2
 8000e18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e24:	fb05 f10e 	mul.w	r1, r5, lr
 8000e28:	4291      	cmp	r1, r2
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x282>
 8000e2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e34:	d216      	bcs.n	8000e64 <__udivmoddi4+0x2a8>
 8000e36:	4291      	cmp	r1, r2
 8000e38:	d914      	bls.n	8000e64 <__udivmoddi4+0x2a8>
 8000e3a:	3d02      	subs	r5, #2
 8000e3c:	4462      	add	r2, ip
 8000e3e:	1a52      	subs	r2, r2, r1
 8000e40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e44:	e738      	b.n	8000cb8 <__udivmoddi4+0xfc>
 8000e46:	4631      	mov	r1, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e708      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000e4c:	4639      	mov	r1, r7
 8000e4e:	e6e6      	b.n	8000c1e <__udivmoddi4+0x62>
 8000e50:	4610      	mov	r0, r2
 8000e52:	e6fb      	b.n	8000c4c <__udivmoddi4+0x90>
 8000e54:	4548      	cmp	r0, r9
 8000e56:	d2a9      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e58:	ebb9 0802 	subs.w	r8, r9, r2
 8000e5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e60:	3b01      	subs	r3, #1
 8000e62:	e7a3      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e64:	4645      	mov	r5, r8
 8000e66:	e7ea      	b.n	8000e3e <__udivmoddi4+0x282>
 8000e68:	462b      	mov	r3, r5
 8000e6a:	e794      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	e7d1      	b.n	8000e14 <__udivmoddi4+0x258>
 8000e70:	46d0      	mov	r8, sl
 8000e72:	e77b      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e74:	3d02      	subs	r5, #2
 8000e76:	4462      	add	r2, ip
 8000e78:	e732      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e70a      	b.n	8000c94 <__udivmoddi4+0xd8>
 8000e7e:	4464      	add	r4, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e742      	b.n	8000d0a <__udivmoddi4+0x14e>

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <ahrs_fusion_agm>:
extern float beta;
extern const float COE_DPS_TO_RADPS;
extern volatile float q0, q1, q2, q3;

void ahrs_fusion_agm(AxesRaw_t *accel, AxesRaw_t *gyro, AxesRaw_t *mag,
		AhrsState_t *ahrs) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b0b0      	sub	sp, #192	; 0xc0
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	603b      	str	r3, [r7, #0]
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1,
			_2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2,
			q1q3, q2q2, q2q3, q3q3;

	if ((mag->AXIS_X == 0.0f) && (mag->AXIS_Y == 0.0f)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d110      	bne.n	8000ec2 <ahrs_fusion_agm+0x3a>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10b      	bne.n	8000ec2 <ahrs_fusion_agm+0x3a>
			&& (mag->AXIS_Z == 0.0f)) {
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d106      	bne.n	8000ec2 <ahrs_fusion_agm+0x3a>
		ahrs_fusion_ag(accel, gyro, ahrs);
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	68b9      	ldr	r1, [r7, #8]
 8000eb8:	68f8      	ldr	r0, [r7, #12]
 8000eba:	f005 fb3b 	bl	8006534 <ahrs_fusion_ag>
		return;
 8000ebe:	f000 bf40 	b.w	8001d42 <ahrs_fusion_agm+0xeba>
	}

	axf = (float) accel->AXIS_X;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec8:	ee07 3a90 	vmov	s15, r3
 8000ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ed0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	ayf = (float) accel->AXIS_Y;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000eda:	ee07 3a90 	vmov	s15, r3
 8000ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	azf = (float) accel->AXIS_Z;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ef4:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

	// gdps convert to rad/s
	gxf = ((float) gyro->AXIS_X) * ((float) COE_DPS_TO_RADPS);
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000efe:	ee07 3a90 	vmov	s15, r3
 8000f02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f06:	4be5      	ldr	r3, [pc, #916]	; (800129c <ahrs_fusion_agm+0x414>)
 8000f08:	edd3 7a00 	vldr	s15, [r3]
 8000f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f10:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	gyf = ((float) gyro->AXIS_Y) * ((float) COE_DPS_TO_RADPS);
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f1a:	ee07 3a90 	vmov	s15, r3
 8000f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f22:	4bde      	ldr	r3, [pc, #888]	; (800129c <ahrs_fusion_agm+0x414>)
 8000f24:	edd3 7a00 	vldr	s15, [r3]
 8000f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f2c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	gzf = ((float) gyro->AXIS_Z) * ((float) COE_DPS_TO_RADPS);
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f36:	ee07 3a90 	vmov	s15, r3
 8000f3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f3e:	4bd7      	ldr	r3, [pc, #860]	; (800129c <ahrs_fusion_agm+0x414>)
 8000f40:	edd3 7a00 	vldr	s15, [r3]
 8000f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f48:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98

	mxf = (float) mag->AXIS_X * ((float) COE_DPS_TO_RADPS);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f5a:	4bd0      	ldr	r3, [pc, #832]	; (800129c <ahrs_fusion_agm+0x414>)
 8000f5c:	edd3 7a00 	vldr	s15, [r3]
 8000f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f64:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	myf = (float) mag->AXIS_Y * ((float) COE_DPS_TO_RADPS);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f76:	4bc9      	ldr	r3, [pc, #804]	; (800129c <ahrs_fusion_agm+0x414>)
 8000f78:	edd3 7a00 	vldr	s15, [r3]
 8000f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f80:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	mzf = -(float) mag->AXIS_Z * ((float) COE_DPS_TO_RADPS);// FIXME check sign and rotation direction
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f8a:	ee07 3a90 	vmov	s15, r3
 8000f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f92:	eeb1 7a67 	vneg.f32	s14, s15
 8000f96:	4bc1      	ldr	r3, [pc, #772]	; (800129c <ahrs_fusion_agm+0x414>)
 8000f98:	edd3 7a00 	vldr	s15, [r3]
 8000f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa0:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

	// Rate of change of quaternion from gyroscope
	qDot1 = (-q1 * gxf - q2 * gyf - q3 * gxf) * 0.5f;
 8000fa4:	4bbe      	ldr	r3, [pc, #760]	; (80012a0 <ahrs_fusion_agm+0x418>)
 8000fa6:	edd3 7a00 	vldr	s15, [r3]
 8000faa:	eeb1 7a67 	vneg.f32	s14, s15
 8000fae:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8000fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fb6:	4bbb      	ldr	r3, [pc, #748]	; (80012a4 <ahrs_fusion_agm+0x41c>)
 8000fb8:	edd3 6a00 	vldr	s13, [r3]
 8000fbc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8000fc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fc8:	4bb7      	ldr	r3, [pc, #732]	; (80012a8 <ahrs_fusion_agm+0x420>)
 8000fca:	edd3 6a00 	vldr	s13, [r3]
 8000fce:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8000fd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fda:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000fde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe2:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	qDot2 = (q0 * gxf + q2 * gzf - q3 * gyf) * 0.5f;
 8000fe6:	4bb1      	ldr	r3, [pc, #708]	; (80012ac <ahrs_fusion_agm+0x424>)
 8000fe8:	ed93 7a00 	vldr	s14, [r3]
 8000fec:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8000ff0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ff4:	4bab      	ldr	r3, [pc, #684]	; (80012a4 <ahrs_fusion_agm+0x41c>)
 8000ff6:	edd3 6a00 	vldr	s13, [r3]
 8000ffa:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8000ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001002:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001006:	4ba8      	ldr	r3, [pc, #672]	; (80012a8 <ahrs_fusion_agm+0x420>)
 8001008:	edd3 6a00 	vldr	s13, [r3]
 800100c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001018:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800101c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001020:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	qDot3 = (q0 * gyf - q1 * gzf + q3 * gxf) * 0.5f;
 8001024:	4ba1      	ldr	r3, [pc, #644]	; (80012ac <ahrs_fusion_agm+0x424>)
 8001026:	ed93 7a00 	vldr	s14, [r3]
 800102a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800102e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001032:	4b9b      	ldr	r3, [pc, #620]	; (80012a0 <ahrs_fusion_agm+0x418>)
 8001034:	edd3 6a00 	vldr	s13, [r3]
 8001038:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800103c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001040:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001044:	4b98      	ldr	r3, [pc, #608]	; (80012a8 <ahrs_fusion_agm+0x420>)
 8001046:	edd3 6a00 	vldr	s13, [r3]
 800104a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800104e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001056:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800105a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800105e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot4 = (q0 * gzf + q1 * gyf - q2 * gxf) * 0.5f;
 8001062:	4b92      	ldr	r3, [pc, #584]	; (80012ac <ahrs_fusion_agm+0x424>)
 8001064:	ed93 7a00 	vldr	s14, [r3]
 8001068:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800106c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001070:	4b8b      	ldr	r3, [pc, #556]	; (80012a0 <ahrs_fusion_agm+0x418>)
 8001072:	edd3 6a00 	vldr	s13, [r3]
 8001076:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800107a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800107e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001082:	4b88      	ldr	r3, [pc, #544]	; (80012a4 <ahrs_fusion_agm+0x41c>)
 8001084:	edd3 6a00 	vldr	s13, [r3]
 8001088:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800108c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001094:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001098:	ee67 7a87 	vmul.f32	s15, s15, s14
 800109c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if (!((axf == 0.0f) && (ayf == 0.0f) && (azf == 0.0f))) {
 80010a0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80010a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ac:	d10e      	bne.n	80010cc <ahrs_fusion_agm+0x244>
 80010ae:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80010b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	d107      	bne.n	80010cc <ahrs_fusion_agm+0x244>
 80010bc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80010c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c8:	f000 859f 	beq.w	8001c0a <ahrs_fusion_agm+0xd82>

		// Normalise accelerometer measurement
		norm = math_inv_sqrt(axf * axf + ayf * ayf + azf * azf);
 80010cc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80010d0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80010d4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80010d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010e0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80010e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ec:	eeb0 0a67 	vmov.f32	s0, s15
 80010f0:	f005 fd3e 	bl	8006b70 <math_inv_sqrt>
 80010f4:	ed87 0a22 	vstr	s0, [r7, #136]	; 0x88
		axf *= norm;
 80010f8:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80010fc:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001104:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		ayf *= norm;
 8001108:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800110c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001114:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
		azf *= norm;
 8001118:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800111c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001124:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

		// Normalise magnetometer measurement
		norm = math_inv_sqrt(mxf * mxf + myf * myf + mzf * mzf);
 8001128:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800112c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001130:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001134:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001138:	ee37 7a27 	vadd.f32	s14, s14, s15
 800113c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001140:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001148:	eeb0 0a67 	vmov.f32	s0, s15
 800114c:	f005 fd10 	bl	8006b70 <math_inv_sqrt>
 8001150:	ed87 0a22 	vstr	s0, [r7, #136]	; 0x88
		mxf *= norm;
 8001154:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001158:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800115c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001160:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		myf *= norm;
 8001164:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8001168:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800116c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001170:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		mzf *= norm;
 8001174:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001178:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800117c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001180:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mxf;
 8001184:	4b49      	ldr	r3, [pc, #292]	; (80012ac <ahrs_fusion_agm+0x424>)
 8001186:	edd3 7a00 	vldr	s15, [r3]
 800118a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800118e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001196:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0my = 2.0f * q0 * myf;
 800119a:	4b44      	ldr	r3, [pc, #272]	; (80012ac <ahrs_fusion_agm+0x424>)
 800119c:	edd3 7a00 	vldr	s15, [r3]
 80011a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011a4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80011a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ac:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q0mz = 2.0f * q0 * mzf;
 80011b0:	4b3e      	ldr	r3, [pc, #248]	; (80012ac <ahrs_fusion_agm+0x424>)
 80011b2:	edd3 7a00 	vldr	s15, [r3]
 80011b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011ba:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80011be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c2:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		_2q1mx = 2.0f * q1 * mxf;
 80011c6:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <ahrs_fusion_agm+0x418>)
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011d0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80011d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		_2q0 = 2.0f * q0;
 80011dc:	4b33      	ldr	r3, [pc, #204]	; (80012ac <ahrs_fusion_agm+0x424>)
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011e6:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		_2q1 = 2.0f * q1;
 80011ea:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <ahrs_fusion_agm+0x418>)
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011f4:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		_2q2 = 2.0f * q2;
 80011f8:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <ahrs_fusion_agm+0x41c>)
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001202:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		_2q3 = 2.0f * q3;
 8001206:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <ahrs_fusion_agm+0x420>)
 8001208:	edd3 7a00 	vldr	s15, [r3]
 800120c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001210:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		_2q0q2 = 2.0f * q0 * q2;
 8001214:	4b25      	ldr	r3, [pc, #148]	; (80012ac <ahrs_fusion_agm+0x424>)
 8001216:	edd3 7a00 	vldr	s15, [r3]
 800121a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <ahrs_fusion_agm+0x41c>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001228:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		_2q2q3 = 2.0f * q2 * q3;
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <ahrs_fusion_agm+0x41c>)
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001236:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <ahrs_fusion_agm+0x420>)
 8001238:	edd3 7a00 	vldr	s15, [r3]
 800123c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001240:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q0q0 = q0 * q0;
 8001244:	4b19      	ldr	r3, [pc, #100]	; (80012ac <ahrs_fusion_agm+0x424>)
 8001246:	ed93 7a00 	vldr	s14, [r3]
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <ahrs_fusion_agm+0x424>)
 800124c:	edd3 7a00 	vldr	s15, [r3]
 8001250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001254:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q0q1 = q0 * q1;
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <ahrs_fusion_agm+0x424>)
 800125a:	ed93 7a00 	vldr	s14, [r3]
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <ahrs_fusion_agm+0x418>)
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001268:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q0q2 = q0 * q2;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <ahrs_fusion_agm+0x424>)
 800126e:	ed93 7a00 	vldr	s14, [r3]
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <ahrs_fusion_agm+0x41c>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		q0q3 = q0 * q3;
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <ahrs_fusion_agm+0x424>)
 8001282:	ed93 7a00 	vldr	s14, [r3]
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <ahrs_fusion_agm+0x420>)
 8001288:	edd3 7a00 	vldr	s15, [r3]
 800128c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001290:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		q1q1 = q1 * q1;
 8001294:	4b02      	ldr	r3, [pc, #8]	; (80012a0 <ahrs_fusion_agm+0x418>)
 8001296:	ed93 7a00 	vldr	s14, [r3]
 800129a:	e009      	b.n	80012b0 <ahrs_fusion_agm+0x428>
 800129c:	0800eb68 	.word	0x0800eb68
 80012a0:	20000848 	.word	0x20000848
 80012a4:	2000084c 	.word	0x2000084c
 80012a8:	20000850 	.word	0x20000850
 80012ac:	200001e4 	.word	0x200001e4
 80012b0:	4bf0      	ldr	r3, [pc, #960]	; (8001674 <ahrs_fusion_agm+0x7ec>)
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ba:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		q1q2 = q1 * q2;
 80012be:	4bed      	ldr	r3, [pc, #948]	; (8001674 <ahrs_fusion_agm+0x7ec>)
 80012c0:	ed93 7a00 	vldr	s14, [r3]
 80012c4:	4bec      	ldr	r3, [pc, #944]	; (8001678 <ahrs_fusion_agm+0x7f0>)
 80012c6:	edd3 7a00 	vldr	s15, [r3]
 80012ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ce:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		q1q3 = q1 * q3;
 80012d2:	4be8      	ldr	r3, [pc, #928]	; (8001674 <ahrs_fusion_agm+0x7ec>)
 80012d4:	ed93 7a00 	vldr	s14, [r3]
 80012d8:	4be8      	ldr	r3, [pc, #928]	; (800167c <ahrs_fusion_agm+0x7f4>)
 80012da:	edd3 7a00 	vldr	s15, [r3]
 80012de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		q2q2 = q2 * q2;
 80012e6:	4be4      	ldr	r3, [pc, #912]	; (8001678 <ahrs_fusion_agm+0x7f0>)
 80012e8:	ed93 7a00 	vldr	s14, [r3]
 80012ec:	4be2      	ldr	r3, [pc, #904]	; (8001678 <ahrs_fusion_agm+0x7f0>)
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q2q3 = q2 * q3;
 80012fa:	4bdf      	ldr	r3, [pc, #892]	; (8001678 <ahrs_fusion_agm+0x7f0>)
 80012fc:	ed93 7a00 	vldr	s14, [r3]
 8001300:	4bde      	ldr	r3, [pc, #888]	; (800167c <ahrs_fusion_agm+0x7f4>)
 8001302:	edd3 7a00 	vldr	s15, [r3]
 8001306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800130a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		q3q3 = q3 * q3;
 800130e:	4bdb      	ldr	r3, [pc, #876]	; (800167c <ahrs_fusion_agm+0x7f4>)
 8001310:	ed93 7a00 	vldr	s14, [r3]
 8001314:	4bd9      	ldr	r3, [pc, #868]	; (800167c <ahrs_fusion_agm+0x7f4>)
 8001316:	edd3 7a00 	vldr	s15, [r3]
 800131a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800131e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		// Reference direction of Earth's magnetic field
		hx = mxf * q0q0 - _2q0my * q3 + _2q0mz * q2 + mxf * q1q1
 8001322:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001326:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800132a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800132e:	4bd3      	ldr	r3, [pc, #844]	; (800167c <ahrs_fusion_agm+0x7f4>)
 8001330:	edd3 6a00 	vldr	s13, [r3]
 8001334:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001338:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800133c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001340:	4bcd      	ldr	r3, [pc, #820]	; (8001678 <ahrs_fusion_agm+0x7f0>)
 8001342:	edd3 6a00 	vldr	s13, [r3]
 8001346:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800134a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800134e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001352:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8001356:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800135a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800135e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ _2q1 * myf * q2 + _2q1 * mzf * q3 - mxf * q2q2 - mxf * q3q3;
 8001362:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8001366:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800136a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800136e:	4bc2      	ldr	r3, [pc, #776]	; (8001678 <ahrs_fusion_agm+0x7f0>)
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001378:	ee37 7a27 	vadd.f32	s14, s14, s15
 800137c:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8001380:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001384:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001388:	4bbc      	ldr	r3, [pc, #752]	; (800167c <ahrs_fusion_agm+0x7f4>)
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001396:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800139a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800139e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013a6:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80013aa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80013ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
		hx = mxf * q0q0 - _2q0my * q3 + _2q0mz * q2 + mxf * q1q1
 80013b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		hy = _2q0mx * q3 + myf * q0q0 - _2q0mz * q1 + _2q1mx * q2 - myf * q1q1
 80013ba:	4bb0      	ldr	r3, [pc, #704]	; (800167c <ahrs_fusion_agm+0x7f4>)
 80013bc:	ed93 7a00 	vldr	s14, [r3]
 80013c0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80013c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013c8:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 80013cc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80013d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013d8:	4ba6      	ldr	r3, [pc, #664]	; (8001674 <ahrs_fusion_agm+0x7ec>)
 80013da:	edd3 6a00 	vldr	s13, [r3]
 80013de:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80013e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013ea:	4ba3      	ldr	r3, [pc, #652]	; (8001678 <ahrs_fusion_agm+0x7f0>)
 80013ec:	edd3 6a00 	vldr	s13, [r3]
 80013f0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80013f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013fc:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8001400:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001404:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001408:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ myf * q2q2 + _2q2 * mzf * q3 - myf * q3q3;
 800140c:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8001410:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001414:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001418:	ee37 7a27 	vadd.f32	s14, s14, s15
 800141c:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8001420:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001424:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001428:	4b94      	ldr	r3, [pc, #592]	; (800167c <ahrs_fusion_agm+0x7f4>)
 800142a:	edd3 7a00 	vldr	s15, [r3]
 800142e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001432:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001436:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 800143a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800143e:	ee66 7aa7 	vmul.f32	s15, s13, s15
		hy = _2q0mx * q3 + myf * q0q0 - _2q0mz * q1 + _2q1mx * q2 - myf * q1q1
 8001442:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001446:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		_2bx = math_sqrt(hx * hx + hy * hy);
 800144a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800144e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001452:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001456:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800145a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	f005 fb53 	bl	8006b0c <math_sqrt>
 8001466:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mzf * q0q0 + _2q1mx * q3
 800146a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800146e:	eeb1 7a67 	vneg.f32	s14, s15
 8001472:	4b81      	ldr	r3, [pc, #516]	; (8001678 <ahrs_fusion_agm+0x7f0>)
 8001474:	edd3 7a00 	vldr	s15, [r3]
 8001478:	ee27 7a27 	vmul.f32	s14, s14, s15
 800147c:	4b7d      	ldr	r3, [pc, #500]	; (8001674 <ahrs_fusion_agm+0x7ec>)
 800147e:	edd3 6a00 	vldr	s13, [r3]
 8001482:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800148a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800148e:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001492:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001496:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800149a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800149e:	4b77      	ldr	r3, [pc, #476]	; (800167c <ahrs_fusion_agm+0x7f4>)
 80014a0:	edd3 6a00 	vldr	s13, [r3]
 80014a4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80014a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ac:	ee37 7a27 	vadd.f32	s14, s14, s15
				- mzf * q1q1 + _2q2 * myf * q3 - mzf * q2q2 + mzf * q3q3;
 80014b0:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80014b4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80014b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014c0:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80014c4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80014c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014cc:	4b6b      	ldr	r3, [pc, #428]	; (800167c <ahrs_fusion_agm+0x7f4>)
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014da:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80014de:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80014e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014ea:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80014ee:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80014f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mzf * q0q0 + _2q1mx * q3
 80014f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		_4bx = 2.0f * _2bx;
 80014fe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001502:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001506:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		_4bz = 2.0f * _2bz;
 800150a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800150e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001512:	edc7 7a08 	vstr	s15, [r7, #32]

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - axf)
 8001516:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800151a:	eeb1 7a67 	vneg.f32	s14, s15
 800151e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001522:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001526:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800152a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800152e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001532:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001536:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q1 * (2.0f * q0q1 + _2q2q3 - ayf)
 800153a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800153e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001542:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001546:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800154a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800154e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001552:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001556:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800155a:	ee37 7a27 	vadd.f32	s14, s14, s15
				- _2bz * q2
 800155e:	4b46      	ldr	r3, [pc, #280]	; (8001678 <ahrs_fusion_agm+0x7f0>)
 8001560:	edd3 6a00 	vldr	s13, [r3]
 8001564:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001568:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 800156c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001570:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001574:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001578:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800157c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001580:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001584:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001588:	edd7 5a11 	vldr	s11, [r7, #68]	; 0x44
 800158c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001590:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001594:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001598:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800159c:	ee36 6a27 	vadd.f32	s12, s12, s15
								- axf)
 80015a0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80015a4:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 80015a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
				- _2bz * q2
 80015ac:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ (-_2bx * q3 + _2bz * q1)
 80015b0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015b4:	eef1 6a67 	vneg.f32	s13, s15
 80015b8:	4b30      	ldr	r3, [pc, #192]	; (800167c <ahrs_fusion_agm+0x7f4>)
 80015ba:	edd3 7a00 	vldr	s15, [r3]
 80015be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015c2:	4b2c      	ldr	r3, [pc, #176]	; (8001674 <ahrs_fusion_agm+0x7ec>)
 80015c4:	ed93 6a00 	vldr	s12, [r3]
 80015c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80015d0:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - ayf)
 80015d4:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 80015d8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80015dc:	ee36 6a67 	vsub.f32	s12, s12, s15
 80015e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80015e8:	edd7 5a16 	vldr	s11, [r7, #88]	; 0x58
 80015ec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80015f0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80015f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015f8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80015fc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001600:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001604:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001608:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_2bx * q3 + _2bz * q1)
 800160c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ _2bx * q2
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <ahrs_fusion_agm+0x7f0>)
 8001612:	edd3 6a00 	vldr	s13, [r3]
 8001616:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800161a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 800161e:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8001622:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001626:	ee36 6a27 	vadd.f32	s12, s12, s15
 800162a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800162e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001632:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001636:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800163a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800163e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001642:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001646:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800164a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800164e:	ee36 6a27 	vadd.f32	s12, s12, s15
								- azf);
 8001652:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001656:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 800165a:	ee66 7aa7 	vmul.f32	s15, s13, s15
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - axf)
 800165e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001662:	edc7 7a07 	vstr	s15, [r7, #28]
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - axf)
 8001666:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800166a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800166e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001672:	e005      	b.n	8001680 <ahrs_fusion_agm+0x7f8>
 8001674:	20000848 	.word	0x20000848
 8001678:	2000084c 	.word	0x2000084c
 800167c:	20000850 	.word	0x20000850
 8001680:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001684:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001688:	ee37 7a67 	vsub.f32	s14, s14, s15
 800168c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001690:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q0 * (2.0f * q0q1 + _2q2q3 - ayf)
 8001694:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001698:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800169c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80016a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80016a4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80016a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016ac:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80016b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b4:	ee37 7a27 	vadd.f32	s14, s14, s15
				- 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - axf)
 80016b8:	4bf5      	ldr	r3, [pc, #980]	; (8001a90 <ahrs_fusion_agm+0xc08>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80016c2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80016c6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80016ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016ce:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80016d2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80016d6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80016da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016de:	ee36 6a67 	vsub.f32	s12, s12, s15
 80016e2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80016e6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80016ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ee:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ _2bz * q3
 80016f2:	4be8      	ldr	r3, [pc, #928]	; (8001a94 <ahrs_fusion_agm+0xc0c>)
 80016f4:	edd3 6a00 	vldr	s13, [r3]
 80016f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80016fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8001700:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001704:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001708:	ee36 6a67 	vsub.f32	s12, s12, s15
 800170c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001710:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001714:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001718:	ee26 6a27 	vmul.f32	s12, s12, s15
 800171c:	edd7 5a11 	vldr	s11, [r7, #68]	; 0x44
 8001720:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001724:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001728:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800172c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001730:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mxf)
 8001734:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001738:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 800173c:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ _2bz * q3
 8001740:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q2 + _2bz * q0)
 8001744:	4bd4      	ldr	r3, [pc, #848]	; (8001a98 <ahrs_fusion_agm+0xc10>)
 8001746:	edd3 6a00 	vldr	s13, [r3]
 800174a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800174e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001752:	4bd2      	ldr	r3, [pc, #840]	; (8001a9c <ahrs_fusion_agm+0xc14>)
 8001754:	ed93 6a00 	vldr	s12, [r3]
 8001758:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800175c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001760:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - myf)
 8001764:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8001768:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800176c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001770:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001774:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001778:	edd7 5a16 	vldr	s11, [r7, #88]	; 0x58
 800177c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001780:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001784:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001788:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800178c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001790:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001794:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001798:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q2 + _2bz * q0)
 800179c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q3 - _4bz * q1)
 80017a0:	4bbc      	ldr	r3, [pc, #752]	; (8001a94 <ahrs_fusion_agm+0xc0c>)
 80017a2:	edd3 6a00 	vldr	s13, [r3]
 80017a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017ae:	4bb8      	ldr	r3, [pc, #736]	; (8001a90 <ahrs_fusion_agm+0xc08>)
 80017b0:	ed93 6a00 	vldr	s12, [r3]
 80017b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80017b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 80017c0:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80017c4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80017c8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80017cc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017d0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80017d4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80017d8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80017dc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80017e0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80017e4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80017e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017ec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80017f0:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mzf);
 80017f4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80017f8:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 80017fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - axf)
 8001800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001804:	edc7 7a06 	vstr	s15, [r7, #24]
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - axf)
 8001808:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800180c:	eeb1 7a67 	vneg.f32	s14, s15
 8001810:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001814:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001818:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800181c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001820:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001824:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001828:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q3 * (2.0f * q0q1 + _2q2q3 - ayf)
 800182c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001830:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001834:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001838:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800183c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001840:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001844:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800184c:	ee37 7a27 	vadd.f32	s14, s14, s15
				- 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - azf)
 8001850:	4b91      	ldr	r3, [pc, #580]	; (8001a98 <ahrs_fusion_agm+0xc10>)
 8001852:	edd3 7a00 	vldr	s15, [r3]
 8001856:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800185a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800185e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001862:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001866:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800186a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800186e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001872:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001876:	ee36 6a67 	vsub.f32	s12, s12, s15
 800187a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800187e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001882:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001886:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ (-_4bx * q2 - _2bz * q0)
 800188a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800188e:	eef1 6a67 	vneg.f32	s13, s15
 8001892:	4b81      	ldr	r3, [pc, #516]	; (8001a98 <ahrs_fusion_agm+0xc10>)
 8001894:	edd3 7a00 	vldr	s15, [r3]
 8001898:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800189c:	4b7f      	ldr	r3, [pc, #508]	; (8001a9c <ahrs_fusion_agm+0xc14>)
 800189e:	ed93 6a00 	vldr	s12, [r3]
 80018a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018aa:	ee76 6ae7 	vsub.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 80018ae:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80018b2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80018b6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018ba:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80018be:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018ca:	edd7 5a11 	vldr	s11, [r7, #68]	; 0x44
 80018ce:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018d2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80018d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018da:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018de:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mxf)
 80018e2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80018e6:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 80018ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_4bx * q2 - _2bz * q0)
 80018ee:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q1 + _2bz * q3)
 80018f2:	4b67      	ldr	r3, [pc, #412]	; (8001a90 <ahrs_fusion_agm+0xc08>)
 80018f4:	edd3 6a00 	vldr	s13, [r3]
 80018f8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001900:	4b64      	ldr	r3, [pc, #400]	; (8001a94 <ahrs_fusion_agm+0xc0c>)
 8001902:	ed93 6a00 	vldr	s12, [r3]
 8001906:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800190a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800190e:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - myf)
 8001912:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8001916:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800191a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800191e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001922:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001926:	edd7 5a16 	vldr	s11, [r7, #88]	; 0x58
 800192a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800192e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001932:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001936:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800193a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800193e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001942:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001946:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q1 + _2bz * q3)
 800194a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q0 - _4bz * q2)
 800194e:	4b53      	ldr	r3, [pc, #332]	; (8001a9c <ahrs_fusion_agm+0xc14>)
 8001950:	edd3 6a00 	vldr	s13, [r3]
 8001954:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001958:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800195c:	4b4e      	ldr	r3, [pc, #312]	; (8001a98 <ahrs_fusion_agm+0xc10>)
 800195e:	ed93 6a00 	vldr	s12, [r3]
 8001962:	edd7 7a08 	vldr	s15, [r7, #32]
 8001966:	ee66 7a27 	vmul.f32	s15, s12, s15
 800196a:	ee76 6ae7 	vsub.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 800196e:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8001972:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001976:	ee36 6a27 	vadd.f32	s12, s12, s15
 800197a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800197e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001982:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001986:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800198a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800198e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001992:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001996:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800199a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800199e:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mzf);
 80019a2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80019a6:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 80019aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - axf)
 80019ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b2:	edc7 7a05 	vstr	s15, [r7, #20]
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - axf)
 80019b6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019ba:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019be:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80019c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019c6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80019ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019ce:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80019d2:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q2 * (2.0f * q0q1 + _2q2q3 - ayf)
 80019d6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80019da:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019de:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80019e2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019e6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80019ea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019ee:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80019f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (-_4bx * q3 + _2bz * q1)
 80019fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019fe:	eef1 6a67 	vneg.f32	s13, s15
 8001a02:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <ahrs_fusion_agm+0xc0c>)
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a0c:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <ahrs_fusion_agm+0xc08>)
 8001a0e:	ed93 6a00 	vldr	s12, [r3]
 8001a12:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a16:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a1a:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8001a1e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001a22:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001a26:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a2a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001a2e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a32:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a36:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a3a:	edd7 5a11 	vldr	s11, [r7, #68]	; 0x44
 8001a3e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001a42:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a46:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a4a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a4e:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mxf)
 8001a52:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001a56:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8001a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_4bx * q3 + _2bz * q1)
 8001a5e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (-_2bx * q0 + _2bz * q2)
 8001a62:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a66:	eef1 6a67 	vneg.f32	s13, s15
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <ahrs_fusion_agm+0xc14>)
 8001a6c:	edd3 7a00 	vldr	s15, [r3]
 8001a70:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <ahrs_fusion_agm+0xc10>)
 8001a76:	ed93 6a00 	vldr	s12, [r3]
 8001a7a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a7e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a82:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - myf)
 8001a86:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8001a8a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001a8e:	e007      	b.n	8001aa0 <ahrs_fusion_agm+0xc18>
 8001a90:	20000848 	.word	0x20000848
 8001a94:	20000850 	.word	0x20000850
 8001a98:	2000084c 	.word	0x2000084c
 8001a9c:	200001e4 	.word	0x200001e4
 8001aa0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001aa4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001aa8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001aac:	edd7 5a16 	vldr	s11, [r7, #88]	; 0x58
 8001ab0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ab4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001ab8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001abc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ac0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ac4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001ac8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_2bx * q0 + _2bz * q2)
 8001ad0:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ _2bx * q1
 8001ad4:	4b9c      	ldr	r3, [pc, #624]	; (8001d48 <ahrs_fusion_agm+0xec0>)
 8001ad6:	edd3 6a00 	vldr	s13, [r3]
 8001ada:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ade:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 8001ae2:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8001ae6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001aea:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001aee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001af2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001af6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001afa:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001afe:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b02:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001b06:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b0a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001b0e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b12:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mzf);
 8001b16:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001b1a:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 8001b1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - axf)
 8001b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b26:	edc7 7a04 	vstr	s15, [r7, #16]
		norm = math_inv_sqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001b2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b2e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b32:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b36:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b42:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b56:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5a:	f005 f809 	bl	8006b70 <math_inv_sqrt>
 8001b5e:	ed87 0a22 	vstr	s0, [r7, #136]	; 0x88
		s0 *= norm;
 8001b62:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b66:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6e:	edc7 7a07 	vstr	s15, [r7, #28]
		s1 *= norm;
 8001b72:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b76:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b7e:	edc7 7a06 	vstr	s15, [r7, #24]
		s2 *= norm;
 8001b82:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b86:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b8e:	edc7 7a05 	vstr	s15, [r7, #20]
		s3 *= norm;
 8001b92:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b96:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9e:	edc7 7a04 	vstr	s15, [r7, #16]

		// Apply feedback step
		qDot1 -= beta * s0;
 8001ba2:	4b6a      	ldr	r3, [pc, #424]	; (8001d4c <ahrs_fusion_agm+0xec4>)
 8001ba4:	ed93 7a00 	vldr	s14, [r3]
 8001ba8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb0:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8001bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb8:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
		qDot2 -= beta * s1;
 8001bbc:	4b63      	ldr	r3, [pc, #396]	; (8001d4c <ahrs_fusion_agm+0xec4>)
 8001bbe:	ed93 7a00 	vldr	s14, [r3]
 8001bc2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bca:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8001bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
		qDot3 -= beta * s2;
 8001bd6:	4b5d      	ldr	r3, [pc, #372]	; (8001d4c <ahrs_fusion_agm+0xec4>)
 8001bd8:	ed93 7a00 	vldr	s14, [r3]
 8001bdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001be8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bec:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot4 -= beta * s3;
 8001bf0:	4b56      	ldr	r3, [pc, #344]	; (8001d4c <ahrs_fusion_agm+0xec4>)
 8001bf2:	ed93 7a00 	vldr	s14, [r3]
 8001bf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfe:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c06:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * SENSOR_SAMPLING_TIME;
 8001c0a:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001d50 <ahrs_fusion_agm+0xec8>
 8001c0e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001c12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c16:	4b4f      	ldr	r3, [pc, #316]	; (8001d54 <ahrs_fusion_agm+0xecc>)
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c20:	4b4c      	ldr	r3, [pc, #304]	; (8001d54 <ahrs_fusion_agm+0xecc>)
 8001c22:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * SENSOR_SAMPLING_TIME;
 8001c26:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001d50 <ahrs_fusion_agm+0xec8>
 8001c2a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001c2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c32:	4b45      	ldr	r3, [pc, #276]	; (8001d48 <ahrs_fusion_agm+0xec0>)
 8001c34:	edd3 7a00 	vldr	s15, [r3]
 8001c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c3c:	4b42      	ldr	r3, [pc, #264]	; (8001d48 <ahrs_fusion_agm+0xec0>)
 8001c3e:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * SENSOR_SAMPLING_TIME;
 8001c42:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001d50 <ahrs_fusion_agm+0xec8>
 8001c46:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001c4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c4e:	4b42      	ldr	r3, [pc, #264]	; (8001d58 <ahrs_fusion_agm+0xed0>)
 8001c50:	edd3 7a00 	vldr	s15, [r3]
 8001c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c58:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <ahrs_fusion_agm+0xed0>)
 8001c5a:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * SENSOR_SAMPLING_TIME;
 8001c5e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001d50 <ahrs_fusion_agm+0xec8>
 8001c62:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001c66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c6a:	4b3c      	ldr	r3, [pc, #240]	; (8001d5c <ahrs_fusion_agm+0xed4>)
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c74:	4b39      	ldr	r3, [pc, #228]	; (8001d5c <ahrs_fusion_agm+0xed4>)
 8001c76:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	norm = math_inv_sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001c7a:	4b36      	ldr	r3, [pc, #216]	; (8001d54 <ahrs_fusion_agm+0xecc>)
 8001c7c:	ed93 7a00 	vldr	s14, [r3]
 8001c80:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <ahrs_fusion_agm+0xecc>)
 8001c82:	edd3 7a00 	vldr	s15, [r3]
 8001c86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c8a:	4b2f      	ldr	r3, [pc, #188]	; (8001d48 <ahrs_fusion_agm+0xec0>)
 8001c8c:	edd3 6a00 	vldr	s13, [r3]
 8001c90:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <ahrs_fusion_agm+0xec0>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c9e:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <ahrs_fusion_agm+0xed0>)
 8001ca0:	edd3 6a00 	vldr	s13, [r3]
 8001ca4:	4b2c      	ldr	r3, [pc, #176]	; (8001d58 <ahrs_fusion_agm+0xed0>)
 8001ca6:	edd3 7a00 	vldr	s15, [r3]
 8001caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cb2:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <ahrs_fusion_agm+0xed4>)
 8001cb4:	edd3 6a00 	vldr	s13, [r3]
 8001cb8:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <ahrs_fusion_agm+0xed4>)
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cca:	f004 ff51 	bl	8006b70 <math_inv_sqrt>
 8001cce:	ed87 0a22 	vstr	s0, [r7, #136]	; 0x88
	q0 *= norm;
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <ahrs_fusion_agm+0xecc>)
 8001cd4:	ed93 7a00 	vldr	s14, [r3]
 8001cd8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce0:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <ahrs_fusion_agm+0xecc>)
 8001ce2:	edc3 7a00 	vstr	s15, [r3]
	q1 *= norm;
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <ahrs_fusion_agm+0xec0>)
 8001ce8:	ed93 7a00 	vldr	s14, [r3]
 8001cec:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf4:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <ahrs_fusion_agm+0xec0>)
 8001cf6:	edc3 7a00 	vstr	s15, [r3]
	q2 *= norm;
 8001cfa:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <ahrs_fusion_agm+0xed0>)
 8001cfc:	ed93 7a00 	vldr	s14, [r3]
 8001d00:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <ahrs_fusion_agm+0xed0>)
 8001d0a:	edc3 7a00 	vstr	s15, [r3]
	q3 *= norm;
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <ahrs_fusion_agm+0xed4>)
 8001d10:	ed93 7a00 	vldr	s14, [r3]
 8001d14:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <ahrs_fusion_agm+0xed4>)
 8001d1e:	edc3 7a00 	vstr	s15, [r3]

	ahrs->q.q0 = q0;
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <ahrs_fusion_agm+0xecc>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	601a      	str	r2, [r3, #0]
	ahrs->q.q1 = q1;
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <ahrs_fusion_agm+0xec0>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	605a      	str	r2, [r3, #4]
	ahrs->q.q2 = q2;
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <ahrs_fusion_agm+0xed0>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	609a      	str	r2, [r3, #8]
	ahrs->q.q3 = q3;
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <ahrs_fusion_agm+0xed4>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	60da      	str	r2, [r3, #12]
}
 8001d42:	37c0      	adds	r7, #192	; 0xc0
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000848 	.word	0x20000848
 8001d4c:	200001e8 	.word	0x200001e8
 8001d50:	3aa3d70a 	.word	0x3aa3d70a
 8001d54:	200001e4 	.word	0x200001e4
 8001d58:	2000084c 	.word	0x2000084c
 8001d5c:	20000850 	.word	0x20000850

08001d60 <bmm150_init>:
 *  @brief This API is the entry point, Call this API before using other APIs.
 *  This API reads the chip-id of the sensor which is the first step to
 *  verify the sensor and updates the trim parameters of the sensor.
 */
int8_t bmm150_init(struct bmm150_dev *dev)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73bb      	strb	r3, [r7, #14]

    /* Power up the sensor from suspend to sleep mode */
    rslt = set_power_control_bit(BMM150_POWER_CNTRL_ENABLE, dev);
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f000 f9fc 	bl	800216c <set_power_control_bit>
 8001d74:	4603      	mov	r3, r0
 8001d76:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 8001d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d11f      	bne.n	8001dc0 <bmm150_init+0x60>
    {
        /* Start-up time delay of 3ms */
        dev->delay_us(BMM150_START_UP_TIME, dev->intf_ptr);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6852      	ldr	r2, [r2, #4]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001d8e:	4798      	blx	r3

        /* Chip ID of the sensor is read */
        rslt = bmm150_get_regs(BMM150_REG_CHIP_ID, &chip_id, 1, dev);
 8001d90:	f107 010e 	add.w	r1, r7, #14
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	2040      	movs	r0, #64	; 0x40
 8001d9a:	f000 f843 	bl	8001e24 <bmm150_get_regs>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMM150_OK)
 8001da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10a      	bne.n	8001dc0 <bmm150_init+0x60>
        {
            /* Check for chip id validity */
            if (chip_id == BMM150_CHIP_ID)
 8001daa:	7bbb      	ldrb	r3, [r7, #14]
 8001dac:	2b32      	cmp	r3, #50	; 0x32
 8001dae:	d107      	bne.n	8001dc0 <bmm150_init+0x60>
            {
                dev->chip_id = chip_id;
 8001db0:	7bba      	ldrb	r2, [r7, #14]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	701a      	strb	r2, [r3, #0]

                /* Function to update trim values */
                rslt = read_trim_registers(dev);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fa12 	bl	80021e0 <read_trim_registers>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <bmm150_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmm150_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	4603      	mov	r3, r0
 8001dda:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001ddc:	6838      	ldr	r0, [r7, #0]
 8001dde:	f000 f9a1 	bl	8002124 <null_ptr_check>
 8001de2:	4603      	mov	r3, r0
 8001de4:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL) && (len != 0))
 8001de6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d112      	bne.n	8001e14 <bmm150_set_regs+0x48>
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00f      	beq.n	8001e14 <bmm150_set_regs+0x48>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00c      	beq.n	8001e14 <bmm150_set_regs+0x48>
        /* Write the data to the reg_addr */

        /* SPI write requires to set The MSB of reg_addr as 0
         * but in default the MSB is always 0
         */
        dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	691c      	ldr	r4, [r3, #16]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	7bf8      	ldrb	r0, [r7, #15]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	68b9      	ldr	r1, [r7, #8]
 8001e08:	47a0      	blx	r4
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	721a      	strb	r2, [r3, #8]
 8001e12:	e001      	b.n	8001e18 <bmm150_set_regs+0x4c>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 8001e14:	23ff      	movs	r3, #255	; 0xff
 8001e16:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001e18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd90      	pop	{r4, r7, pc}

08001e24 <bmm150_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmm150_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 8001e24:	b590      	push	{r4, r7, lr}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	4603      	mov	r3, r0
 8001e32:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001e34:	6838      	ldr	r0, [r7, #0]
 8001e36:	f000 f975 	bl	8002124 <null_ptr_check>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL))
 8001e3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d117      	bne.n	8001e76 <bmm150_get_regs+0x52>
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d014      	beq.n	8001e76 <bmm150_get_regs+0x52>
    {
        if (dev->intf != BMM150_I2C_INTF)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	785b      	ldrb	r3, [r3, #1]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d003      	beq.n	8001e5c <bmm150_get_regs+0x38>
        {
            /* If interface selected is SPI */
            reg_addr = reg_addr | 0x80;
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e5a:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	68dc      	ldr	r4, [r3, #12]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	7bf8      	ldrb	r0, [r7, #15]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	47a0      	blx	r4
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	461a      	mov	r2, r3
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	721a      	strb	r2, [r3, #8]
 8001e74:	e001      	b.n	8001e7a <bmm150_get_regs+0x56>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 8001e76:	23ff      	movs	r3, #255	; 0xff
 8001e78:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001e7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	371c      	adds	r7, #28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd90      	pop	{r4, r7, pc}
	...

08001e88 <bmm150_set_op_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bmm150_set_op_mode(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t pwr_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001e92:	6838      	ldr	r0, [r7, #0]
 8001e94:	f000 f946 	bl	8002124 <null_ptr_check>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMM150_OK)
 8001e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d155      	bne.n	8001f50 <bmm150_set_op_mode+0xc8>
    {
        pwr_mode = settings->pwr_mode;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	785b      	ldrb	r3, [r3, #1]
 8001ea8:	73bb      	strb	r3, [r7, #14]

        /* Select the power mode to set */
        switch (pwr_mode)
 8001eaa:	7bbb      	ldrb	r3, [r7, #14]
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d847      	bhi.n	8001f40 <bmm150_set_op_mode+0xb8>
 8001eb0:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <bmm150_set_op_mode+0x30>)
 8001eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb6:	bf00      	nop
 8001eb8:	08001ecd 	.word	0x08001ecd
 8001ebc:	08001eef 	.word	0x08001eef
 8001ec0:	08001f41 	.word	0x08001f41
 8001ec4:	08001f11 	.word	0x08001f11
 8001ec8:	08001f33 	.word	0x08001f33
            case BMM150_POWERMODE_NORMAL:

                /* If the sensor is in suspend mode
                 * put the device to sleep mode
                 */
                rslt = suspend_to_sleep_mode(dev);
 8001ecc:	6838      	ldr	r0, [r7, #0]
 8001ece:	f000 fa4b 	bl	8002368 <suspend_to_sleep_mode>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMM150_OK)
 8001ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d133      	bne.n	8001f46 <bmm150_set_op_mode+0xbe>
                {
                    /* write the op mode */
                    rslt = write_op_mode(pwr_mode, dev);
 8001ede:	7bbb      	ldrb	r3, [r7, #14]
 8001ee0:	6839      	ldr	r1, [r7, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 fa0f 	bl	8002306 <write_op_mode>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	73fb      	strb	r3, [r7, #15]
                }

                break;
 8001eec:	e02b      	b.n	8001f46 <bmm150_set_op_mode+0xbe>
            case BMM150_POWERMODE_FORCED:

                /* If the sensor is in suspend mode
                 * put the device to sleep mode
                 */
                rslt = suspend_to_sleep_mode(dev);
 8001eee:	6838      	ldr	r0, [r7, #0]
 8001ef0:	f000 fa3a 	bl	8002368 <suspend_to_sleep_mode>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMM150_OK)
 8001ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d124      	bne.n	8001f4a <bmm150_set_op_mode+0xc2>
                {
                    /* write the op mode */
                    rslt = write_op_mode(pwr_mode, dev);
 8001f00:	7bbb      	ldrb	r3, [r7, #14]
 8001f02:	6839      	ldr	r1, [r7, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 f9fe 	bl	8002306 <write_op_mode>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	73fb      	strb	r3, [r7, #15]
                }

                break;
 8001f0e:	e01c      	b.n	8001f4a <bmm150_set_op_mode+0xc2>
            case BMM150_POWERMODE_SLEEP:

                /* If the sensor is in suspend mode
                 * put the device to sleep mode
                 */
                rslt = suspend_to_sleep_mode(dev);
 8001f10:	6838      	ldr	r0, [r7, #0]
 8001f12:	f000 fa29 	bl	8002368 <suspend_to_sleep_mode>
 8001f16:	4603      	mov	r3, r0
 8001f18:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMM150_OK)
 8001f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d115      	bne.n	8001f4e <bmm150_set_op_mode+0xc6>
                {
                    /* write the op mode */
                    rslt = write_op_mode(pwr_mode, dev);
 8001f22:	7bbb      	ldrb	r3, [r7, #14]
 8001f24:	6839      	ldr	r1, [r7, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f9ed 	bl	8002306 <write_op_mode>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	73fb      	strb	r3, [r7, #15]
                }

                break;
 8001f30:	e00d      	b.n	8001f4e <bmm150_set_op_mode+0xc6>
            case BMM150_POWERMODE_SUSPEND:

                /* Set the power control bit to zero */
                rslt = set_power_control_bit(BMM150_POWER_CNTRL_DISABLE, dev);
 8001f32:	6839      	ldr	r1, [r7, #0]
 8001f34:	2000      	movs	r0, #0
 8001f36:	f000 f919 	bl	800216c <set_power_control_bit>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	73fb      	strb	r3, [r7, #15]
                break;
 8001f3e:	e007      	b.n	8001f50 <bmm150_set_op_mode+0xc8>
            default:
                rslt = BMM150_E_INVALID_CONFIG;
 8001f40:	23fd      	movs	r3, #253	; 0xfd
 8001f42:	73fb      	strb	r3, [r7, #15]
                break;
 8001f44:	e004      	b.n	8001f50 <bmm150_set_op_mode+0xc8>
                break;
 8001f46:	bf00      	nop
 8001f48:	e002      	b.n	8001f50 <bmm150_set_op_mode+0xc8>
                break;
 8001f4a:	bf00      	nop
 8001f4c:	e000      	b.n	8001f50 <bmm150_set_op_mode+0xc8>
                break;
 8001f4e:	bf00      	nop
        }
    }

    return rslt;
 8001f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <bmm150_set_presetmode>:

/*!
 * @brief This API is used to set the preset mode of the sensor.
 */
int8_t bmm150_set_presetmode(struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t preset_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001f66:	6838      	ldr	r0, [r7, #0]
 8001f68:	f000 f8dc 	bl	8002124 <null_ptr_check>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMM150_OK)
 8001f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d154      	bne.n	8002022 <bmm150_set_presetmode+0xc6>
    {
        preset_mode = settings->preset_mode;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	795b      	ldrb	r3, [r3, #5]
 8001f7c:	73bb      	strb	r3, [r7, #14]

        switch (preset_mode)
 8001f7e:	7bbb      	ldrb	r3, [r7, #14]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d84a      	bhi.n	800201c <bmm150_set_presetmode+0xc0>
 8001f86:	a201      	add	r2, pc, #4	; (adr r2, 8001f8c <bmm150_set_presetmode+0x30>)
 8001f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8c:	08001f9d 	.word	0x08001f9d
 8001f90:	08001fbd 	.word	0x08001fbd
 8001f94:	08001fdd 	.word	0x08001fdd
 8001f98:	08001ffd 	.word	0x08001ffd
            case BMM150_PRESETMODE_LOWPOWER:

                /* Set the data rate x,y,z repetition
                 * for Low Power mode
                 */
                settings->data_rate = BMM150_DATA_RATE_10HZ;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	709a      	strb	r2, [r3, #2]
                settings->xy_rep = BMM150_REPXY_LOWPOWER;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	70da      	strb	r2, [r3, #3]
                settings->z_rep = BMM150_REPZ_LOWPOWER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	711a      	strb	r2, [r3, #4]
                rslt = set_odr_xyz_rep(settings, dev);
 8001fae:	6839      	ldr	r1, [r7, #0]
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 fa5e 	bl	8002472 <set_odr_xyz_rep>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	73fb      	strb	r3, [r7, #15]
                break;
 8001fba:	e032      	b.n	8002022 <bmm150_set_presetmode+0xc6>
            case BMM150_PRESETMODE_REGULAR:

                /* Set the data rate x,y,z repetition
                 * for Regular mode
                 */
                settings->data_rate = BMM150_DATA_RATE_10HZ;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	709a      	strb	r2, [r3, #2]
                settings->xy_rep = BMM150_REPXY_REGULAR;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	70da      	strb	r2, [r3, #3]
                settings->z_rep = BMM150_REPZ_REGULAR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2207      	movs	r2, #7
 8001fcc:	711a      	strb	r2, [r3, #4]
                rslt = set_odr_xyz_rep(settings, dev);
 8001fce:	6839      	ldr	r1, [r7, #0]
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 fa4e 	bl	8002472 <set_odr_xyz_rep>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	73fb      	strb	r3, [r7, #15]
                break;
 8001fda:	e022      	b.n	8002022 <bmm150_set_presetmode+0xc6>
            case BMM150_PRESETMODE_HIGHACCURACY:

                /* Set the data rate x,y,z repetition
                 * for High Accuracy mode *
                 */
                settings->data_rate = BMM150_DATA_RATE_20HZ;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2205      	movs	r2, #5
 8001fe0:	709a      	strb	r2, [r3, #2]
                settings->xy_rep = BMM150_REPXY_HIGHACCURACY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2217      	movs	r2, #23
 8001fe6:	70da      	strb	r2, [r3, #3]
                settings->z_rep = BMM150_REPZ_HIGHACCURACY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2229      	movs	r2, #41	; 0x29
 8001fec:	711a      	strb	r2, [r3, #4]
                rslt = set_odr_xyz_rep(settings, dev);
 8001fee:	6839      	ldr	r1, [r7, #0]
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 fa3e 	bl	8002472 <set_odr_xyz_rep>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	73fb      	strb	r3, [r7, #15]
                break;
 8001ffa:	e012      	b.n	8002022 <bmm150_set_presetmode+0xc6>
            case BMM150_PRESETMODE_ENHANCED:

                /* Set the data rate x,y,z repetition
                 * for Enhanced Accuracy mode
                 */
                settings->data_rate = BMM150_DATA_RATE_10HZ;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	709a      	strb	r2, [r3, #2]
                settings->xy_rep = BMM150_REPXY_ENHANCED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2207      	movs	r2, #7
 8002006:	70da      	strb	r2, [r3, #3]
                settings->z_rep = BMM150_REPZ_ENHANCED;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	220d      	movs	r2, #13
 800200c:	711a      	strb	r2, [r3, #4]
                rslt = set_odr_xyz_rep(settings, dev);
 800200e:	6839      	ldr	r1, [r7, #0]
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 fa2e 	bl	8002472 <set_odr_xyz_rep>
 8002016:	4603      	mov	r3, r0
 8002018:	73fb      	strb	r3, [r7, #15]
                break;
 800201a:	e002      	b.n	8002022 <bmm150_set_presetmode+0xc6>
            default:
                rslt = BMM150_E_INVALID_CONFIG;
 800201c:	23fd      	movs	r3, #253	; 0xfd
 800201e:	73fb      	strb	r3, [r7, #15]
                break;
 8002020:	bf00      	nop
        }
    }

    return rslt;
 8002022:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop

08002030 <bmm150_read_mag_data>:
 * @brief This API is used to read the magnetometer data from registers
 * 0x42 to 0x49 and update the dev structure with the
 * compensated mag data in micro-tesla.
 */
int8_t bmm150_read_mag_data(struct bmm150_mag_data *mag_data, struct bmm150_dev *dev)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    int16_t msb_data;
    uint8_t reg_data[BMM150_LEN_XYZR_DATA] = { 0 };
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
    struct bmm150_raw_mag_data raw_mag_data;

    /* Read the mag data registers */
    rslt = bmm150_get_regs(BMM150_REG_DATA_X_LSB, reg_data, BMM150_LEN_XYZR_DATA, dev);
 8002042:	f107 0114 	add.w	r1, r7, #20
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2208      	movs	r2, #8
 800204a:	2042      	movs	r0, #66	; 0x42
 800204c:	f7ff feea 	bl	8001e24 <bmm150_get_regs>
 8002050:	4603      	mov	r3, r0
 8002052:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 8002054:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d15d      	bne.n	8002118 <bmm150_read_mag_data+0xe8>
    {
        /* Mag X axis data */
        reg_data[0] = BMM150_GET_BITS(reg_data[0], BMM150_DATA_X);
 800205c:	7d3b      	ldrb	r3, [r7, #20]
 800205e:	08db      	lsrs	r3, r3, #3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	753b      	strb	r3, [r7, #20]

        /* Shift the MSB data to left by 5 bits */
        /* Multiply by 32 to get the shift left by 5 value */
        msb_data = ((int16_t)((int8_t)reg_data[1])) * 32;
 8002064:	7d7b      	ldrb	r3, [r7, #21]
 8002066:	b25b      	sxtb	r3, r3
 8002068:	b29b      	uxth	r3, r3
 800206a:	015b      	lsls	r3, r3, #5
 800206c:	b29b      	uxth	r3, r3
 800206e:	83bb      	strh	r3, [r7, #28]

        /* Raw mag X axis data */
        raw_mag_data.raw_datax = (int16_t)(msb_data | reg_data[0]);
 8002070:	7d3b      	ldrb	r3, [r7, #20]
 8002072:	b21a      	sxth	r2, r3
 8002074:	8bbb      	ldrh	r3, [r7, #28]
 8002076:	4313      	orrs	r3, r2
 8002078:	b21b      	sxth	r3, r3
 800207a:	81bb      	strh	r3, [r7, #12]

        /* Mag Y axis data */
        reg_data[2] = BMM150_GET_BITS(reg_data[2], BMM150_DATA_Y);
 800207c:	7dbb      	ldrb	r3, [r7, #22]
 800207e:	08db      	lsrs	r3, r3, #3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	75bb      	strb	r3, [r7, #22]

        /* Shift the MSB data to left by 5 bits */
        /* Multiply by 32 to get the shift left by 5 value */
        msb_data = ((int16_t)((int8_t)reg_data[3])) * 32;
 8002084:	7dfb      	ldrb	r3, [r7, #23]
 8002086:	b25b      	sxtb	r3, r3
 8002088:	b29b      	uxth	r3, r3
 800208a:	015b      	lsls	r3, r3, #5
 800208c:	b29b      	uxth	r3, r3
 800208e:	83bb      	strh	r3, [r7, #28]

        /* Raw mag Y axis data */
        raw_mag_data.raw_datay = (int16_t)(msb_data | reg_data[2]);
 8002090:	7dbb      	ldrb	r3, [r7, #22]
 8002092:	b21a      	sxth	r2, r3
 8002094:	8bbb      	ldrh	r3, [r7, #28]
 8002096:	4313      	orrs	r3, r2
 8002098:	b21b      	sxth	r3, r3
 800209a:	81fb      	strh	r3, [r7, #14]

        /* Mag Z axis data */
        reg_data[4] = BMM150_GET_BITS(reg_data[4], BMM150_DATA_Z);
 800209c:	7e3b      	ldrb	r3, [r7, #24]
 800209e:	085b      	lsrs	r3, r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	763b      	strb	r3, [r7, #24]

        /* Shift the MSB data to left by 7 bits */
        /* Multiply by 128 to get the shift left by 7 value */
        msb_data = ((int16_t)((int8_t)reg_data[5])) * 128;
 80020a4:	7e7b      	ldrb	r3, [r7, #25]
 80020a6:	b25b      	sxtb	r3, r3
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	01db      	lsls	r3, r3, #7
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	83bb      	strh	r3, [r7, #28]

        /* Raw mag Z axis data */
        raw_mag_data.raw_dataz = (int16_t)(msb_data | reg_data[4]);
 80020b0:	7e3b      	ldrb	r3, [r7, #24]
 80020b2:	b21a      	sxth	r2, r3
 80020b4:	8bbb      	ldrh	r3, [r7, #28]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	b21b      	sxth	r3, r3
 80020ba:	823b      	strh	r3, [r7, #16]

        /* Mag R-HALL data */
        reg_data[6] = BMM150_GET_BITS(reg_data[6], BMM150_DATA_RHALL);
 80020bc:	7ebb      	ldrb	r3, [r7, #26]
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	76bb      	strb	r3, [r7, #26]
        raw_mag_data.raw_data_r = (uint16_t)(((uint16_t)reg_data[7] << 6) | reg_data[6]);
 80020c4:	7efb      	ldrb	r3, [r7, #27]
 80020c6:	019b      	lsls	r3, r3, #6
 80020c8:	b21a      	sxth	r2, r3
 80020ca:	7ebb      	ldrb	r3, [r7, #26]
 80020cc:	b21b      	sxth	r3, r3
 80020ce:	4313      	orrs	r3, r2
 80020d0:	b21b      	sxth	r3, r3
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	827b      	strh	r3, [r7, #18]

        /* Compensated Mag X data in int16_t format */
        mag_data->x = compensate_x(raw_mag_data.raw_datax, raw_mag_data.raw_data_r, dev);
 80020d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80020da:	8a79      	ldrh	r1, [r7, #18]
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f9ec 	bl	80024bc <compensate_x>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	801a      	strh	r2, [r3, #0]

        /* Compensated Mag Y data in int16_t format */
        mag_data->y = compensate_y(raw_mag_data.raw_datay, raw_mag_data.raw_data_r, dev);
 80020ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020f0:	8a79      	ldrh	r1, [r7, #18]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fa73 	bl	80025e0 <compensate_y>
 80020fa:	4603      	mov	r3, r0
 80020fc:	461a      	mov	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	805a      	strh	r2, [r3, #2]

        /* Compensated Mag Z data in int16_t format */
        mag_data->z = compensate_z(raw_mag_data.raw_dataz, raw_mag_data.raw_data_r, dev);
 8002102:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002106:	8a79      	ldrh	r1, [r7, #18]
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f000 faf8 	bl	8002700 <compensate_z>
 8002110:	4603      	mov	r3, r0
 8002112:	461a      	mov	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	809a      	strh	r2, [r3, #4]
    }

    return rslt;
 8002118:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3720      	adds	r7, #32
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmm150_dev *dev)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00f      	beq.n	8002152 <null_ptr_check+0x2e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00b      	beq.n	8002152 <null_ptr_check+0x2e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <null_ptr_check+0x2e>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800214e:	2b00      	cmp	r3, #0
 8002150:	d102      	bne.n	8002158 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMM150_E_NULL_PTR;
 8002152:	23ff      	movs	r3, #255	; 0xff
 8002154:	73fb      	strb	r3, [r7, #15]
 8002156:	e001      	b.n	800215c <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMM150_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800215c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <set_power_control_bit>:

/*!
 * @brief This internal API sets/resets the power control bit of 0x4B register.
 */
static int8_t set_power_control_bit(uint8_t pwrcntrl_bit, struct bmm150_dev *dev)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	6039      	str	r1, [r7, #0]
 8002176:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_data = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	73bb      	strb	r3, [r7, #14]

    /* Power control register 0x4B is read */
    rslt = bmm150_get_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 800217c:	f107 010e 	add.w	r1, r7, #14
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	2201      	movs	r2, #1
 8002184:	204b      	movs	r0, #75	; 0x4b
 8002186:	f7ff fe4d 	bl	8001e24 <bmm150_get_regs>
 800218a:	4603      	mov	r3, r0
 800218c:	73fb      	strb	r3, [r7, #15]

    /* Proceed if everything is fine until now */
    if (rslt == BMM150_OK)
 800218e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d11e      	bne.n	80021d4 <set_power_control_bit+0x68>
    {
        /* Sets the value of power control bit */
        reg_data = BMM150_SET_BITS_POS_0(reg_data, BMM150_PWR_CNTRL, pwrcntrl_bit);
 8002196:	7bbb      	ldrb	r3, [r7, #14]
 8002198:	b25b      	sxtb	r3, r3
 800219a:	f023 0301 	bic.w	r3, r3, #1
 800219e:	b25a      	sxtb	r2, r3
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	b25b      	sxtb	r3, r3
 80021aa:	4313      	orrs	r3, r2
 80021ac:	b25b      	sxtb	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 80021b2:	f107 010e 	add.w	r1, r7, #14
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	2201      	movs	r2, #1
 80021ba:	204b      	movs	r0, #75	; 0x4b
 80021bc:	f7ff fe06 	bl	8001dcc <bmm150_set_regs>
 80021c0:	4603      	mov	r3, r0
 80021c2:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMM150_OK)
 80021c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d103      	bne.n	80021d4 <set_power_control_bit+0x68>
        {
            /* Store the power control bit
             * value in dev structure
             */
            dev->pwr_cntrl_bit = pwrcntrl_bit;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	79fa      	ldrb	r2, [r7, #7]
 80021d0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        }
    }

    return rslt;
 80021d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <read_trim_registers>:
/*!
 * @brief This internal API reads the trim registers of the sensor and stores
 * the trim values in the "trim_data" of device structure.
 */
static int8_t read_trim_registers(struct bmm150_dev *dev)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t trim_x1y1[2] = { 0 };
 80021e8:	2300      	movs	r3, #0
 80021ea:	833b      	strh	r3, [r7, #24]
    uint8_t trim_xyz_data[4] = { 0 };
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
    uint8_t trim_xy1xy2[10] = { 0 };
 80021f0:	2300      	movs	r3, #0
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	f107 030c 	add.w	r3, r7, #12
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	809a      	strh	r2, [r3, #4]
    uint16_t temp_msb = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	83bb      	strh	r3, [r7, #28]

    /* Trim register value is read */
    rslt = bmm150_get_regs(BMM150_DIG_X1, trim_x1y1, 2, dev);
 8002202:	f107 0118 	add.w	r1, r7, #24
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2202      	movs	r2, #2
 800220a:	205d      	movs	r0, #93	; 0x5d
 800220c:	f7ff fe0a 	bl	8001e24 <bmm150_get_regs>
 8002210:	4603      	mov	r3, r0
 8002212:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 8002214:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d16e      	bne.n	80022fa <read_trim_registers+0x11a>
    {
        rslt = bmm150_get_regs(BMM150_DIG_Z4_LSB, trim_xyz_data, 4, dev);
 800221c:	f107 0114 	add.w	r1, r7, #20
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2204      	movs	r2, #4
 8002224:	2062      	movs	r0, #98	; 0x62
 8002226:	f7ff fdfd 	bl	8001e24 <bmm150_get_regs>
 800222a:	4603      	mov	r3, r0
 800222c:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMM150_OK)
 800222e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d161      	bne.n	80022fa <read_trim_registers+0x11a>
        {
            rslt = bmm150_get_regs(BMM150_DIG_Z2_LSB, trim_xy1xy2, 10, dev);
 8002236:	f107 0108 	add.w	r1, r7, #8
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	220a      	movs	r2, #10
 800223e:	2068      	movs	r0, #104	; 0x68
 8002240:	f7ff fdf0 	bl	8001e24 <bmm150_get_regs>
 8002244:	4603      	mov	r3, r0
 8002246:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMM150_OK)
 8002248:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d154      	bne.n	80022fa <read_trim_registers+0x11a>
            {
                /* Trim data which is read is updated
                 * in the device structure
                 */
                dev->trim_data.dig_x1 = (int8_t)trim_x1y1[0];
 8002250:	7e3b      	ldrb	r3, [r7, #24]
 8002252:	b25a      	sxtb	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	761a      	strb	r2, [r3, #24]
                dev->trim_data.dig_y1 = (int8_t)trim_x1y1[1];
 8002258:	7e7b      	ldrb	r3, [r7, #25]
 800225a:	b25a      	sxtb	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	765a      	strb	r2, [r3, #25]
                dev->trim_data.dig_x2 = (int8_t)trim_xyz_data[2];
 8002260:	7dbb      	ldrb	r3, [r7, #22]
 8002262:	b25a      	sxtb	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	769a      	strb	r2, [r3, #26]
                dev->trim_data.dig_y2 = (int8_t)trim_xyz_data[3];
 8002268:	7dfb      	ldrb	r3, [r7, #23]
 800226a:	b25a      	sxtb	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	76da      	strb	r2, [r3, #27]
                temp_msb = ((uint16_t)trim_xy1xy2[3]) << 8;
 8002270:	7afb      	ldrb	r3, [r7, #11]
 8002272:	b29b      	uxth	r3, r3
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z1 = (uint16_t)(temp_msb | trim_xy1xy2[2]);
 8002278:	7abb      	ldrb	r3, [r7, #10]
 800227a:	b29a      	uxth	r2, r3
 800227c:	8bbb      	ldrh	r3, [r7, #28]
 800227e:	4313      	orrs	r3, r2
 8002280:	b29a      	uxth	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	839a      	strh	r2, [r3, #28]
                temp_msb = ((uint16_t)trim_xy1xy2[1]) << 8;
 8002286:	7a7b      	ldrb	r3, [r7, #9]
 8002288:	b29b      	uxth	r3, r3
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z2 = (int16_t)(temp_msb | trim_xy1xy2[0]);
 800228e:	7a3b      	ldrb	r3, [r7, #8]
 8002290:	b29a      	uxth	r2, r3
 8002292:	8bbb      	ldrh	r3, [r7, #28]
 8002294:	4313      	orrs	r3, r2
 8002296:	b29b      	uxth	r3, r3
 8002298:	b21a      	sxth	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	83da      	strh	r2, [r3, #30]
                temp_msb = ((uint16_t)trim_xy1xy2[7]) << 8;
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z3 = (int16_t)(temp_msb | trim_xy1xy2[6]);
 80022a6:	7bbb      	ldrb	r3, [r7, #14]
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	8bbb      	ldrh	r3, [r7, #28]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	b21a      	sxth	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	841a      	strh	r2, [r3, #32]
                temp_msb = ((uint16_t)trim_xyz_data[1]) << 8;
 80022b6:	7d7b      	ldrb	r3, [r7, #21]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z4 = (int16_t)(temp_msb | trim_xyz_data[0]);
 80022be:	7d3b      	ldrb	r3, [r7, #20]
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	8bbb      	ldrh	r3, [r7, #28]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	b21a      	sxth	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	845a      	strh	r2, [r3, #34]	; 0x22
                dev->trim_data.dig_xy1 = trim_xy1xy2[9];
 80022ce:	7c7a      	ldrb	r2, [r7, #17]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                dev->trim_data.dig_xy2 = (int8_t)trim_xy1xy2[8];
 80022d6:	7c3b      	ldrb	r3, [r7, #16]
 80022d8:	b25a      	sxtb	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
 80022e0:	7b7b      	ldrb	r3, [r7, #13]
 80022e2:	021b      	lsls	r3, r3, #8
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80022ea:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
 80022ec:	7b3b      	ldrb	r3, [r7, #12]
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	8bbb      	ldrh	r3, [r7, #28]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	84da      	strh	r2, [r3, #38]	; 0x26
            }
        }
    }

    return rslt;
 80022fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <write_op_mode>:
/*!
 * @brief This internal API writes the op_mode value in the Opmode bits
 * (bits 1 and 2) of 0x4C register.
 */
static int8_t write_op_mode(uint8_t op_mode, struct bmm150_dev *dev)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	6039      	str	r1, [r7, #0]
 8002310:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_data;

    /* Read the 0x4C register */
    rslt = bmm150_get_regs(BMM150_REG_OP_MODE, &reg_data, 1, dev);
 8002312:	f107 010e 	add.w	r1, r7, #14
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2201      	movs	r2, #1
 800231a:	204c      	movs	r0, #76	; 0x4c
 800231c:	f7ff fd82 	bl	8001e24 <bmm150_get_regs>
 8002320:	4603      	mov	r3, r0
 8002322:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 8002324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d117      	bne.n	800235c <write_op_mode+0x56>
    {
        /* Set the op_mode value in Opmode bits of 0x4C */
        reg_data = BMM150_SET_BITS(reg_data, BMM150_OP_MODE, op_mode);
 800232c:	7bbb      	ldrb	r3, [r7, #14]
 800232e:	b25b      	sxtb	r3, r3
 8002330:	f023 0306 	bic.w	r3, r3, #6
 8002334:	b25a      	sxtb	r2, r3
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	b25b      	sxtb	r3, r3
 800233c:	f003 0306 	and.w	r3, r3, #6
 8002340:	b25b      	sxtb	r3, r3
 8002342:	4313      	orrs	r3, r2
 8002344:	b25b      	sxtb	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_OP_MODE, &reg_data, 1, dev);
 800234a:	f107 010e 	add.w	r1, r7, #14
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	2201      	movs	r2, #1
 8002352:	204c      	movs	r0, #76	; 0x4c
 8002354:	f7ff fd3a 	bl	8001dcc <bmm150_set_regs>
 8002358:	4603      	mov	r3, r0
 800235a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800235c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <suspend_to_sleep_mode>:
/*!
 * @brief This internal API sets the device from suspend to sleep mode
 * by setting the power control bit to '1' of 0x4B register
 */
static int8_t suspend_to_sleep_mode(struct bmm150_dev *dev)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff fed7 	bl	8002124 <null_ptr_check>
 8002376:	4603      	mov	r3, r0
 8002378:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMM150_OK)
 800237a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d112      	bne.n	80023a8 <suspend_to_sleep_mode+0x40>
    {
        if (dev->pwr_cntrl_bit == BMM150_POWER_CNTRL_DISABLE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10d      	bne.n	80023a8 <suspend_to_sleep_mode+0x40>
        {
            rslt = set_power_control_bit(BMM150_POWER_CNTRL_ENABLE, dev);
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	2001      	movs	r0, #1
 8002390:	f7ff feec 	bl	800216c <set_power_control_bit>
 8002394:	4603      	mov	r3, r0
 8002396:	73fb      	strb	r3, [r7, #15]

            /* Start-up time delay of 3ms */
            dev->delay_us(BMM150_START_UP_TIME, dev->intf_ptr);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6852      	ldr	r2, [r2, #4]
 80023a0:	4611      	mov	r1, r2
 80023a2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80023a6:	4798      	blx	r3
        }
    }

    return rslt;
 80023a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <set_xy_rep>:

/*!
 * @brief This internal API sets the xy repetition value in the 0x51 register.
 */
static int8_t set_xy_rep(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t rep_xy;

    /* Set the xy repetition */
    rep_xy = settings->xy_rep;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	78db      	ldrb	r3, [r3, #3]
 80023c2:	73bb      	strb	r3, [r7, #14]
    rslt = bmm150_set_regs(BMM150_REG_REP_XY, &rep_xy, 1, dev);
 80023c4:	f107 010e 	add.w	r1, r7, #14
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	2201      	movs	r2, #1
 80023cc:	2051      	movs	r0, #81	; 0x51
 80023ce:	f7ff fcfd 	bl	8001dcc <bmm150_set_regs>
 80023d2:	4603      	mov	r3, r0
 80023d4:	73fb      	strb	r3, [r7, #15]

    return rslt;
 80023d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <set_z_rep>:

/*!
 * @brief This internal API sets the z repetition value in the 0x52 register.
 */
static int8_t set_z_rep(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t rep_z;

    /* Set the z repetition */
    rep_z = settings->z_rep;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	791b      	ldrb	r3, [r3, #4]
 80023f0:	73bb      	strb	r3, [r7, #14]
    rslt = bmm150_set_regs(BMM150_REG_REP_Z, &rep_z, 1, dev);
 80023f2:	f107 010e 	add.w	r1, r7, #14
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2201      	movs	r2, #1
 80023fa:	2052      	movs	r0, #82	; 0x52
 80023fc:	f7ff fce6 	bl	8001dcc <bmm150_set_regs>
 8002400:	4603      	mov	r3, r0
 8002402:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8002404:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <set_odr>:

/*!
 * @brief This internal API is used to set the output data rate of the sensor.
 */
static int8_t set_odr(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    /* Read the 0x4C register */
    rslt = bmm150_get_regs(BMM150_REG_OP_MODE, &reg_data, 1, dev);
 800241a:	f107 010e 	add.w	r1, r7, #14
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2201      	movs	r2, #1
 8002422:	204c      	movs	r0, #76	; 0x4c
 8002424:	f7ff fcfe 	bl	8001e24 <bmm150_get_regs>
 8002428:	4603      	mov	r3, r0
 800242a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800242c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d118      	bne.n	8002466 <set_odr+0x56>
    {
        /* Set the ODR value */
        reg_data = BMM150_SET_BITS(reg_data, BMM150_ODR, settings->data_rate);
 8002434:	7bbb      	ldrb	r3, [r7, #14]
 8002436:	b25b      	sxtb	r3, r3
 8002438:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800243c:	b25a      	sxtb	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	789b      	ldrb	r3, [r3, #2]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	b25b      	sxtb	r3, r3
 8002446:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800244a:	b25b      	sxtb	r3, r3
 800244c:	4313      	orrs	r3, r2
 800244e:	b25b      	sxtb	r3, r3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_OP_MODE, &reg_data, 1, dev);
 8002454:	f107 010e 	add.w	r1, r7, #14
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2201      	movs	r2, #1
 800245c:	204c      	movs	r0, #76	; 0x4c
 800245e:	f7ff fcb5 	bl	8001dcc <bmm150_set_regs>
 8002462:	4603      	mov	r3, r0
 8002464:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002466:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <set_odr_xyz_rep>:

/*!
 * @brief This internal API sets the preset mode ODR and repetition settings.
 */
static int8_t set_odr_xyz_rep(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Set the ODR */
    rslt = set_odr(settings, dev);
 800247c:	6839      	ldr	r1, [r7, #0]
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ffc6 	bl	8002410 <set_odr>
 8002484:	4603      	mov	r3, r0
 8002486:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 8002488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10f      	bne.n	80024b0 <set_odr_xyz_rep+0x3e>
    {
        /* Set the XY-repetitions number */
        rslt = set_xy_rep(settings, dev);
 8002490:	6839      	ldr	r1, [r7, #0]
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ff8e 	bl	80023b4 <set_xy_rep>
 8002498:	4603      	mov	r3, r0
 800249a:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMM150_OK)
 800249c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <set_odr_xyz_rep+0x3e>
        {
            /* Set the Z-repetitions number */
            rslt = set_z_rep(settings, dev);
 80024a4:	6839      	ldr	r1, [r7, #0]
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff ff9b 	bl	80023e2 <set_z_rep>
 80024ac:	4603      	mov	r3, r0
 80024ae:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80024b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <compensate_x>:
/*!
 * @brief This internal API is used to obtain the compensated
 * magnetometer X axis data(micro-tesla) in int16_t.
 */
static int16_t compensate_x(int16_t mag_data_x, uint16_t data_rhall, const struct bmm150_dev *dev)
{
 80024bc:	b480      	push	{r7}
 80024be:	b08f      	sub	sp, #60	; 0x3c
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	603a      	str	r2, [r7, #0]
 80024c6:	80fb      	strh	r3, [r7, #6]
 80024c8:	460b      	mov	r3, r1
 80024ca:	80bb      	strh	r3, [r7, #4]
    int16_t retval;
    uint16_t process_comp_x0 = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	86bb      	strh	r3, [r7, #52]	; 0x34
    int32_t process_comp_x8;
    int32_t process_comp_x9;
    int32_t process_comp_x10;

    /* Overflow condition check */
    if (mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
 80024d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024d4:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80024d8:	d077      	beq.n	80025ca <compensate_x+0x10e>
    {
        if (data_rhall != 0)
 80024da:	88bb      	ldrh	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <compensate_x+0x2a>
        {
            /* Availability of valid data */
            process_comp_x0 = data_rhall;
 80024e0:	88bb      	ldrh	r3, [r7, #4]
 80024e2:	86bb      	strh	r3, [r7, #52]	; 0x34
 80024e4:	e009      	b.n	80024fa <compensate_x+0x3e>
        }
        else if (dev->trim_data.dig_xyz1 != 0)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <compensate_x+0x3a>
        {
            process_comp_x0 = dev->trim_data.dig_xyz1;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024f2:	86bb      	strh	r3, [r7, #52]	; 0x34
 80024f4:	e001      	b.n	80024fa <compensate_x+0x3e>
        }
        else
        {
            process_comp_x0 = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	86bb      	strh	r3, [r7, #52]	; 0x34
        }

        if (process_comp_x0 != 0)
 80024fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d060      	beq.n	80025c2 <compensate_x+0x106>
        {
            /* Processing compensation equations */
            process_comp_x1 = ((int32_t)dev->trim_data.dig_xyz1) * 16384;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002504:	039b      	lsls	r3, r3, #14
 8002506:	633b      	str	r3, [r7, #48]	; 0x30
            process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);
 8002508:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800250a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800250c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002510:	b29b      	uxth	r3, r3
 8002512:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8002516:	85fb      	strh	r3, [r7, #46]	; 0x2e
            retval = ((int16_t)process_comp_x2);
 8002518:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800251a:	86fb      	strh	r3, [r7, #54]	; 0x36
            process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));
 800251c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002520:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8002524:	fb02 f303 	mul.w	r3, r2, r3
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28
            process_comp_x4 = (((int32_t)dev->trim_data.dig_xy2) * (process_comp_x3 / 128));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	f993 3025 	ldrsb.w	r3, [r3, #37]	; 0x25
 8002530:	461a      	mov	r2, r3
 8002532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002534:	2b00      	cmp	r3, #0
 8002536:	da00      	bge.n	800253a <compensate_x+0x7e>
 8002538:	337f      	adds	r3, #127	; 0x7f
 800253a:	11db      	asrs	r3, r3, #7
 800253c:	fb02 f303 	mul.w	r3, r2, r3
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
            process_comp_x5 = (int32_t)(((int16_t)dev->trim_data.dig_xy1) * 128);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002548:	01db      	lsls	r3, r3, #7
 800254a:	623b      	str	r3, [r7, #32]
            process_comp_x6 = ((int32_t)retval) * process_comp_x5;
 800254c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	61fb      	str	r3, [r7, #28]
            process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));
 8002558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	4413      	add	r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	da01      	bge.n	8002566 <compensate_x+0xaa>
 8002562:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002566:	125b      	asrs	r3, r3, #9
 8002568:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800256c:	61bb      	str	r3, [r7, #24]
            process_comp_x8 = ((int32_t)(((int16_t)dev->trim_data.dig_x2) + ((int16_t)0xA0)));
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8002574:	33a0      	adds	r3, #160	; 0xa0
 8002576:	617b      	str	r3, [r7, #20]
            process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	fb02 f303 	mul.w	r3, r2, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	da01      	bge.n	8002588 <compensate_x+0xcc>
 8002584:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002588:	131b      	asrs	r3, r3, #12
 800258a:	613b      	str	r3, [r7, #16]
            process_comp_x10 = ((int32_t)mag_data_x) * process_comp_x9;
 800258c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	60fb      	str	r3, [r7, #12]
            retval = ((int16_t)(process_comp_x10 / 8192));
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	da02      	bge.n	80025a4 <compensate_x+0xe8>
 800259e:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80025a2:	331f      	adds	r3, #31
 80025a4:	135b      	asrs	r3, r3, #13
 80025a6:	86fb      	strh	r3, [r7, #54]	; 0x36
            retval = (retval + (((int16_t)dev->trim_data.dig_x1) * 8)) / 16;
 80025a8:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4413      	add	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	da00      	bge.n	80025bc <compensate_x+0x100>
 80025ba:	330f      	adds	r3, #15
 80025bc:	111b      	asrs	r3, r3, #4
 80025be:	86fb      	strh	r3, [r7, #54]	; 0x36
 80025c0:	e006      	b.n	80025d0 <compensate_x+0x114>
        }
        else
        {
            retval = BMM150_OVERFLOW_OUTPUT;
 80025c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025c6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80025c8:	e002      	b.n	80025d0 <compensate_x+0x114>
        }
    }
    else
    {
        /* Overflow condition */
        retval = BMM150_OVERFLOW_OUTPUT;
 80025ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ce:	86fb      	strh	r3, [r7, #54]	; 0x36
    }

    return retval;
 80025d0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	373c      	adds	r7, #60	; 0x3c
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <compensate_y>:
/*!
 * @brief This internal API is used to obtain the compensated
 * magnetometer Y axis data(micro-tesla) in int16_t.
 */
static int16_t compensate_y(int16_t mag_data_y, uint16_t data_rhall, const struct bmm150_dev *dev)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b08d      	sub	sp, #52	; 0x34
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	603a      	str	r2, [r7, #0]
 80025ea:	80fb      	strh	r3, [r7, #6]
 80025ec:	460b      	mov	r3, r1
 80025ee:	80bb      	strh	r3, [r7, #4]
    int16_t retval;
    uint16_t process_comp_y0 = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
    int32_t process_comp_y7;
    int32_t process_comp_y8;
    int32_t process_comp_y9;

    /* Overflow condition check */
    if (mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
 80025f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025f8:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80025fc:	d075      	beq.n	80026ea <compensate_y+0x10a>
    {
        if (data_rhall != 0)
 80025fe:	88bb      	ldrh	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <compensate_y+0x2a>
        {
            /* Availability of valid data */
            process_comp_y0 = data_rhall;
 8002604:	88bb      	ldrh	r3, [r7, #4]
 8002606:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002608:	e009      	b.n	800261e <compensate_y+0x3e>
        }
        else if (dev->trim_data.dig_xyz1 != 0)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <compensate_y+0x3a>
        {
            process_comp_y0 = dev->trim_data.dig_xyz1;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002616:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002618:	e001      	b.n	800261e <compensate_y+0x3e>
        }
        else
        {
            process_comp_y0 = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }

        if (process_comp_y0 != 0)
 800261e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002620:	2b00      	cmp	r3, #0
 8002622:	d05e      	beq.n	80026e2 <compensate_y+0x102>
        {
            /* Processing compensation equations */
            process_comp_y1 = (((int32_t)dev->trim_data.dig_xyz1) * 16384) / process_comp_y0;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002628:	039a      	lsls	r2, r3, #14
 800262a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800262c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002630:	62bb      	str	r3, [r7, #40]	; 0x28
            process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	b29b      	uxth	r3, r3
 8002636:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800263a:	84fb      	strh	r3, [r7, #38]	; 0x26
            retval = ((int16_t)process_comp_y2);
 800263c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800263e:	85fb      	strh	r3, [r7, #46]	; 0x2e
            process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);
 8002640:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002644:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8002648:	fb02 f303 	mul.w	r3, r2, r3
 800264c:	623b      	str	r3, [r7, #32]
            process_comp_y4 = ((int32_t)dev->trim_data.dig_xy2) * (process_comp_y3 / 128);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f993 3025 	ldrsb.w	r3, [r3, #37]	; 0x25
 8002654:	461a      	mov	r2, r3
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	2b00      	cmp	r3, #0
 800265a:	da00      	bge.n	800265e <compensate_y+0x7e>
 800265c:	337f      	adds	r3, #127	; 0x7f
 800265e:	11db      	asrs	r3, r3, #7
 8002660:	fb02 f303 	mul.w	r3, r2, r3
 8002664:	61fb      	str	r3, [r7, #28]
            process_comp_y5 = ((int32_t)(((int16_t)dev->trim_data.dig_xy1) * 128));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800266c:	01db      	lsls	r3, r3, #7
 800266e:	61bb      	str	r3, [r7, #24]
            process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);
 8002670:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	fb03 f202 	mul.w	r2, r3, r2
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	4413      	add	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	da01      	bge.n	8002686 <compensate_y+0xa6>
 8002682:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002686:	125b      	asrs	r3, r3, #9
 8002688:	617b      	str	r3, [r7, #20]
            process_comp_y7 = ((int32_t)(((int16_t)dev->trim_data.dig_y2) + ((int16_t)0xA0)));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	f993 301b 	ldrsb.w	r3, [r3, #27]
 8002690:	33a0      	adds	r3, #160	; 0xa0
 8002692:	613b      	str	r3, [r7, #16]
            process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	fb02 f303 	mul.w	r3, r2, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	da01      	bge.n	80026a8 <compensate_y+0xc8>
 80026a4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80026a8:	131b      	asrs	r3, r3, #12
 80026aa:	60fb      	str	r3, [r7, #12]
            process_comp_y9 = (((int32_t)mag_data_y) * process_comp_y8);
 80026ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	60bb      	str	r3, [r7, #8]
            retval = (int16_t)(process_comp_y9 / 8192);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	da02      	bge.n	80026c4 <compensate_y+0xe4>
 80026be:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80026c2:	331f      	adds	r3, #31
 80026c4:	135b      	asrs	r3, r3, #13
 80026c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
            retval = (retval + (((int16_t)dev->trim_data.dig_y1) * 8)) / 16;
 80026c8:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	f993 3019 	ldrsb.w	r3, [r3, #25]
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4413      	add	r3, r2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	da00      	bge.n	80026dc <compensate_y+0xfc>
 80026da:	330f      	adds	r3, #15
 80026dc:	111b      	asrs	r3, r3, #4
 80026de:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80026e0:	e006      	b.n	80026f0 <compensate_y+0x110>
        }
        else
        {
            retval = BMM150_OVERFLOW_OUTPUT;
 80026e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80026e8:	e002      	b.n	80026f0 <compensate_y+0x110>
        }
    }
    else
    {
        /* Overflow condition */
        retval = BMM150_OVERFLOW_OUTPUT;
 80026ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    return retval;
 80026f0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3734      	adds	r7, #52	; 0x34
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <compensate_z>:
/*!
 * @brief This internal API is used to obtain the compensated
 * magnetometer Z axis data(micro-tesla) in int16_t.
 */
static int16_t compensate_z(int16_t mag_data_z, uint16_t data_rhall, const struct bmm150_dev *dev)
{
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	; 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	603a      	str	r2, [r7, #0]
 800270a:	80fb      	strh	r3, [r7, #6]
 800270c:	460b      	mov	r3, r1
 800270e:	80bb      	strh	r3, [r7, #4]
    int32_t process_comp_z1;
    int32_t process_comp_z2;
    int32_t process_comp_z3;
    int16_t process_comp_z4;

    if (mag_data_z != BMM150_OVERFLOW_ADCVAL_ZAXIS_HALL)
 8002710:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002714:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8002718:	d062      	beq.n	80027e0 <compensate_z+0xe0>
    {
        if ((dev->trim_data.dig_z2 != 0) && (dev->trim_data.dig_z1 != 0) && (data_rhall != 0) &&
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d05a      	beq.n	80027da <compensate_z+0xda>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	8b9b      	ldrh	r3, [r3, #28]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d056      	beq.n	80027da <compensate_z+0xda>
 800272c:	88bb      	ldrh	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d053      	beq.n	80027da <compensate_z+0xda>
            (dev->trim_data.dig_xyz1 != 0))
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
        if ((dev->trim_data.dig_z2 != 0) && (dev->trim_data.dig_z1 != 0) && (data_rhall != 0) &&
 8002736:	2b00      	cmp	r3, #0
 8002738:	d04f      	beq.n	80027da <compensate_z+0xda>
        {
            /*Processing compensation equations */
            process_comp_z0 = ((int16_t)data_rhall) - ((int16_t) dev->trim_data.dig_xyz1);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800273e:	88ba      	ldrh	r2, [r7, #4]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	b29b      	uxth	r3, r3
 8002744:	837b      	strh	r3, [r7, #26]
            process_comp_z1 = (((int32_t)dev->trim_data.dig_z3) * ((int32_t)(process_comp_z0))) / 4;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800274c:	461a      	mov	r2, r3
 800274e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002752:	fb02 f303 	mul.w	r3, r2, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	da00      	bge.n	800275c <compensate_z+0x5c>
 800275a:	3303      	adds	r3, #3
 800275c:	109b      	asrs	r3, r3, #2
 800275e:	617b      	str	r3, [r7, #20]
            process_comp_z2 = (((int32_t)(mag_data_z - dev->trim_data.dig_z4)) * 32768);
 8002760:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 800276a:	1a9b      	subs	r3, r3, r2
 800276c:	03db      	lsls	r3, r3, #15
 800276e:	613b      	str	r3, [r7, #16]
            process_comp_z3 = ((int32_t)dev->trim_data.dig_z1) * (((int16_t)data_rhall) * 2);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	8b9b      	ldrh	r3, [r3, #28]
 8002774:	461a      	mov	r2, r3
 8002776:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fb02 f303 	mul.w	r3, r2, r3
 8002780:	60fb      	str	r3, [r7, #12]
            process_comp_z4 = (int16_t)((process_comp_z3 + (32768)) / 65536);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002788:	2b00      	cmp	r3, #0
 800278a:	da02      	bge.n	8002792 <compensate_z+0x92>
 800278c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002790:	33ff      	adds	r3, #255	; 0xff
 8002792:	141b      	asrs	r3, r3, #16
 8002794:	817b      	strh	r3, [r7, #10]
            retval = ((process_comp_z2 - process_comp_z1) / (dev->trim_data.dig_z2 + process_comp_z4));
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	1ad2      	subs	r2, r2, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80027a2:	4619      	mov	r1, r3
 80027a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80027a8:	440b      	add	r3, r1
 80027aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80027ae:	61fb      	str	r3, [r7, #28]

            /* Saturate result to +/- 2 micro-tesla */
            if (retval > BMM150_POSITIVE_SATURATION_Z)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027b6:	db03      	blt.n	80027c0 <compensate_z+0xc0>
            {
                retval = BMM150_POSITIVE_SATURATION_Z;
 80027b8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	e005      	b.n	80027cc <compensate_z+0xcc>
            }
            else if (retval < BMM150_NEGATIVE_SATURATION_Z)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80027c6:	dc01      	bgt.n	80027cc <compensate_z+0xcc>
            {
                retval = BMM150_NEGATIVE_SATURATION_Z;
 80027c8:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <compensate_z+0xf4>)
 80027ca:	61fb      	str	r3, [r7, #28]
            }

            /* Conversion of LSB to micro-tesla */
            retval = retval / 16;
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	da00      	bge.n	80027d4 <compensate_z+0xd4>
 80027d2:	330f      	adds	r3, #15
 80027d4:	111b      	asrs	r3, r3, #4
 80027d6:	61fb      	str	r3, [r7, #28]
 80027d8:	e004      	b.n	80027e4 <compensate_z+0xe4>
        }
        else
        {
            retval = BMM150_OVERFLOW_OUTPUT;
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <compensate_z+0xf8>)
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	e001      	b.n	80027e4 <compensate_z+0xe4>
        }
    }
    else
    {
        /* Overflow condition */
        retval = BMM150_OVERFLOW_OUTPUT;
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <compensate_z+0xf8>)
 80027e2:	61fb      	str	r3, [r7, #28]
    }

    return (int16_t)retval;
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	b21b      	sxth	r3, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3724      	adds	r7, #36	; 0x24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	ffff8001 	.word	0xffff8001
 80027f8:	ffff8000 	.word	0xffff8000

080027fc <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fa53 	bl	8002cb0 <null_ptr_check>
 800280a:	4603      	mov	r3, r0
 800280c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 800280e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d117      	bne.n	8002846 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	20d0      	movs	r0, #208	; 0xd0
 800281e:	f000 f818 	bl	8002852 <bmp2_get_regs>
 8002822:	4603      	mov	r3, r0
 8002824:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8002826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10b      	bne.n	8002846 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b58      	cmp	r3, #88	; 0x58
 8002834:	d105      	bne.n	8002842 <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fa85 	bl	8002d46 <get_calib_param>
 800283c:	4603      	mov	r3, r0
 800283e:	73fb      	strb	r3, [r7, #15]
 8002840:	e001      	b.n	8002846 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8002842:	23fc      	movs	r3, #252	; 0xfc
 8002844:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002846:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8002852:	b590      	push	{r4, r7, lr}
 8002854:	b087      	sub	sp, #28
 8002856:	af00      	add	r7, sp, #0
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	4603      	mov	r3, r0
 8002860:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8002862:	6838      	ldr	r0, [r7, #0]
 8002864:	f000 fa24 	bl	8002cb0 <null_ptr_check>
 8002868:	4603      	mov	r3, r0
 800286a:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 800286c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d11e      	bne.n	80028b2 <bmp2_get_regs+0x60>
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d01b      	beq.n	80028b2 <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	785b      	ldrb	r3, [r3, #1]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d103      	bne.n	800288a <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002888:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68dc      	ldr	r4, [r3, #12]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	7bf8      	ldrb	r0, [r7, #15]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	68b9      	ldr	r1, [r7, #8]
 8002898:	47a0      	blx	r4
 800289a:	4603      	mov	r3, r0
 800289c:	461a      	mov	r2, r3
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d004      	beq.n	80028b6 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 80028ac:	23fe      	movs	r3, #254	; 0xfe
 80028ae:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80028b0:	e001      	b.n	80028b6 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80028b2:	23ff      	movs	r3, #255	; 0xff
 80028b4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80028b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd90      	pop	{r4, r7, pc}

080028c2 <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 80028c2:	b590      	push	{r4, r7, lr}
 80028c4:	b08b      	sub	sp, #44	; 0x2c
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d901      	bls.n	80028da <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 80028d6:	2304      	movs	r3, #4
 80028d8:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 80028da:	6838      	ldr	r0, [r7, #0]
 80028dc:	f000 f9e8 	bl	8002cb0 <null_ptr_check>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80028e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d150      	bne.n	8002990 <bmp2_set_regs+0xce>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d04d      	beq.n	8002990 <bmp2_set_regs+0xce>
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d04a      	beq.n	8002990 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d043      	beq.n	8002988 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	785b      	ldrb	r3, [r3, #1]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d114      	bne.n	8002938 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800290e:	2300      	movs	r3, #0
 8002910:	77fb      	strb	r3, [r7, #31]
 8002912:	e00d      	b.n	8002930 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8002914:	7ffb      	ldrb	r3, [r7, #31]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4413      	add	r3, r2
 800291a:	781a      	ldrb	r2, [r3, #0]
 800291c:	7ffb      	ldrb	r3, [r7, #31]
 800291e:	68f9      	ldr	r1, [r7, #12]
 8002920:	440b      	add	r3, r1
 8002922:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800292a:	7ffb      	ldrb	r3, [r7, #31]
 800292c:	3301      	adds	r3, #1
 800292e:	77fb      	strb	r3, [r7, #31]
 8002930:	7ffb      	ldrb	r3, [r7, #31]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	d8ed      	bhi.n	8002914 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d90b      	bls.n	8002956 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 800293e:	f107 0114 	add.w	r1, r7, #20
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f9d2 	bl	8002cf0 <interleave_data>
                temp_len = ((len * 2) - 1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	3b01      	subs	r3, #1
 8002952:	623b      	str	r3, [r7, #32]
 8002954:	e001      	b.n	800295a <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	691c      	ldr	r4, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	7818      	ldrb	r0, [r3, #0]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f107 0114 	add.w	r1, r7, #20
 800296a:	6a3a      	ldr	r2, [r7, #32]
 800296c:	47a0      	blx	r4
 800296e:	4603      	mov	r3, r0
 8002970:	461a      	mov	r2, r3
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 8002980:	23fe      	movs	r3, #254	; 0xfe
 8002982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8002986:	e007      	b.n	8002998 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8002988:	23fd      	movs	r3, #253	; 0xfd
 800298a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 800298e:	e003      	b.n	8002998 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8002990:	23ff      	movs	r3, #255	; 0xff
 8002992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002996:	e000      	b.n	800299a <bmp2_set_regs+0xd8>
        if (len > 0)
 8002998:	bf00      	nop
    }

    return rslt;
 800299a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800299e:	4618      	mov	r0, r3
 80029a0:	372c      	adds	r7, #44	; 0x2c
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd90      	pop	{r4, r7, pc}

080029a6 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 80029ae:	23e0      	movs	r3, #224	; 0xe0
 80029b0:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 80029b2:	23b6      	movs	r3, #182	; 0xb6
 80029b4:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80029b6:	f107 010d 	add.w	r1, r7, #13
 80029ba:	f107 000e 	add.w	r0, r7, #14
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f7ff ff7e 	bl	80028c2 <bmp2_set_regs>
 80029c6:	4603      	mov	r3, r0
 80029c8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 80029ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d107      	bne.n	80029e2 <bmp2_soft_reset+0x3c>
    {
        /* Soft-reset execution takes 2 ms */
        dev->delay_us(BMP2_DELAY_US_STARTUP_TIME, dev->intf_ptr);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6852      	ldr	r2, [r2, #4]
 80029da:	4611      	mov	r1, r2
 80029dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029e0:	4798      	blx	r3
    }

    return rslt;
 80029e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80029f8:	2300      	movs	r3, #0
 80029fa:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d02d      	beq.n	8002a5e <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8002a02:	f107 010c 	add.w	r1, r7, #12
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	20f4      	movs	r0, #244	; 0xf4
 8002a0c:	f7ff ff21 	bl	8002852 <bmp2_get_regs>
 8002a10:	4603      	mov	r3, r0
 8002a12:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8002a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d122      	bne.n	8002a62 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8002a1c:	7b3b      	ldrb	r3, [r7, #12]
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 8002a26:	7b3b      	ldrb	r3, [r7, #12]
 8002a28:	109b      	asrs	r3, r3, #2
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 8002a36:	7b7b      	ldrb	r3, [r7, #13]
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8002a40:	7b7b      	ldrb	r3, [r7, #13]
 8002a42:	109b      	asrs	r3, r3, #2
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 8002a50:	7b7b      	ldrb	r3, [r7, #13]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	715a      	strb	r2, [r3, #5]
 8002a5c:	e001      	b.n	8002a62 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8002a5e:	23ff      	movs	r3, #255	; 0xff
 8002a60:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f000 f9fd 	bl	8002e7c <conf_sensor>
 8002a82:	4603      	mov	r3, r0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01b      	beq.n	8002ad4 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 8002a9c:	f107 010e 	add.w	r1, r7, #14
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	20f3      	movs	r0, #243	; 0xf3
 8002aa6:	f7ff fed4 	bl	8002852 <bmp2_get_regs>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8002aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d110      	bne.n	8002ad8 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 8002ab6:	7bbb      	ldrb	r3, [r7, #14]
 8002ab8:	10db      	asrs	r3, r3, #3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 8002ac6:	7bbb      	ldrb	r3, [r7, #14]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	705a      	strb	r2, [r3, #1]
 8002ad2:	e001      	b.n	8002ad8 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8002ad4:	23ff      	movs	r3, #255	; 0xff
 8002ad6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	68b9      	ldr	r1, [r7, #8]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 f9bf 	bl	8002e7c <conf_sensor>
 8002afe:	4603      	mov	r3, r0
 8002b00:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8002b02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b086      	sub	sp, #24
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8002b20:	f107 0308 	add.w	r3, r7, #8
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d024      	beq.n	8002b7a <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8002b30:	f107 0110 	add.w	r1, r7, #16
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2206      	movs	r2, #6
 8002b38:	20f7      	movs	r0, #247	; 0xf7
 8002b3a:	f7ff fe8a 	bl	8002852 <bmp2_get_regs>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8002b42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d119      	bne.n	8002b7e <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 8002b4a:	f107 0208 	add.w	r2, r7, #8
 8002b4e:	f107 0310 	add.w	r3, r7, #16
 8002b52:	4611      	mov	r1, r2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 fab9 	bl	80030cc <parse_sensor_data>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8002b5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10b      	bne.n	8002b7e <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 8002b66:	f107 0308 	add.w	r3, r7, #8
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f80b 	bl	8002b8a <bmp2_compensate_data>
 8002b74:	4603      	mov	r3, r0
 8002b76:	75fb      	strb	r3, [r7, #23]
 8002b78:	e001      	b.n	8002b7e <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8002b7a:	23ff      	movs	r3, #255	; 0xff
 8002b7c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002b7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b086      	sub	sp, #24
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f88a 	bl	8002cb0 <null_ptr_check>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8002ba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d129      	bne.n	8002bfc <bmp2_compensate_data+0x72>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d026      	beq.n	8002bfc <bmp2_compensate_data+0x72>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d023      	beq.n	8002bfc <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8002bc2:	68b9      	ldr	r1, [r7, #8]
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	3308      	adds	r3, #8
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68f9      	ldr	r1, [r7, #12]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 fabb 	bl	8003154 <compensate_temperature>
 8002bde:	4603      	mov	r3, r0
 8002be0:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8002be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10a      	bne.n	8002c00 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	68f9      	ldr	r1, [r7, #12]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fba5 	bl	8003340 <compensate_pressure>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 8002bfa:	e001      	b.n	8002c00 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8002bfc:	23ff      	movs	r3, #255	; 0xff
 8002bfe:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002c00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8002c0c:	b5b0      	push	{r4, r5, r7, lr}
 8002c0e:	b092      	sub	sp, #72	; 0x48
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8002c18:	4b23      	ldr	r3, [pc, #140]	; (8002ca8 <bmp2_compute_meas_time+0x9c>)
 8002c1a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8002c1e:	461d      	mov	r5, r3
 8002c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c24:	682b      	ldr	r3, [r5, #0]
 8002c26:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8002c28:	4b20      	ldr	r3, [pc, #128]	; (8002cac <bmp2_compute_meas_time+0xa0>)
 8002c2a:	f107 0410 	add.w	r4, r7, #16
 8002c2e:	461d      	mov	r5, r3
 8002c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c34:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002c38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f837 	bl	8002cb0 <null_ptr_check>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 8002c48:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d122      	bne.n	8002c96 <bmp2_compute_meas_time+0x8a>
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d01f      	beq.n	8002c96 <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	7e1b      	ldrb	r3, [r3, #24]
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d111      	bne.n	8002c82 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	78db      	ldrb	r3, [r3, #3]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	3348      	adds	r3, #72	; 0x48
 8002c66:	443b      	add	r3, r7
 8002c68:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	789b      	ldrb	r3, [r3, #2]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	3348      	adds	r3, #72	; 0x48
 8002c74:	443b      	add	r3, r7
 8002c76:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002c7a:	441a      	add	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8002c80:	e00c      	b.n	8002c9c <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	78db      	ldrb	r3, [r3, #3]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	3348      	adds	r3, #72	; 0x48
 8002c8a:	443b      	add	r3, r7
 8002c8c:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8002c94:	e002      	b.n	8002c9c <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8002c96:	23ff      	movs	r3, #255	; 0xff
 8002c98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8002c9c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3748      	adds	r7, #72	; 0x48
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ca8:	0800ea48 	.word	0x0800ea48
 8002cac:	0800ea5c 	.word	0x0800ea5c

08002cb0 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <null_ptr_check+0x26>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d007      	beq.n	8002cd6 <null_ptr_check+0x26>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <null_ptr_check+0x26>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d102      	bne.n	8002cdc <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 8002cd6:	23ff      	movs	r3, #255	; 0xff
 8002cd8:	73fb      	strb	r3, [r7, #15]
 8002cda:	e001      	b.n	8002ce0 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8002cfe:	2301      	movs	r3, #1
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	e015      	b.n	8002d30 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	441a      	add	r2, r3
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	440b      	add	r3, r1
 8002d14:	7812      	ldrb	r2, [r2, #0]
 8002d16:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	441a      	add	r2, r3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	68b9      	ldr	r1, [r7, #8]
 8002d24:	440b      	add	r3, r1
 8002d26:	7812      	ldrb	r2, [r2, #0]
 8002d28:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d3e5      	bcc.n	8002d04 <interleave_data+0x14>
    }
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	371c      	adds	r7, #28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b08a      	sub	sp, #40	; 0x28
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	f107 0310 	add.w	r3, r7, #16
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	605a      	str	r2, [r3, #4]
 8002d5c:	609a      	str	r2, [r3, #8]
 8002d5e:	60da      	str	r2, [r3, #12]
 8002d60:	611a      	str	r2, [r3, #16]
 8002d62:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 8002d64:	f107 010c 	add.w	r1, r7, #12
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2219      	movs	r2, #25
 8002d6c:	2088      	movs	r0, #136	; 0x88
 8002d6e:	f7ff fd70 	bl	8002852 <bmp2_get_regs>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 8002d78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d177      	bne.n	8002e70 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 8002d80:	7b7b      	ldrb	r3, [r7, #13]
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	b21a      	sxth	r2, r3
 8002d86:	7b3b      	ldrb	r3, [r7, #12]
 8002d88:	b21b      	sxth	r3, r3
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	b21b      	sxth	r3, r3
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	b21a      	sxth	r2, r3
 8002d9a:	7bbb      	ldrb	r3, [r7, #14]
 8002d9c:	b21b      	sxth	r3, r3
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	b21a      	sxth	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 8002da6:	7c7b      	ldrb	r3, [r7, #17]
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	b21a      	sxth	r2, r3
 8002dac:	7c3b      	ldrb	r3, [r7, #16]
 8002dae:	b21b      	sxth	r3, r3
 8002db0:	4313      	orrs	r3, r2
 8002db2:	b21a      	sxth	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 8002db8:	7cfb      	ldrb	r3, [r7, #19]
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	b21a      	sxth	r2, r3
 8002dbe:	7cbb      	ldrb	r3, [r7, #18]
 8002dc0:	b21b      	sxth	r3, r3
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	b21b      	sxth	r3, r3
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8002dcc:	7d7b      	ldrb	r3, [r7, #21]
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	b21a      	sxth	r2, r3
 8002dd2:	7d3b      	ldrb	r3, [r7, #20]
 8002dd4:	b21b      	sxth	r3, r3
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	b21a      	sxth	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8002dde:	7dfb      	ldrb	r3, [r7, #23]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	b21a      	sxth	r2, r3
 8002de4:	7dbb      	ldrb	r3, [r7, #22]
 8002de6:	b21b      	sxth	r3, r3
 8002de8:	4313      	orrs	r3, r2
 8002dea:	b21a      	sxth	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8002df0:	7e7b      	ldrb	r3, [r7, #25]
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	b21a      	sxth	r2, r3
 8002df6:	7e3b      	ldrb	r3, [r7, #24]
 8002df8:	b21b      	sxth	r3, r3
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	b21a      	sxth	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8002e02:	7efb      	ldrb	r3, [r7, #27]
 8002e04:	021b      	lsls	r3, r3, #8
 8002e06:	b21a      	sxth	r2, r3
 8002e08:	7ebb      	ldrb	r3, [r7, #26]
 8002e0a:	b21b      	sxth	r3, r3
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	b21a      	sxth	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8002e14:	7f7b      	ldrb	r3, [r7, #29]
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	b21a      	sxth	r2, r3
 8002e1a:	7f3b      	ldrb	r3, [r7, #28]
 8002e1c:	b21b      	sxth	r3, r3
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	b21a      	sxth	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 8002e26:	7ffb      	ldrb	r3, [r7, #31]
 8002e28:	021b      	lsls	r3, r3, #8
 8002e2a:	b21a      	sxth	r2, r3
 8002e2c:	7fbb      	ldrb	r3, [r7, #30]
 8002e2e:	b21b      	sxth	r3, r3
 8002e30:	4313      	orrs	r3, r2
 8002e32:	b21a      	sxth	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8002e38:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002e3c:	021b      	lsls	r3, r3, #8
 8002e3e:	b21a      	sxth	r2, r3
 8002e40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e44:	b21b      	sxth	r3, r3
 8002e46:	4313      	orrs	r3, r2
 8002e48:	b21a      	sxth	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 8002e4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e52:	021b      	lsls	r3, r3, #8
 8002e54:	b21a      	sxth	r2, r3
 8002e56:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002e5a:	b21b      	sxth	r3, r3
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	b21a      	sxth	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 8002e64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e68:	b25a      	sxtb	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 8002e70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3728      	adds	r7, #40	; 0x28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 8002e8e:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8002e92:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d074      	beq.n	8002f84 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8002e9a:	f107 0114 	add.w	r1, r7, #20
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	20f4      	movs	r0, #244	; 0xf4
 8002ea4:	f7ff fcd5 	bl	8002852 <bmp2_get_regs>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8002eac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d169      	bne.n	8002f88 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff fd76 	bl	80029a6 <bmp2_soft_reset>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8002ebe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d160      	bne.n	8002f88 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 8002ec6:	f107 0314 	add.w	r3, r7, #20
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 f861 	bl	8002f94 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 8002ed2:	7d7b      	ldrb	r3, [r7, #21]
 8002ed4:	b25b      	sxtb	r3, r3
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	b25a      	sxtb	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	789b      	ldrb	r3, [r3, #2]
 8002ee0:	015b      	lsls	r3, r3, #5
 8002ee2:	b25b      	sxtb	r3, r3
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	b25b      	sxtb	r3, r3
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8002eec:	7d7b      	ldrb	r3, [r7, #21]
 8002eee:	b25b      	sxtb	r3, r3
 8002ef0:	f023 031c 	bic.w	r3, r3, #28
 8002ef4:	b25a      	sxtb	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	791b      	ldrb	r3, [r3, #4]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	b25b      	sxtb	r3, r3
 8002efe:	f003 031c 	and.w	r3, r3, #28
 8002f02:	b25b      	sxtb	r3, r3
 8002f04:	4313      	orrs	r3, r2
 8002f06:	b25b      	sxtb	r3, r3
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8002f0c:	7d7b      	ldrb	r3, [r7, #21]
 8002f0e:	b25b      	sxtb	r3, r3
 8002f10:	f023 0301 	bic.w	r3, r3, #1
 8002f14:	b25a      	sxtb	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	795b      	ldrb	r3, [r3, #5]
 8002f1a:	b25b      	sxtb	r3, r3
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	b25b      	sxtb	r3, r3
 8002f22:	4313      	orrs	r3, r2
 8002f24:	b25b      	sxtb	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 8002f2a:	f107 0114 	add.w	r1, r7, #20
 8002f2e:	f107 0010 	add.w	r0, r7, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2202      	movs	r2, #2
 8002f36:	f7ff fcc4 	bl	80028c2 <bmp2_set_regs>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 8002f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d120      	bne.n	8002f88 <conf_sensor+0x10c>
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01d      	beq.n	8002f88 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	7bfa      	ldrb	r2, [r7, #15]
 8002f50:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 8002f52:	7d3b      	ldrb	r3, [r7, #20]
 8002f54:	b25b      	sxtb	r3, r3
 8002f56:	f023 0303 	bic.w	r3, r3, #3
 8002f5a:	b25a      	sxtb	r2, r3
 8002f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	b25b      	sxtb	r3, r3
 8002f66:	4313      	orrs	r3, r2
 8002f68:	b25b      	sxtb	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 8002f6e:	f107 0114 	add.w	r1, r7, #20
 8002f72:	f107 0010 	add.w	r0, r7, #16
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f7ff fca2 	bl	80028c2 <bmp2_set_regs>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	75fb      	strb	r3, [r7, #23]
 8002f82:	e001      	b.n	8002f88 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8002f84:	23ff      	movs	r3, #255	; 0xff
 8002f86:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002f88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	78db      	ldrb	r3, [r3, #3]
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	f200 808b 	bhi.w	80030be <set_os_mode+0x12a>
 8002fa8:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <set_os_mode+0x1c>)
 8002faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fae:	bf00      	nop
 8002fb0:	08002fc5 	.word	0x08002fc5
 8002fb4:	08002ff7 	.word	0x08002ff7
 8002fb8:	08003029 	.word	0x08003029
 8002fbc:	0800305b 	.word	0x0800305b
 8002fc0:	0800308d 	.word	0x0800308d
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	b25b      	sxtb	r3, r3
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	b25b      	sxtb	r3, r3
 8002fd0:	f043 0320 	orr.w	r3, r3, #32
 8002fd4:	b25b      	sxtb	r3, r3
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	b25b      	sxtb	r3, r3
 8002fe2:	f023 031c 	bic.w	r3, r3, #28
 8002fe6:	b25b      	sxtb	r3, r3
 8002fe8:	f043 0304 	orr.w	r3, r3, #4
 8002fec:	b25b      	sxtb	r3, r3
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	701a      	strb	r2, [r3, #0]
            break;
 8002ff4:	e064      	b.n	80030c0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	b25b      	sxtb	r3, r3
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	b25b      	sxtb	r3, r3
 8003002:	f043 0320 	orr.w	r3, r3, #32
 8003006:	b25b      	sxtb	r3, r3
 8003008:	b2da      	uxtb	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	b25b      	sxtb	r3, r3
 8003014:	f023 031c 	bic.w	r3, r3, #28
 8003018:	b25b      	sxtb	r3, r3
 800301a:	f043 0308 	orr.w	r3, r3, #8
 800301e:	b25b      	sxtb	r3, r3
 8003020:	b2da      	uxtb	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	701a      	strb	r2, [r3, #0]
            break;
 8003026:	e04b      	b.n	80030c0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	b25b      	sxtb	r3, r3
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	b25b      	sxtb	r3, r3
 8003034:	f043 0320 	orr.w	r3, r3, #32
 8003038:	b25b      	sxtb	r3, r3
 800303a:	b2da      	uxtb	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	b25b      	sxtb	r3, r3
 8003046:	f023 031c 	bic.w	r3, r3, #28
 800304a:	b25b      	sxtb	r3, r3
 800304c:	f043 030c 	orr.w	r3, r3, #12
 8003050:	b25b      	sxtb	r3, r3
 8003052:	b2da      	uxtb	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	701a      	strb	r2, [r3, #0]
            break;
 8003058:	e032      	b.n	80030c0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	b25b      	sxtb	r3, r3
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	b25b      	sxtb	r3, r3
 8003066:	f043 0320 	orr.w	r3, r3, #32
 800306a:	b25b      	sxtb	r3, r3
 800306c:	b2da      	uxtb	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	b25b      	sxtb	r3, r3
 8003078:	f023 031c 	bic.w	r3, r3, #28
 800307c:	b25b      	sxtb	r3, r3
 800307e:	f043 0310 	orr.w	r3, r3, #16
 8003082:	b25b      	sxtb	r3, r3
 8003084:	b2da      	uxtb	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	701a      	strb	r2, [r3, #0]
            break;
 800308a:	e019      	b.n	80030c0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	b25b      	sxtb	r3, r3
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	b25b      	sxtb	r3, r3
 8003098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800309c:	b25b      	sxtb	r3, r3
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	b25b      	sxtb	r3, r3
 80030aa:	f023 031c 	bic.w	r3, r3, #28
 80030ae:	b25b      	sxtb	r3, r3
 80030b0:	f043 0314 	orr.w	r3, r3, #20
 80030b4:	b25b      	sxtb	r3, r3
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	701a      	strb	r2, [r3, #0]
            break;
 80030bc:	e000      	b.n	80030c0 <set_os_mode+0x12c>
        default:
            break;
 80030be:	bf00      	nop
    }
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	031b      	lsls	r3, r3, #12
 80030dc:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3301      	adds	r3, #1
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3302      	adds	r3, #2
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	431a      	orrs	r2, r3
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3303      	adds	r3, #3
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	031b      	lsls	r3, r3, #12
 800310a:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3304      	adds	r3, #4
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3305      	adds	r3, #5
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	b2db      	uxtb	r3, r3
 8003120:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	431a      	orrs	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	461a      	mov	r2, r3
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	4619      	mov	r1, r3
 800313c:	4610      	mov	r0, r2
 800313e:	f000 fae3 	bl	8003708 <st_check_boundaries>
 8003142:	4603      	mov	r3, r0
 8003144:	72fb      	strb	r3, [r7, #11]

    return rslt;
 8003146:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8003154:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003158:	b08c      	sub	sp, #48	; 0x30
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd f9e1 	bl	8000534 <__aeabi_i2d>
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	4b6c      	ldr	r3, [pc, #432]	; (8003328 <compensate_temperature+0x1d4>)
 8003178:	f7fd fb70 	bl	800085c <__aeabi_ddiv>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4614      	mov	r4, r2
 8003182:	461d      	mov	r5, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	8b9b      	ldrh	r3, [r3, #28]
 8003188:	4618      	mov	r0, r3
 800318a:	f7fd f9c3 	bl	8000514 <__aeabi_ui2d>
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	4b66      	ldr	r3, [pc, #408]	; (800332c <compensate_temperature+0x1d8>)
 8003194:	f7fd fb62 	bl	800085c <__aeabi_ddiv>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4620      	mov	r0, r4
 800319e:	4629      	mov	r1, r5
 80031a0:	f7fd f87a 	bl	8000298 <__aeabi_dsub>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4614      	mov	r4, r2
 80031aa:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd f9be 	bl	8000534 <__aeabi_i2d>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80031bc:	4620      	mov	r0, r4
 80031be:	4629      	mov	r1, r5
 80031c0:	f7fd fa22 	bl	8000608 <__aeabi_dmul>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd f9af 	bl	8000534 <__aeabi_i2d>
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80031de:	f7fd fb3d 	bl	800085c <__aeabi_ddiv>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4614      	mov	r4, r2
 80031e8:	461d      	mov	r5, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	8b9b      	ldrh	r3, [r3, #28]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd f990 	bl	8000514 <__aeabi_ui2d>
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	4b4d      	ldr	r3, [pc, #308]	; (8003330 <compensate_temperature+0x1dc>)
 80031fa:	f7fd fb2f 	bl	800085c <__aeabi_ddiv>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4620      	mov	r0, r4
 8003204:	4629      	mov	r1, r5
 8003206:	f7fd f847 	bl	8000298 <__aeabi_dsub>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4614      	mov	r4, r2
 8003210:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd f98c 	bl	8000534 <__aeabi_i2d>
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8003224:	f7fd fb1a 	bl	800085c <__aeabi_ddiv>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4690      	mov	r8, r2
 800322e:	4699      	mov	r9, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	8b9b      	ldrh	r3, [r3, #28]
 8003234:	4618      	mov	r0, r3
 8003236:	f7fd f96d 	bl	8000514 <__aeabi_ui2d>
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	4b3c      	ldr	r3, [pc, #240]	; (8003330 <compensate_temperature+0x1dc>)
 8003240:	f7fd fb0c 	bl	800085c <__aeabi_ddiv>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4640      	mov	r0, r8
 800324a:	4649      	mov	r1, r9
 800324c:	f7fd f824 	bl	8000298 <__aeabi_dsub>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8003254:	4620      	mov	r0, r4
 8003256:	4629      	mov	r1, r5
 8003258:	f7fd f9d6 	bl	8000608 <__aeabi_dmul>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4614      	mov	r4, r2
 8003262:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800326a:	4618      	mov	r0, r3
 800326c:	f7fd f962 	bl	8000534 <__aeabi_i2d>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
    var2 =
 8003274:	4620      	mov	r0, r4
 8003276:	4629      	mov	r1, r5
 8003278:	f7fd f9c6 	bl	8000608 <__aeabi_dmul>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8003284:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003288:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800328c:	f7fd f806 	bl	800029c <__adddf3>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4610      	mov	r0, r2
 8003296:	4619      	mov	r1, r3
 8003298:	f7fd fc50 	bl	8000b3c <__aeabi_d2iz>
 800329c:	4602      	mov	r2, r0
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 80032a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80032a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032aa:	f7fc fff7 	bl	800029c <__adddf3>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4610      	mov	r0, r2
 80032b4:	4619      	mov	r1, r3
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <compensate_temperature+0x1e0>)
 80032bc:	f7fd face 	bl	800085c <__aeabi_ddiv>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	4b1a      	ldr	r3, [pc, #104]	; (8003338 <compensate_temperature+0x1e4>)
 80032ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80032d2:	f7fd fc0b 	bl	8000aec <__aeabi_dcmplt>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d007      	beq.n	80032ec <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	4b15      	ldr	r3, [pc, #84]	; (8003338 <compensate_temperature+0x1e4>)
 80032e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 80032e6:	2301      	movs	r3, #1
 80032e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	4b12      	ldr	r3, [pc, #72]	; (800333c <compensate_temperature+0x1e8>)
 80032f2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80032f6:	f7fd fc17 	bl	8000b28 <__aeabi_dcmpgt>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d007      	beq.n	8003310 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	4b0d      	ldr	r3, [pc, #52]	; (800333c <compensate_temperature+0x1e8>)
 8003306:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 800330a:	2302      	movs	r3, #2
 800330c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 8003310:	68f9      	ldr	r1, [r7, #12]
 8003312:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003316:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800331a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800331e:	4618      	mov	r0, r3
 8003320:	3730      	adds	r7, #48	; 0x30
 8003322:	46bd      	mov	sp, r7
 8003324:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003328:	40d00000 	.word	0x40d00000
 800332c:	40900000 	.word	0x40900000
 8003330:	40c00000 	.word	0x40c00000
 8003334:	40b40000 	.word	0x40b40000
 8003338:	c0440000 	.word	0xc0440000
 800333c:	40554000 	.word	0x40554000

08003340 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8003340:	b5b0      	push	{r4, r5, r7, lr}
 8003342:	b08c      	sub	sp, #48	; 0x30
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd f8e6 	bl	8000534 <__aeabi_i2d>
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003370:	f7fd fa74 	bl	800085c <__aeabi_ddiv>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	4bcb      	ldr	r3, [pc, #812]	; (80036b0 <compensate_pressure+0x370>)
 8003382:	f7fc ff89 	bl	8000298 <__aeabi_dsub>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 800338e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003392:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003396:	f7fd f937 	bl	8000608 <__aeabi_dmul>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4614      	mov	r4, r2
 80033a0:	461d      	mov	r5, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd f8c3 	bl	8000534 <__aeabi_i2d>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4620      	mov	r0, r4
 80033b4:	4629      	mov	r1, r5
 80033b6:	f7fd f927 	bl	8000608 <__aeabi_dmul>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4610      	mov	r0, r2
 80033c0:	4619      	mov	r1, r3
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	4bbb      	ldr	r3, [pc, #748]	; (80036b4 <compensate_pressure+0x374>)
 80033c8:	f7fd fa48 	bl	800085c <__aeabi_ddiv>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd f8aa 	bl	8000534 <__aeabi_i2d>
 80033e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033e4:	f7fd f910 	bl	8000608 <__aeabi_dmul>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4610      	mov	r0, r2
 80033ee:	4619      	mov	r1, r3
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	f7fc ff52 	bl	800029c <__adddf3>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003400:	f7fc ff4c 	bl	800029c <__adddf3>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	4ba9      	ldr	r3, [pc, #676]	; (80036b8 <compensate_pressure+0x378>)
 8003412:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003416:	f7fd fa21 	bl	800085c <__aeabi_ddiv>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	4614      	mov	r4, r2
 8003420:	461d      	mov	r5, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003428:	4618      	mov	r0, r3
 800342a:	f7fd f883 	bl	8000534 <__aeabi_i2d>
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	4ba2      	ldr	r3, [pc, #648]	; (80036bc <compensate_pressure+0x37c>)
 8003434:	f7fd f8e8 	bl	8000608 <__aeabi_dmul>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4620      	mov	r0, r4
 800343e:	4629      	mov	r1, r5
 8003440:	f7fc ff2c 	bl	800029c <__adddf3>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003452:	4618      	mov	r0, r3
 8003454:	f7fd f86e 	bl	8000534 <__aeabi_i2d>
 8003458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800345c:	f7fd f8d4 	bl	8000608 <__aeabi_dmul>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4610      	mov	r0, r2
 8003466:	4619      	mov	r1, r3
 8003468:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800346c:	f7fd f8cc 	bl	8000608 <__aeabi_dmul>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4610      	mov	r0, r2
 8003476:	4619      	mov	r1, r3
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	4b90      	ldr	r3, [pc, #576]	; (80036c0 <compensate_pressure+0x380>)
 800347e:	f7fd f9ed 	bl	800085c <__aeabi_ddiv>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4614      	mov	r4, r2
 8003488:	461d      	mov	r5, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd f84f 	bl	8000534 <__aeabi_i2d>
 8003496:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800349a:	f7fd f8b5 	bl	8000608 <__aeabi_dmul>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4620      	mov	r0, r4
 80034a4:	4629      	mov	r1, r5
 80034a6:	f7fc fef9 	bl	800029c <__adddf3>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	4b82      	ldr	r3, [pc, #520]	; (80036c0 <compensate_pressure+0x380>)
 80034b8:	f7fd f9d0 	bl	800085c <__aeabi_ddiv>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	4b7a      	ldr	r3, [pc, #488]	; (80036b4 <compensate_pressure+0x374>)
 80034ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034ce:	f7fd f9c5 	bl	800085c <__aeabi_ddiv>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4610      	mov	r0, r2
 80034d8:	4619      	mov	r1, r3
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	4b79      	ldr	r3, [pc, #484]	; (80036c4 <compensate_pressure+0x384>)
 80034e0:	f7fc fedc 	bl	800029c <__adddf3>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4614      	mov	r4, r2
 80034ea:	461d      	mov	r5, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fd f80f 	bl	8000514 <__aeabi_ui2d>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4620      	mov	r0, r4
 80034fc:	4629      	mov	r1, r5
 80034fe:	f7fd f883 	bl	8000608 <__aeabi_dmul>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003516:	f7fd fae9 	bl	8000aec <__aeabi_dcmplt>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10b      	bne.n	8003538 <compensate_pressure+0x1f8>
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800352c:	f7fd fafc 	bl	8000b28 <__aeabi_dcmpgt>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 80de 	beq.w	80036f4 <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4618      	mov	r0, r3
 800353e:	f7fc ffe9 	bl	8000514 <__aeabi_ui2d>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	f04f 0000 	mov.w	r0, #0
 800354a:	495f      	ldr	r1, [pc, #380]	; (80036c8 <compensate_pressure+0x388>)
 800354c:	f7fc fea4 	bl	8000298 <__aeabi_dsub>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	4b5b      	ldr	r3, [pc, #364]	; (80036cc <compensate_pressure+0x38c>)
 800355e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003562:	f7fd f97b 	bl	800085c <__aeabi_ddiv>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800356e:	f7fc fe93 	bl	8000298 <__aeabi_dsub>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4610      	mov	r0, r2
 8003578:	4619      	mov	r1, r3
 800357a:	a347      	add	r3, pc, #284	; (adr r3, 8003698 <compensate_pressure+0x358>)
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f7fd f842 	bl	8000608 <__aeabi_dmul>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4610      	mov	r0, r2
 800358a:	4619      	mov	r1, r3
 800358c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003590:	f7fd f964 	bl	800085c <__aeabi_ddiv>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fc ffc6 	bl	8000534 <__aeabi_i2d>
 80035a8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035ac:	f7fd f82c 	bl	8000608 <__aeabi_dmul>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4610      	mov	r0, r2
 80035b6:	4619      	mov	r1, r3
 80035b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035bc:	f7fd f824 	bl	8000608 <__aeabi_dmul>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4610      	mov	r0, r2
 80035c6:	4619      	mov	r1, r3
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	4b40      	ldr	r3, [pc, #256]	; (80036d0 <compensate_pressure+0x390>)
 80035ce:	f7fd f945 	bl	800085c <__aeabi_ddiv>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fc ffa7 	bl	8000534 <__aeabi_i2d>
 80035e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035ea:	f7fd f80d 	bl	8000608 <__aeabi_dmul>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4610      	mov	r0, r2
 80035f4:	4619      	mov	r1, r3
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	4b2e      	ldr	r3, [pc, #184]	; (80036b4 <compensate_pressure+0x374>)
 80035fc:	f7fd f92e 	bl	800085c <__aeabi_ddiv>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8003608:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800360c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003610:	f7fc fe44 	bl	800029c <__adddf3>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4614      	mov	r4, r2
 800361a:	461d      	mov	r5, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003622:	4618      	mov	r0, r3
 8003624:	f7fc ff86 	bl	8000534 <__aeabi_i2d>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4620      	mov	r0, r4
 800362e:	4629      	mov	r1, r5
 8003630:	f7fc fe34 	bl	800029c <__adddf3>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4610      	mov	r0, r2
 800363a:	4619      	mov	r1, r3
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <compensate_pressure+0x394>)
 8003642:	f7fd f90b 	bl	800085c <__aeabi_ddiv>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800364e:	f7fc fe25 	bl	800029c <__adddf3>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 800365a:	a311      	add	r3, pc, #68	; (adr r3, 80036a0 <compensate_pressure+0x360>)
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003664:	f7fd fa42 	bl	8000aec <__aeabi_dcmplt>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d007      	beq.n	800367e <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 800366e:	a30c      	add	r3, pc, #48	; (adr r3, 80036a0 <compensate_pressure+0x360>)
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8003678:	2303      	movs	r3, #3
 800367a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 800367e:	a30a      	add	r3, pc, #40	; (adr r3, 80036a8 <compensate_pressure+0x368>)
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003688:	f7fd fa4e 	bl	8000b28 <__aeabi_dcmpgt>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	e022      	b.n	80036d8 <compensate_pressure+0x398>
 8003692:	bf00      	nop
 8003694:	f3af 8000 	nop.w
 8003698:	00000000 	.word	0x00000000
 800369c:	40b86a00 	.word	0x40b86a00
 80036a0:	00000000 	.word	0x00000000
 80036a4:	40dd4c00 	.word	0x40dd4c00
 80036a8:	00000000 	.word	0x00000000
 80036ac:	40fadb00 	.word	0x40fadb00
 80036b0:	40ef4000 	.word	0x40ef4000
 80036b4:	40e00000 	.word	0x40e00000
 80036b8:	40100000 	.word	0x40100000
 80036bc:	40f00000 	.word	0x40f00000
 80036c0:	41200000 	.word	0x41200000
 80036c4:	3ff00000 	.word	0x3ff00000
 80036c8:	41300000 	.word	0x41300000
 80036cc:	40b00000 	.word	0x40b00000
 80036d0:	41e00000 	.word	0x41e00000
 80036d4:	40300000 	.word	0x40300000
 80036d8:	d007      	beq.n	80036ea <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 80036da:	a309      	add	r3, pc, #36	; (adr r3, 8003700 <compensate_pressure+0x3c0>)
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 80036e4:	2304      	movs	r3, #4
 80036e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 80036ea:	68f9      	ldr	r1, [r7, #12]
 80036ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036f0:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 80036f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3730      	adds	r7, #48	; 0x30
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003700:	00000000 	.word	0x00000000
 8003704:	40fadb00 	.word	0x40fadb00

08003708 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	db03      	blt.n	8003724 <st_check_boundaries+0x1c>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	4a1c      	ldr	r2, [pc, #112]	; (8003790 <st_check_boundaries+0x88>)
 8003720:	4293      	cmp	r3, r2
 8003722:	dd09      	ble.n	8003738 <st_check_boundaries+0x30>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	db06      	blt.n	8003738 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a18      	ldr	r2, [pc, #96]	; (8003790 <st_check_boundaries+0x88>)
 800372e:	4293      	cmp	r3, r2
 8003730:	dc02      	bgt.n	8003738 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8003732:	23fa      	movs	r3, #250	; 0xfa
 8003734:	73fb      	strb	r3, [r7, #15]
 8003736:	e023      	b.n	8003780 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	db03      	blt.n	8003746 <st_check_boundaries+0x3e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a13      	ldr	r2, [pc, #76]	; (8003790 <st_check_boundaries+0x88>)
 8003742:	4293      	cmp	r3, r2
 8003744:	dd09      	ble.n	800375a <st_check_boundaries+0x52>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	db06      	blt.n	800375a <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	4a10      	ldr	r2, [pc, #64]	; (8003790 <st_check_boundaries+0x88>)
 8003750:	4293      	cmp	r3, r2
 8003752:	dc02      	bgt.n	800375a <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8003754:	23fb      	movs	r3, #251	; 0xfb
 8003756:	73fb      	strb	r3, [r7, #15]
 8003758:	e012      	b.n	8003780 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	db03      	blt.n	8003768 <st_check_boundaries+0x60>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	4a0b      	ldr	r2, [pc, #44]	; (8003790 <st_check_boundaries+0x88>)
 8003764:	4293      	cmp	r3, r2
 8003766:	dd09      	ble.n	800377c <st_check_boundaries+0x74>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	db03      	blt.n	8003776 <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a07      	ldr	r2, [pc, #28]	; (8003790 <st_check_boundaries+0x88>)
 8003772:	4293      	cmp	r3, r2
 8003774:	dd02      	ble.n	800377c <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8003776:	23f9      	movs	r3, #249	; 0xf9
 8003778:	73fb      	strb	r3, [r7, #15]
 800377a:	e001      	b.n	8003780 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003780:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	000ffff0 	.word	0x000ffff0

08003794 <bmp280_init>:
/*! Variable that holds the I2C device address or SPI chip selection */
static uint8_t dev_addr;

static BMP280_t bmp;

int8_t bmp280_init(I2C_HandleTypeDef *iic) {
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	bmp_i2c = iic;
 800379c:	4a32      	ldr	r2, [pc, #200]	; (8003868 <bmp280_init+0xd4>)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6013      	str	r3, [r2, #0]
	int8_t rslt = BMP2_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	73fb      	strb	r3, [r7, #15]
	dev_addr = BMP2_I2C_ADDR_PRIM;
 80037a6:	4b31      	ldr	r3, [pc, #196]	; (800386c <bmp280_init+0xd8>)
 80037a8:	2276      	movs	r2, #118	; 0x76
 80037aa:	701a      	strb	r2, [r3, #0]
	bmp.bmp.read = &bmp280_i2c_read;
 80037ac:	4b30      	ldr	r3, [pc, #192]	; (8003870 <bmp280_init+0xdc>)
 80037ae:	4a31      	ldr	r2, [pc, #196]	; (8003874 <bmp280_init+0xe0>)
 80037b0:	615a      	str	r2, [r3, #20]
	bmp.bmp.write = &bmp280_i2c_write;
 80037b2:	4b2f      	ldr	r3, [pc, #188]	; (8003870 <bmp280_init+0xdc>)
 80037b4:	4a30      	ldr	r2, [pc, #192]	; (8003878 <bmp280_init+0xe4>)
 80037b6:	619a      	str	r2, [r3, #24]
	bmp.bmp.intf = BMP2_I2C_INTF;
 80037b8:	4b2d      	ldr	r3, [pc, #180]	; (8003870 <bmp280_init+0xdc>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	725a      	strb	r2, [r3, #9]
	/* Holds the I2C device addr or SPI chip selection */
	bmp.bmp.intf_ptr = &dev_addr;
 80037be:	4b2c      	ldr	r3, [pc, #176]	; (8003870 <bmp280_init+0xdc>)
 80037c0:	4a2a      	ldr	r2, [pc, #168]	; (800386c <bmp280_init+0xd8>)
 80037c2:	60da      	str	r2, [r3, #12]
	/* Configure delay in microseconds */
	bmp.bmp.delay_us = &bmp280_delay_ms;
 80037c4:	4b2a      	ldr	r3, [pc, #168]	; (8003870 <bmp280_init+0xdc>)
 80037c6:	4a2d      	ldr	r2, [pc, #180]	; (800387c <bmp280_init+0xe8>)
 80037c8:	61da      	str	r2, [r3, #28]
	rslt = bmp2_init(&bmp.bmp);
 80037ca:	482d      	ldr	r0, [pc, #180]	; (8003880 <bmp280_init+0xec>)
 80037cc:	f7ff f816 	bl	80027fc <bmp2_init>
 80037d0:	4603      	mov	r3, r0
 80037d2:	73fb      	strb	r3, [r7, #15]
	if (BMP2_OK != rslt) {
 80037d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <bmp280_init+0x4e>
		return rslt;
 80037dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e0:	e03d      	b.n	800385e <bmp280_init+0xca>
	}
	bmp.conf.filter = BMP2_FILTER_OFF;
 80037e2:	4b23      	ldr	r3, [pc, #140]	; (8003870 <bmp280_init+0xdc>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	711a      	strb	r2, [r3, #4]
	/* Over-sampling mode is set as high resolution i.e., os_pres = 8x and os_temp = 1x */
	bmp.conf.os_mode = BMP2_OS_MODE_HIGH_RESOLUTION;
 80037e8:	4b21      	ldr	r3, [pc, #132]	; (8003870 <bmp280_init+0xdc>)
 80037ea:	2203      	movs	r2, #3
 80037ec:	70da      	strb	r2, [r3, #3]
	/* Setting the output data rate */
	bmp.conf.odr = BMP2_ODR_250_MS;
 80037ee:	4b20      	ldr	r3, [pc, #128]	; (8003870 <bmp280_init+0xdc>)
 80037f0:	2203      	movs	r2, #3
 80037f2:	709a      	strb	r2, [r3, #2]
	rslt = bmp2_set_config(&bmp.conf, &bmp.bmp);
 80037f4:	4922      	ldr	r1, [pc, #136]	; (8003880 <bmp280_init+0xec>)
 80037f6:	481e      	ldr	r0, [pc, #120]	; (8003870 <bmp280_init+0xdc>)
 80037f8:	f7ff f939 	bl	8002a6e <bmp2_set_config>
 80037fc:	4603      	mov	r3, r0
 80037fe:	73fb      	strb	r3, [r7, #15]
	if (BMP2_OK != rslt) {
 8003800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <bmp280_init+0x7a>
		return rslt;
 8003808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800380c:	e027      	b.n	800385e <bmp280_init+0xca>
	}
	/* Set normal power mode */
	rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &bmp.conf,
 800380e:	4a1c      	ldr	r2, [pc, #112]	; (8003880 <bmp280_init+0xec>)
 8003810:	4917      	ldr	r1, [pc, #92]	; (8003870 <bmp280_init+0xdc>)
 8003812:	2003      	movs	r0, #3
 8003814:	f7ff f966 	bl	8002ae4 <bmp2_set_power_mode>
 8003818:	4603      	mov	r3, r0
 800381a:	73fb      	strb	r3, [r7, #15]
			&bmp.bmp);
	if (BMP2_OK != rslt) {
 800381c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <bmp280_init+0x96>
		return rslt;
 8003824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003828:	e019      	b.n	800385e <bmp280_init+0xca>
	}
	/* Calculate measurement time in microseconds */
	rslt = bmp2_compute_meas_time(&bmp.meas_time, &bmp.conf,
 800382a:	4a15      	ldr	r2, [pc, #84]	; (8003880 <bmp280_init+0xec>)
 800382c:	4910      	ldr	r1, [pc, #64]	; (8003870 <bmp280_init+0xdc>)
 800382e:	4815      	ldr	r0, [pc, #84]	; (8003884 <bmp280_init+0xf0>)
 8003830:	f7ff f9ec 	bl	8002c0c <bmp2_compute_meas_time>
 8003834:	4603      	mov	r3, r0
 8003836:	73fb      	strb	r3, [r7, #15]
			&bmp.bmp);
	if (BMP2_OK != rslt) {
 8003838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <bmp280_init+0xb2>
		return rslt;
 8003840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003844:	e00b      	b.n	800385e <bmp280_init+0xca>
	}
	/* Always read the current settings before writing, especially when all the configuration is not modified */
	rslt = bmp2_get_config(&bmp.conf, &bmp.bmp);
 8003846:	490e      	ldr	r1, [pc, #56]	; (8003880 <bmp280_init+0xec>)
 8003848:	4809      	ldr	r0, [pc, #36]	; (8003870 <bmp280_init+0xdc>)
 800384a:	f7ff f8d0 	bl	80029ee <bmp2_get_config>
 800384e:	4603      	mov	r3, r0
 8003850:	73fb      	strb	r3, [r7, #15]
	bmp.result = rslt;
 8003852:	4a07      	ldr	r2, [pc, #28]	; (8003870 <bmp280_init+0xdc>)
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
	return rslt;
 800385a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000270 	.word	0x20000270
 800386c:	20000274 	.word	0x20000274
 8003870:	20000278 	.word	0x20000278
 8003874:	0800390d 	.word	0x0800390d
 8003878:	08003995 	.word	0x08003995
 800387c:	08003a61 	.word	0x08003a61
 8003880:	20000280 	.word	0x20000280
 8003884:	200002d0 	.word	0x200002d0

08003888 <bmp280_get_data>:

int8_t bmp280_get_data() {
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
	/* Configuring the over-sampling mode, filter coefficient and output data rate */
	/* Overwrite the desired settings */
	bmp.result_data = BMP2_E_NULL_PTR;
 800388e:	4b1a      	ldr	r3, [pc, #104]	; (80038f8 <bmp280_get_data+0x70>)
 8003890:	22ff      	movs	r2, #255	; 0xff
 8003892:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	/* Read pressure and temperature data */
	struct bmp2_status status;
	bmp.result_data = bmp2_get_status(&status, &bmp.bmp);
 8003896:	1d3b      	adds	r3, r7, #4
 8003898:	4918      	ldr	r1, [pc, #96]	; (80038fc <bmp280_get_data+0x74>)
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff f8f6 	bl	8002a8c <bmp2_get_status>
 80038a0:	4603      	mov	r3, r0
 80038a2:	461a      	mov	r2, r3
 80038a4:	4b14      	ldr	r3, [pc, #80]	; (80038f8 <bmp280_get_data+0x70>)
 80038a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if(BMP2_OK != bmp.result_data) {
 80038aa:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <bmp280_get_data+0x70>)
 80038ac:	f993 305d 	ldrsb.w	r3, [r3, #93]	; 0x5d
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <bmp280_get_data+0x34>
		return bmp.result_data;
 80038b4:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <bmp280_get_data+0x70>)
 80038b6:	f993 305d 	ldrsb.w	r3, [r3, #93]	; 0x5d
 80038ba:	e019      	b.n	80038f0 <bmp280_get_data+0x68>
	}
	if (status.measuring == BMP2_MEAS_DONE) {
 80038bc:	793b      	ldrb	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d113      	bne.n	80038ea <bmp280_get_data+0x62>
		/* Delay between measurements */
		bmp.bmp.delay_us((uint32_t) bmp.meas_time / 1000,
 80038c2:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <bmp280_get_data+0x70>)
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	4a0c      	ldr	r2, [pc, #48]	; (80038f8 <bmp280_get_data+0x70>)
 80038c8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80038ca:	490d      	ldr	r1, [pc, #52]	; (8003900 <bmp280_get_data+0x78>)
 80038cc:	fba1 1202 	umull	r1, r2, r1, r2
 80038d0:	0992      	lsrs	r2, r2, #6
 80038d2:	490c      	ldr	r1, [pc, #48]	; (8003904 <bmp280_get_data+0x7c>)
 80038d4:	4610      	mov	r0, r2
 80038d6:	4798      	blx	r3
				&bmp.bmp.intf_ptr); //us to ms
		/* Read compensated data */
		bmp.result_data = bmp2_get_sensor_data(&bmp.data, &bmp.bmp);
 80038d8:	4908      	ldr	r1, [pc, #32]	; (80038fc <bmp280_get_data+0x74>)
 80038da:	480b      	ldr	r0, [pc, #44]	; (8003908 <bmp280_get_data+0x80>)
 80038dc:	f7ff f917 	bl	8002b0e <bmp2_get_sensor_data>
 80038e0:	4603      	mov	r3, r0
 80038e2:	461a      	mov	r2, r3
 80038e4:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <bmp280_get_data+0x70>)
 80038e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	}
	return bmp.result_data;
 80038ea:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <bmp280_get_data+0x70>)
 80038ec:	f993 305d 	ldrsb.w	r3, [r3, #93]	; 0x5d
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	20000278 	.word	0x20000278
 80038fc:	20000280 	.word	0x20000280
 8003900:	10624dd3 	.word	0x10624dd3
 8003904:	20000284 	.word	0x20000284
 8003908:	200002c0 	.word	0x200002c0

0800390c <bmp280_i2c_read>:

int8_t bmp280_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length,
		const void *intf_ptr) {
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af02      	add	r7, sp, #8
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	607a      	str	r2, [r7, #4]
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	4603      	mov	r3, r0
 800391a:	73fb      	strb	r3, [r7, #15]
	dev_addr = *(uint8_t*) intf_ptr;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	781a      	ldrb	r2, [r3, #0]
 8003920:	4b1a      	ldr	r3, [pc, #104]	; (800398c <bmp280_i2c_read+0x80>)
 8003922:	701a      	strb	r2, [r3, #0]
	int8_t rslt = 0;
 8003924:	2300      	movs	r3, #0
 8003926:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status = HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	75bb      	strb	r3, [r7, #22]
	status = HAL_I2C_Master_Transmit(bmp_i2c, (uint8_t) (dev_addr << 1),
 800392c:	4b18      	ldr	r3, [pc, #96]	; (8003990 <bmp280_i2c_read+0x84>)
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	4b16      	ldr	r3, [pc, #88]	; (800398c <bmp280_i2c_read+0x80>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	b2db      	uxtb	r3, r3
 8003938:	b299      	uxth	r1, r3
 800393a:	f107 020f 	add.w	r2, r7, #15
 800393e:	2364      	movs	r3, #100	; 0x64
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	2301      	movs	r3, #1
 8003944:	f005 fe1a 	bl	800957c <HAL_I2C_Master_Transmit>
 8003948:	4603      	mov	r3, r0
 800394a:	75bb      	strb	r3, [r7, #22]
			&reg_addr, 1, 100);
	if (status != HAL_OK) {
 800394c:	7dbb      	ldrb	r3, [r7, #22]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <bmp280_i2c_read+0x4a>
		rslt = (-1);
 8003952:	23ff      	movs	r3, #255	; 0xff
 8003954:	75fb      	strb	r3, [r7, #23]
	}
	status = HAL_I2C_Master_Receive(bmp_i2c, (uint8_t) (dev_addr << 1), reg_data,
 8003956:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <bmp280_i2c_read+0x84>)
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	4b0c      	ldr	r3, [pc, #48]	; (800398c <bmp280_i2c_read+0x80>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	b2db      	uxtb	r3, r3
 8003962:	b299      	uxth	r1, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	b29b      	uxth	r3, r3
 8003968:	2264      	movs	r2, #100	; 0x64
 800396a:	9200      	str	r2, [sp, #0]
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	f005 ff03 	bl	8009778 <HAL_I2C_Master_Receive>
 8003972:	4603      	mov	r3, r0
 8003974:	75bb      	strb	r3, [r7, #22]
			length, 100);
	if (status != HAL_OK) {
 8003976:	7dbb      	ldrb	r3, [r7, #22]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <bmp280_i2c_read+0x74>
		rslt = (-1);
 800397c:	23ff      	movs	r3, #255	; 0xff
 800397e:	75fb      	strb	r3, [r7, #23]
	}
	return rslt;
 8003980:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20000274 	.word	0x20000274
 8003990:	20000270 	.word	0x20000270

08003994 <bmp280_i2c_write>:

int8_t bmp280_i2c_write(uint8_t reg_addr, const uint8_t *reg_data,
		uint32_t length, const void *intf_ptr) {
 8003994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003998:	b08b      	sub	sp, #44	; 0x2c
 800399a:	af02      	add	r7, sp, #8
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
 80039a2:	4603      	mov	r3, r0
 80039a4:	73fb      	strb	r3, [r7, #15]
 80039a6:	466b      	mov	r3, sp
 80039a8:	461e      	mov	r6, r3
	dev_addr = *(uint8_t*) intf_ptr;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	781a      	ldrb	r2, [r3, #0]
 80039ae:	4b2a      	ldr	r3, [pc, #168]	; (8003a58 <bmp280_i2c_write+0xc4>)
 80039b0:	701a      	strb	r2, [r3, #0]
	int8_t rslt = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	77fb      	strb	r3, [r7, #31]
	HAL_StatusTypeDef status = HAL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	77bb      	strb	r3, [r7, #30]
	uint8_t tx_buffer[length + 1];
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	1c59      	adds	r1, r3, #1
 80039be:	460b      	mov	r3, r1
 80039c0:	3b01      	subs	r3, #1
 80039c2:	61bb      	str	r3, [r7, #24]
 80039c4:	2300      	movs	r3, #0
 80039c6:	4688      	mov	r8, r1
 80039c8:	4699      	mov	r9, r3
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039de:	2300      	movs	r3, #0
 80039e0:	460c      	mov	r4, r1
 80039e2:	461d      	mov	r5, r3
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	00eb      	lsls	r3, r5, #3
 80039ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039f2:	00e2      	lsls	r2, r4, #3
 80039f4:	1dcb      	adds	r3, r1, #7
 80039f6:	08db      	lsrs	r3, r3, #3
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	ebad 0d03 	sub.w	sp, sp, r3
 80039fe:	ab02      	add	r3, sp, #8
 8003a00:	3300      	adds	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
	tx_buffer[0] = reg_addr;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	7bfa      	ldrb	r2, [r7, #15]
 8003a08:	701a      	strb	r2, [r3, #0]
	memcpy(&tx_buffer[1], reg_data, length);
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f00a f845 	bl	800daa2 <memcpy>
	status = HAL_I2C_Master_Transmit(bmp_i2c, (uint8_t) (dev_addr << 1),
 8003a18:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <bmp280_i2c_write+0xc8>)
 8003a1a:	6818      	ldr	r0, [r3, #0]
 8003a1c:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <bmp280_i2c_write+0xc4>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	b299      	uxth	r1, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2264      	movs	r2, #100	; 0x64
 8003a30:	9200      	str	r2, [sp, #0]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	f005 fda2 	bl	800957c <HAL_I2C_Master_Transmit>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	77bb      	strb	r3, [r7, #30]
			tx_buffer, length + 1, 100);
	if (status != HAL_OK) {
 8003a3c:	7fbb      	ldrb	r3, [r7, #30]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <bmp280_i2c_write+0xb2>
		rslt = (-1);
 8003a42:	23ff      	movs	r3, #255	; 0xff
 8003a44:	77fb      	strb	r3, [r7, #31]
	}
	return rslt;
 8003a46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a4a:	46b5      	mov	sp, r6

}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3724      	adds	r7, #36	; 0x24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a56:	bf00      	nop
 8003a58:	20000274 	.word	0x20000274
 8003a5c:	20000270 	.word	0x20000270

08003a60 <bmp280_delay_ms>:
void bmp280_delay_ms(uint32_t period_us, void *intf_ptr) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
	(void) intf_ptr;
	HAL_Delay(period_us + 1);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f005 f8d0 	bl	8008c14 <HAL_Delay>
}
 8003a74:	bf00      	nop
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <get_bmp>:

inline BMP280_t* get_bmp() {
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
	return &bmp;
 8003a80:	4b02      	ldr	r3, [pc, #8]	; (8003a8c <get_bmp+0x10>)
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	20000278 	.word	0x20000278

08003a90 <transmit>:

BRIDGE_COMMON_t fc_port =
		{ .signalStatusTransmit = 0, .signalStatusReceive = 0 };
static BRIDGE_t fc_bridge = { .port = &fc_port };

static HAL_StatusTypeDef transmit() {
 8003a90:	b5b0      	push	{r4, r5, r7, lr}
 8003a92:	af00      	add	r7, sp, #0
	return HAL_UART_Transmit_IT(fc_bridge.fc_uart,
 8003a94:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <transmit+0x30>)
 8003a96:	681c      	ldr	r4, [r3, #0]
			(const uint8_t*) fc_bridge.port->data_out,
 8003a98:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <transmit+0x30>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	685d      	ldr	r5, [r3, #4]
			strlen(fc_bridge.port->data_out));
 8003a9e:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <transmit+0x30>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fc fb9b 	bl	80001e0 <strlen>
 8003aaa:	4603      	mov	r3, r0
	return HAL_UART_Transmit_IT(fc_bridge.fc_uart,
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	f008 f9de 	bl	800be74 <HAL_UART_Transmit_IT>
 8003ab8:	4603      	mov	r3, r0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	bdb0      	pop	{r4, r5, r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000000 	.word	0x20000000

08003ac4 <receive>:

static HAL_StatusTypeDef receive() {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
	return HAL_UART_Receive_IT(fc_bridge.fc_uart, fc_bridge.rx_data,
 8003ac8:	4b04      	ldr	r3, [pc, #16]	; (8003adc <receive+0x18>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	221e      	movs	r2, #30
 8003ace:	4904      	ldr	r1, [pc, #16]	; (8003ae0 <receive+0x1c>)
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f008 fa14 	bl	800befe <HAL_UART_Receive_IT>
 8003ad6:	4603      	mov	r3, r0
			sizeof(fc_bridge.rx_data));
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	20000008 	.word	0x20000008

08003ae4 <bridge_signal_transmit_handler>:

inline static void bridge_signal_transmit_handler(int status) {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
	fc_bridge.port->signalStatusTransmit = status;
 8003aec:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <bridge_signal_transmit_handler+0x30>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef status_transmit = fc_bridge.port->transmit();
 8003af4:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <bridge_signal_transmit_handler+0x30>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	4798      	blx	r3
 8003afc:	4603      	mov	r3, r0
 8003afe:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != status_transmit) {
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <bridge_signal_transmit_handler+0x28>
		//start buzzer
		buzzer_start(20);
 8003b06:	2014      	movs	r0, #20
 8003b08:	f000 f952 	bl	8003db0 <buzzer_start>
	}
}
 8003b0c:	bf00      	nop
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000000 	.word	0x20000000

08003b18 <bridge_signal_receive_handler>:

inline static void bridge_signal_receive_handler(int status) {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
	fc_bridge.port->signalStatusReceive = status;
 8003b20:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <bridge_signal_receive_handler+0x30>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	611a      	str	r2, [r3, #16]
	HAL_StatusTypeDef status_receive = fc_bridge.port->receive();
 8003b28:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <bridge_signal_receive_handler+0x30>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	4798      	blx	r3
 8003b30:	4603      	mov	r3, r0
 8003b32:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != status_receive) {
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <bridge_signal_receive_handler+0x28>
		//start buzzer
		buzzer_start(40);
 8003b3a:	2028      	movs	r0, #40	; 0x28
 8003b3c:	f000 f938 	bl	8003db0 <buzzer_start>
	}
}
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20000000 	.word	0x20000000

08003b4c <flight_bridge_queue_control>:

// process in bridge rx callback
static void flight_bridge_queue_control(char *data) {
 8003b4c:	b590      	push	{r4, r7, lr}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	int i = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
	char *saveptr = NULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]
	const char *pBufferStart = strtok_r(data, bridge_get_semicolon(), &saveptr);
 8003b5c:	f004 fb82 	bl	8008264 <bridge_get_semicolon>
 8003b60:	4601      	mov	r1, r0
 8003b62:	f107 030c 	add.w	r3, r7, #12
 8003b66:	461a      	mov	r2, r3
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f009 fe93 	bl	800d894 <strtok_r>
 8003b6e:	6138      	str	r0, [r7, #16]
	while (pBufferStart != NULL) {
 8003b70:	e01d      	b.n	8003bae <flight_bridge_queue_control+0x62>
		queue_enqueue(get_queues_rc() + i++, atoi(pBufferStart));
 8003b72:	f004 fd57 	bl	8008624 <get_queues_rc>
 8003b76:	4601      	mov	r1, r0
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	617a      	str	r2, [r7, #20]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	4613      	mov	r3, r2
 8003b82:	019b      	lsls	r3, r3, #6
 8003b84:	4413      	add	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	18cc      	adds	r4, r1, r3
 8003b8a:	6938      	ldr	r0, [r7, #16]
 8003b8c:	f009 fbc2 	bl	800d314 <atoi>
 8003b90:	4603      	mov	r3, r0
 8003b92:	4619      	mov	r1, r3
 8003b94:	4620      	mov	r0, r4
 8003b96:	f004 febf 	bl	8008918 <queue_enqueue>
		pBufferStart = strtok_r(NULL, bridge_get_semicolon(), &saveptr);
 8003b9a:	f004 fb63 	bl	8008264 <bridge_get_semicolon>
 8003b9e:	4601      	mov	r1, r0
 8003ba0:	f107 030c 	add.w	r3, r7, #12
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	f009 fe74 	bl	800d894 <strtok_r>
 8003bac:	6138      	str	r0, [r7, #16]
	while (pBufferStart != NULL) {
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1de      	bne.n	8003b72 <flight_bridge_queue_control+0x26>
	}
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd90      	pop	{r4, r7, pc}
	...

08003bc0 <bridge_fc_rx_callback>:

static void bridge_fc_rx_callback(UART_HandleTypeDef *huart) {
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
	//char str[] = "1097;1919;1508;1508;1919;1919;"; //data in
	bool data_valid = bridge_validate_data((char*) fc_bridge.rx_data,
 8003bc8:	211e      	movs	r1, #30
 8003bca:	4818      	ldr	r0, [pc, #96]	; (8003c2c <bridge_fc_rx_callback+0x6c>)
 8003bcc:	f004 fb20 	bl	8008210 <bridge_validate_data>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	73fb      	strb	r3, [r7, #15]
	BRIDGE_DATA_SIZE);
	if (data_valid) {
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <bridge_fc_rx_callback+0x20>
		flight_bridge_queue_control((char*) fc_bridge.rx_data);
 8003bda:	4814      	ldr	r0, [pc, #80]	; (8003c2c <bridge_fc_rx_callback+0x6c>)
 8003bdc:	f7ff ffb6 	bl	8003b4c <flight_bridge_queue_control>
	}
	// TODO get motors data from FC
	fc_bridge.port->data_out = "4200;4200;4200;4200;1400;1400;0075;";
 8003be0:	4b13      	ldr	r3, [pc, #76]	; (8003c30 <bridge_fc_rx_callback+0x70>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	4a13      	ldr	r2, [pc, #76]	; (8003c34 <bridge_fc_rx_callback+0x74>)
 8003be6:	605a      	str	r2, [r3, #4]
	HAL_StatusTypeDef status_transmit = fc_bridge.port->transmit(); // send motor data to motor controller D1
 8003be8:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <bridge_fc_rx_callback+0x70>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	4798      	blx	r3
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	73bb      	strb	r3, [r7, #14]
	if (HAL_OK != status_transmit) {
 8003bf4:	7bbb      	ldrb	r3, [r7, #14]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <bridge_fc_rx_callback+0x46>
		raise(bridge_get_transmit_sigint());
 8003bfa:	f004 fb21 	bl	8008240 <bridge_get_transmit_sigint>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4618      	mov	r0, r3
 8003c02:	f009 fe9f 	bl	800d944 <raise>
	}
	HAL_StatusTypeDef status_receive = fc_bridge.port->receive();
 8003c06:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <bridge_fc_rx_callback+0x70>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	4798      	blx	r3
 8003c0e:	4603      	mov	r3, r0
 8003c10:	737b      	strb	r3, [r7, #13]
	if (HAL_OK != status_receive) {
 8003c12:	7b7b      	ldrb	r3, [r7, #13]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <bridge_fc_rx_callback+0x64>
		raise(bridge_get_receive_sigint());
 8003c18:	f004 fb1b 	bl	8008252 <bridge_get_receive_sigint>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f009 fe90 	bl	800d944 <raise>
	}
}
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	20000008 	.word	0x20000008
 8003c30:	20000000 	.word	0x20000000
 8003c34:	0800ea7c 	.word	0x0800ea7c

08003c38 <bridge_init>:

HAL_StatusTypeDef bridge_init(UART_HandleTypeDef *uart) {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
	signal(bridge_get_receive_sigint(), &bridge_signal_receive_handler);
 8003c40:	f004 fb07 	bl	8008252 <bridge_get_receive_sigint>
 8003c44:	4603      	mov	r3, r0
 8003c46:	4916      	ldr	r1, [pc, #88]	; (8003ca0 <bridge_init+0x68>)
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f009 fe83 	bl	800d954 <signal>
	signal(bridge_get_transmit_sigint(), &bridge_signal_transmit_handler);
 8003c4e:	f004 faf7 	bl	8008240 <bridge_get_transmit_sigint>
 8003c52:	4603      	mov	r3, r0
 8003c54:	4913      	ldr	r1, [pc, #76]	; (8003ca4 <bridge_init+0x6c>)
 8003c56:	4618      	mov	r0, r3
 8003c58:	f009 fe7c 	bl	800d954 <signal>
	fc_bridge.fc_uart = uart;
 8003c5c:	4a12      	ldr	r2, [pc, #72]	; (8003ca8 <bridge_init+0x70>)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6013      	str	r3, [r2, #0]
	fc_bridge.port->transmit = &transmit;
 8003c62:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <bridge_init+0x70>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4a11      	ldr	r2, [pc, #68]	; (8003cac <bridge_init+0x74>)
 8003c68:	609a      	str	r2, [r3, #8]
	fc_bridge.port->receive = &receive;
 8003c6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <bridge_init+0x70>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4a10      	ldr	r2, [pc, #64]	; (8003cb0 <bridge_init+0x78>)
 8003c70:	60da      	str	r2, [r3, #12]
	HAL_StatusTypeDef status = HAL_UART_RegisterCallback(fc_bridge.fc_uart,
 8003c72:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <bridge_init+0x70>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a0f      	ldr	r2, [pc, #60]	; (8003cb4 <bridge_init+0x7c>)
 8003c78:	2103      	movs	r1, #3
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f007 ff1e 	bl	800babc <HAL_UART_RegisterCallback>
 8003c80:	4603      	mov	r3, r0
 8003c82:	73fb      	strb	r3, [r7, #15]
			HAL_UART_RX_COMPLETE_CB_ID, bridge_fc_rx_callback);
	if (HAL_OK != status) {
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <bridge_init+0x56>
		return status;
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	e004      	b.n	8003c98 <bridge_init+0x60>
	}
	return fc_bridge.port->receive();
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <bridge_init+0x70>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4798      	blx	r3
 8003c96:	4603      	mov	r3, r0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	08003b19 	.word	0x08003b19
 8003ca4:	08003ae5 	.word	0x08003ae5
 8003ca8:	20000000 	.word	0x20000000
 8003cac:	08003a91 	.word	0x08003a91
 8003cb0:	08003ac5 	.word	0x08003ac5
 8003cb4:	08003bc1 	.word	0x08003bc1

08003cb8 <buzzer_init>:
static uint32_t sound = 50;

TIM_HandleTypeDef *pwm_tim;
uint32_t pwm_channel;

HAL_StatusTypeDef buzzer_init(TIM_HandleTypeDef *tim, uint32_t channel) {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
	pwm_tim = tim;
 8003cc2:	4a09      	ldr	r2, [pc, #36]	; (8003ce8 <buzzer_init+0x30>)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6013      	str	r3, [r2, #0]
	pwm_channel = channel;
 8003cc8:	4a08      	ldr	r2, [pc, #32]	; (8003cec <buzzer_init+0x34>)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	6013      	str	r3, [r2, #0]
	return HAL_TIM_PWM_Start(pwm_tim, pwm_channel);
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <buzzer_init+0x30>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a06      	ldr	r2, [pc, #24]	; (8003cec <buzzer_init+0x34>)
 8003cd4:	6812      	ldr	r2, [r2, #0]
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f007 f921 	bl	800af20 <HAL_TIM_PWM_Start>
 8003cde:	4603      	mov	r3, r0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	200002f4 	.word	0x200002f4
 8003cec:	200002f8 	.word	0x200002f8

08003cf0 <buzzer_sound>:

HAL_StatusTypeDef buzzer_deinit() {
	return HAL_TIM_PWM_Stop(pwm_tim, pwm_channel);
}

static void buzzer_sound(uint16_t period) {
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	80fb      	strh	r3, [r7, #6]
	uint32_t value = 0;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
	if (counter % period == 0) {
 8003cfe:	4b28      	ldr	r3, [pc, #160]	; (8003da0 <buzzer_sound+0xb0>)
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	88fa      	ldrh	r2, [r7, #6]
 8003d04:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d08:	fb01 f202 	mul.w	r2, r1, r2
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d105      	bne.n	8003d20 <buzzer_sound+0x30>
		counter = 0;
 8003d14:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <buzzer_sound+0xb0>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	801a      	strh	r2, [r3, #0]
		value = sound;
 8003d1a:	4b22      	ldr	r3, [pc, #136]	; (8003da4 <buzzer_sound+0xb4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]
	}
	switch (pwm_channel) {
 8003d20:	4b21      	ldr	r3, [pc, #132]	; (8003da8 <buzzer_sound+0xb8>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b0c      	cmp	r3, #12
 8003d26:	d835      	bhi.n	8003d94 <buzzer_sound+0xa4>
 8003d28:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <buzzer_sound+0x40>)
 8003d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2e:	bf00      	nop
 8003d30:	08003d65 	.word	0x08003d65
 8003d34:	08003d95 	.word	0x08003d95
 8003d38:	08003d95 	.word	0x08003d95
 8003d3c:	08003d95 	.word	0x08003d95
 8003d40:	08003d71 	.word	0x08003d71
 8003d44:	08003d95 	.word	0x08003d95
 8003d48:	08003d95 	.word	0x08003d95
 8003d4c:	08003d95 	.word	0x08003d95
 8003d50:	08003d7d 	.word	0x08003d7d
 8003d54:	08003d95 	.word	0x08003d95
 8003d58:	08003d95 	.word	0x08003d95
 8003d5c:	08003d95 	.word	0x08003d95
 8003d60:	08003d89 	.word	0x08003d89
	case TIM_CHANNEL_1: {
		pwm_tim->Instance->CCR1 = value;
 8003d64:	4b11      	ldr	r3, [pc, #68]	; (8003dac <buzzer_sound+0xbc>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8003d6e:	e011      	b.n	8003d94 <buzzer_sound+0xa4>
	}
	case TIM_CHANNEL_2: {
		pwm_tim->Instance->CCR2 = value;
 8003d70:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <buzzer_sound+0xbc>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8003d7a:	e00b      	b.n	8003d94 <buzzer_sound+0xa4>
	}
	case TIM_CHANNEL_3: {
		pwm_tim->Instance->CCR3 = value;
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <buzzer_sound+0xbc>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8003d86:	e005      	b.n	8003d94 <buzzer_sound+0xa4>
	}
	case TIM_CHANNEL_4: {
		pwm_tim->Instance->CCR4 = value;
 8003d88:	4b08      	ldr	r3, [pc, #32]	; (8003dac <buzzer_sound+0xbc>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8003d92:	bf00      	nop
	}
	}
}
 8003d94:	bf00      	nop
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	200002f0 	.word	0x200002f0
 8003da4:	20000028 	.word	0x20000028
 8003da8:	200002f8 	.word	0x200002f8
 8003dac:	200002f4 	.word	0x200002f4

08003db0 <buzzer_start>:

void buzzer_start(uint16_t bottom_distance) {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	80fb      	strh	r3, [r7, #6]
	uint16_t period = bottom_distance / sound * 5;
 8003dba:	88fa      	ldrh	r2, [r7, #6]
 8003dbc:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <buzzer_start+0x48>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	0092      	lsls	r2, r2, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	81fb      	strh	r3, [r7, #14]
	period = period == 0 ? 10 : period;
 8003dce:	89fb      	ldrh	r3, [r7, #14]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <buzzer_start+0x28>
 8003dd4:	89fb      	ldrh	r3, [r7, #14]
 8003dd6:	e000      	b.n	8003dda <buzzer_start+0x2a>
 8003dd8:	230a      	movs	r3, #10
 8003dda:	81fb      	strh	r3, [r7, #14]
	buzzer_sound(period);
 8003ddc:	89fb      	ldrh	r3, [r7, #14]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff ff86 	bl	8003cf0 <buzzer_sound>
	counter++;
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <buzzer_start+0x4c>)
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	3301      	adds	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	4b03      	ldr	r3, [pc, #12]	; (8003dfc <buzzer_start+0x4c>)
 8003dee:	801a      	strh	r2, [r3, #0]
}
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20000028 	.word	0x20000028
 8003dfc:	200002f0 	.word	0x200002f0

08003e00 <calculateMaxima>:

#include "calibration.h"

IMU_Calibration_3D_t imuCalibration;

static void calculateMaxima() {
 8003e00:	b598      	push	{r3, r4, r7, lr}
 8003e02:	af00      	add	r7, sp, #0
	imuCalibration.accel_calib.abs_x = math_max(
 8003e04:	4b68      	ldr	r3, [pc, #416]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f002 fe6c 	bl	8006ae8 <math_abs>
 8003e10:	4603      	mov	r3, r0
 8003e12:	461c      	mov	r4, r3
 8003e14:	4b64      	ldr	r3, [pc, #400]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003e16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f002 fe64 	bl	8006ae8 <math_abs>
 8003e20:	4603      	mov	r3, r0
 8003e22:	4619      	mov	r1, r3
 8003e24:	4620      	mov	r0, r4
 8003e26:	f002 fe33 	bl	8006a90 <math_max>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4b5e      	ldr	r3, [pc, #376]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003e30:	809a      	strh	r2, [r3, #4]
			math_abs(imuCalibration.accel_calib.max_x),
			math_abs(imuCalibration.accel_calib.min_x));
	imuCalibration.accel_calib.abs_y = math_max(
 8003e32:	4b5d      	ldr	r3, [pc, #372]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003e34:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f002 fe55 	bl	8006ae8 <math_abs>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	461c      	mov	r4, r3
 8003e42:	4b59      	ldr	r3, [pc, #356]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003e44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f002 fe4d 	bl	8006ae8 <math_abs>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4619      	mov	r1, r3
 8003e52:	4620      	mov	r0, r4
 8003e54:	f002 fe1c 	bl	8006a90 <math_max>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	4b52      	ldr	r3, [pc, #328]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003e5e:	815a      	strh	r2, [r3, #10]
			math_abs(imuCalibration.accel_calib.max_y),
			math_abs(imuCalibration.accel_calib.min_y));
	imuCalibration.accel_calib.abs_z = math_max(
 8003e60:	4b51      	ldr	r3, [pc, #324]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003e62:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f002 fe3e 	bl	8006ae8 <math_abs>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	461c      	mov	r4, r3
 8003e70:	4b4d      	ldr	r3, [pc, #308]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003e72:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f002 fe36 	bl	8006ae8 <math_abs>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4620      	mov	r0, r4
 8003e82:	f002 fe05 	bl	8006a90 <math_max>
 8003e86:	4603      	mov	r3, r0
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4b47      	ldr	r3, [pc, #284]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003e8c:	821a      	strh	r2, [r3, #16]
			math_abs(imuCalibration.accel_calib.max_z),
			math_abs(imuCalibration.accel_calib.min_z));

	imuCalibration.gyro_calib.abs_x = math_max(
 8003e8e:	4b46      	ldr	r3, [pc, #280]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003e90:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f002 fe27 	bl	8006ae8 <math_abs>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	461c      	mov	r4, r3
 8003e9e:	4b42      	ldr	r3, [pc, #264]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003ea0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f002 fe1f 	bl	8006ae8 <math_abs>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	4619      	mov	r1, r3
 8003eae:	4620      	mov	r0, r4
 8003eb0:	f002 fdee 	bl	8006a90 <math_max>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	4b3b      	ldr	r3, [pc, #236]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003eba:	82da      	strh	r2, [r3, #22]
			math_abs(imuCalibration.gyro_calib.max_x),
			math_abs(imuCalibration.gyro_calib.min_x));
	imuCalibration.gyro_calib.abs_y = math_max(
 8003ebc:	4b3a      	ldr	r3, [pc, #232]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003ebe:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f002 fe10 	bl	8006ae8 <math_abs>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	461c      	mov	r4, r3
 8003ecc:	4b36      	ldr	r3, [pc, #216]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003ece:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f002 fe08 	bl	8006ae8 <math_abs>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	4619      	mov	r1, r3
 8003edc:	4620      	mov	r0, r4
 8003ede:	f002 fdd7 	bl	8006a90 <math_max>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4b30      	ldr	r3, [pc, #192]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003ee8:	839a      	strh	r2, [r3, #28]
			math_abs(imuCalibration.gyro_calib.max_y),
			math_abs(imuCalibration.gyro_calib.min_y));
	imuCalibration.gyro_calib.abs_z = math_max(
 8003eea:	4b2f      	ldr	r3, [pc, #188]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003eec:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f002 fdf9 	bl	8006ae8 <math_abs>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	461c      	mov	r4, r3
 8003efa:	4b2b      	ldr	r3, [pc, #172]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003efc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f002 fdf1 	bl	8006ae8 <math_abs>
 8003f06:	4603      	mov	r3, r0
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f002 fdc0 	bl	8006a90 <math_max>
 8003f10:	4603      	mov	r3, r0
 8003f12:	461a      	mov	r2, r3
 8003f14:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003f16:	845a      	strh	r2, [r3, #34]	; 0x22
			math_abs(imuCalibration.gyro_calib.max_z),
			math_abs(imuCalibration.gyro_calib.min_z));

	imuCalibration.mag_calib.abs_x = math_max(
 8003f18:	4b23      	ldr	r3, [pc, #140]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003f1a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f002 fde2 	bl	8006ae8 <math_abs>
 8003f24:	4603      	mov	r3, r0
 8003f26:	461c      	mov	r4, r3
 8003f28:	4b1f      	ldr	r3, [pc, #124]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003f2a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f002 fdda 	bl	8006ae8 <math_abs>
 8003f34:	4603      	mov	r3, r0
 8003f36:	4619      	mov	r1, r3
 8003f38:	4620      	mov	r0, r4
 8003f3a:	f002 fda9 	bl	8006a90 <math_max>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	461a      	mov	r2, r3
 8003f42:	4b19      	ldr	r3, [pc, #100]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003f44:	851a      	strh	r2, [r3, #40]	; 0x28
			math_abs(imuCalibration.mag_calib.max_x),
			math_abs(imuCalibration.mag_calib.min_x));
	imuCalibration.mag_calib.abs_y = math_max(
 8003f46:	4b18      	ldr	r3, [pc, #96]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003f48:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f002 fdcb 	bl	8006ae8 <math_abs>
 8003f52:	4603      	mov	r3, r0
 8003f54:	461c      	mov	r4, r3
 8003f56:	4b14      	ldr	r3, [pc, #80]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003f58:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f002 fdc3 	bl	8006ae8 <math_abs>
 8003f62:	4603      	mov	r3, r0
 8003f64:	4619      	mov	r1, r3
 8003f66:	4620      	mov	r0, r4
 8003f68:	f002 fd92 	bl	8006a90 <math_max>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	461a      	mov	r2, r3
 8003f70:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003f72:	85da      	strh	r2, [r3, #46]	; 0x2e
			math_abs(imuCalibration.mag_calib.max_y),
			math_abs(imuCalibration.mag_calib.min_y));
	imuCalibration.mag_calib.abs_z = math_max(
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003f76:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f002 fdb4 	bl	8006ae8 <math_abs>
 8003f80:	4603      	mov	r3, r0
 8003f82:	461c      	mov	r4, r3
 8003f84:	4b08      	ldr	r3, [pc, #32]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003f86:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f002 fdac 	bl	8006ae8 <math_abs>
 8003f90:	4603      	mov	r3, r0
 8003f92:	4619      	mov	r1, r3
 8003f94:	4620      	mov	r0, r4
 8003f96:	f002 fd7b 	bl	8006a90 <math_max>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4b02      	ldr	r3, [pc, #8]	; (8003fa8 <calculateMaxima+0x1a8>)
 8003fa0:	869a      	strh	r2, [r3, #52]	; 0x34
			math_abs(imuCalibration.mag_calib.max_z),
			math_abs(imuCalibration.mag_calib.min_z));
}
 8003fa2:	bf00      	nop
 8003fa4:	bd98      	pop	{r3, r4, r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	200002fc 	.word	0x200002fc

08003fac <calibration>:

void calibration() {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
	IMU_t *imu = get_imu();
 8003fb2:	f001 fca7 	bl	8005904 <get_imu>
 8003fb6:	6178      	str	r0, [r7, #20]
	int16_t accel_AXIS_X = imu->accel_data[0].x;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	891b      	ldrh	r3, [r3, #8]
 8003fbc:	827b      	strh	r3, [r7, #18]
	imuCalibration.accel_calib.max_x = math_max(accel_AXIS_X,
 8003fbe:	4b87      	ldr	r3, [pc, #540]	; (80041dc <calibration+0x230>)
 8003fc0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003fc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003fc8:	4611      	mov	r1, r2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f002 fd60 	bl	8006a90 <math_max>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	4b81      	ldr	r3, [pc, #516]	; (80041dc <calibration+0x230>)
 8003fd6:	801a      	strh	r2, [r3, #0]
			imuCalibration.accel_calib.max_x);
	imuCalibration.accel_calib.min_x = math_min(accel_AXIS_X,
 8003fd8:	4b80      	ldr	r3, [pc, #512]	; (80041dc <calibration+0x230>)
 8003fda:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003fde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f002 fd69 	bl	8006abc <math_min>
 8003fea:	4603      	mov	r3, r0
 8003fec:	461a      	mov	r2, r3
 8003fee:	4b7b      	ldr	r3, [pc, #492]	; (80041dc <calibration+0x230>)
 8003ff0:	805a      	strh	r2, [r3, #2]
			imuCalibration.accel_calib.min_x);

	int16_t accel_AXIS_Y = imu->accel_data[0].y;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	895b      	ldrh	r3, [r3, #10]
 8003ff6:	823b      	strh	r3, [r7, #16]
	imuCalibration.accel_calib.max_y = math_max(accel_AXIS_Y,
 8003ff8:	4b78      	ldr	r3, [pc, #480]	; (80041dc <calibration+0x230>)
 8003ffa:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003ffe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004002:	4611      	mov	r1, r2
 8004004:	4618      	mov	r0, r3
 8004006:	f002 fd43 	bl	8006a90 <math_max>
 800400a:	4603      	mov	r3, r0
 800400c:	461a      	mov	r2, r3
 800400e:	4b73      	ldr	r3, [pc, #460]	; (80041dc <calibration+0x230>)
 8004010:	80da      	strh	r2, [r3, #6]
			imuCalibration.accel_calib.max_y);
	imuCalibration.accel_calib.min_y = math_min(accel_AXIS_Y,
 8004012:	4b72      	ldr	r3, [pc, #456]	; (80041dc <calibration+0x230>)
 8004014:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8004018:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800401c:	4611      	mov	r1, r2
 800401e:	4618      	mov	r0, r3
 8004020:	f002 fd4c 	bl	8006abc <math_min>
 8004024:	4603      	mov	r3, r0
 8004026:	461a      	mov	r2, r3
 8004028:	4b6c      	ldr	r3, [pc, #432]	; (80041dc <calibration+0x230>)
 800402a:	811a      	strh	r2, [r3, #8]
			imuCalibration.accel_calib.min_y);

	int16_t accel_AXIS_Z = imu->accel_data[0].z;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	899b      	ldrh	r3, [r3, #12]
 8004030:	81fb      	strh	r3, [r7, #14]
	imuCalibration.accel_calib.max_z = math_max(accel_AXIS_Z,
 8004032:	4b6a      	ldr	r3, [pc, #424]	; (80041dc <calibration+0x230>)
 8004034:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8004038:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800403c:	4611      	mov	r1, r2
 800403e:	4618      	mov	r0, r3
 8004040:	f002 fd26 	bl	8006a90 <math_max>
 8004044:	4603      	mov	r3, r0
 8004046:	461a      	mov	r2, r3
 8004048:	4b64      	ldr	r3, [pc, #400]	; (80041dc <calibration+0x230>)
 800404a:	819a      	strh	r2, [r3, #12]
			imuCalibration.accel_calib.max_z);
	imuCalibration.accel_calib.min_z = math_min(accel_AXIS_Z,
 800404c:	4b63      	ldr	r3, [pc, #396]	; (80041dc <calibration+0x230>)
 800404e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8004052:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f002 fd2f 	bl	8006abc <math_min>
 800405e:	4603      	mov	r3, r0
 8004060:	461a      	mov	r2, r3
 8004062:	4b5e      	ldr	r3, [pc, #376]	; (80041dc <calibration+0x230>)
 8004064:	81da      	strh	r2, [r3, #14]
			imuCalibration.accel_calib.min_z);

	int16_t gyro_AXIS_X = imu->gyro_data[0].x;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800406c:	81bb      	strh	r3, [r7, #12]
	imuCalibration.gyro_calib.max_x = math_max(gyro_AXIS_X,
 800406e:	4b5b      	ldr	r3, [pc, #364]	; (80041dc <calibration+0x230>)
 8004070:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8004074:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004078:	4611      	mov	r1, r2
 800407a:	4618      	mov	r0, r3
 800407c:	f002 fd08 	bl	8006a90 <math_max>
 8004080:	4603      	mov	r3, r0
 8004082:	461a      	mov	r2, r3
 8004084:	4b55      	ldr	r3, [pc, #340]	; (80041dc <calibration+0x230>)
 8004086:	825a      	strh	r2, [r3, #18]
			imuCalibration.gyro_calib.max_x);
	imuCalibration.gyro_calib.min_x = math_min(gyro_AXIS_X,
 8004088:	4b54      	ldr	r3, [pc, #336]	; (80041dc <calibration+0x230>)
 800408a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800408e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f002 fd11 	bl	8006abc <math_min>
 800409a:	4603      	mov	r3, r0
 800409c:	461a      	mov	r2, r3
 800409e:	4b4f      	ldr	r3, [pc, #316]	; (80041dc <calibration+0x230>)
 80040a0:	829a      	strh	r2, [r3, #20]
			imuCalibration.gyro_calib.min_x);

	int16_t gyro_AXIS_Y = imu->gyro_data[0].y;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80040a8:	817b      	strh	r3, [r7, #10]
	imuCalibration.gyro_calib.max_y = math_max(gyro_AXIS_Y,
 80040aa:	4b4c      	ldr	r3, [pc, #304]	; (80041dc <calibration+0x230>)
 80040ac:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 80040b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80040b4:	4611      	mov	r1, r2
 80040b6:	4618      	mov	r0, r3
 80040b8:	f002 fcea 	bl	8006a90 <math_max>
 80040bc:	4603      	mov	r3, r0
 80040be:	461a      	mov	r2, r3
 80040c0:	4b46      	ldr	r3, [pc, #280]	; (80041dc <calibration+0x230>)
 80040c2:	831a      	strh	r2, [r3, #24]
			imuCalibration.gyro_calib.max_y);
	imuCalibration.gyro_calib.min_y = math_min(gyro_AXIS_Y,
 80040c4:	4b45      	ldr	r3, [pc, #276]	; (80041dc <calibration+0x230>)
 80040c6:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 80040ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80040ce:	4611      	mov	r1, r2
 80040d0:	4618      	mov	r0, r3
 80040d2:	f002 fcf3 	bl	8006abc <math_min>
 80040d6:	4603      	mov	r3, r0
 80040d8:	461a      	mov	r2, r3
 80040da:	4b40      	ldr	r3, [pc, #256]	; (80041dc <calibration+0x230>)
 80040dc:	835a      	strh	r2, [r3, #26]
			imuCalibration.gyro_calib.min_y);

	int16_t gyro_AXIS_Z = imu->gyro_data[0].z;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80040e4:	813b      	strh	r3, [r7, #8]
	imuCalibration.gyro_calib.max_z = math_max(gyro_AXIS_Z,
 80040e6:	4b3d      	ldr	r3, [pc, #244]	; (80041dc <calibration+0x230>)
 80040e8:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 80040ec:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80040f0:	4611      	mov	r1, r2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f002 fccc 	bl	8006a90 <math_max>
 80040f8:	4603      	mov	r3, r0
 80040fa:	461a      	mov	r2, r3
 80040fc:	4b37      	ldr	r3, [pc, #220]	; (80041dc <calibration+0x230>)
 80040fe:	83da      	strh	r2, [r3, #30]
			imuCalibration.gyro_calib.max_z);
	imuCalibration.gyro_calib.min_z = math_min(gyro_AXIS_Z,
 8004100:	4b36      	ldr	r3, [pc, #216]	; (80041dc <calibration+0x230>)
 8004102:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8004106:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800410a:	4611      	mov	r1, r2
 800410c:	4618      	mov	r0, r3
 800410e:	f002 fcd5 	bl	8006abc <math_min>
 8004112:	4603      	mov	r3, r0
 8004114:	461a      	mov	r2, r3
 8004116:	4b31      	ldr	r3, [pc, #196]	; (80041dc <calibration+0x230>)
 8004118:	841a      	strh	r2, [r3, #32]
			imuCalibration.gyro_calib.min_z);

	int16_t mag_AXIS_X = imu->mag_data[0].x;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004120:	80fb      	strh	r3, [r7, #6]
	imuCalibration.mag_calib.max_x = math_max(mag_AXIS_X,
 8004122:	4b2e      	ldr	r3, [pc, #184]	; (80041dc <calibration+0x230>)
 8004124:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8004128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800412c:	4611      	mov	r1, r2
 800412e:	4618      	mov	r0, r3
 8004130:	f002 fcae 	bl	8006a90 <math_max>
 8004134:	4603      	mov	r3, r0
 8004136:	461a      	mov	r2, r3
 8004138:	4b28      	ldr	r3, [pc, #160]	; (80041dc <calibration+0x230>)
 800413a:	849a      	strh	r2, [r3, #36]	; 0x24
			imuCalibration.mag_calib.max_x);
	imuCalibration.mag_calib.min_x = math_min(mag_AXIS_X,
 800413c:	4b27      	ldr	r3, [pc, #156]	; (80041dc <calibration+0x230>)
 800413e:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8004142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004146:	4611      	mov	r1, r2
 8004148:	4618      	mov	r0, r3
 800414a:	f002 fcb7 	bl	8006abc <math_min>
 800414e:	4603      	mov	r3, r0
 8004150:	461a      	mov	r2, r3
 8004152:	4b22      	ldr	r3, [pc, #136]	; (80041dc <calibration+0x230>)
 8004154:	84da      	strh	r2, [r3, #38]	; 0x26
			imuCalibration.mag_calib.min_x);

	int16_t mag_AXIS_Y = imu->mag_data[0].y;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 800415c:	80bb      	strh	r3, [r7, #4]
	imuCalibration.mag_calib.max_y = math_max(mag_AXIS_Y,
 800415e:	4b1f      	ldr	r3, [pc, #124]	; (80041dc <calibration+0x230>)
 8004160:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 8004164:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004168:	4611      	mov	r1, r2
 800416a:	4618      	mov	r0, r3
 800416c:	f002 fc90 	bl	8006a90 <math_max>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	4b19      	ldr	r3, [pc, #100]	; (80041dc <calibration+0x230>)
 8004176:	855a      	strh	r2, [r3, #42]	; 0x2a
			imuCalibration.mag_calib.max_y);
	imuCalibration.mag_calib.min_y = math_min(mag_AXIS_Y,
 8004178:	4b18      	ldr	r3, [pc, #96]	; (80041dc <calibration+0x230>)
 800417a:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800417e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004182:	4611      	mov	r1, r2
 8004184:	4618      	mov	r0, r3
 8004186:	f002 fc99 	bl	8006abc <math_min>
 800418a:	4603      	mov	r3, r0
 800418c:	461a      	mov	r2, r3
 800418e:	4b13      	ldr	r3, [pc, #76]	; (80041dc <calibration+0x230>)
 8004190:	859a      	strh	r2, [r3, #44]	; 0x2c
			imuCalibration.mag_calib.min_y);

	int16_t mag_AXIS_Z = imu->mag_data[0].z;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 8004198:	807b      	strh	r3, [r7, #2]
	imuCalibration.mag_calib.max_z = math_max(mag_AXIS_Z,
 800419a:	4b10      	ldr	r3, [pc, #64]	; (80041dc <calibration+0x230>)
 800419c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80041a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041a4:	4611      	mov	r1, r2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f002 fc72 	bl	8006a90 <math_max>
 80041ac:	4603      	mov	r3, r0
 80041ae:	461a      	mov	r2, r3
 80041b0:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <calibration+0x230>)
 80041b2:	861a      	strh	r2, [r3, #48]	; 0x30
			imuCalibration.mag_calib.max_z);
	imuCalibration.mag_calib.min_z = math_min(mag_AXIS_Z,
 80041b4:	4b09      	ldr	r3, [pc, #36]	; (80041dc <calibration+0x230>)
 80041b6:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 80041ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041be:	4611      	mov	r1, r2
 80041c0:	4618      	mov	r0, r3
 80041c2:	f002 fc7b 	bl	8006abc <math_min>
 80041c6:	4603      	mov	r3, r0
 80041c8:	461a      	mov	r2, r3
 80041ca:	4b04      	ldr	r3, [pc, #16]	; (80041dc <calibration+0x230>)
 80041cc:	865a      	strh	r2, [r3, #50]	; 0x32
			imuCalibration.mag_calib.min_z);

	calculateMaxima();
 80041ce:	f7ff fe17 	bl	8003e00 <calculateMaxima>
}
 80041d2:	bf00      	nop
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	200002fc 	.word	0x200002fc

080041e0 <flight_imu_calibration>:
//SERVO

AhrsState_t ahrsState;
AxesRaw_t accel, gyro, mag;

void flight_imu_calibration() {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
	calibration();
 80041e4:	f7ff fee2 	bl	8003fac <calibration>
}
 80041e8:	bf00      	nop
 80041ea:	bd80      	pop	{r7, pc}

080041ec <flight_ahrs>:

// process in main
void flight_ahrs() {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
	IMU_t *imu = get_imu();
 80041f2:	f001 fb87 	bl	8005904 <get_imu>
 80041f6:	6078      	str	r0, [r7, #4]
	accel.AXIS_X = imu->accel_data[0].x;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80041fe:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <flight_ahrs+0x88>)
 8004200:	801a      	strh	r2, [r3, #0]
	accel.AXIS_Y = imu->accel_data[0].y;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8004208:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <flight_ahrs+0x88>)
 800420a:	805a      	strh	r2, [r3, #2]
	accel.AXIS_Z = imu->accel_data[0].z;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8004212:	4b18      	ldr	r3, [pc, #96]	; (8004274 <flight_ahrs+0x88>)
 8004214:	809a      	strh	r2, [r3, #4]

	gyro.AXIS_X = imu->gyro_data[0].x;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	; 0x80
 800421c:	4b16      	ldr	r3, [pc, #88]	; (8004278 <flight_ahrs+0x8c>)
 800421e:	801a      	strh	r2, [r3, #0]
	gyro.AXIS_Y = imu->gyro_data[0].y;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f9b3 2082 	ldrsh.w	r2, [r3, #130]	; 0x82
 8004226:	4b14      	ldr	r3, [pc, #80]	; (8004278 <flight_ahrs+0x8c>)
 8004228:	805a      	strh	r2, [r3, #2]
	gyro.AXIS_Z = imu->gyro_data[0].z;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 8004230:	4b11      	ldr	r3, [pc, #68]	; (8004278 <flight_ahrs+0x8c>)
 8004232:	809a      	strh	r2, [r3, #4]

	mag.AXIS_X = imu->mag_data[0].x;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f9b3 20f8 	ldrsh.w	r2, [r3, #248]	; 0xf8
 800423a:	4b10      	ldr	r3, [pc, #64]	; (800427c <flight_ahrs+0x90>)
 800423c:	801a      	strh	r2, [r3, #0]
	mag.AXIS_Y = imu->mag_data[0].y;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f9b3 20fa 	ldrsh.w	r2, [r3, #250]	; 0xfa
 8004244:	4b0d      	ldr	r3, [pc, #52]	; (800427c <flight_ahrs+0x90>)
 8004246:	805a      	strh	r2, [r3, #2]
	mag.AXIS_Z = imu->mag_data[0].z;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f9b3 20fc 	ldrsh.w	r2, [r3, #252]	; 0xfc
 800424e:	4b0b      	ldr	r3, [pc, #44]	; (800427c <flight_ahrs+0x90>)
 8004250:	809a      	strh	r2, [r3, #4]

	drone_queue_control();
 8004252:	f004 f8b3 	bl	80083bc <drone_queue_control>
	ahrs_fusion_agm(&accel, &gyro, &mag, &ahrsState);
 8004256:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <flight_ahrs+0x94>)
 8004258:	4a08      	ldr	r2, [pc, #32]	; (800427c <flight_ahrs+0x90>)
 800425a:	4907      	ldr	r1, [pc, #28]	; (8004278 <flight_ahrs+0x8c>)
 800425c:	4805      	ldr	r0, [pc, #20]	; (8004274 <flight_ahrs+0x88>)
 800425e:	f7fc fe13 	bl	8000e88 <ahrs_fusion_agm>
	quaternion_to_euler(&ahrsState.q, &ahrsState.ea);
 8004262:	4908      	ldr	r1, [pc, #32]	; (8004284 <flight_ahrs+0x98>)
 8004264:	4806      	ldr	r0, [pc, #24]	; (8004280 <flight_ahrs+0x94>)
 8004266:	f004 fa19 	bl	800869c <quaternion_to_euler>
}
 800426a:	bf00      	nop
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	20000350 	.word	0x20000350
 8004278:	20000358 	.word	0x20000358
 800427c:	20000360 	.word	0x20000360
 8004280:	20000334 	.word	0x20000334
 8004284:	20000344 	.word	0x20000344

08004288 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800428e:	f107 030c 	add.w	r3, r7, #12
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	605a      	str	r2, [r3, #4]
 8004298:	609a      	str	r2, [r3, #8]
 800429a:	60da      	str	r2, [r3, #12]
 800429c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800429e:	2300      	movs	r3, #0
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	4b15      	ldr	r3, [pc, #84]	; (80042f8 <MX_GPIO_Init+0x70>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	4a14      	ldr	r2, [pc, #80]	; (80042f8 <MX_GPIO_Init+0x70>)
 80042a8:	f043 0301 	orr.w	r3, r3, #1
 80042ac:	6313      	str	r3, [r2, #48]	; 0x30
 80042ae:	4b12      	ldr	r3, [pc, #72]	; (80042f8 <MX_GPIO_Init+0x70>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	60bb      	str	r3, [r7, #8]
 80042b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ba:	2300      	movs	r3, #0
 80042bc:	607b      	str	r3, [r7, #4]
 80042be:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <MX_GPIO_Init+0x70>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	4a0d      	ldr	r2, [pc, #52]	; (80042f8 <MX_GPIO_Init+0x70>)
 80042c4:	f043 0302 	orr.w	r3, r3, #2
 80042c8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ca:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <MX_GPIO_Init+0x70>)
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	607b      	str	r3, [r7, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UL_BUSY_Pin;
 80042d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042dc:	2300      	movs	r3, #0
 80042de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(UL_BUSY_GPIO_Port, &GPIO_InitStruct);
 80042e4:	f107 030c 	add.w	r3, r7, #12
 80042e8:	4619      	mov	r1, r3
 80042ea:	4804      	ldr	r0, [pc, #16]	; (80042fc <MX_GPIO_Init+0x74>)
 80042ec:	f004 fe66 	bl	8008fbc <HAL_GPIO_Init>

}
 80042f0:	bf00      	nop
 80042f2:	3720      	adds	r7, #32
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40020400 	.word	0x40020400

08004300 <gps_getPVT>:
NMEA_DATA_t nmea_data;

static NEO7M_t NEO7M = { .ubx = &ubx_data, .nmea = &nmea_data };

// Read the position contained in a UBX-NAV_PVT message
static void gps_getPVT(size_t bufferLength) {
 8004300:	b590      	push	{r4, r7, lr}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	NEO7M_t *neo7m = get_gps();
 8004308:	f000 fed6 	bl	80050b8 <get_gps>
 800430c:	60f8      	str	r0, [r7, #12]
	const char *pBuffer = (const char*) &neo7m->BUFFER[0];
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3301      	adds	r3, #1
 8004312:	60bb      	str	r3, [r7, #8]

	// We have the complete raw message so need to move past the header
	pBuffer += U_UBX_PROTOCOL_HEADER_LENGTH_BYTES;
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	3306      	adds	r3, #6
 8004318:	60bb      	str	r3, [r7, #8]
	if ((bufferLength >= U_UBX_PROTOCOL_HEADER_LENGTH_BYTES + 66)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b47      	cmp	r3, #71	; 0x47
 800431e:	d94e      	bls.n	80043be <gps_getPVT+0xbe>
			&& (*(pBuffer + 21) & 0x01)) {
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	3315      	adds	r3, #21
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d047      	beq.n	80043be <gps_getPVT+0xbe>
		neo7m->ubx->longitudeX1e7 = uUbxProtocolUint32Decode(pBuffer + 24);
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	3318      	adds	r3, #24
 8004332:	4618      	mov	r0, r3
 8004334:	f001 fd7c 	bl	8005e30 <uUbxProtocolUint32Decode>
 8004338:	4602      	mov	r2, r0
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8004340:	601a      	str	r2, [r3, #0]
		neo7m->ubx->latitudeX1e7 = uUbxProtocolUint32Decode(pBuffer + 28);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	331c      	adds	r3, #28
 8004346:	4618      	mov	r0, r3
 8004348:	f001 fd72 	bl	8005e30 <uUbxProtocolUint32Decode>
 800434c:	4602      	mov	r2, r0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8004354:	605a      	str	r2, [r3, #4]
		neo7m->ubx->hMSL = uUbxProtocolUint32Decode(pBuffer + 36);
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	3324      	adds	r3, #36	; 0x24
 800435a:	4618      	mov	r0, r3
 800435c:	f001 fd68 	bl	8005e30 <uUbxProtocolUint32Decode>
 8004360:	4602      	mov	r2, r0
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8004368:	609a      	str	r2, [r3, #8]
		neo7m->ubx->hAcc = uUbxProtocolUint32Decode(pBuffer + 40);
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f8d3 41ac 	ldr.w	r4, [r3, #428]	; 0x1ac
 8004376:	4610      	mov	r0, r2
 8004378:	f001 fd5a 	bl	8005e30 <uUbxProtocolUint32Decode>
 800437c:	4603      	mov	r3, r0
 800437e:	60e3      	str	r3, [r4, #12]
		neo7m->ubx->vAcc = uUbxProtocolUint32Decode(pBuffer + 44);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f8d3 41ac 	ldr.w	r4, [r3, #428]	; 0x1ac
 800438c:	4610      	mov	r0, r2
 800438e:	f001 fd4f 	bl	8005e30 <uUbxProtocolUint32Decode>
 8004392:	4603      	mov	r3, r0
 8004394:	6123      	str	r3, [r4, #16]
		neo7m->ubx->gSpeed = uUbxProtocolUint32Decode(pBuffer + 60);
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	333c      	adds	r3, #60	; 0x3c
 800439a:	4618      	mov	r0, r3
 800439c:	f001 fd48 	bl	8005e30 <uUbxProtocolUint32Decode>
 80043a0:	4602      	mov	r2, r0
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80043a8:	615a      	str	r2, [r3, #20]
		neo7m->ubx->heading = uUbxProtocolUint32Decode(pBuffer + 64);
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	3340      	adds	r3, #64	; 0x40
 80043ae:	4618      	mov	r0, r3
 80043b0:	f001 fd3e 	bl	8005e30 <uUbxProtocolUint32Decode>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80043bc:	619a      	str	r2, [r3, #24]
	}
}
 80043be:	bf00      	nop
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd90      	pop	{r4, r7, pc}
	...

080043c8 <gps_convertNMEA_LatLong>:

static void gps_convertNMEA_LatLong() {
 80043c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043cc:	b08b      	sub	sp, #44	; 0x2c
 80043ce:	af00      	add	r7, sp, #0
	NEO7M_t *neo7m = get_gps();
 80043d0:	f000 fe72 	bl	80050b8 <get_gps>
 80043d4:	6238      	str	r0, [r7, #32]
	double valueTmp2;
	double valueTmp3;
	double valueTmp4;

	// Convert the latitude from ASCII to uint8_t values
	for (i = 0; i < 10; i++) {
 80043d6:	2300      	movs	r3, #0
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
 80043da:	e014      	b.n	8004406 <gps_convertNMEA_LatLong+0x3e>
		neo7m->nmea->Latitude[i] = neo7m->nmea->Latitude[i] & 0xF;
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	4413      	add	r3, r2
 80043e6:	3313      	adds	r3, #19
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	6a3a      	ldr	r2, [r7, #32]
 80043ec:	f8d2 21b0 	ldr.w	r2, [r2, #432]	; 0x1b0
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	b2d9      	uxtb	r1, r3
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	4413      	add	r3, r2
 80043fa:	3313      	adds	r3, #19
 80043fc:	460a      	mov	r2, r1
 80043fe:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 10; i++) {
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	3301      	adds	r3, #1
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	2b09      	cmp	r3, #9
 800440a:	dde7      	ble.n	80043dc <gps_convertNMEA_LatLong+0x14>
	}
	// Convert latitude from degree/minute/second (DMS) format into decimal
	valueTmp1 = (double) neo7m->nmea->Latitude[0] * 10.0
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004412:	7cdb      	ldrb	r3, [r3, #19]
 8004414:	4618      	mov	r0, r3
 8004416:	f7fc f87d 	bl	8000514 <__aeabi_ui2d>
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	4b64      	ldr	r3, [pc, #400]	; (80045b0 <gps_convertNMEA_LatLong+0x1e8>)
 8004420:	f7fc f8f2 	bl	8000608 <__aeabi_dmul>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4692      	mov	sl, r2
 800442a:	469b      	mov	fp, r3
			+ (double) neo7m->nmea->Latitude[1];
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004432:	7d1b      	ldrb	r3, [r3, #20]
 8004434:	4618      	mov	r0, r3
 8004436:	f7fc f86d 	bl	8000514 <__aeabi_ui2d>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
	valueTmp1 = (double) neo7m->nmea->Latitude[0] * 10.0
 800443e:	4650      	mov	r0, sl
 8004440:	4659      	mov	r1, fp
 8004442:	f7fb ff2b 	bl	800029c <__adddf3>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	valueTmp2 = (double) neo7m->nmea->Latitude[2] * 10.0
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004454:	7d5b      	ldrb	r3, [r3, #21]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fc f85c 	bl	8000514 <__aeabi_ui2d>
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	4b53      	ldr	r3, [pc, #332]	; (80045b0 <gps_convertNMEA_LatLong+0x1e8>)
 8004462:	f7fc f8d1 	bl	8000608 <__aeabi_dmul>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4692      	mov	sl, r2
 800446c:	469b      	mov	fp, r3
			+ (double) neo7m->nmea->Latitude[3];
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004474:	7d9b      	ldrb	r3, [r3, #22]
 8004476:	4618      	mov	r0, r3
 8004478:	f7fc f84c 	bl	8000514 <__aeabi_ui2d>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
	valueTmp2 = (double) neo7m->nmea->Latitude[2] * 10.0
 8004480:	4650      	mov	r0, sl
 8004482:	4659      	mov	r1, fp
 8004484:	f7fb ff0a 	bl	800029c <__adddf3>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	valueTmp3 = (double) neo7m->nmea->Latitude[5] * 1000.0
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004496:	7e1b      	ldrb	r3, [r3, #24]
 8004498:	4618      	mov	r0, r3
 800449a:	f7fc f83b 	bl	8000514 <__aeabi_ui2d>
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	4b44      	ldr	r3, [pc, #272]	; (80045b4 <gps_convertNMEA_LatLong+0x1ec>)
 80044a4:	f7fc f8b0 	bl	8000608 <__aeabi_dmul>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	4692      	mov	sl, r2
 80044ae:	469b      	mov	fp, r3
			+ (double) neo7m->nmea->Latitude[6] * 100.0
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80044b6:	7e5b      	ldrb	r3, [r3, #25]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fc f82b 	bl	8000514 <__aeabi_ui2d>
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	4b3d      	ldr	r3, [pc, #244]	; (80045b8 <gps_convertNMEA_LatLong+0x1f0>)
 80044c4:	f7fc f8a0 	bl	8000608 <__aeabi_dmul>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4650      	mov	r0, sl
 80044ce:	4659      	mov	r1, fp
 80044d0:	f7fb fee4 	bl	800029c <__adddf3>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4692      	mov	sl, r2
 80044da:	469b      	mov	fp, r3
			+ (double) neo7m->nmea->Latitude[7] * 10.0
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80044e2:	7e9b      	ldrb	r3, [r3, #26]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fc f815 	bl	8000514 <__aeabi_ui2d>
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	4b30      	ldr	r3, [pc, #192]	; (80045b0 <gps_convertNMEA_LatLong+0x1e8>)
 80044f0:	f7fc f88a 	bl	8000608 <__aeabi_dmul>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4650      	mov	r0, sl
 80044fa:	4659      	mov	r1, fp
 80044fc:	f7fb fece 	bl	800029c <__adddf3>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4692      	mov	sl, r2
 8004506:	469b      	mov	fp, r3
			+ (double) neo7m->nmea->Latitude[8];
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800450e:	7edb      	ldrb	r3, [r3, #27]
 8004510:	4618      	mov	r0, r3
 8004512:	f7fb ffff 	bl	8000514 <__aeabi_ui2d>
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
	valueTmp3 = (double) neo7m->nmea->Latitude[5] * 1000.0
 800451a:	4650      	mov	r0, sl
 800451c:	4659      	mov	r1, fp
 800451e:	f7fb febd 	bl	800029c <__adddf3>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	e9c7 2302 	strd	r2, r3, [r7, #8]

	neo7m->nmea->latitude = valueTmp1
			+ ((valueTmp2 + (valueTmp3 * 0.0001)) / 60.0);
 800452a:	a31f      	add	r3, pc, #124	; (adr r3, 80045a8 <gps_convertNMEA_LatLong+0x1e0>)
 800452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004530:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004534:	f7fc f868 	bl	8000608 <__aeabi_dmul>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4610      	mov	r0, r2
 800453e:	4619      	mov	r1, r3
 8004540:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004544:	f7fb feaa 	bl	800029c <__adddf3>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	4610      	mov	r0, r2
 800454e:	4619      	mov	r1, r3
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	4b19      	ldr	r3, [pc, #100]	; (80045bc <gps_convertNMEA_LatLong+0x1f4>)
 8004556:	f7fc f981 	bl	800085c <__aeabi_ddiv>
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	4610      	mov	r0, r2
 8004560:	4619      	mov	r1, r3
	neo7m->nmea->latitude = valueTmp1
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	f8d3 61b0 	ldr.w	r6, [r3, #432]	; 0x1b0
			+ ((valueTmp2 + (valueTmp3 * 0.0001)) / 60.0);
 8004568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800456c:	f7fb fe96 	bl	800029c <__adddf3>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
	neo7m->nmea->latitude = valueTmp1
 8004574:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68

	if (neo7m->nmea->LatitudePole[0] == 'S') {
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800457e:	7f5b      	ldrb	r3, [r3, #29]
 8004580:	2b53      	cmp	r3, #83	; 0x53
 8004582:	d10c      	bne.n	800459e <gps_convertNMEA_LatLong+0x1d6>
		neo7m->nmea->latitude *= -1;
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800458a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800458e:	6a39      	ldr	r1, [r7, #32]
 8004590:	f8d1 11b0 	ldr.w	r1, [r1, #432]	; 0x1b0
 8004594:	4690      	mov	r8, r2
 8004596:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800459a:	e9c1 891a 	strd	r8, r9, [r1, #104]	; 0x68
	}

	// Convert the longitude from ASCII to uint8_t values
	for (i = 0; i < 10; i++) {
 800459e:	2300      	movs	r3, #0
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
 80045a2:	e022      	b.n	80045ea <gps_convertNMEA_LatLong+0x222>
 80045a4:	f3af 8000 	nop.w
 80045a8:	eb1c432d 	.word	0xeb1c432d
 80045ac:	3f1a36e2 	.word	0x3f1a36e2
 80045b0:	40240000 	.word	0x40240000
 80045b4:	408f4000 	.word	0x408f4000
 80045b8:	40590000 	.word	0x40590000
 80045bc:	404e0000 	.word	0x404e0000
		neo7m->nmea->Longitude[i] = neo7m->nmea->Longitude[i] & 0xF;
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	4413      	add	r3, r2
 80045ca:	331f      	adds	r3, #31
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	6a3a      	ldr	r2, [r7, #32]
 80045d0:	f8d2 21b0 	ldr.w	r2, [r2, #432]	; 0x1b0
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	b2d9      	uxtb	r1, r3
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	4413      	add	r3, r2
 80045de:	331f      	adds	r3, #31
 80045e0:	460a      	mov	r2, r1
 80045e2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 10; i++) {
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	3301      	adds	r3, #1
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	2b09      	cmp	r3, #9
 80045ee:	dde7      	ble.n	80045c0 <gps_convertNMEA_LatLong+0x1f8>
	}
	// Convert longitude from degree/minute/second (DMS) format into decimal
	valueTmp1 = (double) neo7m->nmea->Longitude[0] * 100.0
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80045f6:	7fdb      	ldrb	r3, [r3, #31]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fb ff8b 	bl	8000514 <__aeabi_ui2d>
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	4b7b      	ldr	r3, [pc, #492]	; (80047f0 <gps_convertNMEA_LatLong+0x428>)
 8004604:	f7fc f800 	bl	8000608 <__aeabi_dmul>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4690      	mov	r8, r2
 800460e:	4699      	mov	r9, r3
			+ (double) neo7m->nmea->Longitude[1] * 10.0
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004616:	f893 3020 	ldrb.w	r3, [r3, #32]
 800461a:	4618      	mov	r0, r3
 800461c:	f7fb ff7a 	bl	8000514 <__aeabi_ui2d>
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	4b73      	ldr	r3, [pc, #460]	; (80047f4 <gps_convertNMEA_LatLong+0x42c>)
 8004626:	f7fb ffef 	bl	8000608 <__aeabi_dmul>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4640      	mov	r0, r8
 8004630:	4649      	mov	r1, r9
 8004632:	f7fb fe33 	bl	800029c <__adddf3>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4690      	mov	r8, r2
 800463c:	4699      	mov	r9, r3
			+ (double) neo7m->nmea->Longitude[2];
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004644:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004648:	4618      	mov	r0, r3
 800464a:	f7fb ff63 	bl	8000514 <__aeabi_ui2d>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
	valueTmp1 = (double) neo7m->nmea->Longitude[0] * 100.0
 8004652:	4640      	mov	r0, r8
 8004654:	4649      	mov	r1, r9
 8004656:	f7fb fe21 	bl	800029c <__adddf3>
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	valueTmp2 = (double) neo7m->nmea->Longitude[3] * 10.0
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004668:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800466c:	4618      	mov	r0, r3
 800466e:	f7fb ff51 	bl	8000514 <__aeabi_ui2d>
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	4b5f      	ldr	r3, [pc, #380]	; (80047f4 <gps_convertNMEA_LatLong+0x42c>)
 8004678:	f7fb ffc6 	bl	8000608 <__aeabi_dmul>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4690      	mov	r8, r2
 8004682:	4699      	mov	r9, r3
			+ (double) neo7m->nmea->Longitude[4];
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800468a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800468e:	4618      	mov	r0, r3
 8004690:	f7fb ff40 	bl	8000514 <__aeabi_ui2d>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
	valueTmp2 = (double) neo7m->nmea->Longitude[3] * 10.0
 8004698:	4640      	mov	r0, r8
 800469a:	4649      	mov	r1, r9
 800469c:	f7fb fdfe 	bl	800029c <__adddf3>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	valueTmp3 = (double) neo7m->nmea->Longitude[6] * 1000.0
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80046ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fb ff2e 	bl	8000514 <__aeabi_ui2d>
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	4b4e      	ldr	r3, [pc, #312]	; (80047f8 <gps_convertNMEA_LatLong+0x430>)
 80046be:	f7fb ffa3 	bl	8000608 <__aeabi_dmul>
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	4690      	mov	r8, r2
 80046c8:	4699      	mov	r9, r3
			+ (double) neo7m->nmea->Longitude[7] * 100;
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80046d0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fb ff1d 	bl	8000514 <__aeabi_ui2d>
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	4b44      	ldr	r3, [pc, #272]	; (80047f0 <gps_convertNMEA_LatLong+0x428>)
 80046e0:	f7fb ff92 	bl	8000608 <__aeabi_dmul>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
	valueTmp3 = (double) neo7m->nmea->Longitude[6] * 1000.0
 80046e8:	4640      	mov	r0, r8
 80046ea:	4649      	mov	r1, r9
 80046ec:	f7fb fdd6 	bl	800029c <__adddf3>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	valueTmp4 = (double) neo7m->nmea->Longitude[8] * 10.0
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80046fe:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004702:	4618      	mov	r0, r3
 8004704:	f7fb ff06 	bl	8000514 <__aeabi_ui2d>
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	4b39      	ldr	r3, [pc, #228]	; (80047f4 <gps_convertNMEA_LatLong+0x42c>)
 800470e:	f7fb ff7b 	bl	8000608 <__aeabi_dmul>
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	4690      	mov	r8, r2
 8004718:	4699      	mov	r9, r3
			+ (double) neo7m->nmea->Longitude[9];
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004720:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004724:	4618      	mov	r0, r3
 8004726:	f7fb fef5 	bl	8000514 <__aeabi_ui2d>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
	valueTmp4 = (double) neo7m->nmea->Longitude[8] * 10.0
 800472e:	4640      	mov	r0, r8
 8004730:	4649      	mov	r1, r9
 8004732:	f7fb fdb3 	bl	800029c <__adddf3>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	e9c7 2300 	strd	r2, r3, [r7]

	neo7m->nmea->longitude = valueTmp1 + (valueTmp2 / 60.0)
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	4b2e      	ldr	r3, [pc, #184]	; (80047fc <gps_convertNMEA_LatLong+0x434>)
 8004744:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004748:	f7fc f888 	bl	800085c <__aeabi_ddiv>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4610      	mov	r0, r2
 8004752:	4619      	mov	r1, r3
 8004754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004758:	f7fb fda0 	bl	800029c <__adddf3>
 800475c:	4602      	mov	r2, r0
 800475e:	460b      	mov	r3, r1
 8004760:	4690      	mov	r8, r2
 8004762:	4699      	mov	r9, r3
			+ (((valueTmp3 + valueTmp4) * 0.0001) / 60.0);
 8004764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004768:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800476c:	f7fb fd96 	bl	800029c <__adddf3>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	4610      	mov	r0, r2
 8004776:	4619      	mov	r1, r3
 8004778:	a31b      	add	r3, pc, #108	; (adr r3, 80047e8 <gps_convertNMEA_LatLong+0x420>)
 800477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477e:	f7fb ff43 	bl	8000608 <__aeabi_dmul>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4610      	mov	r0, r2
 8004788:	4619      	mov	r1, r3
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	4b1b      	ldr	r3, [pc, #108]	; (80047fc <gps_convertNMEA_LatLong+0x434>)
 8004790:	f7fc f864 	bl	800085c <__aeabi_ddiv>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4610      	mov	r0, r2
 800479a:	4619      	mov	r1, r3
	neo7m->nmea->longitude = valueTmp1 + (valueTmp2 / 60.0)
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	f8d3 61b0 	ldr.w	r6, [r3, #432]	; 0x1b0
			+ (((valueTmp3 + valueTmp4) * 0.0001) / 60.0);
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4640      	mov	r0, r8
 80047a8:	4649      	mov	r1, r9
 80047aa:	f7fb fd77 	bl	800029c <__adddf3>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
	neo7m->nmea->longitude = valueTmp1 + (valueTmp2 / 60.0)
 80047b2:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70

	if (neo7m->nmea->LongitudePole[0] == 'W') {
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80047bc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80047c0:	2b57      	cmp	r3, #87	; 0x57
 80047c2:	d10c      	bne.n	80047de <gps_convertNMEA_LatLong+0x416>
		neo7m->nmea->longitude *= -1;
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80047ca:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80047ce:	6a39      	ldr	r1, [r7, #32]
 80047d0:	f8d1 11b0 	ldr.w	r1, [r1, #432]	; 0x1b0
 80047d4:	4614      	mov	r4, r2
 80047d6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80047da:	e9c1 451c 	strd	r4, r5, [r1, #112]	; 0x70
	}
}
 80047de:	bf00      	nop
 80047e0:	372c      	adds	r7, #44	; 0x2c
 80047e2:	46bd      	mov	sp, r7
 80047e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e8:	eb1c432d 	.word	0xeb1c432d
 80047ec:	3f1a36e2 	.word	0x3f1a36e2
 80047f0:	40590000 	.word	0x40590000
 80047f4:	40240000 	.word	0x40240000
 80047f8:	408f4000 	.word	0x408f4000
 80047fc:	404e0000 	.word	0x404e0000

08004800 <gps_parseNMEA>:

static void gps_parseNMEA(const char *pBufferStart, const char *type) {
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
	NEO7M_t *neo7m = get_gps();
 800480a:	f000 fc55 	bl	80050b8 <get_gps>
 800480e:	60f8      	str	r0, [r7, #12]
	int i = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
	for (char *pTokenStart = strtok((char*) pBufferStart, &NMEA_COMMA);
 8004814:	49a2      	ldr	r1, [pc, #648]	; (8004aa0 <gps_parseNMEA+0x2a0>)
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f008 ffe0 	bl	800d7dc <strtok>
 800481c:	6138      	str	r0, [r7, #16]
 800481e:	e182      	b.n	8004b26 <gps_parseNMEA+0x326>
			pTokenStart != NULL; pTokenStart = strtok(NULL, &NMEA_COMMA)) {
		if (i == 0) {
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10d      	bne.n	8004842 <gps_parseNMEA+0x42>
			strcpy(neo7m->nmea->DataType, pTokenStart + 1);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800482c:	461a      	mov	r2, r3
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	3301      	adds	r3, #1
 8004832:	4619      	mov	r1, r3
 8004834:	4610      	mov	r0, r2
 8004836:	f009 f92c 	bl	800da92 <strcpy>
			i++;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	3301      	adds	r3, #1
 800483e:	617b      	str	r3, [r7, #20]
			continue;
 8004840:	e16c      	b.n	8004b1c <gps_parseNMEA+0x31c>
		}

		if (type == NMEA_GPGGA) {
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	4a97      	ldr	r2, [pc, #604]	; (8004aa4 <gps_parseNMEA+0x2a4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	f040 8087 	bne.w	800495a <gps_parseNMEA+0x15a>
			if (i == 1) {
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d10b      	bne.n	800486a <gps_parseNMEA+0x6a>
				strcpy(neo7m->nmea->UtcTime, pTokenStart);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004858:	3306      	adds	r3, #6
 800485a:	6939      	ldr	r1, [r7, #16]
 800485c:	4618      	mov	r0, r3
 800485e:	f009 f918 	bl	800da92 <strcpy>
				i++;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	3301      	adds	r3, #1
 8004866:	617b      	str	r3, [r7, #20]
				continue;
 8004868:	e158      	b.n	8004b1c <gps_parseNMEA+0x31c>
			}
			if (i == 2) {
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b02      	cmp	r3, #2
 800486e:	d10b      	bne.n	8004888 <gps_parseNMEA+0x88>
				strcpy(neo7m->nmea->Latitude, pTokenStart);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004876:	3313      	adds	r3, #19
 8004878:	6939      	ldr	r1, [r7, #16]
 800487a:	4618      	mov	r0, r3
 800487c:	f009 f909 	bl	800da92 <strcpy>
				i++;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	3301      	adds	r3, #1
 8004884:	617b      	str	r3, [r7, #20]
				continue;
 8004886:	e149      	b.n	8004b1c <gps_parseNMEA+0x31c>
			}
			if (i == 3) {
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2b03      	cmp	r3, #3
 800488c:	d10b      	bne.n	80048a6 <gps_parseNMEA+0xa6>
				strcpy(neo7m->nmea->LatitudePole, pTokenStart);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004894:	331d      	adds	r3, #29
 8004896:	6939      	ldr	r1, [r7, #16]
 8004898:	4618      	mov	r0, r3
 800489a:	f009 f8fa 	bl	800da92 <strcpy>
				i++;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	3301      	adds	r3, #1
 80048a2:	617b      	str	r3, [r7, #20]
				continue;
 80048a4:	e13a      	b.n	8004b1c <gps_parseNMEA+0x31c>
			}
			if (i == 4) {
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d10b      	bne.n	80048c4 <gps_parseNMEA+0xc4>
				strcpy(neo7m->nmea->Longitude, pTokenStart);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80048b2:	331f      	adds	r3, #31
 80048b4:	6939      	ldr	r1, [r7, #16]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f009 f8eb 	bl	800da92 <strcpy>
				i++;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	3301      	adds	r3, #1
 80048c0:	617b      	str	r3, [r7, #20]
				continue;
 80048c2:	e12b      	b.n	8004b1c <gps_parseNMEA+0x31c>
			}
			if (i == 5) {
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2b05      	cmp	r3, #5
 80048c8:	d10b      	bne.n	80048e2 <gps_parseNMEA+0xe2>
				strcpy(neo7m->nmea->LongitudePole, pTokenStart);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80048d0:	332a      	adds	r3, #42	; 0x2a
 80048d2:	6939      	ldr	r1, [r7, #16]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f009 f8dc 	bl	800da92 <strcpy>
				i++;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	3301      	adds	r3, #1
 80048de:	617b      	str	r3, [r7, #20]
				continue;
 80048e0:	e11c      	b.n	8004b1c <gps_parseNMEA+0x31c>
			}
			if (i == 6) {
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b06      	cmp	r3, #6
 80048e6:	d10b      	bne.n	8004900 <gps_parseNMEA+0x100>
				strcpy(neo7m->nmea->FixQuality, pTokenStart);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80048ee:	332c      	adds	r3, #44	; 0x2c
 80048f0:	6939      	ldr	r1, [r7, #16]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f009 f8cd 	bl	800da92 <strcpy>
				i++;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	3301      	adds	r3, #1
 80048fc:	617b      	str	r3, [r7, #20]
				continue;
 80048fe:	e10d      	b.n	8004b1c <gps_parseNMEA+0x31c>
			}
			if (i == 8) {
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2b08      	cmp	r3, #8
 8004904:	d10b      	bne.n	800491e <gps_parseNMEA+0x11e>
				strcpy(neo7m->nmea->HorizontalDilution, pTokenStart);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800490c:	3331      	adds	r3, #49	; 0x31
 800490e:	6939      	ldr	r1, [r7, #16]
 8004910:	4618      	mov	r0, r3
 8004912:	f009 f8be 	bl	800da92 <strcpy>
				i++;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	3301      	adds	r3, #1
 800491a:	617b      	str	r3, [r7, #20]
				continue;
 800491c:	e0fe      	b.n	8004b1c <gps_parseNMEA+0x31c>
			}
			if (i == 9) {
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b09      	cmp	r3, #9
 8004922:	d10b      	bne.n	800493c <gps_parseNMEA+0x13c>
				strcpy(neo7m->nmea->Altitude, pTokenStart);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800492a:	3337      	adds	r3, #55	; 0x37
 800492c:	6939      	ldr	r1, [r7, #16]
 800492e:	4618      	mov	r0, r3
 8004930:	f009 f8af 	bl	800da92 <strcpy>
				i++;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	3301      	adds	r3, #1
 8004938:	617b      	str	r3, [r7, #20]
				continue;
 800493a:	e0ef      	b.n	8004b1c <gps_parseNMEA+0x31c>
			}
			if (i == 10) {
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2b0a      	cmp	r3, #10
 8004940:	d10b      	bne.n	800495a <gps_parseNMEA+0x15a>
				strcpy(neo7m->nmea->AltitudeUnit, pTokenStart);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004948:	333f      	adds	r3, #63	; 0x3f
 800494a:	6939      	ldr	r1, [r7, #16]
 800494c:	4618      	mov	r0, r3
 800494e:	f009 f8a0 	bl	800da92 <strcpy>
				i++;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	3301      	adds	r3, #1
 8004956:	617b      	str	r3, [r7, #20]
				continue;
 8004958:	e0e0      	b.n	8004b1c <gps_parseNMEA+0x31c>
			}
		}
		if (type == NMEA_GPGGL) {
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	4a52      	ldr	r2, [pc, #328]	; (8004aa8 <gps_parseNMEA+0x2a8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d10e      	bne.n	8004980 <gps_parseNMEA+0x180>
			if (i == 6) {
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b06      	cmp	r3, #6
 8004966:	d10b      	bne.n	8004980 <gps_parseNMEA+0x180>
				strcpy(neo7m->nmea->DataStatus, pTokenStart);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800496e:	3311      	adds	r3, #17
 8004970:	6939      	ldr	r1, [r7, #16]
 8004972:	4618      	mov	r0, r3
 8004974:	f009 f88d 	bl	800da92 <strcpy>
				i++;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	3301      	adds	r3, #1
 800497c:	617b      	str	r3, [r7, #20]
				continue;
 800497e:	e0cd      	b.n	8004b1c <gps_parseNMEA+0x31c>
			}
		}
		if (type == NMEA_GPGSA) {

		}
		if (type == NMEA_GPGSV) {
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	4a4a      	ldr	r2, [pc, #296]	; (8004aac <gps_parseNMEA+0x2ac>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d10e      	bne.n	80049a6 <gps_parseNMEA+0x1a6>
			if (i == 3) {
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2b03      	cmp	r3, #3
 800498c:	d10b      	bne.n	80049a6 <gps_parseNMEA+0x1a6>
				strcpy(neo7m->nmea->SatelliteTracked, pTokenStart);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004994:	332e      	adds	r3, #46	; 0x2e
 8004996:	6939      	ldr	r1, [r7, #16]
 8004998:	4618      	mov	r0, r3
 800499a:	f009 f87a 	bl	800da92 <strcpy>
				i++;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	3301      	adds	r3, #1
 80049a2:	617b      	str	r3, [r7, #20]
				continue;
 80049a4:	e0ba      	b.n	8004b1c <gps_parseNMEA+0x31c>
			}
		}
		if (type == NMEA_GPRMC) {
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	4a41      	ldr	r2, [pc, #260]	; (8004ab0 <gps_parseNMEA+0x2b0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	f040 8091 	bne.w	8004ad2 <gps_parseNMEA+0x2d2>
			if (i == 1) {
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d10b      	bne.n	80049ce <gps_parseNMEA+0x1ce>
				strcpy(neo7m->nmea->UtcTime, pTokenStart);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80049bc:	3306      	adds	r3, #6
 80049be:	6939      	ldr	r1, [r7, #16]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f009 f866 	bl	800da92 <strcpy>
				i++;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	3301      	adds	r3, #1
 80049ca:	617b      	str	r3, [r7, #20]
				continue;
 80049cc:	e0a6      	b.n	8004b1c <gps_parseNMEA+0x31c>
			}
			if (i == 2) {
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d10b      	bne.n	80049ec <gps_parseNMEA+0x1ec>
				strcpy(neo7m->nmea->DataStatus, pTokenStart);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80049da:	3311      	adds	r3, #17
 80049dc:	6939      	ldr	r1, [r7, #16]
 80049de:	4618      	mov	r0, r3
 80049e0:	f009 f857 	bl	800da92 <strcpy>
				i++;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	3301      	adds	r3, #1
 80049e8:	617b      	str	r3, [r7, #20]
				continue;
 80049ea:	e097      	b.n	8004b1c <gps_parseNMEA+0x31c>
			}
			if (i == 3) {
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d10b      	bne.n	8004a0a <gps_parseNMEA+0x20a>
				strcpy(neo7m->nmea->Latitude, pTokenStart);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80049f8:	3313      	adds	r3, #19
 80049fa:	6939      	ldr	r1, [r7, #16]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f009 f848 	bl	800da92 <strcpy>
				i++;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	3301      	adds	r3, #1
 8004a06:	617b      	str	r3, [r7, #20]
				continue;
 8004a08:	e088      	b.n	8004b1c <gps_parseNMEA+0x31c>
			}
			if (i == 4) {
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d10b      	bne.n	8004a28 <gps_parseNMEA+0x228>
				strcpy(neo7m->nmea->LatitudePole, pTokenStart);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004a16:	331d      	adds	r3, #29
 8004a18:	6939      	ldr	r1, [r7, #16]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f009 f839 	bl	800da92 <strcpy>
				i++;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	3301      	adds	r3, #1
 8004a24:	617b      	str	r3, [r7, #20]
				continue;
 8004a26:	e079      	b.n	8004b1c <gps_parseNMEA+0x31c>
			}
			if (i == 5) {
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2b05      	cmp	r3, #5
 8004a2c:	d10b      	bne.n	8004a46 <gps_parseNMEA+0x246>
				strcpy(neo7m->nmea->Longitude, pTokenStart);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004a34:	331f      	adds	r3, #31
 8004a36:	6939      	ldr	r1, [r7, #16]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f009 f82a 	bl	800da92 <strcpy>
				i++;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	3301      	adds	r3, #1
 8004a42:	617b      	str	r3, [r7, #20]
				continue;
 8004a44:	e06a      	b.n	8004b1c <gps_parseNMEA+0x31c>
			}
			if (i == 6) {
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b06      	cmp	r3, #6
 8004a4a:	d10b      	bne.n	8004a64 <gps_parseNMEA+0x264>
				strcpy(neo7m->nmea->LongitudePole, pTokenStart);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004a52:	332a      	adds	r3, #42	; 0x2a
 8004a54:	6939      	ldr	r1, [r7, #16]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f009 f81b 	bl	800da92 <strcpy>
				i++;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	617b      	str	r3, [r7, #20]
				continue;
 8004a62:	e05b      	b.n	8004b1c <gps_parseNMEA+0x31c>
			}
			if (i == 7) {
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2b07      	cmp	r3, #7
 8004a68:	d10b      	bne.n	8004a82 <gps_parseNMEA+0x282>
				strcpy(neo7m->nmea->SpeedOverGround, pTokenStart);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004a70:	334b      	adds	r3, #75	; 0x4b
 8004a72:	6939      	ldr	r1, [r7, #16]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f009 f80c 	bl	800da92 <strcpy>
				i++;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	617b      	str	r3, [r7, #20]
				continue;
 8004a80:	e04c      	b.n	8004b1c <gps_parseNMEA+0x31c>
			}
			if (i == 8) {
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d115      	bne.n	8004ab4 <gps_parseNMEA+0x2b4>
				strcpy(neo7m->nmea->CourseOverGround, pTokenStart);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004a8e:	3353      	adds	r3, #83	; 0x53
 8004a90:	6939      	ldr	r1, [r7, #16]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f008 fffd 	bl	800da92 <strcpy>
				i++;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	617b      	str	r3, [r7, #20]
				continue;
 8004a9e:	e03d      	b.n	8004b1c <gps_parseNMEA+0x31c>
 8004aa0:	0800eb10 	.word	0x0800eb10
 8004aa4:	0800eb18 	.word	0x0800eb18
 8004aa8:	0800eb20 	.word	0x0800eb20
 8004aac:	0800eb30 	.word	0x0800eb30
 8004ab0:	0800eb38 	.word	0x0800eb38
			}
			if (i == 9) {
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	2b09      	cmp	r3, #9
 8004ab8:	d10b      	bne.n	8004ad2 <gps_parseNMEA+0x2d2>
				strcpy(neo7m->nmea->Date, pTokenStart);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004ac0:	335b      	adds	r3, #91	; 0x5b
 8004ac2:	6939      	ldr	r1, [r7, #16]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f008 ffe4 	bl	800da92 <strcpy>
				i++;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	3301      	adds	r3, #1
 8004ace:	617b      	str	r3, [r7, #20]
				continue;
 8004ad0:	e024      	b.n	8004b1c <gps_parseNMEA+0x31c>
			}
		}
		if (type == NMEA_GPVTG) {
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	4a18      	ldr	r2, [pc, #96]	; (8004b38 <gps_parseNMEA+0x338>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d11d      	bne.n	8004b16 <gps_parseNMEA+0x316>
			if (i == 1) {
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d10b      	bne.n	8004af8 <gps_parseNMEA+0x2f8>
				strcpy(neo7m->nmea->CourseOverGround, pTokenStart);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004ae6:	3353      	adds	r3, #83	; 0x53
 8004ae8:	6939      	ldr	r1, [r7, #16]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f008 ffd1 	bl	800da92 <strcpy>
				i++;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	3301      	adds	r3, #1
 8004af4:	617b      	str	r3, [r7, #20]
				continue;
 8004af6:	e011      	b.n	8004b1c <gps_parseNMEA+0x31c>
			}
			if (i == 5) {
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	2b05      	cmp	r3, #5
 8004afc:	d10b      	bne.n	8004b16 <gps_parseNMEA+0x316>
				strcpy(neo7m->nmea->SpeedOverGround, pTokenStart);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004b04:	334b      	adds	r3, #75	; 0x4b
 8004b06:	6939      	ldr	r1, [r7, #16]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f008 ffc2 	bl	800da92 <strcpy>
				i++;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	3301      	adds	r3, #1
 8004b12:	617b      	str	r3, [r7, #20]
				continue;
 8004b14:	e002      	b.n	8004b1c <gps_parseNMEA+0x31c>
			}
		}
		if (type == NMEA_GPTXT) {

		}
		i++;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	617b      	str	r3, [r7, #20]
			pTokenStart != NULL; pTokenStart = strtok(NULL, &NMEA_COMMA)) {
 8004b1c:	4907      	ldr	r1, [pc, #28]	; (8004b3c <gps_parseNMEA+0x33c>)
 8004b1e:	2000      	movs	r0, #0
 8004b20:	f008 fe5c 	bl	800d7dc <strtok>
 8004b24:	6138      	str	r0, [r7, #16]
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f47f ae79 	bne.w	8004820 <gps_parseNMEA+0x20>
	}
}
 8004b2e:	bf00      	nop
 8004b30:	bf00      	nop
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	0800eb40 	.word	0x0800eb40
 8004b3c:	0800eb10 	.word	0x0800eb10

08004b40 <gps_getNMEA>:

// Read the position contained in NMEA messages GPRMC, GPVTG, GPGGA, GPGSA, GPGSV
static void gps_getNMEA() {
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
	NEO7M_t *neo7m = get_gps();
 8004b46:	f000 fab7 	bl	80050b8 <get_gps>
 8004b4a:	60b8      	str	r0, [r7, #8]
	if (neo7m->BUFFER[0] != NMEA_START) {
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	785b      	ldrb	r3, [r3, #1]
 8004b50:	2224      	movs	r2, #36	; 0x24
 8004b52:	4293      	cmp	r3, r2
 8004b54:	f040 80b3 	bne.w	8004cbe <gps_getNMEA+0x17e>
		return;
	}
	char *saveptr = NULL;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	607b      	str	r3, [r7, #4]
	const char *pBufferStart = strtok_r((char*) neo7m->BUFFER, NMEA_CRLF,
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	1d3a      	adds	r2, r7, #4
 8004b62:	4959      	ldr	r1, [pc, #356]	; (8004cc8 <gps_getNMEA+0x188>)
 8004b64:	4618      	mov	r0, r3
 8004b66:	f008 fe95 	bl	800d894 <strtok_r>
 8004b6a:	60f8      	str	r0, [r7, #12]
			&saveptr);
	while (pBufferStart != NULL) {
 8004b6c:	e08b      	b.n	8004c86 <gps_getNMEA+0x146>
		// Parse GPGGA data
		if (strncmp((const char*) pBufferStart + 1, (const char*) NMEA_GPGGA, 5)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3301      	adds	r3, #1
 8004b72:	2205      	movs	r2, #5
 8004b74:	4955      	ldr	r1, [pc, #340]	; (8004ccc <gps_getNMEA+0x18c>)
 8004b76:	4618      	mov	r0, r3
 8004b78:	f008 fe1d 	bl	800d7b6 <strncmp>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d113      	bne.n	8004baa <gps_getNMEA+0x6a>
				== 0) {
			gps_parseNMEA(pBufferStart, NMEA_GPGGA);
 8004b82:	4952      	ldr	r1, [pc, #328]	; (8004ccc <gps_getNMEA+0x18c>)
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f7ff fe3b 	bl	8004800 <gps_parseNMEA>
			neo7m->nmea->hasFix =
					(neo7m->nmea->FixQuality[0] > 0x30) ? true : false;
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004b90:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
			neo7m->nmea->hasFix =
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
					(neo7m->nmea->FixQuality[0] > 0x30) ? true : false;
 8004b9a:	2a30      	cmp	r2, #48	; 0x30
 8004b9c:	bf8c      	ite	hi
 8004b9e:	2201      	movhi	r2, #1
 8004ba0:	2200      	movls	r2, #0
 8004ba2:	b2d2      	uxtb	r2, r2
			neo7m->nmea->hasFix =
 8004ba4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 8004ba8:	e066      	b.n	8004c78 <gps_getNMEA+0x138>
		}
		// Parse GPGGL data
		else if (strncmp((const char*) pBufferStart + 1,
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	3301      	adds	r3, #1
 8004bae:	2205      	movs	r2, #5
 8004bb0:	4947      	ldr	r1, [pc, #284]	; (8004cd0 <gps_getNMEA+0x190>)
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f008 fdff 	bl	800d7b6 <strncmp>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d104      	bne.n	8004bc8 <gps_getNMEA+0x88>
				(const char*) NMEA_GPGGL, 5) == 0) {
			gps_parseNMEA(pBufferStart, NMEA_GPGGL);
 8004bbe:	4944      	ldr	r1, [pc, #272]	; (8004cd0 <gps_getNMEA+0x190>)
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f7ff fe1d 	bl	8004800 <gps_parseNMEA>
 8004bc6:	e057      	b.n	8004c78 <gps_getNMEA+0x138>
		}
		// Parse GPGSA data
		else if (strncmp((const char*) pBufferStart + 1,
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	2205      	movs	r2, #5
 8004bce:	4941      	ldr	r1, [pc, #260]	; (8004cd4 <gps_getNMEA+0x194>)
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f008 fdf0 	bl	800d7b6 <strncmp>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d104      	bne.n	8004be6 <gps_getNMEA+0xa6>
				(const char*) NMEA_GPGSA, 5) == 0) {
			gps_parseNMEA(pBufferStart, NMEA_GPGSA);
 8004bdc:	493d      	ldr	r1, [pc, #244]	; (8004cd4 <gps_getNMEA+0x194>)
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f7ff fe0e 	bl	8004800 <gps_parseNMEA>
 8004be4:	e048      	b.n	8004c78 <gps_getNMEA+0x138>
		}
		// Parse GPGSV data
		else if (strncmp((const char*) pBufferStart + 1,
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	3301      	adds	r3, #1
 8004bea:	2205      	movs	r2, #5
 8004bec:	493a      	ldr	r1, [pc, #232]	; (8004cd8 <gps_getNMEA+0x198>)
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f008 fde1 	bl	800d7b6 <strncmp>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d104      	bne.n	8004c04 <gps_getNMEA+0xc4>
				(const char*) NMEA_GPGSV, 5) == 0) {
			gps_parseNMEA(pBufferStart, NMEA_GPGSV);
 8004bfa:	4937      	ldr	r1, [pc, #220]	; (8004cd8 <gps_getNMEA+0x198>)
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f7ff fdff 	bl	8004800 <gps_parseNMEA>
 8004c02:	e039      	b.n	8004c78 <gps_getNMEA+0x138>
		}
		// Parse GPRMC data
		else if (strncmp((const char*) pBufferStart + 1,
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3301      	adds	r3, #1
 8004c08:	2205      	movs	r2, #5
 8004c0a:	4934      	ldr	r1, [pc, #208]	; (8004cdc <gps_getNMEA+0x19c>)
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f008 fdd2 	bl	800d7b6 <strncmp>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d112      	bne.n	8004c3e <gps_getNMEA+0xfe>
				(const char*) NMEA_GPRMC, 5) == 0) {
			gps_parseNMEA(pBufferStart, NMEA_GPRMC);
 8004c18:	4930      	ldr	r1, [pc, #192]	; (8004cdc <gps_getNMEA+0x19c>)
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f7ff fdf0 	bl	8004800 <gps_parseNMEA>
			neo7m->nmea->hasFix =
					(neo7m->nmea->DataStatus[0] == 0x41) ? true : false;
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004c26:	7c5a      	ldrb	r2, [r3, #17]
			neo7m->nmea->hasFix =
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
					(neo7m->nmea->DataStatus[0] == 0x41) ? true : false;
 8004c2e:	2a41      	cmp	r2, #65	; 0x41
 8004c30:	bf0c      	ite	eq
 8004c32:	2201      	moveq	r2, #1
 8004c34:	2200      	movne	r2, #0
 8004c36:	b2d2      	uxtb	r2, r2
			neo7m->nmea->hasFix =
 8004c38:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 8004c3c:	e01c      	b.n	8004c78 <gps_getNMEA+0x138>
		}
		// Parse GPVTG data
		else if (strncmp((const char*) pBufferStart + 1,
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3301      	adds	r3, #1
 8004c42:	2205      	movs	r2, #5
 8004c44:	4926      	ldr	r1, [pc, #152]	; (8004ce0 <gps_getNMEA+0x1a0>)
 8004c46:	4618      	mov	r0, r3
 8004c48:	f008 fdb5 	bl	800d7b6 <strncmp>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d104      	bne.n	8004c5c <gps_getNMEA+0x11c>
				(const char*) NMEA_GPVTG, 5) == 0) {
			gps_parseNMEA(pBufferStart, NMEA_GPVTG);
 8004c52:	4923      	ldr	r1, [pc, #140]	; (8004ce0 <gps_getNMEA+0x1a0>)
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f7ff fdd3 	bl	8004800 <gps_parseNMEA>
 8004c5a:	e00d      	b.n	8004c78 <gps_getNMEA+0x138>
		}
		// Parse GPTXT data
		else if (strncmp((const char*) pBufferStart + 1,
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	2205      	movs	r2, #5
 8004c62:	4920      	ldr	r1, [pc, #128]	; (8004ce4 <gps_getNMEA+0x1a4>)
 8004c64:	4618      	mov	r0, r3
 8004c66:	f008 fda6 	bl	800d7b6 <strncmp>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d103      	bne.n	8004c78 <gps_getNMEA+0x138>
				(const char*) NMEA_GPTXT, 5) == 0) {
			gps_parseNMEA(pBufferStart, NMEA_GPTXT);
 8004c70:	491c      	ldr	r1, [pc, #112]	; (8004ce4 <gps_getNMEA+0x1a4>)
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f7ff fdc4 	bl	8004800 <gps_parseNMEA>
		}

		pBufferStart = strtok_r(NULL, NMEA_CRLF, &saveptr);
 8004c78:	1d3b      	adds	r3, r7, #4
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	4912      	ldr	r1, [pc, #72]	; (8004cc8 <gps_getNMEA+0x188>)
 8004c7e:	2000      	movs	r0, #0
 8004c80:	f008 fe08 	bl	800d894 <strtok_r>
 8004c84:	60f8      	str	r0, [r7, #12]
	while (pBufferStart != NULL) {
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f47f af70 	bne.w	8004b6e <gps_getNMEA+0x2e>
	}

	if (neo7m->nmea->hasFix) {
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004c94:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d011      	beq.n	8004cc0 <gps_getNMEA+0x180>
		gps_convertNMEA_LatLong();
 8004c9c:	f7ff fb94 	bl	80043c8 <gps_convertNMEA_LatLong>
		neo7m->nmea->altitude = atoi(neo7m->nmea->Altitude);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004ca6:	3337      	adds	r3, #55	; 0x37
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f008 fb33 	bl	800d314 <atoi>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004cb6:	b212      	sxth	r2, r2
 8004cb8:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8004cbc:	e000      	b.n	8004cc0 <gps_getNMEA+0x180>
		return;
 8004cbe:	bf00      	nop
	}
}
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	0800eb14 	.word	0x0800eb14
 8004ccc:	0800eb18 	.word	0x0800eb18
 8004cd0:	0800eb20 	.word	0x0800eb20
 8004cd4:	0800eb28 	.word	0x0800eb28
 8004cd8:	0800eb30 	.word	0x0800eb30
 8004cdc:	0800eb38 	.word	0x0800eb38
 8004ce0:	0800eb40 	.word	0x0800eb40
 8004ce4:	0800eb48 	.word	0x0800eb48

08004ce8 <gps_init>:

//GPS
void gps_init(UART_HandleTypeDef *uart) {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
	gps_uart = uart;
 8004cf0:	4a15      	ldr	r2, [pc, #84]	; (8004d48 <gps_init+0x60>)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6013      	str	r3, [r2, #0]
	NEO7M_t *neo7m = get_gps();
 8004cf6:	f000 f9df 	bl	80050b8 <get_gps>
 8004cfa:	60f8      	str	r0, [r7, #12]
	neo7m->status = HAL_OK;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	701a      	strb	r2, [r3, #0]

	neo7m->nmea->hasFix = false;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	neo7m->nmea->latitude = 0.0;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	neo7m->nmea->longitude = 0.0;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	neo7m->nmea->altitude = (int16_t) 0xFFFF;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004d38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d3c:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
}
 8004d40:	bf00      	nop
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	20000368 	.word	0x20000368

08004d4c <gps_config_ubx>:

HAL_StatusTypeDef gps_config_ubx() {
 8004d4c:	b5b0      	push	{r4, r5, r7, lr}
 8004d4e:	b0ce      	sub	sp, #312	; 0x138
 8004d50:	af00      	add	r7, sp, #0
	NEO7M_t *neo7m = get_gps();
 8004d52:	f000 f9b1 	bl	80050b8 <get_gps>
 8004d56:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
	unsigned char ackData[200] = { 0 };
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d5e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004d62:	22c4      	movs	r2, #196	; 0xc4
 8004d64:	2100      	movs	r1, #0
 8004d66:	4618      	mov	r0, r3
 8004d68:	f008 fd1d 	bl	800d7a6 <memset>

	if (HAL_OK != (neo7m->status = HAL_UART_Abort(gps_uart))) {
 8004d6c:	4b96      	ldr	r3, [pc, #600]	; (8004fc8 <gps_config_ubx+0x27c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f007 f8f4 	bl	800bf5e <HAL_UART_Abort>
 8004d76:	4603      	mov	r3, r0
 8004d78:	461a      	mov	r2, r3
 8004d7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d7e:	701a      	strb	r2, [r3, #0]
 8004d80:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <gps_config_ubx+0x46>
		return neo7m->status;
 8004d8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	e114      	b.n	8004fbc <gps_config_ubx+0x270>
	}
	if (HAL_OK != (neo7m->status = HAL_UART_AbortReceive(gps_uart))) {
 8004d92:	4b8d      	ldr	r3, [pc, #564]	; (8004fc8 <gps_config_ubx+0x27c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f007 fa34 	bl	800c204 <HAL_UART_AbortReceive>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004da4:	701a      	strb	r2, [r3, #0]
 8004da6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <gps_config_ubx+0x6c>
		return neo7m->status;
 8004db0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	e101      	b.n	8004fbc <gps_config_ubx+0x270>
	}
	if (HAL_OK != (neo7m->status = HAL_UART_AbortTransmit(gps_uart))) {
 8004db8:	4b83      	ldr	r3, [pc, #524]	; (8004fc8 <gps_config_ubx+0x27c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f007 f9b9 	bl	800c134 <HAL_UART_AbortTransmit>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <gps_config_ubx+0x92>
		return neo7m->status;
 8004dd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	e0ee      	b.n	8004fbc <gps_config_ubx+0x270>

	//set CFG-TP5 (0x06 0x31)
	//gps_getPPS(neo7m);

	//<- UBX CFG-PRT: PORT UBX 115200
	unsigned char pData4[] = { 0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00,
 8004dde:	4b7b      	ldr	r3, [pc, #492]	; (8004fcc <gps_config_ubx+0x280>)
 8004de0:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8004de4:	461d      	mov	r5, r3
 8004de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004dee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			0x00, 0x00, 0xD0, 0x08, 0x00, 0x00, 0x00, 0xC2, 0x01, 0x00, 0x01,
			0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB8, 0x42 };
	neo7m->status = HAL_UART_Transmit(gps_uart, pData4, sizeof(pData4), 3000);
 8004df2:	4b75      	ldr	r3, [pc, #468]	; (8004fc8 <gps_config_ubx+0x27c>)
 8004df4:	6818      	ldr	r0, [r3, #0]
 8004df6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004dfa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004dfe:	221c      	movs	r2, #28
 8004e00:	f006 ff04 	bl	800bc0c <HAL_UART_Transmit>
 8004e04:	4603      	mov	r3, r0
 8004e06:	461a      	mov	r2, r3
 8004e08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e0c:	701a      	strb	r2, [r3, #0]
	//-> ACK
	neo7m->status = HAL_UART_Receive(gps_uart, ackData, sizeof(ackData), 5000);
 8004e0e:	4b6e      	ldr	r3, [pc, #440]	; (8004fc8 <gps_config_ubx+0x27c>)
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004e16:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e1a:	22c8      	movs	r2, #200	; 0xc8
 8004e1c:	f006 ff88 	bl	800bd30 <HAL_UART_Receive>
 8004e20:	4603      	mov	r3, r0
 8004e22:	461a      	mov	r2, r3
 8004e24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e28:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8004e2a:	2064      	movs	r0, #100	; 0x64
 8004e2c:	f003 fef2 	bl	8008c14 <HAL_Delay>
	//<- UBX CFG
	unsigned char pData5[] = { 0xB5, 0x62, 0x06, 0x00, 0x01, 0x00, 0x01, 0x08,
 8004e30:	4a67      	ldr	r2, [pc, #412]	; (8004fd0 <gps_config_ubx+0x284>)
 8004e32:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004e36:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e38:	c303      	stmia	r3!, {r0, r1}
 8004e3a:	701a      	strb	r2, [r3, #0]
			0x22 };
	neo7m->status = HAL_UART_Transmit(gps_uart, pData5, sizeof(pData5), 3000);
 8004e3c:	4b62      	ldr	r3, [pc, #392]	; (8004fc8 <gps_config_ubx+0x27c>)
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8004e44:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004e48:	2209      	movs	r2, #9
 8004e4a:	f006 fedf 	bl	800bc0c <HAL_UART_Transmit>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	461a      	mov	r2, r3
 8004e52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e56:	701a      	strb	r2, [r3, #0]
	//-> ACK
	neo7m->status = HAL_UART_Receive(gps_uart, ackData, sizeof(ackData), 5000);
 8004e58:	4b5b      	ldr	r3, [pc, #364]	; (8004fc8 <gps_config_ubx+0x27c>)
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004e60:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e64:	22c8      	movs	r2, #200	; 0xc8
 8004e66:	f006 ff63 	bl	800bd30 <HAL_UART_Receive>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e72:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8004e74:	2064      	movs	r0, #100	; 0x64
 8004e76:	f003 fecd 	bl	8008c14 <HAL_Delay>

	//<- UBX CFG-NAVX5 AssistNow Autonomous
	unsigned char pData6[] = { 0xB5, 0x62, 0x06, 0x23, 0x28, 0x00, 0x00, 0x00,
 8004e7a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004e7e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004e82:	4a54      	ldr	r2, [pc, #336]	; (8004fd4 <gps_config_ubx+0x288>)
 8004e84:	461c      	mov	r4, r3
 8004e86:	4615      	mov	r5, r2
 8004e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e90:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004e94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x4C, 0x66, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x9B, 0x06, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x6E };
	neo7m->status = HAL_UART_Transmit(gps_uart, pData6, sizeof(pData6), 3000);
 8004e98:	4b4b      	ldr	r3, [pc, #300]	; (8004fc8 <gps_config_ubx+0x27c>)
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	f107 0114 	add.w	r1, r7, #20
 8004ea0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004ea4:	2230      	movs	r2, #48	; 0x30
 8004ea6:	f006 feb1 	bl	800bc0c <HAL_UART_Transmit>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	461a      	mov	r2, r3
 8004eae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004eb2:	701a      	strb	r2, [r3, #0]
	//-> ACK
	neo7m->status = HAL_UART_Receive(gps_uart, ackData, sizeof(ackData), 5000);
 8004eb4:	4b44      	ldr	r3, [pc, #272]	; (8004fc8 <gps_config_ubx+0x27c>)
 8004eb6:	6818      	ldr	r0, [r3, #0]
 8004eb8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004ebc:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ec0:	22c8      	movs	r2, #200	; 0xc8
 8004ec2:	f006 ff35 	bl	800bd30 <HAL_UART_Receive>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	461a      	mov	r2, r3
 8004eca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004ece:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8004ed0:	2064      	movs	r0, #100	; 0x64
 8004ed2:	f003 fe9f 	bl	8008c14 <HAL_Delay>
	//<- UBX CFG
	unsigned char pData7[] = { 0xB5, 0x62, 0x06, 0x23, 0x00, 0x00, 0x29, 0x81 };
 8004ed6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004eda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ede:	4a3e      	ldr	r2, [pc, #248]	; (8004fd8 <gps_config_ubx+0x28c>)
 8004ee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ee4:	e883 0003 	stmia.w	r3, {r0, r1}
	neo7m->status = HAL_UART_Transmit(gps_uart, pData7, sizeof(pData7), 3000);
 8004ee8:	4b37      	ldr	r3, [pc, #220]	; (8004fc8 <gps_config_ubx+0x27c>)
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	f107 010c 	add.w	r1, r7, #12
 8004ef0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	f006 fe89 	bl	800bc0c <HAL_UART_Transmit>
 8004efa:	4603      	mov	r3, r0
 8004efc:	461a      	mov	r2, r3
 8004efe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f02:	701a      	strb	r2, [r3, #0]
	//-> ACK
	neo7m->status = HAL_UART_Receive(gps_uart, ackData, sizeof(ackData), 5000);
 8004f04:	4b30      	ldr	r3, [pc, #192]	; (8004fc8 <gps_config_ubx+0x27c>)
 8004f06:	6818      	ldr	r0, [r3, #0]
 8004f08:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004f0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f10:	22c8      	movs	r2, #200	; 0xc8
 8004f12:	f006 ff0d 	bl	800bd30 <HAL_UART_Receive>
 8004f16:	4603      	mov	r3, r0
 8004f18:	461a      	mov	r2, r3
 8004f1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f1e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8004f20:	2064      	movs	r0, #100	; 0x64
 8004f22:	f003 fe77 	bl	8008c14 <HAL_Delay>

	//<- UBX CFG: ENABLE UBX NAV-PVT
	unsigned char pData8[] = { 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0x01, 0x07,
 8004f26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004f2a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004f2e:	4a2b      	ldr	r2, [pc, #172]	; (8004fdc <gps_config_ubx+0x290>)
 8004f30:	ca07      	ldmia	r2, {r0, r1, r2}
 8004f32:	c303      	stmia	r3!, {r0, r1}
 8004f34:	801a      	strh	r2, [r3, #0]
 8004f36:	3302      	adds	r3, #2
 8004f38:	0c12      	lsrs	r2, r2, #16
 8004f3a:	701a      	strb	r2, [r3, #0]
			0x01, 0x13, 0x51 };
	neo7m->status = HAL_UART_Transmit(gps_uart, pData8, sizeof(pData8), 3000);
 8004f3c:	4b22      	ldr	r3, [pc, #136]	; (8004fc8 <gps_config_ubx+0x27c>)
 8004f3e:	6818      	ldr	r0, [r3, #0]
 8004f40:	4639      	mov	r1, r7
 8004f42:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004f46:	220b      	movs	r2, #11
 8004f48:	f006 fe60 	bl	800bc0c <HAL_UART_Transmit>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f54:	701a      	strb	r2, [r3, #0]
	//-> ACK
	neo7m->status = HAL_UART_Receive(gps_uart, ackData, sizeof(ackData), 5000);
 8004f56:	4b1c      	ldr	r3, [pc, #112]	; (8004fc8 <gps_config_ubx+0x27c>)
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004f5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f62:	22c8      	movs	r2, #200	; 0xc8
 8004f64:	f006 fee4 	bl	800bd30 <HAL_UART_Receive>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f70:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8004f72:	2064      	movs	r0, #100	; 0x64
 8004f74:	f003 fe4e 	bl	8008c14 <HAL_Delay>
	//<- UBX CFG
	neo7m->status = HAL_UART_Transmit(gps_uart, pData5, sizeof(pData5), 1000);
 8004f78:	4b13      	ldr	r3, [pc, #76]	; (8004fc8 <gps_config_ubx+0x27c>)
 8004f7a:	6818      	ldr	r0, [r3, #0]
 8004f7c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8004f80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f84:	2209      	movs	r2, #9
 8004f86:	f006 fe41 	bl	800bc0c <HAL_UART_Transmit>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f92:	701a      	strb	r2, [r3, #0]
	//-> ACK
	neo7m->status = HAL_UART_Receive(gps_uart, ackData, sizeof(ackData), 5000);
 8004f94:	4b0c      	ldr	r3, [pc, #48]	; (8004fc8 <gps_config_ubx+0x27c>)
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004f9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004fa0:	22c8      	movs	r2, #200	; 0xc8
 8004fa2:	f006 fec5 	bl	800bd30 <HAL_UART_Receive>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	461a      	mov	r2, r3
 8004faa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004fae:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8004fb0:	2064      	movs	r0, #100	; 0x64
 8004fb2:	f003 fe2f 	bl	8008c14 <HAL_Delay>
	return neo7m->status;
 8004fb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004fba:	781b      	ldrb	r3, [r3, #0]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000368 	.word	0x20000368
 8004fcc:	0800eaa0 	.word	0x0800eaa0
 8004fd0:	0800eabc 	.word	0x0800eabc
 8004fd4:	0800eac8 	.word	0x0800eac8
 8004fd8:	0800eaf8 	.word	0x0800eaf8
 8004fdc:	0800eb00 	.word	0x0800eb00

08004fe0 <gps_get_data>:

void gps_get_data() {
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08c      	sub	sp, #48	; 0x30
 8004fe4:	af04      	add	r7, sp, #16
	NEO7M_t *neo7m = get_gps();
 8004fe6:	f000 f867 	bl	80050b8 <get_gps>
 8004fea:	6138      	str	r0, [r7, #16]
	HAL_UART_Receive(gps_uart, neo7m->BUFFER, sizeof(neo7m->BUFFER), 1000);
 8004fec:	4b31      	ldr	r3, [pc, #196]	; (80050b4 <gps_get_data+0xd4>)
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1c59      	adds	r1, r3, #1
 8004ff4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ff8:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8004ffc:	f006 fe98 	bl	800bd30 <HAL_UART_Receive>

	const char *pBufferStart = (const char*) &neo7m->BUFFER[0];
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	3301      	adds	r3, #1
 8005004:	61fb      	str	r3, [r7, #28]
	size_t bufferLength = sizeof(neo7m->BUFFER);
 8005006:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800500a:	61bb      	str	r3, [r7, #24]
	const char *pBufferEnd = pBufferStart;
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	60fb      	str	r3, [r7, #12]
	int32_t messageClass;
	int32_t messageId;

	for (int32_t x = uUbxProtocolDecode(pBufferStart, bufferLength,
			&messageClass, &messageId, neo7m->MESSAGE, sizeof(neo7m->MESSAGE),
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f203 134f 	addw	r3, r3, #335	; 0x14f
	for (int32_t x = uUbxProtocolDecode(pBufferStart, bufferLength,
 8005016:	1d38      	adds	r0, r7, #4
 8005018:	f107 0108 	add.w	r1, r7, #8
 800501c:	f107 020c 	add.w	r2, r7, #12
 8005020:	9202      	str	r2, [sp, #8]
 8005022:	225c      	movs	r2, #92	; 0x5c
 8005024:	9201      	str	r2, [sp, #4]
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	4603      	mov	r3, r0
 800502a:	460a      	mov	r2, r1
 800502c:	69b9      	ldr	r1, [r7, #24]
 800502e:	69f8      	ldr	r0, [r7, #28]
 8005030:	f000 ff24 	bl	8005e7c <uUbxProtocolDecode>
 8005034:	6178      	str	r0, [r7, #20]
 8005036:	e020      	b.n	800507a <gps_get_data+0x9a>
			&pBufferEnd); x > 0;
			x = uUbxProtocolDecode(pBufferStart, bufferLength, &messageClass,
					&messageId, neo7m->MESSAGE, sizeof(neo7m->MESSAGE),
					&pBufferEnd)) {

		if (x > sizeof(neo7m->MESSAGE)) {
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2b5c      	cmp	r3, #92	; 0x5c
 800503c:	d901      	bls.n	8005042 <gps_get_data+0x62>
			x = sizeof(neo7m->MESSAGE);
 800503e:	235c      	movs	r3, #92	; 0x5c
 8005040:	617b      	str	r3, [r7, #20]
		}

		// Handle the message here

		bufferLength -= pBufferEnd - pBufferStart;
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	461a      	mov	r2, r3
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
		pBufferStart = pBufferEnd;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	61fb      	str	r3, [r7, #28]
					&messageId, neo7m->MESSAGE, sizeof(neo7m->MESSAGE),
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f203 134f 	addw	r3, r3, #335	; 0x14f
			x = uUbxProtocolDecode(pBufferStart, bufferLength, &messageClass,
 800505a:	1d38      	adds	r0, r7, #4
 800505c:	f107 0108 	add.w	r1, r7, #8
 8005060:	f107 020c 	add.w	r2, r7, #12
 8005064:	9202      	str	r2, [sp, #8]
 8005066:	225c      	movs	r2, #92	; 0x5c
 8005068:	9201      	str	r2, [sp, #4]
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	4603      	mov	r3, r0
 800506e:	460a      	mov	r2, r1
 8005070:	69b9      	ldr	r1, [r7, #24]
 8005072:	69f8      	ldr	r0, [r7, #28]
 8005074:	f000 ff02 	bl	8005e7c <uUbxProtocolDecode>
 8005078:	6178      	str	r0, [r7, #20]
			&pBufferEnd); x > 0;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2b00      	cmp	r3, #0
 800507e:	dcdb      	bgt.n	8005038 <gps_get_data+0x58>
	}
	if (neo7m->BUFFER[0] == UBX_START && neo7m->MESSAGE[0] != 0) {
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	785b      	ldrb	r3, [r3, #1]
 8005084:	22b5      	movs	r2, #181	; 0xb5
 8005086:	4293      	cmp	r3, r2
 8005088:	d108      	bne.n	800509c <gps_get_data+0xbc>
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <gps_get_data+0xbc>
		gps_getPVT(bufferLength);
 8005094:	69b8      	ldr	r0, [r7, #24]
 8005096:	f7ff f933 	bl	8004300 <gps_getPVT>
	} else if (neo7m->BUFFER[0] == NMEA_START) {
		gps_getNMEA();
	}
}
 800509a:	e006      	b.n	80050aa <gps_get_data+0xca>
	} else if (neo7m->BUFFER[0] == NMEA_START) {
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	785b      	ldrb	r3, [r3, #1]
 80050a0:	2224      	movs	r2, #36	; 0x24
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d101      	bne.n	80050aa <gps_get_data+0xca>
		gps_getNMEA();
 80050a6:	f7ff fd4b 	bl	8004b40 <gps_getNMEA>
}
 80050aa:	bf00      	nop
 80050ac:	3720      	adds	r7, #32
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20000368 	.word	0x20000368

080050b8 <get_gps>:

inline NEO7M_t* get_gps() {
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
	return &NEO7M;
 80050bc:	4b02      	ldr	r3, [pc, #8]	; (80050c8 <get_gps+0x10>)
}
 80050be:	4618      	mov	r0, r3
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	2000002c 	.word	0x2000002c

080050cc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80050d0:	4b12      	ldr	r3, [pc, #72]	; (800511c <MX_I2C1_Init+0x50>)
 80050d2:	4a13      	ldr	r2, [pc, #76]	; (8005120 <MX_I2C1_Init+0x54>)
 80050d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80050d6:	4b11      	ldr	r3, [pc, #68]	; (800511c <MX_I2C1_Init+0x50>)
 80050d8:	4a12      	ldr	r2, [pc, #72]	; (8005124 <MX_I2C1_Init+0x58>)
 80050da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80050dc:	4b0f      	ldr	r3, [pc, #60]	; (800511c <MX_I2C1_Init+0x50>)
 80050de:	2200      	movs	r2, #0
 80050e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80050e2:	4b0e      	ldr	r3, [pc, #56]	; (800511c <MX_I2C1_Init+0x50>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80050e8:	4b0c      	ldr	r3, [pc, #48]	; (800511c <MX_I2C1_Init+0x50>)
 80050ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80050ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80050f0:	4b0a      	ldr	r3, [pc, #40]	; (800511c <MX_I2C1_Init+0x50>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80050f6:	4b09      	ldr	r3, [pc, #36]	; (800511c <MX_I2C1_Init+0x50>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80050fc:	4b07      	ldr	r3, [pc, #28]	; (800511c <MX_I2C1_Init+0x50>)
 80050fe:	2200      	movs	r2, #0
 8005100:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005102:	4b06      	ldr	r3, [pc, #24]	; (800511c <MX_I2C1_Init+0x50>)
 8005104:	2200      	movs	r2, #0
 8005106:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005108:	4804      	ldr	r0, [pc, #16]	; (800511c <MX_I2C1_Init+0x50>)
 800510a:	f004 f8f3 	bl	80092f4 <HAL_I2C_Init>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005114:	f000 fcea 	bl	8005aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005118:	bf00      	nop
 800511a:	bd80      	pop	{r7, pc}
 800511c:	20000408 	.word	0x20000408
 8005120:	40005400 	.word	0x40005400
 8005124:	00061a80 	.word	0x00061a80

08005128 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800512c:	4b12      	ldr	r3, [pc, #72]	; (8005178 <MX_I2C2_Init+0x50>)
 800512e:	4a13      	ldr	r2, [pc, #76]	; (800517c <MX_I2C2_Init+0x54>)
 8005130:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8005132:	4b11      	ldr	r3, [pc, #68]	; (8005178 <MX_I2C2_Init+0x50>)
 8005134:	4a12      	ldr	r2, [pc, #72]	; (8005180 <MX_I2C2_Init+0x58>)
 8005136:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005138:	4b0f      	ldr	r3, [pc, #60]	; (8005178 <MX_I2C2_Init+0x50>)
 800513a:	2200      	movs	r2, #0
 800513c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800513e:	4b0e      	ldr	r3, [pc, #56]	; (8005178 <MX_I2C2_Init+0x50>)
 8005140:	2200      	movs	r2, #0
 8005142:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005144:	4b0c      	ldr	r3, [pc, #48]	; (8005178 <MX_I2C2_Init+0x50>)
 8005146:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800514a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800514c:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <MX_I2C2_Init+0x50>)
 800514e:	2200      	movs	r2, #0
 8005150:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005152:	4b09      	ldr	r3, [pc, #36]	; (8005178 <MX_I2C2_Init+0x50>)
 8005154:	2200      	movs	r2, #0
 8005156:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005158:	4b07      	ldr	r3, [pc, #28]	; (8005178 <MX_I2C2_Init+0x50>)
 800515a:	2200      	movs	r2, #0
 800515c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800515e:	4b06      	ldr	r3, [pc, #24]	; (8005178 <MX_I2C2_Init+0x50>)
 8005160:	2200      	movs	r2, #0
 8005162:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005164:	4804      	ldr	r0, [pc, #16]	; (8005178 <MX_I2C2_Init+0x50>)
 8005166:	f004 f8c5 	bl	80092f4 <HAL_I2C_Init>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005170:	f000 fcbc 	bl	8005aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005174:	bf00      	nop
 8005176:	bd80      	pop	{r7, pc}
 8005178:	2000045c 	.word	0x2000045c
 800517c:	40005800 	.word	0x40005800
 8005180:	00061a80 	.word	0x00061a80

08005184 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005188:	4b12      	ldr	r3, [pc, #72]	; (80051d4 <MX_I2C3_Init+0x50>)
 800518a:	4a13      	ldr	r2, [pc, #76]	; (80051d8 <MX_I2C3_Init+0x54>)
 800518c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800518e:	4b11      	ldr	r3, [pc, #68]	; (80051d4 <MX_I2C3_Init+0x50>)
 8005190:	4a12      	ldr	r2, [pc, #72]	; (80051dc <MX_I2C3_Init+0x58>)
 8005192:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005194:	4b0f      	ldr	r3, [pc, #60]	; (80051d4 <MX_I2C3_Init+0x50>)
 8005196:	2200      	movs	r2, #0
 8005198:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800519a:	4b0e      	ldr	r3, [pc, #56]	; (80051d4 <MX_I2C3_Init+0x50>)
 800519c:	2200      	movs	r2, #0
 800519e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80051a0:	4b0c      	ldr	r3, [pc, #48]	; (80051d4 <MX_I2C3_Init+0x50>)
 80051a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051a6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80051a8:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <MX_I2C3_Init+0x50>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80051ae:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <MX_I2C3_Init+0x50>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80051b4:	4b07      	ldr	r3, [pc, #28]	; (80051d4 <MX_I2C3_Init+0x50>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80051ba:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <MX_I2C3_Init+0x50>)
 80051bc:	2200      	movs	r2, #0
 80051be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80051c0:	4804      	ldr	r0, [pc, #16]	; (80051d4 <MX_I2C3_Init+0x50>)
 80051c2:	f004 f897 	bl	80092f4 <HAL_I2C_Init>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80051cc:	f000 fc8e 	bl	8005aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80051d0:	bf00      	nop
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	200004b0 	.word	0x200004b0
 80051d8:	40005c00 	.word	0x40005c00
 80051dc:	00061a80 	.word	0x00061a80

080051e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08e      	sub	sp, #56	; 0x38
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	605a      	str	r2, [r3, #4]
 80051f2:	609a      	str	r2, [r3, #8]
 80051f4:	60da      	str	r2, [r3, #12]
 80051f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a63      	ldr	r2, [pc, #396]	; (800538c <HAL_I2C_MspInit+0x1ac>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d12c      	bne.n	800525c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005202:	2300      	movs	r3, #0
 8005204:	623b      	str	r3, [r7, #32]
 8005206:	4b62      	ldr	r3, [pc, #392]	; (8005390 <HAL_I2C_MspInit+0x1b0>)
 8005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520a:	4a61      	ldr	r2, [pc, #388]	; (8005390 <HAL_I2C_MspInit+0x1b0>)
 800520c:	f043 0302 	orr.w	r3, r3, #2
 8005210:	6313      	str	r3, [r2, #48]	; 0x30
 8005212:	4b5f      	ldr	r3, [pc, #380]	; (8005390 <HAL_I2C_MspInit+0x1b0>)
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	623b      	str	r3, [r7, #32]
 800521c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 800521e:	23c0      	movs	r3, #192	; 0xc0
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005222:	2312      	movs	r3, #18
 8005224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005226:	2300      	movs	r3, #0
 8005228:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800522a:	2303      	movs	r3, #3
 800522c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800522e:	2304      	movs	r3, #4
 8005230:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005236:	4619      	mov	r1, r3
 8005238:	4856      	ldr	r0, [pc, #344]	; (8005394 <HAL_I2C_MspInit+0x1b4>)
 800523a:	f003 febf 	bl	8008fbc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800523e:	2300      	movs	r3, #0
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	4b53      	ldr	r3, [pc, #332]	; (8005390 <HAL_I2C_MspInit+0x1b0>)
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	4a52      	ldr	r2, [pc, #328]	; (8005390 <HAL_I2C_MspInit+0x1b0>)
 8005248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800524c:	6413      	str	r3, [r2, #64]	; 0x40
 800524e:	4b50      	ldr	r3, [pc, #320]	; (8005390 <HAL_I2C_MspInit+0x1b0>)
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005256:	61fb      	str	r3, [r7, #28]
 8005258:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800525a:	e092      	b.n	8005382 <HAL_I2C_MspInit+0x1a2>
  else if(i2cHandle->Instance==I2C2)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a4d      	ldr	r2, [pc, #308]	; (8005398 <HAL_I2C_MspInit+0x1b8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d13d      	bne.n	80052e2 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005266:	2300      	movs	r3, #0
 8005268:	61bb      	str	r3, [r7, #24]
 800526a:	4b49      	ldr	r3, [pc, #292]	; (8005390 <HAL_I2C_MspInit+0x1b0>)
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	4a48      	ldr	r2, [pc, #288]	; (8005390 <HAL_I2C_MspInit+0x1b0>)
 8005270:	f043 0302 	orr.w	r3, r3, #2
 8005274:	6313      	str	r3, [r2, #48]	; 0x30
 8005276:	4b46      	ldr	r3, [pc, #280]	; (8005390 <HAL_I2C_MspInit+0x1b0>)
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = BMP_SCL_Pin;
 8005282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005288:	2312      	movs	r3, #18
 800528a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528c:	2300      	movs	r3, #0
 800528e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005290:	2302      	movs	r3, #2
 8005292:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005294:	2304      	movs	r3, #4
 8005296:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(BMP_SCL_GPIO_Port, &GPIO_InitStruct);
 8005298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800529c:	4619      	mov	r1, r3
 800529e:	483d      	ldr	r0, [pc, #244]	; (8005394 <HAL_I2C_MspInit+0x1b4>)
 80052a0:	f003 fe8c 	bl	8008fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BMP_SDA_Pin;
 80052a4:	2308      	movs	r3, #8
 80052a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052a8:	2312      	movs	r3, #18
 80052aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ac:	2300      	movs	r3, #0
 80052ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80052b0:	2302      	movs	r3, #2
 80052b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80052b4:	2309      	movs	r3, #9
 80052b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(BMP_SDA_GPIO_Port, &GPIO_InitStruct);
 80052b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052bc:	4619      	mov	r1, r3
 80052be:	4835      	ldr	r0, [pc, #212]	; (8005394 <HAL_I2C_MspInit+0x1b4>)
 80052c0:	f003 fe7c 	bl	8008fbc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	4b31      	ldr	r3, [pc, #196]	; (8005390 <HAL_I2C_MspInit+0x1b0>)
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	4a30      	ldr	r2, [pc, #192]	; (8005390 <HAL_I2C_MspInit+0x1b0>)
 80052ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052d2:	6413      	str	r3, [r2, #64]	; 0x40
 80052d4:	4b2e      	ldr	r3, [pc, #184]	; (8005390 <HAL_I2C_MspInit+0x1b0>)
 80052d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	697b      	ldr	r3, [r7, #20]
}
 80052e0:	e04f      	b.n	8005382 <HAL_I2C_MspInit+0x1a2>
  else if(i2cHandle->Instance==I2C3)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a2d      	ldr	r2, [pc, #180]	; (800539c <HAL_I2C_MspInit+0x1bc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d14a      	bne.n	8005382 <HAL_I2C_MspInit+0x1a2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052ec:	2300      	movs	r3, #0
 80052ee:	613b      	str	r3, [r7, #16]
 80052f0:	4b27      	ldr	r3, [pc, #156]	; (8005390 <HAL_I2C_MspInit+0x1b0>)
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	4a26      	ldr	r2, [pc, #152]	; (8005390 <HAL_I2C_MspInit+0x1b0>)
 80052f6:	f043 0301 	orr.w	r3, r3, #1
 80052fa:	6313      	str	r3, [r2, #48]	; 0x30
 80052fc:	4b24      	ldr	r3, [pc, #144]	; (8005390 <HAL_I2C_MspInit+0x1b0>)
 80052fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	613b      	str	r3, [r7, #16]
 8005306:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005308:	2300      	movs	r3, #0
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	4b20      	ldr	r3, [pc, #128]	; (8005390 <HAL_I2C_MspInit+0x1b0>)
 800530e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005310:	4a1f      	ldr	r2, [pc, #124]	; (8005390 <HAL_I2C_MspInit+0x1b0>)
 8005312:	f043 0302 	orr.w	r3, r3, #2
 8005316:	6313      	str	r3, [r2, #48]	; 0x30
 8005318:	4b1d      	ldr	r3, [pc, #116]	; (8005390 <HAL_I2C_MspInit+0x1b0>)
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UL_SCL_Pin;
 8005324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800532a:	2312      	movs	r3, #18
 800532c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800532e:	2300      	movs	r3, #0
 8005330:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005332:	2302      	movs	r3, #2
 8005334:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005336:	2304      	movs	r3, #4
 8005338:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(UL_SCL_GPIO_Port, &GPIO_InitStruct);
 800533a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800533e:	4619      	mov	r1, r3
 8005340:	4817      	ldr	r0, [pc, #92]	; (80053a0 <HAL_I2C_MspInit+0x1c0>)
 8005342:	f003 fe3b 	bl	8008fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UL_SDA_Pin;
 8005346:	2310      	movs	r3, #16
 8005348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800534a:	2312      	movs	r3, #18
 800534c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800534e:	2300      	movs	r3, #0
 8005350:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005352:	2302      	movs	r3, #2
 8005354:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8005356:	2309      	movs	r3, #9
 8005358:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(UL_SDA_GPIO_Port, &GPIO_InitStruct);
 800535a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800535e:	4619      	mov	r1, r3
 8005360:	480c      	ldr	r0, [pc, #48]	; (8005394 <HAL_I2C_MspInit+0x1b4>)
 8005362:	f003 fe2b 	bl	8008fbc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005366:	2300      	movs	r3, #0
 8005368:	60bb      	str	r3, [r7, #8]
 800536a:	4b09      	ldr	r3, [pc, #36]	; (8005390 <HAL_I2C_MspInit+0x1b0>)
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	4a08      	ldr	r2, [pc, #32]	; (8005390 <HAL_I2C_MspInit+0x1b0>)
 8005370:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005374:	6413      	str	r3, [r2, #64]	; 0x40
 8005376:	4b06      	ldr	r3, [pc, #24]	; (8005390 <HAL_I2C_MspInit+0x1b0>)
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800537e:	60bb      	str	r3, [r7, #8]
 8005380:	68bb      	ldr	r3, [r7, #8]
}
 8005382:	bf00      	nop
 8005384:	3738      	adds	r7, #56	; 0x38
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	40005400 	.word	0x40005400
 8005390:	40023800 	.word	0x40023800
 8005394:	40020400 	.word	0x40020400
 8005398:	40005800 	.word	0x40005800
 800539c:	40005c00 	.word	0x40005c00
 80053a0:	40020000 	.word	0x40020000

080053a4 <imu_init>:
I2C_HandleTypeDef *imu_i2c;

static IMU_t imu;

//IMU
int8_t imu_init(TIM_HandleTypeDef *htim, I2C_HandleTypeDef *iic) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
	imu_timer = htim;
 80053ae:	4a8c      	ldr	r2, [pc, #560]	; (80055e0 <imu_init+0x23c>)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6013      	str	r3, [r2, #0]
	imu_i2c = iic;
 80053b4:	4a8b      	ldr	r2, [pc, #556]	; (80055e4 <imu_init+0x240>)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef timer_status = HAL_TIM_Base_Start(imu_timer);
 80053ba:	4b89      	ldr	r3, [pc, #548]	; (80055e0 <imu_init+0x23c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f005 fd04 	bl	800adcc <HAL_TIM_Base_Start>
 80053c4:	4603      	mov	r3, r0
 80053c6:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != timer_status) {
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <imu_init+0x30>
		return timer_status;
 80053ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053d2:	e100      	b.n	80055d6 <imu_init+0x232>
	}
	imu.bmi = &bmi_ref;
 80053d4:	4b84      	ldr	r3, [pc, #528]	; (80055e8 <imu_init+0x244>)
 80053d6:	4a85      	ldr	r2, [pc, #532]	; (80055ec <imu_init+0x248>)
 80053d8:	601a      	str	r2, [r3, #0]
	imu.bmm = &bmm_ref;
 80053da:	4b83      	ldr	r3, [pc, #524]	; (80055e8 <imu_init+0x244>)
 80053dc:	4a84      	ldr	r2, [pc, #528]	; (80055f0 <imu_init+0x24c>)
 80053de:	605a      	str	r2, [r3, #4]

	bmi_ref.id = BMI160_I2C_ADDR;
 80053e0:	4b82      	ldr	r3, [pc, #520]	; (80055ec <imu_init+0x248>)
 80053e2:	2268      	movs	r2, #104	; 0x68
 80053e4:	705a      	strb	r2, [r3, #1]
	bmi_ref.chip_id = BMI160_CHIP_ID;
 80053e6:	4b81      	ldr	r3, [pc, #516]	; (80055ec <imu_init+0x248>)
 80053e8:	22d1      	movs	r2, #209	; 0xd1
 80053ea:	701a      	strb	r2, [r3, #0]
	bmi_ref.intf = BMI160_I2C_INTF;
 80053ec:	4b7f      	ldr	r3, [pc, #508]	; (80055ec <imu_init+0x248>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	709a      	strb	r2, [r3, #2]
	bmi_ref.read = &imu_i2c_read;
 80053f2:	4b7e      	ldr	r3, [pc, #504]	; (80055ec <imu_init+0x248>)
 80053f4:	4a7f      	ldr	r2, [pc, #508]	; (80055f4 <imu_init+0x250>)
 80053f6:	61da      	str	r2, [r3, #28]
	bmi_ref.write = &imu_i2c_write;
 80053f8:	4b7c      	ldr	r3, [pc, #496]	; (80055ec <imu_init+0x248>)
 80053fa:	4a7f      	ldr	r2, [pc, #508]	; (80055f8 <imu_init+0x254>)
 80053fc:	621a      	str	r2, [r3, #32]
	bmi_ref.delay_ms = &imu_delay_ms;
 80053fe:	4b7b      	ldr	r3, [pc, #492]	; (80055ec <imu_init+0x248>)
 8005400:	4a7e      	ldr	r2, [pc, #504]	; (80055fc <imu_init+0x258>)
 8005402:	625a      	str	r2, [r3, #36]	; 0x24

	imu.result = bmi160_init(imu.bmi);
 8005404:	4b78      	ldr	r3, [pc, #480]	; (80055e8 <imu_init+0x244>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4618      	mov	r0, r3
 800540a:	f001 fc83 	bl	8006d14 <bmi160_init>
 800540e:	4603      	mov	r3, r0
 8005410:	461a      	mov	r2, r3
 8005412:	4b75      	ldr	r3, [pc, #468]	; (80055e8 <imu_init+0x244>)
 8005414:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	if (BMI160_OK != imu.result) {
 8005418:	4b73      	ldr	r3, [pc, #460]	; (80055e8 <imu_init+0x244>)
 800541a:	f993 3134 	ldrsb.w	r3, [r3, #308]	; 0x134
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <imu_init+0x86>
		return imu.result;
 8005422:	4b71      	ldr	r3, [pc, #452]	; (80055e8 <imu_init+0x244>)
 8005424:	f993 3134 	ldrsb.w	r3, [r3, #308]	; 0x134
 8005428:	e0d5      	b.n	80055d6 <imu_init+0x232>
	}

	bmi_ref.aux_cfg.aux_sensor_enable = BMI160_ENABLE;
 800542a:	4a70      	ldr	r2, [pc, #448]	; (80055ec <imu_init+0x248>)
 800542c:	7d13      	ldrb	r3, [r2, #20]
 800542e:	f043 0301 	orr.w	r3, r3, #1
 8005432:	7513      	strb	r3, [r2, #20]
	bmi_ref.aux_cfg.aux_i2c_addr = BMI160_AUX_BMM150_I2C_ADDR;
 8005434:	4b6d      	ldr	r3, [pc, #436]	; (80055ec <imu_init+0x248>)
 8005436:	2210      	movs	r2, #16
 8005438:	755a      	strb	r2, [r3, #21]
	bmi_ref.aux_cfg.aux_rd_burst_len = 2; // 8 bytes
 800543a:	4a6c      	ldr	r2, [pc, #432]	; (80055ec <imu_init+0x248>)
 800543c:	7d13      	ldrb	r3, [r2, #20]
 800543e:	2102      	movs	r1, #2
 8005440:	f361 0383 	bfi	r3, r1, #2, #2
 8005444:	7513      	strb	r3, [r2, #20]
	bmi_ref.aux_cfg.manual_enable = BMI160_ENABLE; // Manual mode
 8005446:	4a69      	ldr	r2, [pc, #420]	; (80055ec <imu_init+0x248>)
 8005448:	7d13      	ldrb	r3, [r2, #20]
 800544a:	f043 0302 	orr.w	r3, r3, #2
 800544e:	7513      	strb	r3, [r2, #20]

	imu.result = bmi160_aux_init(&bmi_ref);
 8005450:	4866      	ldr	r0, [pc, #408]	; (80055ec <imu_init+0x248>)
 8005452:	f001 fe39 	bl	80070c8 <bmi160_aux_init>
 8005456:	4603      	mov	r3, r0
 8005458:	461a      	mov	r2, r3
 800545a:	4b63      	ldr	r3, [pc, #396]	; (80055e8 <imu_init+0x244>)
 800545c:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	if (BMI160_OK != imu.result) {
 8005460:	4b61      	ldr	r3, [pc, #388]	; (80055e8 <imu_init+0x244>)
 8005462:	f993 3134 	ldrsb.w	r3, [r3, #308]	; 0x134
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <imu_init+0xce>
		return imu.result;
 800546a:	4b5f      	ldr	r3, [pc, #380]	; (80055e8 <imu_init+0x244>)
 800546c:	f993 3134 	ldrsb.w	r3, [r3, #308]	; 0x134
 8005470:	e0b1      	b.n	80055d6 <imu_init+0x232>
	}

	bmm_ref.intf = BMM150_I2C_INTF;
 8005472:	4b5f      	ldr	r3, [pc, #380]	; (80055f0 <imu_init+0x24c>)
 8005474:	2201      	movs	r2, #1
 8005476:	705a      	strb	r2, [r3, #1]
	bmm_ref.chip_id = BMM150_CHIP_ID;
 8005478:	4b5d      	ldr	r3, [pc, #372]	; (80055f0 <imu_init+0x24c>)
 800547a:	2232      	movs	r2, #50	; 0x32
 800547c:	701a      	strb	r2, [r3, #0]
	bmm_ref.read = &bmm150_aux_read;
 800547e:	4b5c      	ldr	r3, [pc, #368]	; (80055f0 <imu_init+0x24c>)
 8005480:	4a5f      	ldr	r2, [pc, #380]	; (8005600 <imu_init+0x25c>)
 8005482:	60da      	str	r2, [r3, #12]
	bmm_ref.write = &bmm150_aux_write;
 8005484:	4b5a      	ldr	r3, [pc, #360]	; (80055f0 <imu_init+0x24c>)
 8005486:	4a5f      	ldr	r2, [pc, #380]	; (8005604 <imu_init+0x260>)
 8005488:	611a      	str	r2, [r3, #16]
	bmm_ref.delay_us = &bmm150_aux_delay_us;
 800548a:	4b59      	ldr	r3, [pc, #356]	; (80055f0 <imu_init+0x24c>)
 800548c:	4a5e      	ldr	r2, [pc, #376]	; (8005608 <imu_init+0x264>)
 800548e:	615a      	str	r2, [r3, #20]
	bmm_ref.intf_ptr = &bmi_ref;
 8005490:	4b57      	ldr	r3, [pc, #348]	; (80055f0 <imu_init+0x24c>)
 8005492:	4a56      	ldr	r2, [pc, #344]	; (80055ec <imu_init+0x248>)
 8005494:	605a      	str	r2, [r3, #4]
	bmm_ref.pwr_cntrl_bit = BMM150_POWER_CNTRL_ENABLE;
 8005496:	4b56      	ldr	r3, [pc, #344]	; (80055f0 <imu_init+0x24c>)
 8005498:	2201      	movs	r2, #1
 800549a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	imu.result = bmm150_init(&bmm_ref);
 800549e:	4854      	ldr	r0, [pc, #336]	; (80055f0 <imu_init+0x24c>)
 80054a0:	f7fc fc5e 	bl	8001d60 <bmm150_init>
 80054a4:	4603      	mov	r3, r0
 80054a6:	461a      	mov	r2, r3
 80054a8:	4b4f      	ldr	r3, [pc, #316]	; (80055e8 <imu_init+0x244>)
 80054aa:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	if (BMM150_OK != imu.result) {
 80054ae:	4b4e      	ldr	r3, [pc, #312]	; (80055e8 <imu_init+0x244>)
 80054b0:	f993 3134 	ldrsb.w	r3, [r3, #308]	; 0x134
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <imu_init+0x11c>
		return imu.result;
 80054b8:	4b4b      	ldr	r3, [pc, #300]	; (80055e8 <imu_init+0x244>)
 80054ba:	f993 3134 	ldrsb.w	r3, [r3, #308]	; 0x134
 80054be:	e08a      	b.n	80055d6 <imu_init+0x232>
	}

	bmi_ref.accel_cfg.odr = BMI160_ACCEL_ODR_800HZ;
 80054c0:	4b4a      	ldr	r3, [pc, #296]	; (80055ec <imu_init+0x248>)
 80054c2:	220b      	movs	r2, #11
 80054c4:	715a      	strb	r2, [r3, #5]
	bmi_ref.accel_cfg.range = BMI160_ACCEL_RANGE_16G;
 80054c6:	4b49      	ldr	r3, [pc, #292]	; (80055ec <imu_init+0x248>)
 80054c8:	220c      	movs	r2, #12
 80054ca:	719a      	strb	r2, [r3, #6]
	bmi_ref.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 80054cc:	4b47      	ldr	r3, [pc, #284]	; (80055ec <imu_init+0x248>)
 80054ce:	2202      	movs	r2, #2
 80054d0:	71da      	strb	r2, [r3, #7]
	bmi_ref.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 80054d2:	4b46      	ldr	r3, [pc, #280]	; (80055ec <imu_init+0x248>)
 80054d4:	2211      	movs	r2, #17
 80054d6:	711a      	strb	r2, [r3, #4]

	bmi_ref.gyro_cfg.odr = BMI160_GYRO_ODR_800HZ;
 80054d8:	4b44      	ldr	r3, [pc, #272]	; (80055ec <imu_init+0x248>)
 80054da:	220b      	movs	r2, #11
 80054dc:	735a      	strb	r2, [r3, #13]
	bmi_ref.gyro_cfg.range = BMI160_GYRO_RANGE_1000_DPS;
 80054de:	4b43      	ldr	r3, [pc, #268]	; (80055ec <imu_init+0x248>)
 80054e0:	2201      	movs	r2, #1
 80054e2:	739a      	strb	r2, [r3, #14]
	bmi_ref.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 80054e4:	4b41      	ldr	r3, [pc, #260]	; (80055ec <imu_init+0x248>)
 80054e6:	2202      	movs	r2, #2
 80054e8:	73da      	strb	r2, [r3, #15]
	bmi_ref.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 80054ea:	4b40      	ldr	r3, [pc, #256]	; (80055ec <imu_init+0x248>)
 80054ec:	2215      	movs	r2, #21
 80054ee:	731a      	strb	r2, [r3, #12]

	imu.result = bmi160_set_sens_conf(&bmi_ref);
 80054f0:	483e      	ldr	r0, [pc, #248]	; (80055ec <imu_init+0x248>)
 80054f2:	f001 fc98 	bl	8006e26 <bmi160_set_sens_conf>
 80054f6:	4603      	mov	r3, r0
 80054f8:	461a      	mov	r2, r3
 80054fa:	4b3b      	ldr	r3, [pc, #236]	; (80055e8 <imu_init+0x244>)
 80054fc:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	if (BMI160_OK != imu.result) {
 8005500:	4b39      	ldr	r3, [pc, #228]	; (80055e8 <imu_init+0x244>)
 8005502:	f993 3134 	ldrsb.w	r3, [r3, #308]	; 0x134
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <imu_init+0x16e>
		return imu.result;
 800550a:	4b37      	ldr	r3, [pc, #220]	; (80055e8 <imu_init+0x244>)
 800550c:	f993 3134 	ldrsb.w	r3, [r3, #308]	; 0x134
 8005510:	e061      	b.n	80055d6 <imu_init+0x232>
	}
	HAL_Delay(10); //The device is powering up in less then 10ms. Page 13. 2.2 Power modes.
 8005512:	200a      	movs	r0, #10
 8005514:	f003 fb7e 	bl	8008c14 <HAL_Delay>

	// Power up from suspend to sleep mode
	bmm_settings.pwr_mode = BMM150_POWERMODE_SLEEP;
 8005518:	4b3c      	ldr	r3, [pc, #240]	; (800560c <imu_init+0x268>)
 800551a:	2203      	movs	r2, #3
 800551c:	705a      	strb	r2, [r3, #1]
	imu.result = bmm150_set_op_mode(&bmm_settings, &bmm_ref);
 800551e:	4934      	ldr	r1, [pc, #208]	; (80055f0 <imu_init+0x24c>)
 8005520:	483a      	ldr	r0, [pc, #232]	; (800560c <imu_init+0x268>)
 8005522:	f7fc fcb1 	bl	8001e88 <bmm150_set_op_mode>
 8005526:	4603      	mov	r3, r0
 8005528:	461a      	mov	r2, r3
 800552a:	4b2f      	ldr	r3, [pc, #188]	; (80055e8 <imu_init+0x244>)
 800552c:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	if (BMM150_OK != imu.result) {
 8005530:	4b2d      	ldr	r3, [pc, #180]	; (80055e8 <imu_init+0x244>)
 8005532:	f993 3134 	ldrsb.w	r3, [r3, #308]	; 0x134
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <imu_init+0x19e>
		return imu.result;
 800553a:	4b2b      	ldr	r3, [pc, #172]	; (80055e8 <imu_init+0x244>)
 800553c:	f993 3134 	ldrsb.w	r3, [r3, #308]	; 0x134
 8005540:	e049      	b.n	80055d6 <imu_init+0x232>
	}
	HAL_Delay(3);
 8005542:	2003      	movs	r0, #3
 8005544:	f003 fb66 	bl	8008c14 <HAL_Delay>

	bmm_settings.preset_mode = BMM150_PRESETMODE_LOWPOWER;
 8005548:	4b30      	ldr	r3, [pc, #192]	; (800560c <imu_init+0x268>)
 800554a:	2201      	movs	r2, #1
 800554c:	715a      	strb	r2, [r3, #5]
	imu.result = bmm150_set_presetmode(&bmm_settings, &bmm_ref);
 800554e:	4928      	ldr	r1, [pc, #160]	; (80055f0 <imu_init+0x24c>)
 8005550:	482e      	ldr	r0, [pc, #184]	; (800560c <imu_init+0x268>)
 8005552:	f7fc fd03 	bl	8001f5c <bmm150_set_presetmode>
 8005556:	4603      	mov	r3, r0
 8005558:	461a      	mov	r2, r3
 800555a:	4b23      	ldr	r3, [pc, #140]	; (80055e8 <imu_init+0x244>)
 800555c:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	if (BMM150_OK != imu.result) {
 8005560:	4b21      	ldr	r3, [pc, #132]	; (80055e8 <imu_init+0x244>)
 8005562:	f993 3134 	ldrsb.w	r3, [r3, #308]	; 0x134
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <imu_init+0x1ce>
		return imu.result;
 800556a:	4b1f      	ldr	r3, [pc, #124]	; (80055e8 <imu_init+0x244>)
 800556c:	f993 3134 	ldrsb.w	r3, [r3, #308]	; 0x134
 8005570:	e031      	b.n	80055d6 <imu_init+0x232>
	}
	bmm_settings.pwr_mode = BMM150_POWERMODE_NORMAL;
 8005572:	4b26      	ldr	r3, [pc, #152]	; (800560c <imu_init+0x268>)
 8005574:	2200      	movs	r2, #0
 8005576:	705a      	strb	r2, [r3, #1]
	imu.result = bmm150_set_op_mode(&bmm_settings, &bmm_ref);
 8005578:	491d      	ldr	r1, [pc, #116]	; (80055f0 <imu_init+0x24c>)
 800557a:	4824      	ldr	r0, [pc, #144]	; (800560c <imu_init+0x268>)
 800557c:	f7fc fc84 	bl	8001e88 <bmm150_set_op_mode>
 8005580:	4603      	mov	r3, r0
 8005582:	461a      	mov	r2, r3
 8005584:	4b18      	ldr	r3, [pc, #96]	; (80055e8 <imu_init+0x244>)
 8005586:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	if (BMM150_OK != imu.result) {
 800558a:	4b17      	ldr	r3, [pc, #92]	; (80055e8 <imu_init+0x244>)
 800558c:	f993 3134 	ldrsb.w	r3, [r3, #308]	; 0x134
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <imu_init+0x1f8>
		return imu.result;
 8005594:	4b14      	ldr	r3, [pc, #80]	; (80055e8 <imu_init+0x244>)
 8005596:	f993 3134 	ldrsb.w	r3, [r3, #308]	; 0x134
 800559a:	e01c      	b.n	80055d6 <imu_init+0x232>
	}

	uint8_t bmm150_data_start = BMM150_REG_DATA_X_LSB;
 800559c:	2342      	movs	r3, #66	; 0x42
 800559e:	73bb      	strb	r3, [r7, #14]
	bmi_ref.aux_cfg.aux_odr = BMI160_AUX_ODR_100HZ;
 80055a0:	4a12      	ldr	r2, [pc, #72]	; (80055ec <imu_init+0x248>)
 80055a2:	7d13      	ldrb	r3, [r2, #20]
 80055a4:	2108      	movs	r1, #8
 80055a6:	f361 1307 	bfi	r3, r1, #4, #4
 80055aa:	7513      	strb	r3, [r2, #20]
	imu.result = bmi160_set_aux_auto_mode(&bmm150_data_start, &bmi_ref);
 80055ac:	f107 030e 	add.w	r3, r7, #14
 80055b0:	490e      	ldr	r1, [pc, #56]	; (80055ec <imu_init+0x248>)
 80055b2:	4618      	mov	r0, r3
 80055b4:	f001 fdad 	bl	8007112 <bmi160_set_aux_auto_mode>
 80055b8:	4603      	mov	r3, r0
 80055ba:	461a      	mov	r2, r3
 80055bc:	4b0a      	ldr	r3, [pc, #40]	; (80055e8 <imu_init+0x244>)
 80055be:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	if (BMI160_OK != imu.result) {
 80055c2:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <imu_init+0x244>)
 80055c4:	f993 3134 	ldrsb.w	r3, [r3, #308]	; 0x134
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <imu_init+0x230>
		return imu.result;
 80055cc:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <imu_init+0x244>)
 80055ce:	f993 3134 	ldrsb.w	r3, [r3, #308]	; 0x134
 80055d2:	e000      	b.n	80055d6 <imu_init+0x232>
	}
	return BMI160_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000570 	.word	0x20000570
 80055e4:	20000574 	.word	0x20000574
 80055e8:	20000578 	.word	0x20000578
 80055ec:	20000504 	.word	0x20000504
 80055f0:	20000530 	.word	0x20000530
 80055f4:	08005725 	.word	0x08005725
 80055f8:	080057a1 	.word	0x080057a1
 80055fc:	08005865 	.word	0x08005865
 8005600:	0800587b 	.word	0x0800587b
 8005604:	080058a3 	.word	0x080058a3
 8005608:	080058cd 	.word	0x080058cd
 800560c:	2000055c 	.word	0x2000055c

08005610 <imu_get_data>:

int8_t imu_get_data() {
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
	// add previous data to next index
	for (int i = IMU_FRAMES - 2; i >= 0; i--) {
 8005616:	2308      	movs	r3, #8
 8005618:	607b      	str	r3, [r7, #4]
 800561a:	e048      	b.n	80056ae <imu_get_data+0x9e>
		imu.accel_data[i + 1] = imu.accel_data[i];
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	493a      	ldr	r1, [pc, #232]	; (800570c <imu_get_data+0xfc>)
 8005622:	4613      	mov	r3, r2
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	f103 0008 	add.w	r0, r3, #8
 8005630:	4936      	ldr	r1, [pc, #216]	; (800570c <imu_get_data+0xfc>)
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	4613      	mov	r3, r2
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	4413      	add	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	f103 0208 	add.w	r2, r3, #8
 8005642:	4603      	mov	r3, r0
 8005644:	ca07      	ldmia	r2, {r0, r1, r2}
 8005646:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		imu.gyro_data[i + 1] = imu.gyro_data[i];
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	492f      	ldr	r1, [pc, #188]	; (800570c <imu_get_data+0xfc>)
 8005650:	4613      	mov	r3, r2
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	4413      	add	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800565e:	492b      	ldr	r1, [pc, #172]	; (800570c <imu_get_data+0xfc>)
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	4613      	mov	r3, r2
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	4413      	add	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	440b      	add	r3, r1
 800566c:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8005670:	4603      	mov	r3, r0
 8005672:	ca07      	ldmia	r2, {r0, r1, r2}
 8005674:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		imu.mag_data[i + 1] = imu.mag_data[i];
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	4923      	ldr	r1, [pc, #140]	; (800570c <imu_get_data+0xfc>)
 800567e:	4613      	mov	r3, r2
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	4413      	add	r3, r2
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	440b      	add	r3, r1
 8005688:	f103 00f8 	add.w	r0, r3, #248	; 0xf8
 800568c:	491f      	ldr	r1, [pc, #124]	; (800570c <imu_get_data+0xfc>)
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	4613      	mov	r3, r2
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	4413      	add	r3, r2
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	440b      	add	r3, r1
 800569a:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 800569e:	4603      	mov	r3, r0
 80056a0:	6811      	ldr	r1, [r2, #0]
 80056a2:	6019      	str	r1, [r3, #0]
 80056a4:	8892      	ldrh	r2, [r2, #4]
 80056a6:	809a      	strh	r2, [r3, #4]
	for (int i = IMU_FRAMES - 2; i >= 0; i--) {
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	607b      	str	r3, [r7, #4]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	dab3      	bge.n	800561c <imu_get_data+0xc>
	}
	imu.result_data = bmi160_get_sensor_data(
 80056b4:	4b16      	ldr	r3, [pc, #88]	; (8005710 <imu_get_data+0x100>)
 80056b6:	4a17      	ldr	r2, [pc, #92]	; (8005714 <imu_get_data+0x104>)
 80056b8:	4917      	ldr	r1, [pc, #92]	; (8005718 <imu_get_data+0x108>)
 80056ba:	2003      	movs	r0, #3
 80056bc:	f001 fc0d 	bl	8006eda <bmi160_get_sensor_data>
 80056c0:	4603      	mov	r3, r0
 80056c2:	461a      	mov	r2, r3
 80056c4:	4b11      	ldr	r3, [pc, #68]	; (800570c <imu_get_data+0xfc>)
 80056c6:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
			(BMI160_ACCEL_SEL | BMI160_GYRO_SEL), &imu.accel_data[0],
			&imu.gyro_data[0], &bmi_ref);
	if (BMI160_OK != imu.result_data) {
 80056ca:	4b10      	ldr	r3, [pc, #64]	; (800570c <imu_get_data+0xfc>)
 80056cc:	f993 3135 	ldrsb.w	r3, [r3, #309]	; 0x135
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <imu_get_data+0xcc>
		return imu.result_data;
 80056d4:	4b0d      	ldr	r3, [pc, #52]	; (800570c <imu_get_data+0xfc>)
 80056d6:	f993 3135 	ldrsb.w	r3, [r3, #309]	; 0x135
 80056da:	e012      	b.n	8005702 <imu_get_data+0xf2>
	}
	imu.result_data = bmm150_read_mag_data(&imu.mag_data[0], &bmm_ref);
 80056dc:	490f      	ldr	r1, [pc, #60]	; (800571c <imu_get_data+0x10c>)
 80056de:	4810      	ldr	r0, [pc, #64]	; (8005720 <imu_get_data+0x110>)
 80056e0:	f7fc fca6 	bl	8002030 <bmm150_read_mag_data>
 80056e4:	4603      	mov	r3, r0
 80056e6:	461a      	mov	r2, r3
 80056e8:	4b08      	ldr	r3, [pc, #32]	; (800570c <imu_get_data+0xfc>)
 80056ea:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
	if (BMM150_OK != imu.result_data) {
 80056ee:	4b07      	ldr	r3, [pc, #28]	; (800570c <imu_get_data+0xfc>)
 80056f0:	f993 3135 	ldrsb.w	r3, [r3, #309]	; 0x135
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <imu_get_data+0xf0>
		return imu.result_data;
 80056f8:	4b04      	ldr	r3, [pc, #16]	; (800570c <imu_get_data+0xfc>)
 80056fa:	f993 3135 	ldrsb.w	r3, [r3, #309]	; 0x135
 80056fe:	e000      	b.n	8005702 <imu_get_data+0xf2>
	}
	return BMI160_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20000578 	.word	0x20000578
 8005710:	20000504 	.word	0x20000504
 8005714:	200005f8 	.word	0x200005f8
 8005718:	20000580 	.word	0x20000580
 800571c:	20000530 	.word	0x20000530
 8005720:	20000670 	.word	0x20000670

08005724 <imu_i2c_read>:

int8_t imu_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af02      	add	r7, sp, #8
 800572a:	603a      	str	r2, [r7, #0]
 800572c:	461a      	mov	r2, r3
 800572e:	4603      	mov	r3, r0
 8005730:	71fb      	strb	r3, [r7, #7]
 8005732:	460b      	mov	r3, r1
 8005734:	71bb      	strb	r3, [r7, #6]
 8005736:	4613      	mov	r3, r2
 8005738:	80bb      	strh	r3, [r7, #4]
	int8_t rslt = 0;
 800573a:	2300      	movs	r3, #0
 800573c:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(imu_i2c, (uint8_t) (id << 1), &reg_addr, 1,
 8005742:	4b16      	ldr	r3, [pc, #88]	; (800579c <imu_i2c_read+0x78>)
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	79fb      	ldrb	r3, [r7, #7]
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	b2db      	uxtb	r3, r3
 800574c:	b299      	uxth	r1, r3
 800574e:	1dba      	adds	r2, r7, #6
 8005750:	2364      	movs	r3, #100	; 0x64
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	2301      	movs	r3, #1
 8005756:	f003 ff11 	bl	800957c <HAL_I2C_Master_Transmit>
 800575a:	4603      	mov	r3, r0
 800575c:	73bb      	strb	r3, [r7, #14]
			100);
	if (status != HAL_OK) {
 800575e:	7bbb      	ldrb	r3, [r7, #14]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <imu_i2c_read+0x44>
		rslt = status;
 8005764:	7bbb      	ldrb	r3, [r7, #14]
 8005766:	73fb      	strb	r3, [r7, #15]
	}
	status = HAL_I2C_Master_Receive(imu_i2c, (uint8_t) (id << 1), data, len,
 8005768:	4b0c      	ldr	r3, [pc, #48]	; (800579c <imu_i2c_read+0x78>)
 800576a:	6818      	ldr	r0, [r3, #0]
 800576c:	79fb      	ldrb	r3, [r7, #7]
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	b2db      	uxtb	r3, r3
 8005772:	b299      	uxth	r1, r3
 8005774:	88bb      	ldrh	r3, [r7, #4]
 8005776:	2264      	movs	r2, #100	; 0x64
 8005778:	9200      	str	r2, [sp, #0]
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	f003 fffc 	bl	8009778 <HAL_I2C_Master_Receive>
 8005780:	4603      	mov	r3, r0
 8005782:	73bb      	strb	r3, [r7, #14]
			100);
	if (status != HAL_OK) {
 8005784:	7bbb      	ldrb	r3, [r7, #14]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <imu_i2c_read+0x6a>
		rslt = status;
 800578a:	7bbb      	ldrb	r3, [r7, #14]
 800578c:	73fb      	strb	r3, [r7, #15]
	}
	return rslt;
 800578e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20000574 	.word	0x20000574

080057a0 <imu_i2c_write>:

int8_t imu_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 80057a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057a4:	b089      	sub	sp, #36	; 0x24
 80057a6:	af02      	add	r7, sp, #8
 80057a8:	603a      	str	r2, [r7, #0]
 80057aa:	461a      	mov	r2, r3
 80057ac:	4603      	mov	r3, r0
 80057ae:	71fb      	strb	r3, [r7, #7]
 80057b0:	460b      	mov	r3, r1
 80057b2:	71bb      	strb	r3, [r7, #6]
 80057b4:	4613      	mov	r3, r2
 80057b6:	80bb      	strh	r3, [r7, #4]
 80057b8:	466b      	mov	r3, sp
 80057ba:	461e      	mov	r6, r3
	int8_t rslt = 0;
 80057bc:	2300      	movs	r3, #0
 80057be:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status = HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	75bb      	strb	r3, [r7, #22]
	uint8_t tx_buffer[len + 1];
 80057c4:	88bb      	ldrh	r3, [r7, #4]
 80057c6:	1c59      	adds	r1, r3, #1
 80057c8:	1e4b      	subs	r3, r1, #1
 80057ca:	613b      	str	r3, [r7, #16]
 80057cc:	460a      	mov	r2, r1
 80057ce:	2300      	movs	r3, #0
 80057d0:	4690      	mov	r8, r2
 80057d2:	4699      	mov	r9, r3
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	f04f 0300 	mov.w	r3, #0
 80057dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057e8:	460a      	mov	r2, r1
 80057ea:	2300      	movs	r3, #0
 80057ec:	4614      	mov	r4, r2
 80057ee:	461d      	mov	r5, r3
 80057f0:	f04f 0200 	mov.w	r2, #0
 80057f4:	f04f 0300 	mov.w	r3, #0
 80057f8:	00eb      	lsls	r3, r5, #3
 80057fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057fe:	00e2      	lsls	r2, r4, #3
 8005800:	460b      	mov	r3, r1
 8005802:	3307      	adds	r3, #7
 8005804:	08db      	lsrs	r3, r3, #3
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	ebad 0d03 	sub.w	sp, sp, r3
 800580c:	ab02      	add	r3, sp, #8
 800580e:	3300      	adds	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
	tx_buffer[0] = reg_addr;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	79ba      	ldrb	r2, [r7, #6]
 8005816:	701a      	strb	r2, [r3, #0]
	memcpy(&tx_buffer[1], data, len);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3301      	adds	r3, #1
 800581c:	88ba      	ldrh	r2, [r7, #4]
 800581e:	6839      	ldr	r1, [r7, #0]
 8005820:	4618      	mov	r0, r3
 8005822:	f008 f93e 	bl	800daa2 <memcpy>
	status = HAL_I2C_Master_Transmit(imu_i2c, (uint8_t) (id << 1), tx_buffer,
 8005826:	4b0e      	ldr	r3, [pc, #56]	; (8005860 <imu_i2c_write+0xc0>)
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	b2db      	uxtb	r3, r3
 8005830:	b299      	uxth	r1, r3
 8005832:	88bb      	ldrh	r3, [r7, #4]
 8005834:	3301      	adds	r3, #1
 8005836:	b29b      	uxth	r3, r3
 8005838:	2264      	movs	r2, #100	; 0x64
 800583a:	9200      	str	r2, [sp, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	f003 fe9d 	bl	800957c <HAL_I2C_Master_Transmit>
 8005842:	4603      	mov	r3, r0
 8005844:	75bb      	strb	r3, [r7, #22]
			len + 1, 100);
	if (status != HAL_OK) {
 8005846:	7dbb      	ldrb	r3, [r7, #22]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <imu_i2c_write+0xb0>
		rslt = status;
 800584c:	7dbb      	ldrb	r3, [r7, #22]
 800584e:	75fb      	strb	r3, [r7, #23]
	}
	return rslt;
 8005850:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005854:	46b5      	mov	sp, r6
}
 8005856:	4618      	mov	r0, r3
 8005858:	371c      	adds	r7, #28
 800585a:	46bd      	mov	sp, r7
 800585c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005860:	20000574 	.word	0x20000574

08005864 <imu_delay_ms>:

void imu_delay_ms(uint32_t period) {
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f003 f9d1 	bl	8008c14 <HAL_Delay>
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <bmm150_aux_read>:

/* Auxiliary function definitions */
int8_t bmm150_aux_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length,
		void *intf_ptr) {
 800587a:	b580      	push	{r7, lr}
 800587c:	b084      	sub	sp, #16
 800587e:	af00      	add	r7, sp, #0
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	603b      	str	r3, [r7, #0]
 8005886:	4603      	mov	r3, r0
 8005888:	73fb      	strb	r3, [r7, #15]
	return bmi160_aux_read(reg_addr, reg_data, length, intf_ptr);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	b29a      	uxth	r2, r3
 800588e:	7bf8      	ldrb	r0, [r7, #15]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	f001 fb88 	bl	8006fa8 <bmi160_aux_read>
 8005898:	4603      	mov	r3, r0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <bmm150_aux_write>:

int8_t bmm150_aux_write(uint8_t reg_addr, const uint8_t *reg_data,
		uint32_t length, void *intf_ptr) {
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b084      	sub	sp, #16
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	603b      	str	r3, [r7, #0]
 80058ae:	4603      	mov	r3, r0
 80058b0:	73fb      	strb	r3, [r7, #15]
	return bmi160_aux_write(reg_addr, (uint8_t*) reg_data, length, intf_ptr);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	7bf8      	ldrb	r0, [r7, #15]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	68b9      	ldr	r1, [r7, #8]
 80058bc:	f001 fbb2 	bl	8007024 <bmi160_aux_write>
 80058c0:	4603      	mov	r3, r0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
	...

080058cc <bmm150_aux_delay_us>:

void bmm150_aux_delay_us(uint32_t period, void *intf_ptr) {
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
	(void) intf_ptr;
	imu_timer->Instance->CNT = 0;
 80058d6:	4b0a      	ldr	r3, [pc, #40]	; (8005900 <bmm150_aux_delay_us+0x34>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2200      	movs	r2, #0
 80058de:	625a      	str	r2, [r3, #36]	; 0x24
	while (imu_timer->Instance->CNT <= period)
 80058e0:	bf00      	nop
 80058e2:	4b07      	ldr	r3, [pc, #28]	; (8005900 <bmm150_aux_delay_us+0x34>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d2f8      	bcs.n	80058e2 <bmm150_aux_delay_us+0x16>
		;
}
 80058f0:	bf00      	nop
 80058f2:	bf00      	nop
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	20000570 	.word	0x20000570

08005904 <get_imu>:

inline IMU_t* get_imu() {
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
	return &imu;
 8005908:	4b02      	ldr	r3, [pc, #8]	; (8005914 <get_imu+0x10>)
}
 800590a:	4618      	mov	r0, r3
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	20000578 	.word	0x20000578

08005918 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800591e:	f003 f907 	bl	8008b30 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8005922:	f000 f87b 	bl	8005a1c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005926:	f7fe fcaf 	bl	8004288 <MX_GPIO_Init>
	MX_I2C1_Init();
 800592a:	f7ff fbcf 	bl	80050cc <MX_I2C1_Init>
	MX_USART1_UART_Init();
 800592e:	f000 fcf7 	bl	8006320 <MX_USART1_UART_Init>
	MX_I2C2_Init();
 8005932:	f7ff fbf9 	bl	8005128 <MX_I2C2_Init>
	MX_TIM4_Init();
 8005936:	f000 f9af 	bl	8005c98 <MX_TIM4_Init>
	MX_USART2_UART_Init();
 800593a:	f000 fd1b 	bl	8006374 <MX_USART2_UART_Init>
	MX_I2C3_Init();
 800593e:	f7ff fc21 	bl	8005184 <MX_I2C3_Init>
	MX_TIM3_Init();
 8005942:	f000 f951 	bl	8005be8 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

// STATUS
	HAL_StatusTypeDef status = HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	71fb      	strb	r3, [r7, #7]

// PRE-INIT
	pre_init();
 800594a:	f002 fe91 	bl	8008670 <pre_init>

// Initialize Bridge
	if (HAL_OK != (status = bridge_init(&huart2))) {
 800594e:	482b      	ldr	r0, [pc, #172]	; (80059fc <main+0xe4>)
 8005950:	f7fe f972 	bl	8003c38 <bridge_init>
 8005954:	4603      	mov	r3, r0
 8005956:	71fb      	strb	r3, [r7, #7]
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <main+0x4a>
		return status;
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	e048      	b.n	80059f4 <main+0xdc>
	}

// Initialize IMU + ACCEL + GYRO + MAGNETOMETER
	if (BMI160_OK != imu_init(&htim4, &hi2c1)) {
 8005962:	4927      	ldr	r1, [pc, #156]	; (8005a00 <main+0xe8>)
 8005964:	4827      	ldr	r0, [pc, #156]	; (8005a04 <main+0xec>)
 8005966:	f7ff fd1d 	bl	80053a4 <imu_init>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d005      	beq.n	800597c <main+0x64>
		return get_imu()->result;
 8005970:	f7ff ffc8 	bl	8005904 <get_imu>
 8005974:	4603      	mov	r3, r0
 8005976:	f993 3134 	ldrsb.w	r3, [r3, #308]	; 0x134
 800597a:	e03b      	b.n	80059f4 <main+0xdc>
	}

// Initialize pressure and temperature sensor
	if (BMP2_OK != bmp280_init(&hi2c2)) {
 800597c:	4822      	ldr	r0, [pc, #136]	; (8005a08 <main+0xf0>)
 800597e:	f7fd ff09 	bl	8003794 <bmp280_init>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d005      	beq.n	8005994 <main+0x7c>
		return get_bmp()->result;
 8005988:	f7fe f878 	bl	8003a7c <get_bmp>
 800598c:	4603      	mov	r3, r0
 800598e:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 8005992:	e02f      	b.n	80059f4 <main+0xdc>
	}

// Initialize GPS
	gps_init(&huart1);
 8005994:	481d      	ldr	r0, [pc, #116]	; (8005a0c <main+0xf4>)
 8005996:	f7ff f9a7 	bl	8004ce8 <gps_init>
	gps_config_ubx();
 800599a:	f7ff f9d7 	bl	8004d4c <gps_config_ubx>

// Initialize Ultrasonic
	ultrasonic_init(&hi2c3, UL_BUSY_GPIO_Port, UL_BUSY_Pin);
 800599e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80059a2:	491b      	ldr	r1, [pc, #108]	; (8005a10 <main+0xf8>)
 80059a4:	481b      	ldr	r0, [pc, #108]	; (8005a14 <main+0xfc>)
 80059a6:	f000 fc35 	bl	8006214 <ultrasonic_init>

// Initialize Buzzer
	buzzer_init(&htim3, TIM_CHANNEL_1);
 80059aa:	2100      	movs	r1, #0
 80059ac:	481a      	ldr	r0, [pc, #104]	; (8005a18 <main+0x100>)
 80059ae:	f7fe f983 	bl	8003cb8 <buzzer_init>
//	if (BMI160_OK != imu_get_data()) {
//		return get_imu()->result_data;
//	}

// Get data from GPS
	gps_get_data();
 80059b2:	f7ff fb15 	bl	8004fe0 <gps_get_data>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
		//collect data
		if (BMI160_OK != imu_get_data()) {
 80059b6:	f7ff fe2b 	bl	8005610 <imu_get_data>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <main+0xb4>
			return get_imu()->result_data;
 80059c0:	f7ff ffa0 	bl	8005904 <get_imu>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f993 3135 	ldrsb.w	r3, [r3, #309]	; 0x135
 80059ca:	e013      	b.n	80059f4 <main+0xdc>
		}

		if (BMP2_OK != bmp280_get_data()) {
 80059cc:	f7fd ff5c 	bl	8003888 <bmp280_get_data>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d005      	beq.n	80059e2 <main+0xca>
			return get_bmp()->result_data;
 80059d6:	f7fe f851 	bl	8003a7c <get_bmp>
 80059da:	4603      	mov	r3, r0
 80059dc:	f993 305d 	ldrsb.w	r3, [r3, #93]	; 0x5d
 80059e0:	e008      	b.n	80059f4 <main+0xdc>
		}
		gps_get_data();
 80059e2:	f7ff fafd 	bl	8004fe0 <gps_get_data>
		ultrasonic_get_data();
 80059e6:	f000 fc57 	bl	8006298 <ultrasonic_get_data>

		//process data
		flight_imu_calibration();
 80059ea:	f7fe fbf9 	bl	80041e0 <flight_imu_calibration>
		flight_ahrs();
 80059ee:	f7fe fbfd 	bl	80041ec <flight_ahrs>
		if (BMI160_OK != imu_get_data()) {
 80059f2:	e7e0      	b.n	80059b6 <main+0x9e>
	/* USER CODE BEGIN 3 */

// Deinitialize BUZZER
//	buzzer_deinit();
	/* USER CODE END 3 */
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	200007d4 	.word	0x200007d4
 8005a00:	20000408 	.word	0x20000408
 8005a04:	200006f8 	.word	0x200006f8
 8005a08:	2000045c 	.word	0x2000045c
 8005a0c:	20000760 	.word	0x20000760
 8005a10:	40020400 	.word	0x40020400
 8005a14:	200004b0 	.word	0x200004b0
 8005a18:	200006b0 	.word	0x200006b0

08005a1c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b094      	sub	sp, #80	; 0x50
 8005a20:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8005a22:	f107 0320 	add.w	r3, r7, #32
 8005a26:	2230      	movs	r2, #48	; 0x30
 8005a28:	2100      	movs	r1, #0
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f007 febb 	bl	800d7a6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8005a30:	f107 030c 	add.w	r3, r7, #12
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	605a      	str	r2, [r3, #4]
 8005a3a:	609a      	str	r2, [r3, #8]
 8005a3c:	60da      	str	r2, [r3, #12]
 8005a3e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8005a40:	2300      	movs	r3, #0
 8005a42:	60bb      	str	r3, [r7, #8]
 8005a44:	4b27      	ldr	r3, [pc, #156]	; (8005ae4 <SystemClock_Config+0xc8>)
 8005a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a48:	4a26      	ldr	r2, [pc, #152]	; (8005ae4 <SystemClock_Config+0xc8>)
 8005a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8005a50:	4b24      	ldr	r3, [pc, #144]	; (8005ae4 <SystemClock_Config+0xc8>)
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a58:	60bb      	str	r3, [r7, #8]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	607b      	str	r3, [r7, #4]
 8005a60:	4b21      	ldr	r3, [pc, #132]	; (8005ae8 <SystemClock_Config+0xcc>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a20      	ldr	r2, [pc, #128]	; (8005ae8 <SystemClock_Config+0xcc>)
 8005a66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	4b1e      	ldr	r3, [pc, #120]	; (8005ae8 <SystemClock_Config+0xcc>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a74:	607b      	str	r3, [r7, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005a78:	2302      	movs	r3, #2
 8005a7a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005a80:	2310      	movs	r3, #16
 8005a82:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a84:	2302      	movs	r3, #2
 8005a86:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8005a8c:	2308      	movs	r3, #8
 8005a8e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8005a90:	2364      	movs	r3, #100	; 0x64
 8005a92:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005a94:	2302      	movs	r3, #2
 8005a96:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8005a98:	2304      	movs	r3, #4
 8005a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005a9c:	f107 0320 	add.w	r3, r7, #32
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f004 fceb 	bl	800a47c <HAL_RCC_OscConfig>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <SystemClock_Config+0x94>
		Error_Handler();
 8005aac:	f000 f81e 	bl	8005aec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8005ab0:	230f      	movs	r3, #15
 8005ab2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ac0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8005ac6:	f107 030c 	add.w	r3, r7, #12
 8005aca:	2103      	movs	r1, #3
 8005acc:	4618      	mov	r0, r3
 8005ace:	f004 ff4d 	bl	800a96c <HAL_RCC_ClockConfig>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <SystemClock_Config+0xc0>
		Error_Handler();
 8005ad8:	f000 f808 	bl	8005aec <Error_Handler>
	}
}
 8005adc:	bf00      	nop
 8005ade:	3750      	adds	r7, #80	; 0x50
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	40023800 	.word	0x40023800
 8005ae8:	40007000 	.word	0x40007000

08005aec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005af0:	b672      	cpsid	i
}
 8005af2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005af4:	e7fe      	b.n	8005af4 <Error_Handler+0x8>
	...

08005af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005afe:	2300      	movs	r3, #0
 8005b00:	607b      	str	r3, [r7, #4]
 8005b02:	4b10      	ldr	r3, [pc, #64]	; (8005b44 <HAL_MspInit+0x4c>)
 8005b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b06:	4a0f      	ldr	r2, [pc, #60]	; (8005b44 <HAL_MspInit+0x4c>)
 8005b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8005b0e:	4b0d      	ldr	r3, [pc, #52]	; (8005b44 <HAL_MspInit+0x4c>)
 8005b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b16:	607b      	str	r3, [r7, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	603b      	str	r3, [r7, #0]
 8005b1e:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <HAL_MspInit+0x4c>)
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	4a08      	ldr	r2, [pc, #32]	; (8005b44 <HAL_MspInit+0x4c>)
 8005b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b28:	6413      	str	r3, [r2, #64]	; 0x40
 8005b2a:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <HAL_MspInit+0x4c>)
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b32:	603b      	str	r3, [r7, #0]
 8005b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b36:	bf00      	nop
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40023800 	.word	0x40023800

08005b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005b4c:	e7fe      	b.n	8005b4c <NMI_Handler+0x4>

08005b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b52:	e7fe      	b.n	8005b52 <HardFault_Handler+0x4>

08005b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b58:	e7fe      	b.n	8005b58 <MemManage_Handler+0x4>

08005b5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b5e:	e7fe      	b.n	8005b5e <BusFault_Handler+0x4>

08005b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b64:	e7fe      	b.n	8005b64 <UsageFault_Handler+0x4>

08005b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b66:	b480      	push	{r7}
 8005b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b6a:	bf00      	nop
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b74:	b480      	push	{r7}
 8005b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b78:	bf00      	nop
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b82:	b480      	push	{r7}
 8005b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b86:	bf00      	nop
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b94:	f003 f81e 	bl	8008bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b98:	bf00      	nop
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005ba0:	4802      	ldr	r0, [pc, #8]	; (8005bac <USART1_IRQHandler+0x10>)
 8005ba2:	f006 fbd3 	bl	800c34c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005ba6:	bf00      	nop
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	20000760 	.word	0x20000760

08005bb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005bb4:	4802      	ldr	r0, [pc, #8]	; (8005bc0 <USART2_IRQHandler+0x10>)
 8005bb6:	f006 fbc9 	bl	800c34c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005bba:	bf00      	nop
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	200007d4 	.word	0x200007d4

08005bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005bc8:	4b06      	ldr	r3, [pc, #24]	; (8005be4 <SystemInit+0x20>)
 8005bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bce:	4a05      	ldr	r2, [pc, #20]	; (8005be4 <SystemInit+0x20>)
 8005bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005bd8:	bf00      	nop
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	e000ed00 	.word	0xe000ed00

08005be8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08a      	sub	sp, #40	; 0x28
 8005bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bee:	f107 0320 	add.w	r3, r7, #32
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005bf8:	1d3b      	adds	r3, r7, #4
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	605a      	str	r2, [r3, #4]
 8005c00:	609a      	str	r2, [r3, #8]
 8005c02:	60da      	str	r2, [r3, #12]
 8005c04:	611a      	str	r2, [r3, #16]
 8005c06:	615a      	str	r2, [r3, #20]
 8005c08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005c0a:	4b21      	ldr	r3, [pc, #132]	; (8005c90 <MX_TIM3_Init+0xa8>)
 8005c0c:	4a21      	ldr	r2, [pc, #132]	; (8005c94 <MX_TIM3_Init+0xac>)
 8005c0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8005c10:	4b1f      	ldr	r3, [pc, #124]	; (8005c90 <MX_TIM3_Init+0xa8>)
 8005c12:	2263      	movs	r2, #99	; 0x63
 8005c14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c16:	4b1e      	ldr	r3, [pc, #120]	; (8005c90 <MX_TIM3_Init+0xa8>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 250-1;
 8005c1c:	4b1c      	ldr	r3, [pc, #112]	; (8005c90 <MX_TIM3_Init+0xa8>)
 8005c1e:	22f9      	movs	r2, #249	; 0xf9
 8005c20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c22:	4b1b      	ldr	r3, [pc, #108]	; (8005c90 <MX_TIM3_Init+0xa8>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c28:	4b19      	ldr	r3, [pc, #100]	; (8005c90 <MX_TIM3_Init+0xa8>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005c2e:	4818      	ldr	r0, [pc, #96]	; (8005c90 <MX_TIM3_Init+0xa8>)
 8005c30:	f005 f926 	bl	800ae80 <HAL_TIM_PWM_Init>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8005c3a:	f7ff ff57 	bl	8005aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c42:	2300      	movs	r3, #0
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005c46:	f107 0320 	add.w	r3, r7, #32
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	4810      	ldr	r0, [pc, #64]	; (8005c90 <MX_TIM3_Init+0xa8>)
 8005c4e:	f005 fe6d 	bl	800b92c <HAL_TIMEx_MasterConfigSynchronization>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8005c58:	f7ff ff48 	bl	8005aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c5c:	2360      	movs	r3, #96	; 0x60
 8005c5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c64:	2300      	movs	r3, #0
 8005c66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005c6c:	1d3b      	adds	r3, r7, #4
 8005c6e:	2200      	movs	r2, #0
 8005c70:	4619      	mov	r1, r3
 8005c72:	4807      	ldr	r0, [pc, #28]	; (8005c90 <MX_TIM3_Init+0xa8>)
 8005c74:	f005 fa04 	bl	800b080 <HAL_TIM_PWM_ConfigChannel>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8005c7e:	f7ff ff35 	bl	8005aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005c82:	4803      	ldr	r0, [pc, #12]	; (8005c90 <MX_TIM3_Init+0xa8>)
 8005c84:	f000 f89a 	bl	8005dbc <HAL_TIM_MspPostInit>

}
 8005c88:	bf00      	nop
 8005c8a:	3728      	adds	r7, #40	; 0x28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	200006b0 	.word	0x200006b0
 8005c94:	40000400 	.word	0x40000400

08005c98 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c9e:	f107 0308 	add.w	r3, r7, #8
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	605a      	str	r2, [r3, #4]
 8005ca8:	609a      	str	r2, [r3, #8]
 8005caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cac:	463b      	mov	r3, r7
 8005cae:	2200      	movs	r2, #0
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005cb4:	4b1d      	ldr	r3, [pc, #116]	; (8005d2c <MX_TIM4_Init+0x94>)
 8005cb6:	4a1e      	ldr	r2, [pc, #120]	; (8005d30 <MX_TIM4_Init+0x98>)
 8005cb8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8005cba:	4b1c      	ldr	r3, [pc, #112]	; (8005d2c <MX_TIM4_Init+0x94>)
 8005cbc:	2263      	movs	r2, #99	; 0x63
 8005cbe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cc0:	4b1a      	ldr	r3, [pc, #104]	; (8005d2c <MX_TIM4_Init+0x94>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005cc6:	4b19      	ldr	r3, [pc, #100]	; (8005d2c <MX_TIM4_Init+0x94>)
 8005cc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ccc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cce:	4b17      	ldr	r3, [pc, #92]	; (8005d2c <MX_TIM4_Init+0x94>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cd4:	4b15      	ldr	r3, [pc, #84]	; (8005d2c <MX_TIM4_Init+0x94>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005cda:	4814      	ldr	r0, [pc, #80]	; (8005d2c <MX_TIM4_Init+0x94>)
 8005cdc:	f005 f826 	bl	800ad2c <HAL_TIM_Base_Init>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8005ce6:	f7ff ff01 	bl	8005aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005cf0:	f107 0308 	add.w	r3, r7, #8
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	480d      	ldr	r0, [pc, #52]	; (8005d2c <MX_TIM4_Init+0x94>)
 8005cf8:	f005 fa84 	bl	800b204 <HAL_TIM_ConfigClockSource>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8005d02:	f7ff fef3 	bl	8005aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d06:	2300      	movs	r3, #0
 8005d08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005d0e:	463b      	mov	r3, r7
 8005d10:	4619      	mov	r1, r3
 8005d12:	4806      	ldr	r0, [pc, #24]	; (8005d2c <MX_TIM4_Init+0x94>)
 8005d14:	f005 fe0a 	bl	800b92c <HAL_TIMEx_MasterConfigSynchronization>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8005d1e:	f7ff fee5 	bl	8005aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005d22:	bf00      	nop
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	200006f8 	.word	0x200006f8
 8005d30:	40000800 	.word	0x40000800

08005d34 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a0b      	ldr	r2, [pc, #44]	; (8005d70 <HAL_TIM_PWM_MspInit+0x3c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d10d      	bne.n	8005d62 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	4b0a      	ldr	r3, [pc, #40]	; (8005d74 <HAL_TIM_PWM_MspInit+0x40>)
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	4a09      	ldr	r2, [pc, #36]	; (8005d74 <HAL_TIM_PWM_MspInit+0x40>)
 8005d50:	f043 0302 	orr.w	r3, r3, #2
 8005d54:	6413      	str	r3, [r2, #64]	; 0x40
 8005d56:	4b07      	ldr	r3, [pc, #28]	; (8005d74 <HAL_TIM_PWM_MspInit+0x40>)
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005d62:	bf00      	nop
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	40000400 	.word	0x40000400
 8005d74:	40023800 	.word	0x40023800

08005d78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a0b      	ldr	r2, [pc, #44]	; (8005db4 <HAL_TIM_Base_MspInit+0x3c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d10d      	bne.n	8005da6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	4b0a      	ldr	r3, [pc, #40]	; (8005db8 <HAL_TIM_Base_MspInit+0x40>)
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	4a09      	ldr	r2, [pc, #36]	; (8005db8 <HAL_TIM_Base_MspInit+0x40>)
 8005d94:	f043 0304 	orr.w	r3, r3, #4
 8005d98:	6413      	str	r3, [r2, #64]	; 0x40
 8005d9a:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <HAL_TIM_Base_MspInit+0x40>)
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	f003 0304 	and.w	r3, r3, #4
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005da6:	bf00      	nop
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	40000800 	.word	0x40000800
 8005db8:	40023800 	.word	0x40023800

08005dbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b088      	sub	sp, #32
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dc4:	f107 030c 	add.w	r3, r7, #12
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	605a      	str	r2, [r3, #4]
 8005dce:	609a      	str	r2, [r3, #8]
 8005dd0:	60da      	str	r2, [r3, #12]
 8005dd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a12      	ldr	r2, [pc, #72]	; (8005e24 <HAL_TIM_MspPostInit+0x68>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d11d      	bne.n	8005e1a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dde:	2300      	movs	r3, #0
 8005de0:	60bb      	str	r3, [r7, #8]
 8005de2:	4b11      	ldr	r3, [pc, #68]	; (8005e28 <HAL_TIM_MspPostInit+0x6c>)
 8005de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de6:	4a10      	ldr	r2, [pc, #64]	; (8005e28 <HAL_TIM_MspPostInit+0x6c>)
 8005de8:	f043 0301 	orr.w	r3, r3, #1
 8005dec:	6313      	str	r3, [r2, #48]	; 0x30
 8005dee:	4b0e      	ldr	r3, [pc, #56]	; (8005e28 <HAL_TIM_MspPostInit+0x6c>)
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	60bb      	str	r3, [r7, #8]
 8005df8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8005dfa:	2340      	movs	r3, #64	; 0x40
 8005dfc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dfe:	2302      	movs	r3, #2
 8005e00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e02:	2300      	movs	r3, #0
 8005e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8005e0e:	f107 030c 	add.w	r3, r7, #12
 8005e12:	4619      	mov	r1, r3
 8005e14:	4805      	ldr	r0, [pc, #20]	; (8005e2c <HAL_TIM_MspPostInit+0x70>)
 8005e16:	f003 f8d1 	bl	8008fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005e1a:	bf00      	nop
 8005e1c:	3720      	adds	r7, #32
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	40000400 	.word	0x40000400
 8005e28:	40023800 	.word	0x40023800
 8005e2c:	40020000 	.word	0x40020000

08005e30 <uUbxProtocolUint32Decode>:
    return  retValue;
}

// Return a uint32_t from a pointer to a little-endian uint32_t.
uint32_t uUbxProtocolUint32Decode(const char *pByte)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
    // Use a uint8_t pointer for maths, more certain of its behaviour than char
    const uint8_t *pInput = (const uint8_t *) pByte;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	60fb      	str	r3, [r7, #12]
    uint32_t retValue;

    retValue  = *pInput;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	60bb      	str	r3, [r7, #8]
    // Cast twice to keep Lint happy
    retValue += ((uint32_t) *(pInput + 1)) << 8;  // *NOPAD*
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3301      	adds	r3, #1
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	021b      	lsls	r3, r3, #8
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	60bb      	str	r3, [r7, #8]
    retValue += ((uint32_t) *(pInput + 2)) << 16; // *NOPAD*
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3302      	adds	r3, #2
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	041b      	lsls	r3, r3, #16
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	60bb      	str	r3, [r7, #8]
    retValue += ((uint32_t) *(pInput + 3)) << 24; // *NOPAD*
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3303      	adds	r3, #3
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	061b      	lsls	r3, r3, #24
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	4413      	add	r3, r2
 8005e6a:	60bb      	str	r3, [r7, #8]

    return retValue;
 8005e6c:	68bb      	ldr	r3, [r7, #8]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
	...

08005e7c <uUbxProtocolDecode>:
// Decode a UBX protocol message.
int32_t uUbxProtocolDecode(const char *pBufferIn, size_t bufferLengthBytes,
                           int32_t *pMessageClass, int32_t *pMessageId,
                           char *pMessage, size_t maxMessageLengthBytes,
                           const char **ppBufferOut)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b08f      	sub	sp, #60	; 0x3c
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	603b      	str	r3, [r7, #0]
    int32_t sizeOrErrorCode = (int32_t) U_ERROR_COMMON_NOT_FOUND;
 8005e8a:	f06f 030a 	mvn.w	r3, #10
 8005e8e:	637b      	str	r3, [r7, #52]	; 0x34
    // Use a uint8_t pointer for maths, more certain of its behaviour than char
    const uint8_t *pInput = (const uint8_t *) pBufferIn;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t overheadByteCount = 0;
 8005e94:	2300      	movs	r3, #0
 8005e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool updateCrc = false;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    size_t expectedMessageByteCount = 0;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	627b      	str	r3, [r7, #36]	; 0x24
    size_t messageByteCount = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	623b      	str	r3, [r7, #32]
    int32_t ca = 0;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	61fb      	str	r3, [r7, #28]
    int32_t cb = 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61bb      	str	r3, [r7, #24]

    for (size_t x = 0; (x < bufferLengthBytes) &&
 8005eae:	2300      	movs	r3, #0
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	e0b9      	b.n	8006028 <uUbxProtocolDecode+0x1ac>
         (overheadByteCount < U_UBX_PROTOCOL_OVERHEAD_LENGTH_BYTES); x++) {
        switch (overheadByteCount) {
 8005eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb6:	2b07      	cmp	r3, #7
 8005eb8:	f200 809b 	bhi.w	8005ff2 <uUbxProtocolDecode+0x176>
 8005ebc:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <uUbxProtocolDecode+0x48>)
 8005ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec2:	bf00      	nop
 8005ec4:	08005ee5 	.word	0x08005ee5
 8005ec8:	08005ef7 	.word	0x08005ef7
 8005ecc:	08005f0d 	.word	0x08005f0d
 8005ed0:	08005f33 	.word	0x08005f33
 8005ed4:	08005f51 	.word	0x08005f51
 8005ed8:	08005f65 	.word	0x08005f65
 8005edc:	08005f83 	.word	0x08005f83
 8005ee0:	08005fd3 	.word	0x08005fd3
            case 0:
                //lint -e{650} Suppress warning about 0xb5 being out of range for char
                if (*pInput == 0xb5) {
 8005ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2bb5      	cmp	r3, #181	; 0xb5
 8005eea:	f040 8085 	bne.w	8005ff8 <uUbxProtocolDecode+0x17c>
                    // Got first byte of header, increment count
                    overheadByteCount++;
 8005eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                break;
 8005ef4:	e080      	b.n	8005ff8 <uUbxProtocolDecode+0x17c>
            case 1:
                if (*pInput == 0x62) {
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	2b62      	cmp	r3, #98	; 0x62
 8005efc:	d103      	bne.n	8005f06 <uUbxProtocolDecode+0x8a>
                    // Got second byte of header, increment count
                    overheadByteCount++;
 8005efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f00:	3301      	adds	r3, #1
 8005f02:	62fb      	str	r3, [r7, #44]	; 0x2c
                } else {
                    // Not a valid message, start again
                    overheadByteCount = 0;
                }
                break;
 8005f04:	e079      	b.n	8005ffa <uUbxProtocolDecode+0x17e>
                    overheadByteCount = 0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8005f0a:	e076      	b.n	8005ffa <uUbxProtocolDecode+0x17e>
            case 2:
                // Got message class, store it, start CRC
                // calculation and increment count
                if (pMessageClass != NULL) {
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d004      	beq.n	8005f1c <uUbxProtocolDecode+0xa0>
                    *pMessageClass = *pInput;
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	601a      	str	r2, [r3, #0]
                }
                ca = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	61fb      	str	r3, [r7, #28]
                cb = 0;
 8005f20:	2300      	movs	r3, #0
 8005f22:	61bb      	str	r3, [r7, #24]
                updateCrc = true;
 8005f24:	2301      	movs	r3, #1
 8005f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                overheadByteCount++;
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8005f30:	e063      	b.n	8005ffa <uUbxProtocolDecode+0x17e>
            case 3:
                // Got message ID, store it, update CRC and
                // increment count
                if (pMessageId != NULL) {
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d004      	beq.n	8005f42 <uUbxProtocolDecode+0xc6>
                    *pMessageId = *pInput;
 8005f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	601a      	str	r2, [r3, #0]
                }
                updateCrc = true;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                overheadByteCount++;
 8005f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8005f4e:	e054      	b.n	8005ffa <uUbxProtocolDecode+0x17e>
            case 4:
                // Got first byte of length, store it, update
                // CRC and increment count
                expectedMessageByteCount = *pInput;
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	627b      	str	r3, [r7, #36]	; 0x24
                updateCrc = true;
 8005f56:	2301      	movs	r3, #1
 8005f58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                overheadByteCount++;
 8005f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5e:	3301      	adds	r3, #1
 8005f60:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8005f62:	e04a      	b.n	8005ffa <uUbxProtocolDecode+0x17e>
            case 5:
                // Got second byte of length, add it to the first,
                // updat CRC, increment count and reset the
                // message byte count ready for the body to come next.
                // Cast twice to keep Lint happy
                expectedMessageByteCount += ((size_t) *pInput) << 8; // *NOPAD*
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	021b      	lsls	r3, r3, #8
 8005f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f6c:	4413      	add	r3, r2
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24
                messageByteCount = 0;
 8005f70:	2300      	movs	r3, #0
 8005f72:	623b      	str	r3, [r7, #32]
                updateCrc = true;
 8005f74:	2301      	movs	r3, #1
 8005f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                overheadByteCount++;
 8005f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8005f80:	e03b      	b.n	8005ffa <uUbxProtocolDecode+0x17e>
            case 6:
                if (messageByteCount < expectedMessageByteCount) {
 8005f82:	6a3a      	ldr	r2, [r7, #32]
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d213      	bcs.n	8005fb2 <uUbxProtocolDecode+0x136>
                    // Store the next byte of the message and
                    // update CRC
                    if ((pMessage != NULL) && (messageByteCount < maxMessageLengthBytes)) {
 8005f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d009      	beq.n	8005fa4 <uUbxProtocolDecode+0x128>
 8005f90:	6a3a      	ldr	r2, [r7, #32]
 8005f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d205      	bcs.n	8005fa4 <uUbxProtocolDecode+0x128>
                        *pMessage++ = (char) *pInput; // *NOPAD*
 8005f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	643a      	str	r2, [r7, #64]	; 0x40
 8005f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fa0:	7812      	ldrb	r2, [r2, #0]
 8005fa2:	701a      	strb	r2, [r3, #0]
                    }
                    updateCrc = true;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    messageByteCount++;
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	3301      	adds	r3, #1
 8005fae:	623b      	str	r3, [r7, #32]
                    } else {
                        // Not a valid message, start again
                        overheadByteCount = 0;
                    }
                }
                break;
 8005fb0:	e023      	b.n	8005ffa <uUbxProtocolDecode+0x17e>
                    ca &= 0xff;
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	61fb      	str	r3, [r7, #28]
                    if ((uint8_t) ca == *pInput) {
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d103      	bne.n	8005fcc <uUbxProtocolDecode+0x150>
                        overheadByteCount++;
 8005fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8005fca:	e016      	b.n	8005ffa <uUbxProtocolDecode+0x17e>
                        overheadByteCount = 0;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8005fd0:	e013      	b.n	8005ffa <uUbxProtocolDecode+0x17e>
            case 7:
                // Second byte of CRC, check it
                cb &= 0xff;
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	61bb      	str	r3, [r7, #24]
                if ((uint8_t) cb == *pInput) {
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d103      	bne.n	8005fec <uUbxProtocolDecode+0x170>
                    overheadByteCount++;
 8005fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
                } else {
                    // Not a valid message, start again
                    overheadByteCount = 0;
                }
                break;
 8005fea:	e006      	b.n	8005ffa <uUbxProtocolDecode+0x17e>
                    overheadByteCount = 0;
 8005fec:	2300      	movs	r3, #0
 8005fee:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8005ff0:	e003      	b.n	8005ffa <uUbxProtocolDecode+0x17e>
            default:
                overheadByteCount = 0;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8005ff6:	e000      	b.n	8005ffa <uUbxProtocolDecode+0x17e>
                break;
 8005ff8:	bf00      	nop
        }

        if (updateCrc) {
 8005ffa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00c      	beq.n	800601c <uUbxProtocolDecode+0x1a0>
            ca += *pInput;
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	4413      	add	r3, r2
 800600c:	61fb      	str	r3, [r7, #28]
            cb += ca;
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	4413      	add	r3, r2
 8006014:	61bb      	str	r3, [r7, #24]
            updateCrc = false;
 8006016:	2300      	movs	r3, #0
 8006018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        // Next byte
        pInput++;
 800601c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601e:	3301      	adds	r3, #1
 8006020:	633b      	str	r3, [r7, #48]	; 0x30
         (overheadByteCount < U_UBX_PROTOCOL_OVERHEAD_LENGTH_BYTES); x++) {
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	3301      	adds	r3, #1
 8006026:	617b      	str	r3, [r7, #20]
    for (size_t x = 0; (x < bufferLengthBytes) &&
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	429a      	cmp	r2, r3
 800602e:	d203      	bcs.n	8006038 <uUbxProtocolDecode+0x1bc>
 8006030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006032:	2b07      	cmp	r3, #7
 8006034:	f77f af3e 	ble.w	8005eb4 <uUbxProtocolDecode+0x38>
    }

    if (overheadByteCount > 0) {
 8006038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603a:	2b00      	cmp	r3, #0
 800603c:	dd07      	ble.n	800604e <uUbxProtocolDecode+0x1d2>
        // We got some parts of the message overhead, so
        // could be a message
        sizeOrErrorCode = (int32_t) U_ERROR_COMMON_TIMEOUT;
 800603e:	f06f 0308 	mvn.w	r3, #8
 8006042:	637b      	str	r3, [r7, #52]	; 0x34
        if (overheadByteCount == U_UBX_PROTOCOL_OVERHEAD_LENGTH_BYTES) {
 8006044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006046:	2b08      	cmp	r3, #8
 8006048:	d101      	bne.n	800604e <uUbxProtocolDecode+0x1d2>
            // We got all the overhead bytes, this is a complete message
            sizeOrErrorCode = (int32_t) messageByteCount;
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    if (ppBufferOut != NULL) {
 800604e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <uUbxProtocolDecode+0x1de>
        *ppBufferOut =  (const char *) pInput;
 8006054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006058:	601a      	str	r2, [r3, #0]
    }

    return sizeOrErrorCode;
 800605a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800605c:	4618      	mov	r0, r3
 800605e:	373c      	adds	r7, #60	; 0x3c
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <ultrasonic_i2c_check_busy>:

inline UltrasonicData_t* get_data() {
	return &data;
}

inline static bool ultrasonic_i2c_check_busy() {
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(ul_busy_port, ul_busy_pin) == GPIO_PIN_RESET;
 800606c:	4b07      	ldr	r3, [pc, #28]	; (800608c <ultrasonic_i2c_check_busy+0x24>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a07      	ldr	r2, [pc, #28]	; (8006090 <ultrasonic_i2c_check_busy+0x28>)
 8006072:	8812      	ldrh	r2, [r2, #0]
 8006074:	4611      	mov	r1, r2
 8006076:	4618      	mov	r0, r3
 8006078:	f003 f924 	bl	80092c4 <HAL_GPIO_ReadPin>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	bf0c      	ite	eq
 8006082:	2301      	moveq	r3, #1
 8006084:	2300      	movne	r3, #0
 8006086:	b2db      	uxtb	r3, r3
}
 8006088:	4618      	mov	r0, r3
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20000744 	.word	0x20000744
 8006090:	20000748 	.word	0x20000748

08006094 <ultrasonic_i2c_write>:

int8_t ultrasonic_i2c_write(uint8_t dev_addr, UltrasonicRegIndex_e reg_addr,
		uint8_t *reg_data, uint8_t length) {
 8006094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006098:	b089      	sub	sp, #36	; 0x24
 800609a:	af02      	add	r7, sp, #8
 800609c:	603a      	str	r2, [r7, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	4603      	mov	r3, r0
 80060a2:	71fb      	strb	r3, [r7, #7]
 80060a4:	460b      	mov	r3, r1
 80060a6:	71bb      	strb	r3, [r7, #6]
 80060a8:	4613      	mov	r3, r2
 80060aa:	717b      	strb	r3, [r7, #5]
 80060ac:	466b      	mov	r3, sp
 80060ae:	461e      	mov	r6, r3
	int8_t rslt = 0;
 80060b0:	2300      	movs	r3, #0
 80060b2:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status = HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	75bb      	strb	r3, [r7, #22]
	while (HAL_I2C_IsDeviceReady(ul_i2c, (uint8_t) (dev_addr << 1), 3, 100)
 80060b8:	bf00      	nop
 80060ba:	4b2e      	ldr	r3, [pc, #184]	; (8006174 <ultrasonic_i2c_write+0xe0>)
 80060bc:	6818      	ldr	r0, [r3, #0]
 80060be:	79fb      	ldrb	r3, [r7, #7]
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	b299      	uxth	r1, r3
 80060c6:	2364      	movs	r3, #100	; 0x64
 80060c8:	2203      	movs	r2, #3
 80060ca:	f003 fd7b 	bl	8009bc4 <HAL_I2C_IsDeviceReady>
 80060ce:	4603      	mov	r3, r0
			!= HAL_OK) {
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1f2      	bne.n	80060ba <ultrasonic_i2c_write+0x26>
	}
	uint8_t tx_buffer[length + 1];
 80060d4:	797b      	ldrb	r3, [r7, #5]
 80060d6:	1c59      	adds	r1, r3, #1
 80060d8:	1e4b      	subs	r3, r1, #1
 80060da:	613b      	str	r3, [r7, #16]
 80060dc:	460a      	mov	r2, r1
 80060de:	2300      	movs	r3, #0
 80060e0:	4690      	mov	r8, r2
 80060e2:	4699      	mov	r9, r3
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060f8:	460a      	mov	r2, r1
 80060fa:	2300      	movs	r3, #0
 80060fc:	4614      	mov	r4, r2
 80060fe:	461d      	mov	r5, r3
 8006100:	f04f 0200 	mov.w	r2, #0
 8006104:	f04f 0300 	mov.w	r3, #0
 8006108:	00eb      	lsls	r3, r5, #3
 800610a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800610e:	00e2      	lsls	r2, r4, #3
 8006110:	460b      	mov	r3, r1
 8006112:	3307      	adds	r3, #7
 8006114:	08db      	lsrs	r3, r3, #3
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	ebad 0d03 	sub.w	sp, sp, r3
 800611c:	ab02      	add	r3, sp, #8
 800611e:	3300      	adds	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]
	tx_buffer[0] = reg_addr;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	79ba      	ldrb	r2, [r7, #6]
 8006126:	701a      	strb	r2, [r3, #0]
	memcpy(&tx_buffer[1], reg_data, length);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	3301      	adds	r3, #1
 800612c:	797a      	ldrb	r2, [r7, #5]
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	4618      	mov	r0, r3
 8006132:	f007 fcb6 	bl	800daa2 <memcpy>
	status = HAL_I2C_Master_Transmit(ul_i2c, (uint8_t) (dev_addr << 1),
 8006136:	4b0f      	ldr	r3, [pc, #60]	; (8006174 <ultrasonic_i2c_write+0xe0>)
 8006138:	6818      	ldr	r0, [r3, #0]
 800613a:	79fb      	ldrb	r3, [r7, #7]
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	b2db      	uxtb	r3, r3
 8006140:	b299      	uxth	r1, r3
 8006142:	797b      	ldrb	r3, [r7, #5]
 8006144:	b29b      	uxth	r3, r3
 8006146:	3301      	adds	r3, #1
 8006148:	b29b      	uxth	r3, r3
 800614a:	2264      	movs	r2, #100	; 0x64
 800614c:	9200      	str	r2, [sp, #0]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	f003 fa14 	bl	800957c <HAL_I2C_Master_Transmit>
 8006154:	4603      	mov	r3, r0
 8006156:	75bb      	strb	r3, [r7, #22]
			tx_buffer, length + 1, 100);
	if (status != HAL_OK) {
 8006158:	7dbb      	ldrb	r3, [r7, #22]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <ultrasonic_i2c_write+0xce>
		rslt = (-1);
 800615e:	23ff      	movs	r3, #255	; 0xff
 8006160:	75fb      	strb	r3, [r7, #23]
	}
	return rslt;
 8006162:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006166:	46b5      	mov	sp, r6
}
 8006168:	4618      	mov	r0, r3
 800616a:	371c      	adds	r7, #28
 800616c:	46bd      	mov	sp, r7
 800616e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006172:	bf00      	nop
 8006174:	20000740 	.word	0x20000740

08006178 <ultrasonic_i2c_read>:

int8_t ultrasonic_i2c_read(uint8_t dev_addr, UltrasonicRegIndex_e reg_addr,
		uint8_t *reg_data, uint8_t length) {
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af02      	add	r7, sp, #8
 800617e:	603a      	str	r2, [r7, #0]
 8006180:	461a      	mov	r2, r3
 8006182:	4603      	mov	r3, r0
 8006184:	71fb      	strb	r3, [r7, #7]
 8006186:	460b      	mov	r3, r1
 8006188:	71bb      	strb	r3, [r7, #6]
 800618a:	4613      	mov	r3, r2
 800618c:	717b      	strb	r3, [r7, #5]
	int8_t rslt = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	73bb      	strb	r3, [r7, #14]
	while (HAL_I2C_IsDeviceReady(ul_i2c, (uint8_t) (dev_addr << 1), 3, 100)
 8006196:	e001      	b.n	800619c <ultrasonic_i2c_read+0x24>
			!= HAL_OK) {
		rslt = 0;
 8006198:	2300      	movs	r3, #0
 800619a:	73fb      	strb	r3, [r7, #15]
	while (HAL_I2C_IsDeviceReady(ul_i2c, (uint8_t) (dev_addr << 1), 3, 100)
 800619c:	4b1c      	ldr	r3, [pc, #112]	; (8006210 <ultrasonic_i2c_read+0x98>)
 800619e:	6818      	ldr	r0, [r3, #0]
 80061a0:	79fb      	ldrb	r3, [r7, #7]
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	b299      	uxth	r1, r3
 80061a8:	2364      	movs	r3, #100	; 0x64
 80061aa:	2203      	movs	r2, #3
 80061ac:	f003 fd0a 	bl	8009bc4 <HAL_I2C_IsDeviceReady>
 80061b0:	4603      	mov	r3, r0
			!= HAL_OK) {
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1f0      	bne.n	8006198 <ultrasonic_i2c_read+0x20>
	}
	status = HAL_I2C_Master_Transmit(ul_i2c, (uint8_t) (dev_addr << 1),
 80061b6:	4b16      	ldr	r3, [pc, #88]	; (8006210 <ultrasonic_i2c_read+0x98>)
 80061b8:	6818      	ldr	r0, [r3, #0]
 80061ba:	79fb      	ldrb	r3, [r7, #7]
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	b299      	uxth	r1, r3
 80061c2:	1dba      	adds	r2, r7, #6
 80061c4:	2364      	movs	r3, #100	; 0x64
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	2301      	movs	r3, #1
 80061ca:	f003 f9d7 	bl	800957c <HAL_I2C_Master_Transmit>
 80061ce:	4603      	mov	r3, r0
 80061d0:	73bb      	strb	r3, [r7, #14]
			&reg_addr, 1, 100);
	if (status != HAL_OK) {
 80061d2:	7bbb      	ldrb	r3, [r7, #14]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <ultrasonic_i2c_read+0x64>
		rslt = (-1);
 80061d8:	23ff      	movs	r3, #255	; 0xff
 80061da:	73fb      	strb	r3, [r7, #15]
	}
	status = HAL_I2C_Master_Receive(ul_i2c, (uint8_t) (dev_addr << 1), reg_data,
 80061dc:	4b0c      	ldr	r3, [pc, #48]	; (8006210 <ultrasonic_i2c_read+0x98>)
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	79fb      	ldrb	r3, [r7, #7]
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	b299      	uxth	r1, r3
 80061e8:	797b      	ldrb	r3, [r7, #5]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	2264      	movs	r2, #100	; 0x64
 80061ee:	9200      	str	r2, [sp, #0]
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	f003 fac1 	bl	8009778 <HAL_I2C_Master_Receive>
 80061f6:	4603      	mov	r3, r0
 80061f8:	73bb      	strb	r3, [r7, #14]
			length, 100);
	if (status != HAL_OK) {
 80061fa:	7bbb      	ldrb	r3, [r7, #14]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <ultrasonic_i2c_read+0x8c>
		rslt = (-1);
 8006200:	23ff      	movs	r3, #255	; 0xff
 8006202:	73fb      	strb	r3, [r7, #15]
	}
	return rslt;
 8006204:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	20000740 	.word	0x20000740

08006214 <ultrasonic_init>:

void ultrasonic_init(I2C_HandleTypeDef *iic, GPIO_TypeDef *gpio_port, uint16_t gpio_pin) {
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	4613      	mov	r3, r2
 8006220:	80fb      	strh	r3, [r7, #6]
	ul_i2c = iic;
 8006222:	4a19      	ldr	r2, [pc, #100]	; (8006288 <ultrasonic_init+0x74>)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6013      	str	r3, [r2, #0]
	ul_busy_port = gpio_port;
 8006228:	4a18      	ldr	r2, [pc, #96]	; (800628c <ultrasonic_init+0x78>)
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	6013      	str	r3, [r2, #0]
	ul_busy_pin = gpio_pin;
 800622e:	4a18      	ldr	r2, [pc, #96]	; (8006290 <ultrasonic_init+0x7c>)
 8006230:	88fb      	ldrh	r3, [r7, #6]
 8006232:	8013      	strh	r3, [r2, #0]
	cfg &= ~I2C_MEASURE_RANGE_BIT; //clear bit4,long-range ranging mode
 8006234:	4b17      	ldr	r3, [pc, #92]	; (8006294 <ultrasonic_init+0x80>)
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	f023 0310 	bic.w	r3, r3, #16
 800623c:	b2da      	uxtb	r2, r3
 800623e:	4b15      	ldr	r3, [pc, #84]	; (8006294 <ultrasonic_init+0x80>)
 8006240:	701a      	strb	r2, [r3, #0]
	cfg |= I2C_MEASURE_MODE_BIT;	  //Set bit2，i2c passive mode
 8006242:	4b14      	ldr	r3, [pc, #80]	; (8006294 <ultrasonic_init+0x80>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	f043 0304 	orr.w	r3, r3, #4
 800624a:	b2da      	uxtb	r2, r3
 800624c:	4b11      	ldr	r3, [pc, #68]	; (8006294 <ultrasonic_init+0x80>)
 800624e:	701a      	strb	r2, [r3, #0]
	cfg &= ~I2C_TEMP_CPT_ENABLE_BIT;//clear bit1,enable temperature compensation
 8006250:	4b10      	ldr	r3, [pc, #64]	; (8006294 <ultrasonic_init+0x80>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	f023 0302 	bic.w	r3, r3, #2
 8006258:	b2da      	uxtb	r2, r3
 800625a:	4b0e      	ldr	r3, [pc, #56]	; (8006294 <ultrasonic_init+0x80>)
 800625c:	701a      	strb	r2, [r3, #0]
	cfg &= ~I2C_TEMP_CPT_SEL_BIT;//clear bit0,select internal temperature compensation
 800625e:	4b0d      	ldr	r3, [pc, #52]	; (8006294 <ultrasonic_init+0x80>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	f023 0301 	bic.w	r3, r3, #1
 8006266:	b2da      	uxtb	r2, r3
 8006268:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <ultrasonic_init+0x80>)
 800626a:	701a      	strb	r2, [r3, #0]
	ultrasonic_i2c_write(I2C_SLAVE_ADDR, iConfig, &cfg, 1);
 800626c:	2301      	movs	r3, #1
 800626e:	4a09      	ldr	r2, [pc, #36]	; (8006294 <ultrasonic_init+0x80>)
 8006270:	2109      	movs	r1, #9
 8006272:	2012      	movs	r0, #18
 8006274:	f7ff ff0e 	bl	8006094 <ultrasonic_i2c_write>
	HAL_Delay(100);
 8006278:	2064      	movs	r0, #100	; 0x64
 800627a:	f002 fccb 	bl	8008c14 <HAL_Delay>
}
 800627e:	bf00      	nop
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	20000740 	.word	0x20000740
 800628c:	20000744 	.word	0x20000744
 8006290:	20000748 	.word	0x20000748
 8006294:	2000074a 	.word	0x2000074a

08006298 <ultrasonic_get_data>:

int16_t ultrasonic_get_data() {
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
	cmd |= 0x01;	//Set trig bit
 800629c:	4b1c      	ldr	r3, [pc, #112]	; (8006310 <ultrasonic_get_data+0x78>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	f043 0301 	orr.w	r3, r3, #1
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	4b1a      	ldr	r3, [pc, #104]	; (8006310 <ultrasonic_get_data+0x78>)
 80062a8:	701a      	strb	r2, [r3, #0]
	ultrasonic_i2c_write(I2C_SLAVE_ADDR, iCmd, &cmd, 1);//Write command register
 80062aa:	2301      	movs	r3, #1
 80062ac:	4a18      	ldr	r2, [pc, #96]	; (8006310 <ultrasonic_get_data+0x78>)
 80062ae:	210a      	movs	r1, #10
 80062b0:	2012      	movs	r0, #18
 80062b2:	f7ff feef 	bl	8006094 <ultrasonic_i2c_write>
	while (ultrasonic_i2c_check_busy())
 80062b6:	bf00      	nop
 80062b8:	f7ff fed6 	bl	8006068 <ultrasonic_i2c_check_busy>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1fa      	bne.n	80062b8 <ultrasonic_get_data+0x20>
		;  //Wait for the sensor to start ranging
	while (!ultrasonic_i2c_check_busy())
 80062c2:	bf00      	nop
 80062c4:	f7ff fed0 	bl	8006068 <ultrasonic_i2c_check_busy>
 80062c8:	4603      	mov	r3, r0
 80062ca:	f083 0301 	eor.w	r3, r3, #1
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1f7      	bne.n	80062c4 <ultrasonic_get_data+0x2c>
		;   //Wait for sensor ranging to complete
	ultrasonic_i2c_read(I2C_SLAVE_ADDR, iDistanceH, rxBuf, 2); //Read distance register
 80062d4:	2302      	movs	r3, #2
 80062d6:	4a0f      	ldr	r2, [pc, #60]	; (8006314 <ultrasonic_get_data+0x7c>)
 80062d8:	2103      	movs	r1, #3
 80062da:	2012      	movs	r0, #18
 80062dc:	f7ff ff4c 	bl	8006178 <ultrasonic_i2c_read>
	distance = ((uint16_t) rxBuf[0] << 8) + rxBuf[1];
 80062e0:	4b0c      	ldr	r3, [pc, #48]	; (8006314 <ultrasonic_get_data+0x7c>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	021b      	lsls	r3, r3, #8
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	4b0a      	ldr	r3, [pc, #40]	; (8006314 <ultrasonic_get_data+0x7c>)
 80062ec:	785b      	ldrb	r3, [r3, #1]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	4413      	add	r3, r2
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	b21a      	sxth	r2, r3
 80062f6:	4b08      	ldr	r3, [pc, #32]	; (8006318 <ultrasonic_get_data+0x80>)
 80062f8:	801a      	strh	r2, [r3, #0]
	data.distance = distance;
 80062fa:	4b07      	ldr	r3, [pc, #28]	; (8006318 <ultrasonic_get_data+0x80>)
 80062fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006300:	4b06      	ldr	r3, [pc, #24]	; (800631c <ultrasonic_get_data+0x84>)
 8006302:	801a      	strh	r2, [r3, #0]
//	HAL_Delay(10);
//	ultrasonic_i2c_read(I2C_SLAVE_ADDR, iInternalTempretureH, rxBuf, 2); //Read the onboard temperature register
//	temperature = ((uint16_t) rxBuf[0] << 8) + rxBuf[1];
//	temperature /= 10;
//	data.temperature = temperature;
	return distance;
 8006304:	4b04      	ldr	r3, [pc, #16]	; (8006318 <ultrasonic_get_data+0x80>)
 8006306:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800630a:	4618      	mov	r0, r3
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	2000074b 	.word	0x2000074b
 8006314:	2000074c 	.word	0x2000074c
 8006318:	20000756 	.word	0x20000756
 800631c:	20000758 	.word	0x20000758

08006320 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006324:	4b11      	ldr	r3, [pc, #68]	; (800636c <MX_USART1_UART_Init+0x4c>)
 8006326:	4a12      	ldr	r2, [pc, #72]	; (8006370 <MX_USART1_UART_Init+0x50>)
 8006328:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800632a:	4b10      	ldr	r3, [pc, #64]	; (800636c <MX_USART1_UART_Init+0x4c>)
 800632c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006330:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006332:	4b0e      	ldr	r3, [pc, #56]	; (800636c <MX_USART1_UART_Init+0x4c>)
 8006334:	2200      	movs	r2, #0
 8006336:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006338:	4b0c      	ldr	r3, [pc, #48]	; (800636c <MX_USART1_UART_Init+0x4c>)
 800633a:	2200      	movs	r2, #0
 800633c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800633e:	4b0b      	ldr	r3, [pc, #44]	; (800636c <MX_USART1_UART_Init+0x4c>)
 8006340:	2200      	movs	r2, #0
 8006342:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006344:	4b09      	ldr	r3, [pc, #36]	; (800636c <MX_USART1_UART_Init+0x4c>)
 8006346:	220c      	movs	r2, #12
 8006348:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800634a:	4b08      	ldr	r3, [pc, #32]	; (800636c <MX_USART1_UART_Init+0x4c>)
 800634c:	2200      	movs	r2, #0
 800634e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006350:	4b06      	ldr	r3, [pc, #24]	; (800636c <MX_USART1_UART_Init+0x4c>)
 8006352:	2200      	movs	r2, #0
 8006354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006356:	4805      	ldr	r0, [pc, #20]	; (800636c <MX_USART1_UART_Init+0x4c>)
 8006358:	f005 fb56 	bl	800ba08 <HAL_UART_Init>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006362:	f7ff fbc3 	bl	8005aec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006366:	bf00      	nop
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	20000760 	.word	0x20000760
 8006370:	40011000 	.word	0x40011000

08006374 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006378:	4b11      	ldr	r3, [pc, #68]	; (80063c0 <MX_USART2_UART_Init+0x4c>)
 800637a:	4a12      	ldr	r2, [pc, #72]	; (80063c4 <MX_USART2_UART_Init+0x50>)
 800637c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800637e:	4b10      	ldr	r3, [pc, #64]	; (80063c0 <MX_USART2_UART_Init+0x4c>)
 8006380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006386:	4b0e      	ldr	r3, [pc, #56]	; (80063c0 <MX_USART2_UART_Init+0x4c>)
 8006388:	2200      	movs	r2, #0
 800638a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800638c:	4b0c      	ldr	r3, [pc, #48]	; (80063c0 <MX_USART2_UART_Init+0x4c>)
 800638e:	2200      	movs	r2, #0
 8006390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006392:	4b0b      	ldr	r3, [pc, #44]	; (80063c0 <MX_USART2_UART_Init+0x4c>)
 8006394:	2200      	movs	r2, #0
 8006396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006398:	4b09      	ldr	r3, [pc, #36]	; (80063c0 <MX_USART2_UART_Init+0x4c>)
 800639a:	220c      	movs	r2, #12
 800639c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800639e:	4b08      	ldr	r3, [pc, #32]	; (80063c0 <MX_USART2_UART_Init+0x4c>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80063a4:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <MX_USART2_UART_Init+0x4c>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80063aa:	4805      	ldr	r0, [pc, #20]	; (80063c0 <MX_USART2_UART_Init+0x4c>)
 80063ac:	f005 fb2c 	bl	800ba08 <HAL_UART_Init>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80063b6:	f7ff fb99 	bl	8005aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80063ba:	bf00      	nop
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	200007d4 	.word	0x200007d4
 80063c4:	40004400 	.word	0x40004400

080063c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08c      	sub	sp, #48	; 0x30
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063d0:	f107 031c 	add.w	r3, r7, #28
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	605a      	str	r2, [r3, #4]
 80063da:	609a      	str	r2, [r3, #8]
 80063dc:	60da      	str	r2, [r3, #12]
 80063de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a3a      	ldr	r2, [pc, #232]	; (80064d0 <HAL_UART_MspInit+0x108>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d135      	bne.n	8006456 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80063ea:	2300      	movs	r3, #0
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	4b39      	ldr	r3, [pc, #228]	; (80064d4 <HAL_UART_MspInit+0x10c>)
 80063f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f2:	4a38      	ldr	r2, [pc, #224]	; (80064d4 <HAL_UART_MspInit+0x10c>)
 80063f4:	f043 0310 	orr.w	r3, r3, #16
 80063f8:	6453      	str	r3, [r2, #68]	; 0x44
 80063fa:	4b36      	ldr	r3, [pc, #216]	; (80064d4 <HAL_UART_MspInit+0x10c>)
 80063fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	61bb      	str	r3, [r7, #24]
 8006404:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006406:	2300      	movs	r3, #0
 8006408:	617b      	str	r3, [r7, #20]
 800640a:	4b32      	ldr	r3, [pc, #200]	; (80064d4 <HAL_UART_MspInit+0x10c>)
 800640c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640e:	4a31      	ldr	r2, [pc, #196]	; (80064d4 <HAL_UART_MspInit+0x10c>)
 8006410:	f043 0301 	orr.w	r3, r3, #1
 8006414:	6313      	str	r3, [r2, #48]	; 0x30
 8006416:	4b2f      	ldr	r3, [pc, #188]	; (80064d4 <HAL_UART_MspInit+0x10c>)
 8006418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8006422:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006428:	2302      	movs	r3, #2
 800642a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800642c:	2300      	movs	r3, #0
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006430:	2302      	movs	r3, #2
 8006432:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006434:	2307      	movs	r3, #7
 8006436:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006438:	f107 031c 	add.w	r3, r7, #28
 800643c:	4619      	mov	r1, r3
 800643e:	4826      	ldr	r0, [pc, #152]	; (80064d8 <HAL_UART_MspInit+0x110>)
 8006440:	f002 fdbc 	bl	8008fbc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006444:	2200      	movs	r2, #0
 8006446:	2100      	movs	r1, #0
 8006448:	2025      	movs	r0, #37	; 0x25
 800644a:	f002 fce2 	bl	8008e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800644e:	2025      	movs	r0, #37	; 0x25
 8006450:	f002 fcfb 	bl	8008e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006454:	e038      	b.n	80064c8 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a20      	ldr	r2, [pc, #128]	; (80064dc <HAL_UART_MspInit+0x114>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d133      	bne.n	80064c8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006460:	2300      	movs	r3, #0
 8006462:	613b      	str	r3, [r7, #16]
 8006464:	4b1b      	ldr	r3, [pc, #108]	; (80064d4 <HAL_UART_MspInit+0x10c>)
 8006466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006468:	4a1a      	ldr	r2, [pc, #104]	; (80064d4 <HAL_UART_MspInit+0x10c>)
 800646a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800646e:	6413      	str	r3, [r2, #64]	; 0x40
 8006470:	4b18      	ldr	r3, [pc, #96]	; (80064d4 <HAL_UART_MspInit+0x10c>)
 8006472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006478:	613b      	str	r3, [r7, #16]
 800647a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800647c:	2300      	movs	r3, #0
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	4b14      	ldr	r3, [pc, #80]	; (80064d4 <HAL_UART_MspInit+0x10c>)
 8006482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006484:	4a13      	ldr	r2, [pc, #76]	; (80064d4 <HAL_UART_MspInit+0x10c>)
 8006486:	f043 0301 	orr.w	r3, r3, #1
 800648a:	6313      	str	r3, [r2, #48]	; 0x30
 800648c:	4b11      	ldr	r3, [pc, #68]	; (80064d4 <HAL_UART_MspInit+0x10c>)
 800648e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FC_TX_Pin|FC_RX_Pin;
 8006498:	230c      	movs	r3, #12
 800649a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800649c:	2302      	movs	r3, #2
 800649e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064a4:	2303      	movs	r3, #3
 80064a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80064a8:	2307      	movs	r3, #7
 80064aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064ac:	f107 031c 	add.w	r3, r7, #28
 80064b0:	4619      	mov	r1, r3
 80064b2:	4809      	ldr	r0, [pc, #36]	; (80064d8 <HAL_UART_MspInit+0x110>)
 80064b4:	f002 fd82 	bl	8008fbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80064b8:	2200      	movs	r2, #0
 80064ba:	2100      	movs	r1, #0
 80064bc:	2026      	movs	r0, #38	; 0x26
 80064be:	f002 fca8 	bl	8008e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80064c2:	2026      	movs	r0, #38	; 0x26
 80064c4:	f002 fcc1 	bl	8008e4a <HAL_NVIC_EnableIRQ>
}
 80064c8:	bf00      	nop
 80064ca:	3730      	adds	r7, #48	; 0x30
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	40011000 	.word	0x40011000
 80064d4:	40023800 	.word	0x40023800
 80064d8:	40020000 	.word	0x40020000
 80064dc:	40004400 	.word	0x40004400

080064e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80064e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006518 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80064e4:	480d      	ldr	r0, [pc, #52]	; (800651c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80064e6:	490e      	ldr	r1, [pc, #56]	; (8006520 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80064e8:	4a0e      	ldr	r2, [pc, #56]	; (8006524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80064ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80064ec:	e002      	b.n	80064f4 <LoopCopyDataInit>

080064ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80064ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80064f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80064f2:	3304      	adds	r3, #4

080064f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80064f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80064f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80064f8:	d3f9      	bcc.n	80064ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80064fa:	4a0b      	ldr	r2, [pc, #44]	; (8006528 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80064fc:	4c0b      	ldr	r4, [pc, #44]	; (800652c <LoopFillZerobss+0x26>)
  movs r3, #0
 80064fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006500:	e001      	b.n	8006506 <LoopFillZerobss>

08006502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006504:	3204      	adds	r2, #4

08006506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006508:	d3fb      	bcc.n	8006502 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800650a:	f7ff fb5b 	bl	8005bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800650e:	f007 fa99 	bl	800da44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006512:	f7ff fa01 	bl	8005918 <main>
  bx  lr    
 8006516:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006518:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800651c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006520:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8006524:	0800edec 	.word	0x0800edec
  ldr r2, =_sbss
 8006528:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 800652c:	20000fec 	.word	0x20000fec

08006530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006530:	e7fe      	b.n	8006530 <ADC_IRQHandler>
	...

08006534 <ahrs_fusion_ag>:
	weighted_average.z = ahrs_weighted_average(avg1->axis->AXIS_Z,
			avg1->priority, avg2->axis->AXIS_Z, avg2->priority);
	return &weighted_average;
}

void ahrs_fusion_ag(AxesRaw_t *accel, AxesRaw_t *gyro, AhrsState_t *ahrs) {
 8006534:	b580      	push	{r7, lr}
 8006536:	b09a      	sub	sp, #104	; 0x68
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
	float vx, vy, vz;
	float ex, ey, ez;
	float halfT;
	float q0q0, q0q1, q0q2, /*q0q3,*/q1q1, /*q1q2,*/q1q3, q2q2, q2q3, q3q3;

	if (gTHR < MIN_THROTTLE_ONESHOT42) {
 8006540:	4b05      	ldr	r3, [pc, #20]	; (8006558 <ahrs_fusion_ag+0x24>)
 8006542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006546:	f241 0272 	movw	r2, #4210	; 0x1072
 800654a:	4293      	cmp	r3, r2
 800654c:	da0a      	bge.n	8006564 <ahrs_fusion_ag+0x30>
		ahrs_kp = AHRS_KP_BIG;
 800654e:	4a03      	ldr	r2, [pc, #12]	; (800655c <ahrs_fusion_ag+0x28>)
 8006550:	4b03      	ldr	r3, [pc, #12]	; (8006560 <ahrs_fusion_ag+0x2c>)
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	e009      	b.n	800656a <ahrs_fusion_ag+0x36>
 8006556:	bf00      	nop
 8006558:	2000026c 	.word	0x2000026c
 800655c:	41200000 	.word	0x41200000
 8006560:	20000860 	.word	0x20000860
	} else {
		ahrs_kp = AHRS_KP_NORM;
 8006564:	4ae5      	ldr	r2, [pc, #916]	; (80068fc <ahrs_fusion_ag+0x3c8>)
 8006566:	4be6      	ldr	r3, [pc, #920]	; (8006900 <ahrs_fusion_ag+0x3cc>)
 8006568:	601a      	str	r2, [r3, #0]
	}

	axf = (float) accel->AXIS_X;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006570:	ee07 3a90 	vmov	s15, r3
 8006574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006578:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	ayf = (float) accel->AXIS_Y;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006582:	ee07 3a90 	vmov	s15, r3
 8006586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800658a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	azf = (float) accel->AXIS_Z;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006594:	ee07 3a90 	vmov	s15, r3
 8006598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800659c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

// mdps convert to rad/s
	gxf = ((float) gyro->AXIS_X) * ((float) COE_DPS_TO_RADPS);
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065a6:	ee07 3a90 	vmov	s15, r3
 80065aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065ae:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 8006904 <ahrs_fusion_ag+0x3d0>
 80065b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065b6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	gyf = ((float) gyro->AXIS_Y) * ((float) COE_DPS_TO_RADPS);
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80065c0:	ee07 3a90 	vmov	s15, r3
 80065c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065c8:	ed9f 7ace 	vldr	s14, [pc, #824]	; 8006904 <ahrs_fusion_ag+0x3d0>
 80065cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065d0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	gzf = ((float) gyro->AXIS_Z) * ((float) COE_DPS_TO_RADPS);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80065da:	ee07 3a90 	vmov	s15, r3
 80065de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065e2:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 8006904 <ahrs_fusion_ag+0x3d0>
 80065e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065ea:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

// auxiliary variables to reduce number of repeated operations
	q0q0 = q0 * q0;
 80065ee:	4bc6      	ldr	r3, [pc, #792]	; (8006908 <ahrs_fusion_ag+0x3d4>)
 80065f0:	ed93 7a00 	vldr	s14, [r3]
 80065f4:	4bc4      	ldr	r3, [pc, #784]	; (8006908 <ahrs_fusion_ag+0x3d4>)
 80065f6:	edd3 7a00 	vldr	s15, [r3]
 80065fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065fe:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	q0q1 = q0 * q1;
 8006602:	4bc1      	ldr	r3, [pc, #772]	; (8006908 <ahrs_fusion_ag+0x3d4>)
 8006604:	ed93 7a00 	vldr	s14, [r3]
 8006608:	4bc0      	ldr	r3, [pc, #768]	; (800690c <ahrs_fusion_ag+0x3d8>)
 800660a:	edd3 7a00 	vldr	s15, [r3]
 800660e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006612:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	q0q2 = q0 * q2;
 8006616:	4bbc      	ldr	r3, [pc, #752]	; (8006908 <ahrs_fusion_ag+0x3d4>)
 8006618:	ed93 7a00 	vldr	s14, [r3]
 800661c:	4bbc      	ldr	r3, [pc, #752]	; (8006910 <ahrs_fusion_ag+0x3dc>)
 800661e:	edd3 7a00 	vldr	s15, [r3]
 8006622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006626:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
//q0q3 = q0*q3;
	q1q1 = q1 * q1;
 800662a:	4bb8      	ldr	r3, [pc, #736]	; (800690c <ahrs_fusion_ag+0x3d8>)
 800662c:	ed93 7a00 	vldr	s14, [r3]
 8006630:	4bb6      	ldr	r3, [pc, #728]	; (800690c <ahrs_fusion_ag+0x3d8>)
 8006632:	edd3 7a00 	vldr	s15, [r3]
 8006636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800663a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
//q1q2 = q1*q2;
	q1q3 = q1 * q3;
 800663e:	4bb3      	ldr	r3, [pc, #716]	; (800690c <ahrs_fusion_ag+0x3d8>)
 8006640:	ed93 7a00 	vldr	s14, [r3]
 8006644:	4bb3      	ldr	r3, [pc, #716]	; (8006914 <ahrs_fusion_ag+0x3e0>)
 8006646:	edd3 7a00 	vldr	s15, [r3]
 800664a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800664e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	q2q2 = q2 * q2;
 8006652:	4baf      	ldr	r3, [pc, #700]	; (8006910 <ahrs_fusion_ag+0x3dc>)
 8006654:	ed93 7a00 	vldr	s14, [r3]
 8006658:	4bad      	ldr	r3, [pc, #692]	; (8006910 <ahrs_fusion_ag+0x3dc>)
 800665a:	edd3 7a00 	vldr	s15, [r3]
 800665e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006662:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	q2q3 = q2 * q3;
 8006666:	4baa      	ldr	r3, [pc, #680]	; (8006910 <ahrs_fusion_ag+0x3dc>)
 8006668:	ed93 7a00 	vldr	s14, [r3]
 800666c:	4ba9      	ldr	r3, [pc, #676]	; (8006914 <ahrs_fusion_ag+0x3e0>)
 800666e:	edd3 7a00 	vldr	s15, [r3]
 8006672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006676:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	q3q3 = q3 * q3;
 800667a:	4ba6      	ldr	r3, [pc, #664]	; (8006914 <ahrs_fusion_ag+0x3e0>)
 800667c:	ed93 7a00 	vldr	s14, [r3]
 8006680:	4ba4      	ldr	r3, [pc, #656]	; (8006914 <ahrs_fusion_ag+0x3e0>)
 8006682:	edd3 7a00 	vldr	s15, [r3]
 8006686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800668a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

// normalise the accelerometer measurement
	norm = math_inv_sqrt(axf * axf + ayf * ayf + azf * azf);
 800668e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006692:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006696:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800669a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800669e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066a2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80066a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80066aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066ae:	eeb0 0a67 	vmov.f32	s0, s15
 80066b2:	f000 fa5d 	bl	8006b70 <math_inv_sqrt>
 80066b6:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

	axf = axf * norm;
 80066ba:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80066be:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80066c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	ayf = ayf * norm;
 80066ca:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80066ce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80066d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	azf = azf * norm;
 80066da:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80066de:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80066e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

// estimated direction of gravity and flux (v and w)
	vx = 2 * (q1q3 - q0q2);
 80066ea:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80066ee:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80066f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80066fa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	vy = 2 * (q0q1 + q2q3);
 80066fe:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8006702:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800670a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800670e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	vz = q0q0 - q1q1 - q2q2 + q3q3;
 8006712:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006716:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800671a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800671e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006726:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800672a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800672e:	edc7 7a08 	vstr	s15, [r7, #32]

	ex = (ayf * vz - azf * vy);
 8006732:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8006736:	edd7 7a08 	vldr	s15, [r7, #32]
 800673a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800673e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8006742:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800674a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800674e:	edc7 7a07 	vstr	s15, [r7, #28]
	ey = (azf * vx - axf * vz);
 8006752:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006756:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800675a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800675e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8006762:	edd7 7a08 	vldr	s15, [r7, #32]
 8006766:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800676a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800676e:	edc7 7a06 	vstr	s15, [r7, #24]
	ez = (axf * vy - ayf * vx);
 8006772:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8006776:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800677a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800677e:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8006782:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006786:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800678a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800678e:	edc7 7a05 	vstr	s15, [r7, #20]

// integral error scaled integral gain
	exInt = exInt + ex * AHRS_KI * SENSOR_SAMPLING_TIME;
 8006792:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8006918 <ahrs_fusion_ag+0x3e4>
 8006796:	edd7 7a07 	vldr	s15, [r7, #28]
 800679a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800679e:	4b5f      	ldr	r3, [pc, #380]	; (800691c <ahrs_fusion_ag+0x3e8>)
 80067a0:	edd3 7a00 	vldr	s15, [r3]
 80067a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067a8:	4b5d      	ldr	r3, [pc, #372]	; (8006920 <ahrs_fusion_ag+0x3ec>)
 80067aa:	edd3 7a00 	vldr	s15, [r3]
 80067ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067b2:	4b5b      	ldr	r3, [pc, #364]	; (8006920 <ahrs_fusion_ag+0x3ec>)
 80067b4:	edc3 7a00 	vstr	s15, [r3]
	eyInt = eyInt + ey * AHRS_KI * SENSOR_SAMPLING_TIME;
 80067b8:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8006918 <ahrs_fusion_ag+0x3e4>
 80067bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80067c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067c4:	4b55      	ldr	r3, [pc, #340]	; (800691c <ahrs_fusion_ag+0x3e8>)
 80067c6:	edd3 7a00 	vldr	s15, [r3]
 80067ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067ce:	4b55      	ldr	r3, [pc, #340]	; (8006924 <ahrs_fusion_ag+0x3f0>)
 80067d0:	edd3 7a00 	vldr	s15, [r3]
 80067d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067d8:	4b52      	ldr	r3, [pc, #328]	; (8006924 <ahrs_fusion_ag+0x3f0>)
 80067da:	edc3 7a00 	vstr	s15, [r3]
	ezInt = ezInt + ez * AHRS_KI * SENSOR_SAMPLING_TIME;
 80067de:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8006918 <ahrs_fusion_ag+0x3e4>
 80067e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80067e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067ea:	4b4c      	ldr	r3, [pc, #304]	; (800691c <ahrs_fusion_ag+0x3e8>)
 80067ec:	edd3 7a00 	vldr	s15, [r3]
 80067f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067f4:	4b4c      	ldr	r3, [pc, #304]	; (8006928 <ahrs_fusion_ag+0x3f4>)
 80067f6:	edd3 7a00 	vldr	s15, [r3]
 80067fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067fe:	4b4a      	ldr	r3, [pc, #296]	; (8006928 <ahrs_fusion_ag+0x3f4>)
 8006800:	edc3 7a00 	vstr	s15, [r3]

// adjusted gyroscope measurements
	gxf = gxf + ahrs_kp * ex + exInt;
 8006804:	4b3e      	ldr	r3, [pc, #248]	; (8006900 <ahrs_fusion_ag+0x3cc>)
 8006806:	ed93 7a00 	vldr	s14, [r3]
 800680a:	edd7 7a07 	vldr	s15, [r7, #28]
 800680e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006812:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006816:	ee37 7a27 	vadd.f32	s14, s14, s15
 800681a:	4b41      	ldr	r3, [pc, #260]	; (8006920 <ahrs_fusion_ag+0x3ec>)
 800681c:	edd3 7a00 	vldr	s15, [r3]
 8006820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006824:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	gyf = gyf + ahrs_kp * ey + eyInt;
 8006828:	4b35      	ldr	r3, [pc, #212]	; (8006900 <ahrs_fusion_ag+0x3cc>)
 800682a:	ed93 7a00 	vldr	s14, [r3]
 800682e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006832:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006836:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800683a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800683e:	4b39      	ldr	r3, [pc, #228]	; (8006924 <ahrs_fusion_ag+0x3f0>)
 8006840:	edd3 7a00 	vldr	s15, [r3]
 8006844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006848:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	gzf = gzf + ahrs_kp * ez + ezInt;
 800684c:	4b2c      	ldr	r3, [pc, #176]	; (8006900 <ahrs_fusion_ag+0x3cc>)
 800684e:	ed93 7a00 	vldr	s14, [r3]
 8006852:	edd7 7a05 	vldr	s15, [r7, #20]
 8006856:	ee27 7a27 	vmul.f32	s14, s14, s15
 800685a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800685e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006862:	4b31      	ldr	r3, [pc, #196]	; (8006928 <ahrs_fusion_ag+0x3f4>)
 8006864:	edd3 7a00 	vldr	s15, [r3]
 8006868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800686c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

// integrate quaternion rate and normalise
	halfT = 0.5f * SENSOR_SAMPLING_TIME;
 8006870:	4b2a      	ldr	r3, [pc, #168]	; (800691c <ahrs_fusion_ag+0x3e8>)
 8006872:	edd3 7a00 	vldr	s15, [r3]
 8006876:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800687a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800687e:	edc7 7a04 	vstr	s15, [r7, #16]
	q0 = q0 + (-q1 * gxf - q2 * gyf - q3 * gzf) * halfT;
 8006882:	4b22      	ldr	r3, [pc, #136]	; (800690c <ahrs_fusion_ag+0x3d8>)
 8006884:	edd3 7a00 	vldr	s15, [r3]
 8006888:	eeb1 7a67 	vneg.f32	s14, s15
 800688c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006890:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006894:	4b1e      	ldr	r3, [pc, #120]	; (8006910 <ahrs_fusion_ag+0x3dc>)
 8006896:	edd3 6a00 	vldr	s13, [r3]
 800689a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800689e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068a6:	4b1b      	ldr	r3, [pc, #108]	; (8006914 <ahrs_fusion_ag+0x3e0>)
 80068a8:	edd3 6a00 	vldr	s13, [r3]
 80068ac:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80068b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80068bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068c0:	4b11      	ldr	r3, [pc, #68]	; (8006908 <ahrs_fusion_ag+0x3d4>)
 80068c2:	edd3 7a00 	vldr	s15, [r3]
 80068c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068ca:	4b0f      	ldr	r3, [pc, #60]	; (8006908 <ahrs_fusion_ag+0x3d4>)
 80068cc:	edc3 7a00 	vstr	s15, [r3]
	q1 = q1 + (q0 * gxf + q2 * gzf - q3 * gyf) * halfT;
 80068d0:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <ahrs_fusion_ag+0x3d4>)
 80068d2:	ed93 7a00 	vldr	s14, [r3]
 80068d6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80068da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068de:	4b0c      	ldr	r3, [pc, #48]	; (8006910 <ahrs_fusion_ag+0x3dc>)
 80068e0:	edd3 6a00 	vldr	s13, [r3]
 80068e4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80068e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068f0:	4b08      	ldr	r3, [pc, #32]	; (8006914 <ahrs_fusion_ag+0x3e0>)
 80068f2:	edd3 6a00 	vldr	s13, [r3]
 80068f6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80068fa:	e017      	b.n	800692c <ahrs_fusion_ag+0x3f8>
 80068fc:	3ecccccd 	.word	0x3ecccccd
 8006900:	20000860 	.word	0x20000860
 8006904:	3c8efa39 	.word	0x3c8efa39
 8006908:	200001e4 	.word	0x200001e4
 800690c:	20000848 	.word	0x20000848
 8006910:	2000084c 	.word	0x2000084c
 8006914:	20000850 	.word	0x20000850
 8006918:	3dcccccd 	.word	0x3dcccccd
 800691c:	0800eb0c 	.word	0x0800eb0c
 8006920:	20000854 	.word	0x20000854
 8006924:	20000858 	.word	0x20000858
 8006928:	2000085c 	.word	0x2000085c
 800692c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006930:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006934:	edd7 7a04 	vldr	s15, [r7, #16]
 8006938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800693c:	4b50      	ldr	r3, [pc, #320]	; (8006a80 <ahrs_fusion_ag+0x54c>)
 800693e:	edd3 7a00 	vldr	s15, [r3]
 8006942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006946:	4b4e      	ldr	r3, [pc, #312]	; (8006a80 <ahrs_fusion_ag+0x54c>)
 8006948:	edc3 7a00 	vstr	s15, [r3]
	q2 = q2 + (q0 * gyf - q1 * gzf + q3 * gxf) * halfT;
 800694c:	4b4d      	ldr	r3, [pc, #308]	; (8006a84 <ahrs_fusion_ag+0x550>)
 800694e:	ed93 7a00 	vldr	s14, [r3]
 8006952:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006956:	ee27 7a27 	vmul.f32	s14, s14, s15
 800695a:	4b49      	ldr	r3, [pc, #292]	; (8006a80 <ahrs_fusion_ag+0x54c>)
 800695c:	edd3 6a00 	vldr	s13, [r3]
 8006960:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006964:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006968:	ee37 7a67 	vsub.f32	s14, s14, s15
 800696c:	4b46      	ldr	r3, [pc, #280]	; (8006a88 <ahrs_fusion_ag+0x554>)
 800696e:	edd3 6a00 	vldr	s13, [r3]
 8006972:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800697a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800697e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006982:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006986:	4b41      	ldr	r3, [pc, #260]	; (8006a8c <ahrs_fusion_ag+0x558>)
 8006988:	edd3 7a00 	vldr	s15, [r3]
 800698c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006990:	4b3e      	ldr	r3, [pc, #248]	; (8006a8c <ahrs_fusion_ag+0x558>)
 8006992:	edc3 7a00 	vstr	s15, [r3]
	q3 = q3 + (q0 * gzf + q1 * gyf - q2 * gxf) * halfT;
 8006996:	4b3b      	ldr	r3, [pc, #236]	; (8006a84 <ahrs_fusion_ag+0x550>)
 8006998:	ed93 7a00 	vldr	s14, [r3]
 800699c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80069a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069a4:	4b36      	ldr	r3, [pc, #216]	; (8006a80 <ahrs_fusion_ag+0x54c>)
 80069a6:	edd3 6a00 	vldr	s13, [r3]
 80069aa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80069ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069b6:	4b35      	ldr	r3, [pc, #212]	; (8006a8c <ahrs_fusion_ag+0x558>)
 80069b8:	edd3 6a00 	vldr	s13, [r3]
 80069bc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80069c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80069c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80069cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069d0:	4b2d      	ldr	r3, [pc, #180]	; (8006a88 <ahrs_fusion_ag+0x554>)
 80069d2:	edd3 7a00 	vldr	s15, [r3]
 80069d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069da:	4b2b      	ldr	r3, [pc, #172]	; (8006a88 <ahrs_fusion_ag+0x554>)
 80069dc:	edc3 7a00 	vstr	s15, [r3]

// normalise quaternion
	norm = math_inv_sqrt(q0q0 + q1q1 + q2q2 + q3q3);
 80069e0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80069e4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80069e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069ec:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80069f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069f4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80069f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006a00:	f000 f8b6 	bl	8006b70 <math_inv_sqrt>
 8006a04:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	q0 *= norm;
 8006a08:	4b1e      	ldr	r3, [pc, #120]	; (8006a84 <ahrs_fusion_ag+0x550>)
 8006a0a:	ed93 7a00 	vldr	s14, [r3]
 8006a0e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a16:	4b1b      	ldr	r3, [pc, #108]	; (8006a84 <ahrs_fusion_ag+0x550>)
 8006a18:	edc3 7a00 	vstr	s15, [r3]
	q1 *= norm;
 8006a1c:	4b18      	ldr	r3, [pc, #96]	; (8006a80 <ahrs_fusion_ag+0x54c>)
 8006a1e:	ed93 7a00 	vldr	s14, [r3]
 8006a22:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a2a:	4b15      	ldr	r3, [pc, #84]	; (8006a80 <ahrs_fusion_ag+0x54c>)
 8006a2c:	edc3 7a00 	vstr	s15, [r3]
	q2 *= norm;
 8006a30:	4b16      	ldr	r3, [pc, #88]	; (8006a8c <ahrs_fusion_ag+0x558>)
 8006a32:	ed93 7a00 	vldr	s14, [r3]
 8006a36:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a3e:	4b13      	ldr	r3, [pc, #76]	; (8006a8c <ahrs_fusion_ag+0x558>)
 8006a40:	edc3 7a00 	vstr	s15, [r3]
	q3 *= norm;
 8006a44:	4b10      	ldr	r3, [pc, #64]	; (8006a88 <ahrs_fusion_ag+0x554>)
 8006a46:	ed93 7a00 	vldr	s14, [r3]
 8006a4a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a52:	4b0d      	ldr	r3, [pc, #52]	; (8006a88 <ahrs_fusion_ag+0x554>)
 8006a54:	edc3 7a00 	vstr	s15, [r3]

	ahrs->q.q0 = q0;
 8006a58:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <ahrs_fusion_ag+0x550>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	601a      	str	r2, [r3, #0]
	ahrs->q.q1 = q1;
 8006a60:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <ahrs_fusion_ag+0x54c>)
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	605a      	str	r2, [r3, #4]
	ahrs->q.q2 = q2;
 8006a68:	4b08      	ldr	r3, [pc, #32]	; (8006a8c <ahrs_fusion_ag+0x558>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	609a      	str	r2, [r3, #8]
	ahrs->q.q3 = q3;
 8006a70:	4b05      	ldr	r3, [pc, #20]	; (8006a88 <ahrs_fusion_ag+0x554>)
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	60da      	str	r2, [r3, #12]
}
 8006a78:	bf00      	nop
 8006a7a:	3768      	adds	r7, #104	; 0x68
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	20000848 	.word	0x20000848
 8006a84:	200001e4 	.word	0x200001e4
 8006a88:	20000850 	.word	0x20000850
 8006a8c:	2000084c 	.word	0x2000084c

08006a90 <math_max>:
#include "basic_math.h"

inline int16_t math_max(int16_t val1, int16_t val2) {
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	4603      	mov	r3, r0
 8006a98:	460a      	mov	r2, r1
 8006a9a:	80fb      	strh	r3, [r7, #6]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	80bb      	strh	r3, [r7, #4]
	return val1 > val2 ? val1 : val2;
 8006aa0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006aa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	bfb8      	it	lt
 8006aac:	4613      	movlt	r3, r2
 8006aae:	b21b      	sxth	r3, r3
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <math_min>:

inline int16_t math_min(int16_t val1, int16_t val2) {
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	460a      	mov	r2, r1
 8006ac6:	80fb      	strh	r3, [r7, #6]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	80bb      	strh	r3, [r7, #4]
	return val1 < val2 ? val1 : val2;
 8006acc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006ad0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	bfa8      	it	ge
 8006ad8:	4613      	movge	r3, r2
 8006ada:	b21b      	sxth	r3, r3
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <math_abs>:

inline int16_t math_abs(int16_t x) {
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	4603      	mov	r3, r0
 8006af0:	80fb      	strh	r3, [r7, #6]
	return x >= 0 ? x : -x;
 8006af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	bfb8      	it	lt
 8006afa:	425b      	neglt	r3, r3
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	b21b      	sxth	r3, r3
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <math_sqrt>:

float math_sqrt(float x) {
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	ed87 0a01 	vstr	s0, [r7, #4]
	union {
		int i;
		float x;
	} u;
	u.x = x;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	60fb      	str	r3, [r7, #12]
	u.i = (1 << 29) + (u.i >> 1) - (1 << 22);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	105b      	asrs	r3, r3, #1
 8006b1e:	f103 53fe 	add.w	r3, r3, #532676608	; 0x1fc00000
 8006b22:	60fb      	str	r3, [r7, #12]

	// Two Babylonian Steps (simplified from:)
	// u.x = 0.5f * (u.x + x/u.x);
	// u.x = 0.5f * (u.x + x/u.x);
	u.x = u.x + x / u.x;
 8006b24:	ed97 7a03 	vldr	s14, [r7, #12]
 8006b28:	edd7 6a03 	vldr	s13, [r7, #12]
 8006b2c:	ed97 6a01 	vldr	s12, [r7, #4]
 8006b30:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b38:	edc7 7a03 	vstr	s15, [r7, #12]
	u.x = 0.25f * u.x + x / u.x;
 8006b3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b40:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8006b44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006b48:	edd7 6a03 	vldr	s13, [r7, #12]
 8006b4c:	ed97 6a01 	vldr	s12, [r7, #4]
 8006b50:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b58:	edc7 7a03 	vstr	s15, [r7, #12]

	return u.x;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	ee07 3a90 	vmov	s15, r3
}
 8006b62:	eeb0 0a67 	vmov.f32	s0, s15
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <math_inv_sqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float math_inv_sqrt(float x) {
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8006b7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b7e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006b82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b86:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	613b      	str	r3, [r7, #16]
	long i = *(long*) &y;
 8006b8e:	f107 0310 	add.w	r3, r7, #16
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i >> 1);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	105a      	asrs	r2, r3, #1
 8006b9a:	4b12      	ldr	r3, [pc, #72]	; (8006be4 <math_inv_sqrt+0x74>)
 8006b9c:	1a9b      	subs	r3, r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 8006ba0:	f107 030c 	add.w	r3, r7, #12
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8006ba8:	ed97 7a04 	vldr	s14, [r7, #16]
 8006bac:	edd7 7a05 	vldr	s15, [r7, #20]
 8006bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bb4:	edd7 7a04 	vldr	s15, [r7, #16]
 8006bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bbc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8006bc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006bc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8006bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bcc:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	ee07 3a90 	vmov	s15, r3
}
 8006bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8006bda:	371c      	adds	r7, #28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	5f3759df 	.word	0x5f3759df

08006be8 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8006be8:	b590      	push	{r4, r7, lr}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	607b      	str	r3, [r7, #4]
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	73fb      	strb	r3, [r7, #15]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d003      	beq.n	8006c0c <bmi160_get_regs+0x24>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d102      	bne.n	8006c12 <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 8006c0c:	23ff      	movs	r3, #255	; 0xff
 8006c0e:	75fb      	strb	r3, [r7, #23]
 8006c10:	e017      	b.n	8006c42 <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 8006c12:	89bb      	ldrh	r3, [r7, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d102      	bne.n	8006c1e <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8006c18:	23f4      	movs	r3, #244	; 0xf4
 8006c1a:	75fb      	strb	r3, [r7, #23]
 8006c1c:	e011      	b.n	8006c42 <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	789b      	ldrb	r3, [r3, #2]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d103      	bne.n	8006c2e <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8006c26:	7bfb      	ldrb	r3, [r7, #15]
 8006c28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c2c:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	69dc      	ldr	r4, [r3, #28]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	7858      	ldrb	r0, [r3, #1]
 8006c36:	89bb      	ldrh	r3, [r7, #12]
 8006c38:	7bf9      	ldrb	r1, [r7, #15]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	47a0      	blx	r4
 8006c3e:	4603      	mov	r3, r0
 8006c40:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd90      	pop	{r4, r7, pc}

08006c4e <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8006c4e:	b590      	push	{r4, r7, lr}
 8006c50:	b087      	sub	sp, #28
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607b      	str	r3, [r7, #4]
 8006c58:	4603      	mov	r3, r0
 8006c5a:	73fb      	strb	r3, [r7, #15]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8006c64:	2300      	movs	r3, #0
 8006c66:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <bmi160_set_regs+0x28>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d102      	bne.n	8006c7c <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 8006c76:	23ff      	movs	r3, #255	; 0xff
 8006c78:	75fb      	strb	r3, [r7, #23]
 8006c7a:	e045      	b.n	8006d08 <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 8006c7c:	89bb      	ldrh	r3, [r7, #12]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d102      	bne.n	8006c88 <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8006c82:	23f4      	movs	r3, #244	; 0xf4
 8006c84:	75fb      	strb	r3, [r7, #23]
 8006c86:	e03f      	b.n	8006d08 <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	789b      	ldrb	r3, [r3, #2]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d103      	bne.n	8006c98 <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c96:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	7a1b      	ldrb	r3, [r3, #8]
 8006c9c:	2b11      	cmp	r3, #17
 8006c9e:	d003      	beq.n	8006ca8 <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8006ca4:	2b15      	cmp	r3, #21
 8006ca6:	d124      	bne.n	8006cf2 <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a1c      	ldr	r4, [r3, #32]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	7858      	ldrb	r0, [r3, #1]
 8006cb0:	89bb      	ldrh	r3, [r7, #12]
 8006cb2:	7bf9      	ldrb	r1, [r7, #15]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	47a0      	blx	r4
 8006cb8:	4603      	mov	r3, r0
 8006cba:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	4798      	blx	r3
 8006cc4:	e01a      	b.n	8006cfc <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1c      	ldr	r4, [r3, #32]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	7858      	ldrb	r0, [r3, #1]
 8006cce:	7dbb      	ldrb	r3, [r7, #22]
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	441a      	add	r2, r3
 8006cd4:	7bf9      	ldrb	r1, [r7, #15]
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	47a0      	blx	r4
 8006cda:	4603      	mov	r3, r0
 8006cdc:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	2001      	movs	r0, #1
 8006cea:	4798      	blx	r3
            for (; count < len; count++)
 8006cec:	7dbb      	ldrb	r3, [r7, #22]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	75bb      	strb	r3, [r7, #22]
 8006cf2:	7dbb      	ldrb	r3, [r7, #22]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	89ba      	ldrh	r2, [r7, #12]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d8e4      	bhi.n	8006cc6 <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 8006cfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 8006d04:	23fe      	movs	r3, #254	; 0xfe
 8006d06:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8006d08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	371c      	adds	r7, #28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd90      	pop	{r4, r7, pc}

08006d14 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fa85 	bl	8007230 <null_ptr_check>
 8006d26:	4603      	mov	r3, r0
 8006d28:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8006d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10c      	bne.n	8006d4c <bmi160_init+0x38>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	789b      	ldrb	r3, [r3, #2]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d108      	bne.n	8006d4c <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8006d3a:	f107 010d 	add.w	r1, r7, #13
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	207f      	movs	r0, #127	; 0x7f
 8006d44:	f7ff ff50 	bl	8006be8 <bmi160_get_regs>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 8006d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d127      	bne.n	8006da4 <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8006d5a:	e007      	b.n	8006d6c <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8006d5c:	6879      	ldr	r1, [r7, #4]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	2000      	movs	r0, #0
 8006d64:	f7ff ff40 	bl	8006be8 <bmi160_get_regs>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
 8006d6e:	1e5a      	subs	r2, r3, #1
 8006d70:	73ba      	strb	r2, [r7, #14]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <bmi160_init+0x6a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	2bd1      	cmp	r3, #209	; 0xd1
 8006d7c:	d1ee      	bne.n	8006d5c <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 8006d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10c      	bne.n	8006da0 <bmi160_init+0x8c>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	2bd1      	cmp	r3, #209	; 0xd1
 8006d8c:	d108      	bne.n	8006da0 <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	22ff      	movs	r2, #255	; 0xff
 8006d92:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f80b 	bl	8006db0 <bmi160_soft_reset>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	73fb      	strb	r3, [r7, #15]
 8006d9e:	e001      	b.n	8006da4 <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 8006da0:	23fd      	movs	r3, #253	; 0xfd
 8006da2:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8006da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 8006db8:	23b6      	movs	r3, #182	; 0xb6
 8006dba:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <bmi160_soft_reset+0x1a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d102      	bne.n	8006dd0 <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8006dca:	23ff      	movs	r3, #255	; 0xff
 8006dcc:	73fb      	strb	r3, [r7, #15]
 8006dce:	e024      	b.n	8006e1a <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8006dd0:	f107 010e 	add.w	r1, r7, #14
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	207e      	movs	r0, #126	; 0x7e
 8006dda:	f7ff ff38 	bl	8006c4e <bmi160_set_regs>
 8006dde:	4603      	mov	r3, r0
 8006de0:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de6:	2001      	movs	r0, #1
 8006de8:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8006dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10c      	bne.n	8006e0c <bmi160_soft_reset+0x5c>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	789b      	ldrb	r3, [r3, #2]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d108      	bne.n	8006e0c <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8006dfa:	f107 010e 	add.w	r1, r7, #14
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	207f      	movs	r0, #127	; 0x7f
 8006e04:	f7ff fef0 	bl	8006be8 <bmi160_get_regs>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 8006e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d102      	bne.n	8006e1a <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fa2b 	bl	8007270 <default_param_settg>
        }
    }

    return rslt;
 8006e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <bmi160_set_sens_conf+0x1a>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d102      	bne.n	8006e46 <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8006e40:	23ff      	movs	r3, #255	; 0xff
 8006e42:	73fb      	strb	r3, [r7, #15]
 8006e44:	e01f      	b.n	8006e86 <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fa3c 	bl	80072c4 <set_accel_conf>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8006e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d116      	bne.n	8006e86 <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fb77 	bl	800754c <set_gyro_conf>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8006e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10d      	bne.n	8006e86 <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f811 	bl	8006e92 <bmi160_set_power_mode>
 8006e70:	4603      	mov	r3, r0
 8006e72:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8006e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d104      	bne.n	8006e86 <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fb30 	bl	80074e2 <check_invalid_settg>
 8006e82:	4603      	mov	r3, r0
 8006e84:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8006e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d003      	beq.n	8006eac <bmi160_set_power_mode+0x1a>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d102      	bne.n	8006eb2 <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8006eac:	23ff      	movs	r3, #255	; 0xff
 8006eae:	73fb      	strb	r3, [r7, #15]
 8006eb0:	e00d      	b.n	8006ece <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fc53 	bl	800775e <set_accel_pwr>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8006ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d104      	bne.n	8006ece <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fce1 	bl	800788c <set_gyro_pwr>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8006ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <bmi160_get_sensor_data>:
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor,
                              struct bmi160_sensor_data *accel,
                              struct bmi160_sensor_data *gyro,
                              const struct bmi160_dev *dev)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b086      	sub	sp, #24
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
 8006ee4:	603b      	str	r3, [r7, #0]
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI160_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	75fb      	strb	r3, [r7, #23]
    uint8_t time_sel;
    uint8_t sen_sel;
    uint8_t len = 0;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	75bb      	strb	r3, [r7, #22]

    /*Extract the sensor  and time select information*/
    sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	f003 0307 	and.w	r3, r3, #7
 8006ef8:	757b      	strb	r3, [r7, #21]
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 8006efa:	7d7b      	ldrb	r3, [r7, #21]
 8006efc:	109b      	asrs	r3, r3, #2
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	753b      	strb	r3, [r7, #20]
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 8006f06:	7d7b      	ldrb	r3, [r7, #21]
 8006f08:	f003 0303 	and.w	r3, r3, #3
 8006f0c:	757b      	strb	r3, [r7, #21]
    if (time_sel == 1)
 8006f0e:	7d3b      	ldrb	r3, [r7, #20]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d101      	bne.n	8006f18 <bmi160_get_sensor_data+0x3e>
    {
        len = 3;
 8006f14:	2303      	movs	r3, #3
 8006f16:	75bb      	strb	r3, [r7, #22]
    }

    /* Null-pointer check */
    if (dev != NULL)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d03c      	beq.n	8006f98 <bmi160_get_sensor_data+0xbe>
    {
        switch (sen_sel)
 8006f1e:	7d7b      	ldrb	r3, [r7, #21]
 8006f20:	2b03      	cmp	r3, #3
 8006f22:	d024      	beq.n	8006f6e <bmi160_get_sensor_data+0x94>
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	dc34      	bgt.n	8006f92 <bmi160_get_sensor_data+0xb8>
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d002      	beq.n	8006f32 <bmi160_get_sensor_data+0x58>
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d00f      	beq.n	8006f50 <bmi160_get_sensor_data+0x76>
 8006f30:	e02f      	b.n	8006f92 <bmi160_get_sensor_data+0xb8>
        {
            case BMI160_ACCEL_ONLY:

                /* Null-pointer check */
                if (accel == NULL)
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d102      	bne.n	8006f3e <bmi160_get_sensor_data+0x64>
                {
                    rslt = BMI160_E_NULL_PTR;
 8006f38:	23ff      	movs	r3, #255	; 0xff
 8006f3a:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_data(len, accel, dev);
                }

                break;
 8006f3c:	e02e      	b.n	8006f9c <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_data(len, accel, dev);
 8006f3e:	7dbb      	ldrb	r3, [r7, #22]
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	68b9      	ldr	r1, [r7, #8]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 fce5 	bl	8007914 <get_accel_data>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	75fb      	strb	r3, [r7, #23]
                break;
 8006f4e:	e025      	b.n	8006f9c <bmi160_get_sensor_data+0xc2>
            case BMI160_GYRO_ONLY:

                /* Null-pointer check */
                if (gyro == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d102      	bne.n	8006f5c <bmi160_get_sensor_data+0x82>
                {
                    rslt = BMI160_E_NULL_PTR;
 8006f56:	23ff      	movs	r3, #255	; 0xff
 8006f58:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_gyro_data(len, gyro, dev);
                }

                break;
 8006f5a:	e01f      	b.n	8006f9c <bmi160_get_sensor_data+0xc2>
                    rslt = get_gyro_data(len, gyro, dev);
 8006f5c:	7dbb      	ldrb	r3, [r7, #22]
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	6879      	ldr	r1, [r7, #4]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 fda1 	bl	8007aaa <get_gyro_data>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	75fb      	strb	r3, [r7, #23]
                break;
 8006f6c:	e016      	b.n	8006f9c <bmi160_get_sensor_data+0xc2>
            case BMI160_BOTH_ACCEL_AND_GYRO:

                /* Null-pointer check */
                if ((gyro == NULL) || (accel == NULL))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <bmi160_get_sensor_data+0xa0>
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d102      	bne.n	8006f80 <bmi160_get_sensor_data+0xa6>
                {
                    rslt = BMI160_E_NULL_PTR;
 8006f7a:	23ff      	movs	r3, #255	; 0xff
 8006f7c:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
                }

                break;
 8006f7e:	e00d      	b.n	8006f9c <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
 8006f80:	7db8      	ldrb	r0, [r7, #22]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	68b9      	ldr	r1, [r7, #8]
 8006f88:	f000 fed9 	bl	8007d3e <get_accel_gyro_data>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	75fb      	strb	r3, [r7, #23]
                break;
 8006f90:	e004      	b.n	8006f9c <bmi160_get_sensor_data+0xc2>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 8006f92:	23fb      	movs	r3, #251	; 0xfb
 8006f94:	75fb      	strb	r3, [r7, #23]
                break;
 8006f96:	e001      	b.n	8006f9c <bmi160_get_sensor_data+0xc2>
        }
    }
    else
    {
        rslt = BMI160_E_NULL_PTR;
 8006f98:	23ff      	movs	r3, #255	; 0xff
 8006f9a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006f9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3718      	adds	r7, #24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <bmi160_aux_read>:
/*!
 * @brief This API reads the mention no of byte of data from the given
 * register address of auxiliary sensor.
 */
int8_t bmi160_aux_read(uint8_t reg_addr, uint8_t *aux_data, uint16_t len, const struct bmi160_dev *dev)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b088      	sub	sp, #32
 8006fac:	af02      	add	r7, sp, #8
 8006fae:	60b9      	str	r1, [r7, #8]
 8006fb0:	607b      	str	r3, [r7, #4]
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	73fb      	strb	r3, [r7, #15]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	75fb      	strb	r3, [r7, #23]
    uint16_t map_len = 0;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	82bb      	strh	r3, [r7, #20]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d003      	beq.n	8006fd0 <bmi160_aux_read+0x28>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d102      	bne.n	8006fd6 <bmi160_aux_read+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 8006fd0:	23ff      	movs	r3, #255	; 0xff
 8006fd2:	75fb      	strb	r3, [r7, #23]
 8006fd4:	e020      	b.n	8007018 <bmi160_aux_read+0x70>
    }
    else
    {
        if (dev->aux_cfg.aux_sensor_enable == BMI160_ENABLE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	7d1b      	ldrb	r3, [r3, #20]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d017      	beq.n	8007014 <bmi160_aux_read+0x6c>
        {
            rslt = map_read_len(&map_len, dev);
 8006fe4:	f107 0314 	add.w	r3, r7, #20
 8006fe8:	6879      	ldr	r1, [r7, #4]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f001 f84a 	bl	8008084 <map_read_len>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8006ff4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10d      	bne.n	8007018 <bmi160_aux_read+0x70>
            {
                rslt = extract_aux_read(map_len, reg_addr, aux_data, len, dev);
 8006ffc:	8ab8      	ldrh	r0, [r7, #20]
 8006ffe:	89ba      	ldrh	r2, [r7, #12]
 8007000:	7bf9      	ldrb	r1, [r7, #15]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	4613      	mov	r3, r2
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	f001 f889 	bl	8008120 <extract_aux_read>
 800700e:	4603      	mov	r3, r0
 8007010:	75fb      	strb	r3, [r7, #23]
 8007012:	e001      	b.n	8007018 <bmi160_aux_read+0x70>
            }
        }
        else
        {
            rslt = BMI160_E_INVALID_INPUT;
 8007014:	23fb      	movs	r3, #251	; 0xfb
 8007016:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8007018:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3718      	adds	r7, #24
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <bmi160_aux_write>:
/*!
 * @brief This API writes the mention no of byte of data to the given
 * register address of auxiliary sensor.
 */
int8_t bmi160_aux_write(uint8_t reg_addr, uint8_t *aux_data, uint16_t len, const struct bmi160_dev *dev)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	60b9      	str	r1, [r7, #8]
 800702c:	607b      	str	r3, [r7, #4]
 800702e:	4603      	mov	r3, r0
 8007030:	73fb      	strb	r3, [r7, #15]
 8007032:	4613      	mov	r3, r2
 8007034:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 800703a:	2300      	movs	r3, #0
 800703c:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d003      	beq.n	800704c <bmi160_aux_write+0x28>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d132      	bne.n	80070b2 <bmi160_aux_write+0x8e>
    {
        rslt = BMI160_E_NULL_PTR;
 800704c:	23ff      	movs	r3, #255	; 0xff
 800704e:	75fb      	strb	r3, [r7, #23]
 8007050:	e034      	b.n	80070bc <bmi160_aux_write+0x98>
    else
    {
        for (; count < len; count++)
        {
            /* set data to write */
            rslt = bmi160_set_regs(BMI160_AUX_IF_4_ADDR, aux_data, 1, dev);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	68b9      	ldr	r1, [r7, #8]
 8007058:	204f      	movs	r0, #79	; 0x4f
 800705a:	f7ff fdf8 	bl	8006c4e <bmi160_set_regs>
 800705e:	4603      	mov	r3, r0
 8007060:	75fb      	strb	r3, [r7, #23]
            dev->delay_ms(BMI160_AUX_COM_DELAY);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007066:	200a      	movs	r0, #10
 8007068:	4798      	blx	r3
            if (rslt == BMI160_OK)
 800706a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d11c      	bne.n	80070ac <bmi160_aux_write+0x88>
            {
                /* set address to write */
                rslt = bmi160_set_regs(BMI160_AUX_IF_3_ADDR, &reg_addr, 1, dev);
 8007072:	f107 010f 	add.w	r1, r7, #15
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	204e      	movs	r0, #78	; 0x4e
 800707c:	f7ff fde7 	bl	8006c4e <bmi160_set_regs>
 8007080:	4603      	mov	r3, r0
 8007082:	75fb      	strb	r3, [r7, #23]
                dev->delay_ms(BMI160_AUX_COM_DELAY);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007088:	200a      	movs	r0, #10
 800708a:	4798      	blx	r3
                if (rslt == BMI160_OK && (count < len - 1))
 800708c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10b      	bne.n	80070ac <bmi160_aux_write+0x88>
 8007094:	7dba      	ldrb	r2, [r7, #22]
 8007096:	89bb      	ldrh	r3, [r7, #12]
 8007098:	3b01      	subs	r3, #1
 800709a:	429a      	cmp	r2, r3
 800709c:	da06      	bge.n	80070ac <bmi160_aux_write+0x88>
                {
                    aux_data++;
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	3301      	adds	r3, #1
 80070a2:	60bb      	str	r3, [r7, #8]
                    reg_addr++;
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
 80070a6:	3301      	adds	r3, #1
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	73fb      	strb	r3, [r7, #15]
        for (; count < len; count++)
 80070ac:	7dbb      	ldrb	r3, [r7, #22]
 80070ae:	3301      	adds	r3, #1
 80070b0:	75bb      	strb	r3, [r7, #22]
 80070b2:	7dbb      	ldrb	r3, [r7, #22]
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	89ba      	ldrh	r2, [r7, #12]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d8ca      	bhi.n	8007052 <bmi160_aux_write+0x2e>
                }
            }
        }
    }

    return rslt;
 80070bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <bmi160_aux_init>:
/*!
 * @brief This API initialize the auxiliary sensor
 * in order to access it.
 */
int8_t bmi160_aux_init(const struct bmi160_dev *dev)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f8ad 	bl	8007230 <null_ptr_check>
 80070d6:	4603      	mov	r3, r0
 80070d8:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 80070da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <bmi160_aux_init+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 80070e2:	23ff      	movs	r3, #255	; 0xff
 80070e4:	73fb      	strb	r3, [r7, #15]
 80070e6:	e00e      	b.n	8007106 <bmi160_aux_init+0x3e>
    }
    else
    {
        if (dev->aux_cfg.aux_sensor_enable == BMI160_ENABLE)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	7d1b      	ldrb	r3, [r3, #20]
 80070ec:	f003 0301 	and.w	r3, r3, #1
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d005      	beq.n	8007102 <bmi160_aux_init+0x3a>
        {
            /* Configures the auxiliary sensor interface settings */
            rslt = config_aux_settg(dev);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fffa 	bl	80080f0 <config_aux_settg>
 80070fc:	4603      	mov	r3, r0
 80070fe:	73fb      	strb	r3, [r7, #15]
 8007100:	e001      	b.n	8007106 <bmi160_aux_init+0x3e>
        }
        else
        {
            rslt = BMI160_E_INVALID_INPUT;
 8007102:	23fb      	movs	r3, #251	; 0xfb
 8007104:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8007106:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <bmi160_set_aux_auto_mode>:
 * @brief This API is used to setup the auxiliary sensor of bmi160 in auto mode
 * Thus enabling the auto update of 8 bytes of data from auxiliary sensor
 * to BMI160 register address 0x04 to 0x0B
 */
int8_t bmi160_set_aux_auto_mode(uint8_t *data_addr, struct bmi160_dev *dev)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800711c:	6838      	ldr	r0, [r7, #0]
 800711e:	f000 f887 	bl	8007230 <null_ptr_check>
 8007122:	4603      	mov	r3, r0
 8007124:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 8007126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d002      	beq.n	8007134 <bmi160_set_aux_auto_mode+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 800712e:	23ff      	movs	r3, #255	; 0xff
 8007130:	73fb      	strb	r3, [r7, #15]
 8007132:	e02c      	b.n	800718e <bmi160_set_aux_auto_mode+0x7c>
    }
    else
    {
        if (dev->aux_cfg.aux_sensor_enable == BMI160_ENABLE)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	7d1b      	ldrb	r3, [r3, #20]
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d023      	beq.n	800718a <bmi160_set_aux_auto_mode+0x78>
        {
            /* Write the aux. address to read in 0x4D of BMI160*/
            rslt = bmi160_set_regs(BMI160_AUX_IF_2_ADDR, data_addr, 1, dev);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2201      	movs	r2, #1
 8007146:	6879      	ldr	r1, [r7, #4]
 8007148:	204d      	movs	r0, #77	; 0x4d
 800714a:	f7ff fd80 	bl	8006c4e <bmi160_set_regs>
 800714e:	4603      	mov	r3, r0
 8007150:	73fb      	strb	r3, [r7, #15]
            dev->delay_ms(BMI160_AUX_COM_DELAY);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007156:	200a      	movs	r0, #10
 8007158:	4798      	blx	r3
            if (rslt == BMI160_OK)
 800715a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d115      	bne.n	800718e <bmi160_set_aux_auto_mode+0x7c>
            {
                /* Configure the polling ODR for
                 * auxiliary sensor */
                rslt = config_aux_odr(dev);
 8007162:	6838      	ldr	r0, [r7, #0]
 8007164:	f000 ff64 	bl	8008030 <config_aux_odr>
 8007168:	4603      	mov	r3, r0
 800716a:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800716c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10c      	bne.n	800718e <bmi160_set_aux_auto_mode+0x7c>
                {
                    /* Disable the aux. manual mode, i.e aux.
                     * sensor is in auto-mode (data-mode) */
                    dev->aux_cfg.manual_enable = BMI160_DISABLE;
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	7d13      	ldrb	r3, [r2, #20]
 8007178:	f36f 0341 	bfc	r3, #1, #1
 800717c:	7513      	strb	r3, [r2, #20]
                    rslt = bmi160_config_aux_mode(dev);
 800717e:	6838      	ldr	r0, [r7, #0]
 8007180:	f000 f80b 	bl	800719a <bmi160_config_aux_mode>
 8007184:	4603      	mov	r3, r0
 8007186:	73fb      	strb	r3, [r7, #15]
 8007188:	e001      	b.n	800718e <bmi160_set_aux_auto_mode+0x7c>
                }
            }
        }
        else
        {
            rslt = BMI160_E_INVALID_INPUT;
 800718a:	23fb      	movs	r3, #251	; 0xfb
 800718c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800718e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <bmi160_config_aux_mode>:
/*!
 * @brief This API configures the 0x4C register and settings like
 * Auxiliary sensor manual enable/ disable and aux burst read length.
 */
int8_t bmi160_config_aux_mode(const struct bmi160_dev *dev)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t aux_if[2] = { (uint8_t)(dev->aux_cfg.aux_i2c_addr * 2), 0 };
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	7d5b      	ldrb	r3, [r3, #21]
 80071a6:	005b      	lsls	r3, r3, #1
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	733b      	strb	r3, [r7, #12]
 80071ac:	2300      	movs	r3, #0
 80071ae:	737b      	strb	r3, [r7, #13]

    rslt = bmi160_get_regs(BMI160_AUX_IF_1_ADDR, &aux_if[1], 1, dev);
 80071b0:	f107 030c 	add.w	r3, r7, #12
 80071b4:	1c59      	adds	r1, r3, #1
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	204c      	movs	r0, #76	; 0x4c
 80071bc:	f7ff fd14 	bl	8006be8 <bmi160_get_regs>
 80071c0:	4603      	mov	r3, r0
 80071c2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80071c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d12b      	bne.n	8007224 <bmi160_config_aux_mode+0x8a>
    {
        /* update the Auxiliary interface to manual/auto mode */
        aux_if[1] = BMI160_SET_BITS(aux_if[1], BMI160_MANUAL_MODE_EN, dev->aux_cfg.manual_enable);
 80071cc:	7b7b      	ldrb	r3, [r7, #13]
 80071ce:	b25b      	sxtb	r3, r3
 80071d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071d4:	b25a      	sxtb	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	7d1b      	ldrb	r3, [r3, #20]
 80071da:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	01db      	lsls	r3, r3, #7
 80071e2:	b25b      	sxtb	r3, r3
 80071e4:	4313      	orrs	r3, r2
 80071e6:	b25b      	sxtb	r3, r3
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	737b      	strb	r3, [r7, #13]

        /* update the burst read length defined by user */
        aux_if[1] = BMI160_SET_BITS_POS_0(aux_if[1], BMI160_AUX_READ_BURST, dev->aux_cfg.aux_rd_burst_len);
 80071ec:	7b7b      	ldrb	r3, [r7, #13]
 80071ee:	b25b      	sxtb	r3, r3
 80071f0:	f023 0303 	bic.w	r3, r3, #3
 80071f4:	b25a      	sxtb	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	7d1b      	ldrb	r3, [r3, #20]
 80071fa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	b25b      	sxtb	r3, r3
 8007202:	4313      	orrs	r3, r2
 8007204:	b25b      	sxtb	r3, r3
 8007206:	b2db      	uxtb	r3, r3
 8007208:	737b      	strb	r3, [r7, #13]

        /* Set the secondary interface address and manual mode
         * along with burst read length */
        rslt = bmi160_set_regs(BMI160_AUX_IF_0_ADDR, &aux_if[0], 2, dev);
 800720a:	f107 010c 	add.w	r1, r7, #12
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2202      	movs	r2, #2
 8007212:	204b      	movs	r0, #75	; 0x4b
 8007214:	f7ff fd1b 	bl	8006c4e <bmi160_set_regs>
 8007218:	4603      	mov	r3, r0
 800721a:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_AUX_COM_DELAY);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007220:	200a      	movs	r0, #10
 8007222:	4798      	blx	r3
    }

    return rslt;
 8007224:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00b      	beq.n	8007256 <null_ptr_check+0x26>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d007      	beq.n	8007256 <null_ptr_check+0x26>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <null_ptr_check+0x26>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007252:	2b00      	cmp	r3, #0
 8007254:	d102      	bne.n	800725c <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 8007256:	23ff      	movs	r3, #255	; 0xff
 8007258:	73fb      	strb	r3, [r7, #15]
 800725a:	e001      	b.n	8007260 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8007260:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2202      	movs	r2, #2
 800727c:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2208      	movs	r2, #8
 8007282:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2210      	movs	r2, #16
 8007288:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2203      	movs	r2, #3
 800728e:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2208      	movs	r2, #8
 800729a:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2214      	movs	r2, #20
 80072a0:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	6852      	ldr	r2, [r2, #4]
 80072ae:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	68d2      	ldr	r2, [r2, #12]
 80072b6:	611a      	str	r2, [r3, #16]
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 80072cc:	2300      	movs	r3, #0
 80072ce:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 80072d0:	f107 030c 	add.w	r3, r7, #12
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 f833 	bl	8007342 <check_accel_config>
 80072dc:	4603      	mov	r3, r0
 80072de:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80072e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d126      	bne.n	8007336 <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 80072e8:	f107 010c 	add.w	r1, r7, #12
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	2040      	movs	r0, #64	; 0x40
 80072f2:	f7ff fcac 	bl	8006c4e <bmi160_set_regs>
 80072f6:	4603      	mov	r3, r0
 80072f8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80072fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d119      	bne.n	8007336 <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	795a      	ldrb	r2, [r3, #5]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	79da      	ldrb	r2, [r3, #7]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 8007312:	f107 030c 	add.w	r3, r7, #12
 8007316:	1c59      	adds	r1, r3, #1
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	2041      	movs	r0, #65	; 0x41
 800731e:	f7ff fc96 	bl	8006c4e <bmi160_set_regs>
 8007322:	4603      	mov	r3, r0
 8007324:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8007326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d103      	bne.n	8007336 <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	799a      	ldrb	r2, [r3, #6]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 8007336:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	2202      	movs	r2, #2
 8007350:	6879      	ldr	r1, [r7, #4]
 8007352:	2040      	movs	r0, #64	; 0x40
 8007354:	f7ff fc48 	bl	8006be8 <bmi160_get_regs>
 8007358:	4603      	mov	r3, r0
 800735a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800735c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d11b      	bne.n	800739c <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f81e 	bl	80073a8 <process_accel_odr>
 800736c:	4603      	mov	r3, r0
 800736e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8007370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d111      	bne.n	800739c <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f848 	bl	8007410 <process_accel_bw>
 8007380:	4603      	mov	r3, r0
 8007382:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8007384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d107      	bne.n	800739c <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3301      	adds	r3, #1
 8007390:	6839      	ldr	r1, [r7, #0]
 8007392:	4618      	mov	r0, r3
 8007394:	f000 f871 	bl	800747a <process_accel_range>
 8007398:	4603      	mov	r3, r0
 800739a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800739c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80073b6:	2300      	movs	r3, #0
 80073b8:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 80073ba:	2300      	movs	r3, #0
 80073bc:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	795b      	ldrb	r3, [r3, #5]
 80073c2:	2b0c      	cmp	r3, #12
 80073c4:	d81a      	bhi.n	80073fc <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	795a      	ldrb	r2, [r3, #5]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	7a5b      	ldrb	r3, [r3, #9]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d016      	beq.n	8007400 <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	795b      	ldrb	r3, [r3, #5]
 80073d6:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	f023 030f 	bic.w	r3, r3, #15
 80073e0:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 80073e2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80073e6:	f003 030f 	and.w	r3, r3, #15
 80073ea:	b25a      	sxtb	r2, r3
 80073ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	b25b      	sxtb	r3, r3
 80073f4:	b2da      	uxtb	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	e001      	b.n	8007400 <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80073fc:	23fc      	movs	r3, #252	; 0xfc
 80073fe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8007400:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800741a:	2300      	movs	r3, #0
 800741c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800741e:	2300      	movs	r3, #0
 8007420:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	79db      	ldrb	r3, [r3, #7]
 800742a:	2b07      	cmp	r3, #7
 800742c:	d81b      	bhi.n	8007466 <process_accel_bw+0x56>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	79da      	ldrb	r2, [r3, #7]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	7adb      	ldrb	r3, [r3, #11]
 8007436:	429a      	cmp	r2, r3
 8007438:	d017      	beq.n	800746a <process_accel_bw+0x5a>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	79db      	ldrb	r3, [r3, #7]
 800743e:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007448:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 800744a:	7b7b      	ldrb	r3, [r7, #13]
 800744c:	011b      	lsls	r3, r3, #4
 800744e:	b25b      	sxtb	r3, r3
 8007450:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007454:	b25a      	sxtb	r2, r3
 8007456:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800745a:	4313      	orrs	r3, r2
 800745c:	b25b      	sxtb	r3, r3
 800745e:	b2da      	uxtb	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	701a      	strb	r2, [r3, #0]
 8007464:	e001      	b.n	800746a <process_accel_bw+0x5a>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8007466:	23fc      	movs	r3, #252	; 0xfc
 8007468:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800746a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 800747a:	b480      	push	{r7}
 800747c:	b085      	sub	sp, #20
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8007484:	2300      	movs	r3, #0
 8007486:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8007488:	2300      	movs	r3, #0
 800748a:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 800748c:	2300      	movs	r3, #0
 800748e:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	799b      	ldrb	r3, [r3, #6]
 8007494:	2b0c      	cmp	r3, #12
 8007496:	d81a      	bhi.n	80074ce <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	799a      	ldrb	r2, [r3, #6]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	7a9b      	ldrb	r3, [r3, #10]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d016      	beq.n	80074d2 <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	799b      	ldrb	r3, [r3, #6]
 80074a8:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	f023 030f 	bic.w	r3, r3, #15
 80074b2:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 80074b4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80074b8:	f003 030f 	and.w	r3, r3, #15
 80074bc:	b25a      	sxtb	r2, r3
 80074be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	b25b      	sxtb	r3, r3
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	701a      	strb	r2, [r3, #0]
 80074cc:	e001      	b.n	80074d2 <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80074ce:	23fc      	movs	r3, #252	; 0xfc
 80074d0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80074d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80074ea:	2300      	movs	r3, #0
 80074ec:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 80074ee:	f107 010e 	add.w	r1, r7, #14
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	2002      	movs	r0, #2
 80074f8:	f7ff fb76 	bl	8006be8 <bmi160_get_regs>
 80074fc:	4603      	mov	r3, r0
 80074fe:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 8007500:	7bbb      	ldrb	r3, [r7, #14]
 8007502:	085b      	lsrs	r3, r3, #1
 8007504:	b2db      	uxtb	r3, r3
 8007506:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 8007508:	7bbb      	ldrb	r3, [r7, #14]
 800750a:	f003 030f 	and.w	r3, r3, #15
 800750e:	b2db      	uxtb	r3, r3
 8007510:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d102      	bne.n	800751e <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 8007518:	23fa      	movs	r3, #250	; 0xfa
 800751a:	73fb      	strb	r3, [r7, #15]
 800751c:	e010      	b.n	8007540 <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 800751e:	7bbb      	ldrb	r3, [r7, #14]
 8007520:	2b02      	cmp	r3, #2
 8007522:	d102      	bne.n	800752a <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 8007524:	23f9      	movs	r3, #249	; 0xf9
 8007526:	73fb      	strb	r3, [r7, #15]
 8007528:	e00a      	b.n	8007540 <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	2b03      	cmp	r3, #3
 800752e:	d102      	bne.n	8007536 <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 8007530:	23f8      	movs	r3, #248	; 0xf8
 8007532:	73fb      	strb	r3, [r7, #15]
 8007534:	e004      	b.n	8007540 <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 8007536:	7bbb      	ldrb	r3, [r7, #14]
 8007538:	2b07      	cmp	r3, #7
 800753a:	d101      	bne.n	8007540 <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 800753c:	23f7      	movs	r3, #247	; 0xf7
 800753e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8007540:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8007554:	2300      	movs	r3, #0
 8007556:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 8007558:	f107 030c 	add.w	r3, r7, #12
 800755c:	6879      	ldr	r1, [r7, #4]
 800755e:	4618      	mov	r0, r3
 8007560:	f000 f833 	bl	80075ca <check_gyro_config>
 8007564:	4603      	mov	r3, r0
 8007566:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8007568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d126      	bne.n	80075be <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 8007570:	f107 010c 	add.w	r1, r7, #12
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	2042      	movs	r0, #66	; 0x42
 800757a:	f7ff fb68 	bl	8006c4e <bmi160_set_regs>
 800757e:	4603      	mov	r3, r0
 8007580:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8007582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d119      	bne.n	80075be <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	7b5a      	ldrb	r2, [r3, #13]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	7bda      	ldrb	r2, [r3, #15]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 800759a:	f107 030c 	add.w	r3, r7, #12
 800759e:	1c59      	adds	r1, r3, #1
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	2043      	movs	r0, #67	; 0x43
 80075a6:	f7ff fb52 	bl	8006c4e <bmi160_set_regs>
 80075aa:	4603      	mov	r3, r0
 80075ac:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80075ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d103      	bne.n	80075be <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	7b9a      	ldrb	r2, [r3, #14]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 80075be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b084      	sub	sp, #16
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	2202      	movs	r2, #2
 80075d8:	6879      	ldr	r1, [r7, #4]
 80075da:	2042      	movs	r0, #66	; 0x42
 80075dc:	f7ff fb04 	bl	8006be8 <bmi160_get_regs>
 80075e0:	4603      	mov	r3, r0
 80075e2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80075e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d11b      	bne.n	8007624 <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 80075ec:	6839      	ldr	r1, [r7, #0]
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f81e 	bl	8007630 <process_gyro_odr>
 80075f4:	4603      	mov	r3, r0
 80075f6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80075f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d111      	bne.n	8007624 <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f848 	bl	8007698 <process_gyro_bw>
 8007608:	4603      	mov	r3, r0
 800760a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800760c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d107      	bne.n	8007624 <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3301      	adds	r3, #1
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	4618      	mov	r0, r3
 800761c:	f000 f86b 	bl	80076f6 <process_gyro_range>
 8007620:	4603      	mov	r3, r0
 8007622:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8007624:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800763a:	2300      	movs	r3, #0
 800763c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800763e:	2300      	movs	r3, #0
 8007640:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8007642:	2300      	movs	r3, #0
 8007644:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	7b5b      	ldrb	r3, [r3, #13]
 800764a:	2b0d      	cmp	r3, #13
 800764c:	d81a      	bhi.n	8007684 <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	7b5a      	ldrb	r2, [r3, #13]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	7c5b      	ldrb	r3, [r3, #17]
 8007656:	429a      	cmp	r2, r3
 8007658:	d016      	beq.n	8007688 <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	7b5b      	ldrb	r3, [r3, #13]
 800765e:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	f023 030f 	bic.w	r3, r3, #15
 8007668:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 800766a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800766e:	f003 030f 	and.w	r3, r3, #15
 8007672:	b25a      	sxtb	r2, r3
 8007674:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007678:	4313      	orrs	r3, r2
 800767a:	b25b      	sxtb	r3, r3
 800767c:	b2da      	uxtb	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	701a      	strb	r2, [r3, #0]
 8007682:	e001      	b.n	8007688 <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8007684:	23fc      	movs	r3, #252	; 0xfc
 8007686:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8007688:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80076a6:	2300      	movs	r3, #0
 80076a8:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	7bdb      	ldrb	r3, [r3, #15]
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d815      	bhi.n	80076e2 <process_gyro_bw+0x4a>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	7bdb      	ldrb	r3, [r3, #15]
 80076ba:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80076c4:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 80076c6:	7b7b      	ldrb	r3, [r7, #13]
 80076c8:	011b      	lsls	r3, r3, #4
 80076ca:	b25b      	sxtb	r3, r3
 80076cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80076d0:	b25a      	sxtb	r2, r3
 80076d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	b25b      	sxtb	r3, r3
 80076da:	b2da      	uxtb	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	701a      	strb	r2, [r3, #0]
 80076e0:	e001      	b.n	80076e6 <process_gyro_bw+0x4e>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80076e2:	23fc      	movs	r3, #252	; 0xfc
 80076e4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80076e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b085      	sub	sp, #20
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8007700:	2300      	movs	r3, #0
 8007702:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8007704:	2300      	movs	r3, #0
 8007706:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8007708:	2300      	movs	r3, #0
 800770a:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	7b9b      	ldrb	r3, [r3, #14]
 8007710:	2b04      	cmp	r3, #4
 8007712:	d81a      	bhi.n	800774a <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	7b9a      	ldrb	r2, [r3, #14]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	7c9b      	ldrb	r3, [r3, #18]
 800771c:	429a      	cmp	r2, r3
 800771e:	d016      	beq.n	800774e <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	7b9b      	ldrb	r3, [r3, #14]
 8007724:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	f023 0307 	bic.w	r3, r3, #7
 800772e:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 8007730:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007734:	f003 0307 	and.w	r3, r3, #7
 8007738:	b25a      	sxtb	r2, r3
 800773a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800773e:	4313      	orrs	r3, r2
 8007740:	b25b      	sxtb	r3, r3
 8007742:	b2da      	uxtb	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	701a      	strb	r2, [r3, #0]
 8007748:	e001      	b.n	800774e <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800774a:	23fc      	movs	r3, #252	; 0xfc
 800774c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800774e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8007766:	2300      	movs	r3, #0
 8007768:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 800776a:	2300      	movs	r3, #0
 800776c:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	791b      	ldrb	r3, [r3, #4]
 8007772:	2b0f      	cmp	r3, #15
 8007774:	d92b      	bls.n	80077ce <set_accel_pwr+0x70>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	791b      	ldrb	r3, [r3, #4]
 800777a:	2b12      	cmp	r3, #18
 800777c:	d827      	bhi.n	80077ce <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	791a      	ldrb	r2, [r3, #4]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	7a1b      	ldrb	r3, [r3, #8]
 8007786:	429a      	cmp	r2, r3
 8007788:	d024      	beq.n	80077d4 <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 800778a:	f107 030e 	add.w	r3, r7, #14
 800778e:	6879      	ldr	r1, [r7, #4]
 8007790:	4618      	mov	r0, r3
 8007792:	f000 f826 	bl	80077e2 <process_under_sampling>
 8007796:	4603      	mov	r3, r0
 8007798:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800779a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d118      	bne.n	80077d4 <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	1d19      	adds	r1, r3, #4
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	207e      	movs	r0, #126	; 0x7e
 80077ac:	f7ff fa4f 	bl	8006c4e <bmi160_set_regs>
 80077b0:	4603      	mov	r3, r0
 80077b2:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	7a1b      	ldrb	r3, [r3, #8]
 80077b8:	2b10      	cmp	r3, #16
 80077ba:	d103      	bne.n	80077c4 <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	2005      	movs	r0, #5
 80077c2:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	791a      	ldrb	r2, [r3, #4]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 80077cc:	e002      	b.n	80077d4 <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 80077ce:	23f3      	movs	r3, #243	; 0xf3
 80077d0:	73fb      	strb	r3, [r7, #15]
 80077d2:	e000      	b.n	80077d6 <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 80077d4:	bf00      	nop
    }

    return rslt;
 80077d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b084      	sub	sp, #16
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80077ec:	2300      	movs	r3, #0
 80077ee:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 80077f0:	2300      	movs	r3, #0
 80077f2:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2201      	movs	r2, #1
 80077f8:	6879      	ldr	r1, [r7, #4]
 80077fa:	2040      	movs	r0, #64	; 0x40
 80077fc:	f7ff f9f4 	bl	8006be8 <bmi160_get_regs>
 8007800:	4603      	mov	r3, r0
 8007802:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8007804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d139      	bne.n	8007880 <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	791b      	ldrb	r3, [r3, #4]
 8007810:	2b12      	cmp	r3, #18
 8007812:	d120      	bne.n	8007856 <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800781c:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 800781e:	7bbb      	ldrb	r3, [r7, #14]
 8007820:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007824:	b2da      	uxtb	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2201      	movs	r2, #1
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	2040      	movs	r0, #64	; 0x40
 8007832:	f7ff fa0c 	bl	8006c4e <bmi160_set_regs>
 8007836:	4603      	mov	r3, r0
 8007838:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 800783a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d11e      	bne.n	8007880 <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 8007842:	f107 010c 	add.w	r1, r7, #12
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2202      	movs	r2, #2
 800784a:	2058      	movs	r0, #88	; 0x58
 800784c:	f7ff f9ff 	bl	8006c4e <bmi160_set_regs>
 8007850:	4603      	mov	r3, r0
 8007852:	73fb      	strb	r3, [r7, #15]
 8007854:	e014      	b.n	8007880 <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	b25b      	sxtb	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	da0f      	bge.n	8007880 <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007868:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	7bba      	ldrb	r2, [r7, #14]
 800786e:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2201      	movs	r2, #1
 8007874:	6879      	ldr	r1, [r7, #4]
 8007876:	2040      	movs	r0, #64	; 0x40
 8007878:	f7ff f9e9 	bl	8006c4e <bmi160_set_regs>
 800787c:	4603      	mov	r3, r0
 800787e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8007880:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8007894:	2300      	movs	r3, #0
 8007896:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	7b1b      	ldrb	r3, [r3, #12]
 800789c:	2b14      	cmp	r3, #20
 800789e:	d007      	beq.n	80078b0 <set_gyro_pwr+0x24>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	7b1b      	ldrb	r3, [r3, #12]
 80078a4:	2b15      	cmp	r3, #21
 80078a6:	d003      	beq.n	80078b0 <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 80078ac:	2b17      	cmp	r3, #23
 80078ae:	d129      	bne.n	8007904 <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	7b1a      	ldrb	r2, [r3, #12]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	7c1b      	ldrb	r3, [r3, #16]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d025      	beq.n	8007908 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f103 010c 	add.w	r1, r3, #12
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	207e      	movs	r0, #126	; 0x7e
 80078c8:	f7ff f9c1 	bl	8006c4e <bmi160_set_regs>
 80078cc:	4603      	mov	r3, r0
 80078ce:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	7c1b      	ldrb	r3, [r3, #16]
 80078d4:	2b14      	cmp	r3, #20
 80078d6:	d104      	bne.n	80078e2 <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	2050      	movs	r0, #80	; 0x50
 80078de:	4798      	blx	r3
 80078e0:	e00b      	b.n	80078fa <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	7c1b      	ldrb	r3, [r3, #16]
 80078e6:	2b17      	cmp	r3, #23
 80078e8:	d107      	bne.n	80078fa <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 80078ee:	2b15      	cmp	r3, #21
 80078f0:	d103      	bne.n	80078fa <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f6:	200a      	movs	r0, #10
 80078f8:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	7b1a      	ldrb	r2, [r3, #12]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8007902:	e001      	b.n	8007908 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 8007904:	23f3      	movs	r3, #243	; 0xf3
 8007906:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8007908:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b08c      	sub	sp, #48	; 0x30
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	607a      	str	r2, [r7, #4]
 8007920:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8007922:	2300      	movs	r3, #0
 8007924:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t data_array[9] = { 0 };
 8007928:	2300      	movs	r3, #0
 800792a:	617b      	str	r3, [r7, #20]
 800792c:	f107 0318 	add.w	r3, r7, #24
 8007930:	2200      	movs	r2, #0
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	711a      	strb	r2, [r3, #4]
    uint8_t time_0 = 0;
 8007936:	2300      	movs	r3, #0
 8007938:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t time_1 = 0;
 800793c:	2300      	movs	r3, #0
 800793e:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t time_2 = 0;
 8007940:	2300      	movs	r3, #0
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	b29b      	uxth	r3, r3
 8007948:	3306      	adds	r3, #6
 800794a:	b29a      	uxth	r2, r3
 800794c:	f107 0114 	add.w	r1, r7, #20
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2012      	movs	r0, #18
 8007954:	f7ff f948 	bl	8006be8 <bmi160_get_regs>
 8007958:	4603      	mov	r3, r0
 800795a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (rslt == BMI160_OK)
 800795e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007962:	2b00      	cmp	r3, #0
 8007964:	f040 8098 	bne.w	8007a98 <get_accel_data+0x184>
    {
        /* Accel Data */
        lsb = data_array[idx++];
 8007968:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800796c:	1c5a      	adds	r2, r3, #1
 800796e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007972:	3330      	adds	r3, #48	; 0x30
 8007974:	443b      	add	r3, r7
 8007976:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800797a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 800797e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007982:	1c5a      	adds	r2, r3, #1
 8007984:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007988:	3330      	adds	r3, #48	; 0x30
 800798a:	443b      	add	r3, r7
 800798c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007990:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8007994:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007998:	021b      	lsls	r3, r3, #8
 800799a:	b21a      	sxth	r2, r3
 800799c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079a0:	b21b      	sxth	r3, r3
 80079a2:	4313      	orrs	r3, r2
 80079a4:	843b      	strh	r3, [r7, #32]
        accel->x = msblsb; /* Data in X axis */
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	8c3a      	ldrh	r2, [r7, #32]
 80079aa:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 80079ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80079b6:	3330      	adds	r3, #48	; 0x30
 80079b8:	443b      	add	r3, r7
 80079ba:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80079be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 80079c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80079c6:	1c5a      	adds	r2, r3, #1
 80079c8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80079cc:	3330      	adds	r3, #48	; 0x30
 80079ce:	443b      	add	r3, r7
 80079d0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80079d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80079d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80079dc:	021b      	lsls	r3, r3, #8
 80079de:	b21a      	sxth	r2, r3
 80079e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079e4:	b21b      	sxth	r3, r3
 80079e6:	4313      	orrs	r3, r2
 80079e8:	843b      	strh	r3, [r7, #32]
        accel->y = msblsb; /* Data in Y axis */
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	8c3a      	ldrh	r2, [r7, #32]
 80079ee:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 80079f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80079f4:	1c5a      	adds	r2, r3, #1
 80079f6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80079fa:	3330      	adds	r3, #48	; 0x30
 80079fc:	443b      	add	r3, r7
 80079fe:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8007a06:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007a0a:	1c5a      	adds	r2, r3, #1
 8007a0c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007a10:	3330      	adds	r3, #48	; 0x30
 8007a12:	443b      	add	r3, r7
 8007a14:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007a18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8007a1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007a20:	021b      	lsls	r3, r3, #8
 8007a22:	b21a      	sxth	r2, r3
 8007a24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a28:	b21b      	sxth	r3, r3
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	843b      	strh	r3, [r7, #32]
        accel->z = msblsb; /* Data in Z axis */
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	8c3a      	ldrh	r2, [r7, #32]
 8007a32:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d12a      	bne.n	8007a90 <get_accel_data+0x17c>
        {
            time_0 = data_array[idx++];
 8007a3a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007a3e:	1c5a      	adds	r2, r3, #1
 8007a40:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007a44:	3330      	adds	r3, #48	; 0x30
 8007a46:	443b      	add	r3, r7
 8007a48:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007a4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8007a50:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007a5a:	3330      	adds	r3, #48	; 0x30
 8007a5c:	443b      	add	r3, r7
 8007a5e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	021b      	lsls	r3, r3, #8
 8007a66:	857b      	strh	r3, [r7, #42]	; 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8007a68:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007a6c:	1c5a      	adds	r2, r3, #1
 8007a6e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007a72:	3330      	adds	r3, #48	; 0x30
 8007a74:	443b      	add	r3, r7
 8007a76:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007a7a:	041b      	lsls	r3, r3, #16
 8007a7c:	627b      	str	r3, [r7, #36]	; 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8007a7e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	431a      	orrs	r2, r3
 8007a84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007a88:	431a      	orrs	r2, r3
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	609a      	str	r2, [r3, #8]
 8007a8e:	e006      	b.n	8007a9e <get_accel_data+0x18a>
        }
        else
        {
            accel->sensortime = 0;
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2200      	movs	r2, #0
 8007a94:	609a      	str	r2, [r3, #8]
 8007a96:	e002      	b.n	8007a9e <get_accel_data+0x18a>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8007a98:	23fe      	movs	r3, #254	; 0xfe
 8007a9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return rslt;
 8007a9e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3730      	adds	r7, #48	; 0x30
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b08c      	sub	sp, #48	; 0x30
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	60b9      	str	r1, [r7, #8]
 8007ab4:	607a      	str	r2, [r7, #4]
 8007ab6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t data_array[15] = { 0 };
 8007abe:	2300      	movs	r3, #0
 8007ac0:	613b      	str	r3, [r7, #16]
 8007ac2:	f107 0314 	add.w	r3, r7, #20
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	601a      	str	r2, [r3, #0]
 8007aca:	605a      	str	r2, [r3, #4]
 8007acc:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t time_1 = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t time_2 = 0;
 8007ada:	2300      	movs	r3, #0
 8007adc:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
 8007ade:	7bfb      	ldrb	r3, [r7, #15]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d17b      	bne.n	8007bdc <get_gyro_data+0x132>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 8007ae4:	f107 0110 	add.w	r1, r7, #16
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2206      	movs	r2, #6
 8007aec:	200c      	movs	r0, #12
 8007aee:	f7ff f87b 	bl	8006be8 <bmi160_get_regs>
 8007af2:	4603      	mov	r3, r0
 8007af4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rslt == BMI160_OK)
 8007af8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d169      	bne.n	8007bd4 <get_gyro_data+0x12a>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 8007b00:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007b04:	1c5a      	adds	r2, r3, #1
 8007b06:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007b0a:	3330      	adds	r3, #48	; 0x30
 8007b0c:	443b      	add	r3, r7
 8007b0e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8007b16:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007b20:	3330      	adds	r3, #48	; 0x30
 8007b22:	443b      	add	r3, r7
 8007b24:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007b28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8007b2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007b30:	021b      	lsls	r3, r3, #8
 8007b32:	b21a      	sxth	r2, r3
 8007b34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b38:	b21b      	sxth	r3, r3
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* Data in X axis */
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	8c3a      	ldrh	r2, [r7, #32]
 8007b42:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8007b44:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007b4e:	3330      	adds	r3, #48	; 0x30
 8007b50:	443b      	add	r3, r7
 8007b52:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8007b5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007b5e:	1c5a      	adds	r2, r3, #1
 8007b60:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007b64:	3330      	adds	r3, #48	; 0x30
 8007b66:	443b      	add	r3, r7
 8007b68:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007b6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8007b70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007b74:	021b      	lsls	r3, r3, #8
 8007b76:	b21a      	sxth	r2, r3
 8007b78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b7c:	b21b      	sxth	r3, r3
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* Data in Y axis */
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	8c3a      	ldrh	r2, [r7, #32]
 8007b86:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8007b88:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007b8c:	1c5a      	adds	r2, r3, #1
 8007b8e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007b92:	3330      	adds	r3, #48	; 0x30
 8007b94:	443b      	add	r3, r7
 8007b96:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8007b9e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007ba2:	1c5a      	adds	r2, r3, #1
 8007ba4:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007ba8:	3330      	adds	r3, #48	; 0x30
 8007baa:	443b      	add	r3, r7
 8007bac:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007bb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8007bb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007bb8:	021b      	lsls	r3, r3, #8
 8007bba:	b21a      	sxth	r2, r3
 8007bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bc0:	b21b      	sxth	r3, r3
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* Data in Z axis */
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	8c3a      	ldrh	r2, [r7, #32]
 8007bca:	809a      	strh	r2, [r3, #4]
            gyro->sensortime = 0;
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	609a      	str	r2, [r3, #8]
 8007bd2:	e0ae      	b.n	8007d32 <get_gyro_data+0x288>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8007bd4:	23fe      	movs	r3, #254	; 0xfe
 8007bd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007bda:	e0aa      	b.n	8007d32 <get_gyro_data+0x288>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	330c      	adds	r3, #12
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	f107 0110 	add.w	r1, r7, #16
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	200c      	movs	r0, #12
 8007bec:	f7fe fffc 	bl	8006be8 <bmi160_get_regs>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rslt == BMI160_OK)
 8007bf6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f040 8096 	bne.w	8007d2c <get_gyro_data+0x282>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 8007c00:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c04:	1c5a      	adds	r2, r3, #1
 8007c06:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007c0a:	3330      	adds	r3, #48	; 0x30
 8007c0c:	443b      	add	r3, r7
 8007c0e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8007c16:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007c20:	3330      	adds	r3, #48	; 0x30
 8007c22:	443b      	add	r3, r7
 8007c24:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007c28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8007c2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007c30:	021b      	lsls	r3, r3, #8
 8007c32:	b21a      	sxth	r2, r3
 8007c34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c38:	b21b      	sxth	r3, r3
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* gyro X axis data */
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	8c3a      	ldrh	r2, [r7, #32]
 8007c42:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8007c44:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c48:	1c5a      	adds	r2, r3, #1
 8007c4a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007c4e:	3330      	adds	r3, #48	; 0x30
 8007c50:	443b      	add	r3, r7
 8007c52:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8007c5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c5e:	1c5a      	adds	r2, r3, #1
 8007c60:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007c64:	3330      	adds	r3, #48	; 0x30
 8007c66:	443b      	add	r3, r7
 8007c68:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8007c70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007c74:	021b      	lsls	r3, r3, #8
 8007c76:	b21a      	sxth	r2, r3
 8007c78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c7c:	b21b      	sxth	r3, r3
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* gyro Y axis data */
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	8c3a      	ldrh	r2, [r7, #32]
 8007c86:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8007c88:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c8c:	1c5a      	adds	r2, r3, #1
 8007c8e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007c92:	3330      	adds	r3, #48	; 0x30
 8007c94:	443b      	add	r3, r7
 8007c96:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8007c9e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007ca2:	1c5a      	adds	r2, r3, #1
 8007ca4:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007ca8:	3330      	adds	r3, #48	; 0x30
 8007caa:	443b      	add	r3, r7
 8007cac:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007cb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8007cb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007cb8:	021b      	lsls	r3, r3, #8
 8007cba:	b21a      	sxth	r2, r3
 8007cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cc0:	b21b      	sxth	r3, r3
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* gyro Z axis data */
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	8c3a      	ldrh	r2, [r7, #32]
 8007cca:	809a      	strh	r2, [r3, #4]
            idx = idx + 6;
 8007ccc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007cd0:	3306      	adds	r3, #6
 8007cd2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            time_0 = data_array[idx++];
 8007cd6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007cda:	1c5a      	adds	r2, r3, #1
 8007cdc:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007ce0:	3330      	adds	r3, #48	; 0x30
 8007ce2:	443b      	add	r3, r7
 8007ce4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007ce8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8007cec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007cf0:	1c5a      	adds	r2, r3, #1
 8007cf2:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007cf6:	3330      	adds	r3, #48	; 0x30
 8007cf8:	443b      	add	r3, r7
 8007cfa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	021b      	lsls	r3, r3, #8
 8007d02:	857b      	strh	r3, [r7, #42]	; 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8007d04:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007d08:	1c5a      	adds	r2, r3, #1
 8007d0a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007d0e:	3330      	adds	r3, #48	; 0x30
 8007d10:	443b      	add	r3, r7
 8007d12:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007d16:	041b      	lsls	r3, r3, #16
 8007d18:	627b      	str	r3, [r7, #36]	; 0x24
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8007d1a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007d24:	431a      	orrs	r2, r3
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	609a      	str	r2, [r3, #8]
 8007d2a:	e002      	b.n	8007d32 <get_gyro_data+0x288>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8007d2c:	23fe      	movs	r3, #254	; 0xfe
 8007d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
    }

    return rslt;
 8007d32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3730      	adds	r7, #48	; 0x30
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b08c      	sub	sp, #48	; 0x30
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
 8007d48:	603b      	str	r3, [r7, #0]
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t data_array[15] = { 0 };
 8007d54:	2300      	movs	r3, #0
 8007d56:	613b      	str	r3, [r7, #16]
 8007d58:	f107 0314 	add.w	r3, r7, #20
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	601a      	str	r2, [r3, #0]
 8007d60:	605a      	str	r2, [r3, #4]
 8007d62:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t time_1 = 0;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t time_2 = 0;
 8007d70:	2300      	movs	r3, #0
 8007d72:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	330c      	adds	r3, #12
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	f107 0110 	add.w	r1, r7, #16
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	200c      	movs	r0, #12
 8007d84:	f7fe ff30 	bl	8006be8 <bmi160_get_regs>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (rslt == BMI160_OK)
 8007d8e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f040 8109 	bne.w	8007faa <get_accel_gyro_data+0x26c>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
 8007d98:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007d9c:	1c5a      	adds	r2, r3, #1
 8007d9e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007da2:	3330      	adds	r3, #48	; 0x30
 8007da4:	443b      	add	r3, r7
 8007da6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8007dae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007db8:	3330      	adds	r3, #48	; 0x30
 8007dba:	443b      	add	r3, r7
 8007dbc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007dc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8007dc4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007dc8:	021b      	lsls	r3, r3, #8
 8007dca:	b21a      	sxth	r2, r3
 8007dcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007dd0:	b21b      	sxth	r3, r3
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	843b      	strh	r3, [r7, #32]
        gyro->x = msblsb; /* gyro X axis data */
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	8c3a      	ldrh	r2, [r7, #32]
 8007dda:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8007ddc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007de0:	1c5a      	adds	r2, r3, #1
 8007de2:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007de6:	3330      	adds	r3, #48	; 0x30
 8007de8:	443b      	add	r3, r7
 8007dea:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8007df2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007dfc:	3330      	adds	r3, #48	; 0x30
 8007dfe:	443b      	add	r3, r7
 8007e00:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007e04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8007e08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007e0c:	021b      	lsls	r3, r3, #8
 8007e0e:	b21a      	sxth	r2, r3
 8007e10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e14:	b21b      	sxth	r3, r3
 8007e16:	4313      	orrs	r3, r2
 8007e18:	843b      	strh	r3, [r7, #32]
        gyro->y = msblsb; /* gyro Y axis data */
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	8c3a      	ldrh	r2, [r7, #32]
 8007e1e:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8007e20:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007e24:	1c5a      	adds	r2, r3, #1
 8007e26:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007e2a:	3330      	adds	r3, #48	; 0x30
 8007e2c:	443b      	add	r3, r7
 8007e2e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8007e36:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007e3a:	1c5a      	adds	r2, r3, #1
 8007e3c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007e40:	3330      	adds	r3, #48	; 0x30
 8007e42:	443b      	add	r3, r7
 8007e44:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007e48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8007e4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007e50:	021b      	lsls	r3, r3, #8
 8007e52:	b21a      	sxth	r2, r3
 8007e54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e58:	b21b      	sxth	r3, r3
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	843b      	strh	r3, [r7, #32]
        gyro->z = msblsb; /* gyro Z axis data */
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	8c3a      	ldrh	r2, [r7, #32]
 8007e62:	809a      	strh	r2, [r3, #4]
        /* Accel Data */
        lsb = data_array[idx++];
 8007e64:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007e68:	1c5a      	adds	r2, r3, #1
 8007e6a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007e6e:	3330      	adds	r3, #48	; 0x30
 8007e70:	443b      	add	r3, r7
 8007e72:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8007e7a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007e7e:	1c5a      	adds	r2, r3, #1
 8007e80:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007e84:	3330      	adds	r3, #48	; 0x30
 8007e86:	443b      	add	r3, r7
 8007e88:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8007e90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007e94:	021b      	lsls	r3, r3, #8
 8007e96:	b21a      	sxth	r2, r3
 8007e98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e9c:	b21b      	sxth	r3, r3
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	843b      	strh	r3, [r7, #32]
        accel->x = (int16_t)msblsb; /* accel X axis data */
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	8c3a      	ldrh	r2, [r7, #32]
 8007ea6:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8007ea8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007eac:	1c5a      	adds	r2, r3, #1
 8007eae:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007eb2:	3330      	adds	r3, #48	; 0x30
 8007eb4:	443b      	add	r3, r7
 8007eb6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8007ebe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007ec2:	1c5a      	adds	r2, r3, #1
 8007ec4:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007ec8:	3330      	adds	r3, #48	; 0x30
 8007eca:	443b      	add	r3, r7
 8007ecc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007ed0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8007ed4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007ed8:	021b      	lsls	r3, r3, #8
 8007eda:	b21a      	sxth	r2, r3
 8007edc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ee0:	b21b      	sxth	r3, r3
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	843b      	strh	r3, [r7, #32]
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	8c3a      	ldrh	r2, [r7, #32]
 8007eea:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8007eec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007ef0:	1c5a      	adds	r2, r3, #1
 8007ef2:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007ef6:	3330      	adds	r3, #48	; 0x30
 8007ef8:	443b      	add	r3, r7
 8007efa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8007f02:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007f0c:	3330      	adds	r3, #48	; 0x30
 8007f0e:	443b      	add	r3, r7
 8007f10:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007f14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8007f18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007f1c:	021b      	lsls	r3, r3, #8
 8007f1e:	b21a      	sxth	r2, r3
 8007f20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f24:	b21b      	sxth	r3, r3
 8007f26:	4313      	orrs	r3, r2
 8007f28:	843b      	strh	r3, [r7, #32]
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	8c3a      	ldrh	r2, [r7, #32]
 8007f2e:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d132      	bne.n	8007f9c <get_accel_gyro_data+0x25e>
        {
            time_0 = data_array[idx++];
 8007f36:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007f3a:	1c5a      	adds	r2, r3, #1
 8007f3c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007f40:	3330      	adds	r3, #48	; 0x30
 8007f42:	443b      	add	r3, r7
 8007f44:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007f48:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8007f4c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007f50:	1c5a      	adds	r2, r3, #1
 8007f52:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007f56:	3330      	adds	r3, #48	; 0x30
 8007f58:	443b      	add	r3, r7
 8007f5a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	021b      	lsls	r3, r3, #8
 8007f62:	857b      	strh	r3, [r7, #42]	; 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8007f64:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8007f6e:	3330      	adds	r3, #48	; 0x30
 8007f70:	443b      	add	r3, r7
 8007f72:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007f76:	041b      	lsls	r3, r3, #16
 8007f78:	627b      	str	r3, [r7, #36]	; 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8007f7a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007f84:	431a      	orrs	r2, r3
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	609a      	str	r2, [r3, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8007f8a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007f94:	431a      	orrs	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	609a      	str	r2, [r3, #8]
 8007f9a:	e009      	b.n	8007fb0 <get_accel_gyro_data+0x272>
        }
        else
        {
            accel->sensortime = 0;
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	609a      	str	r2, [r3, #8]
            gyro->sensortime = 0;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	609a      	str	r2, [r3, #8]
 8007fa8:	e002      	b.n	8007fb0 <get_accel_gyro_data+0x272>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8007faa:	23fe      	movs	r3, #254	; 0xfe
 8007fac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return rslt;
 8007fb0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3730      	adds	r7, #48	; 0x30
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <config_sec_if>:

/*!
 * @brief This API configure the secondary interface.
 */
static int8_t config_sec_if(const struct bmi160_dev *dev)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t if_conf = 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73bb      	strb	r3, [r7, #14]
    uint8_t cmd = BMI160_AUX_NORMAL_MODE;
 8007fc8:	2319      	movs	r3, #25
 8007fca:	737b      	strb	r3, [r7, #13]

    /* set the aux power mode to normal*/
    rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
 8007fcc:	f107 010d 	add.w	r1, r7, #13
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	207e      	movs	r0, #126	; 0x7e
 8007fd6:	f7fe fe3a 	bl	8006c4e <bmi160_set_regs>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8007fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d11e      	bne.n	8008024 <config_sec_if+0x68>
    {
        /* 0.5ms delay - refer datasheet table 24*/
        dev->delay_ms(1);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fea:	2001      	movs	r0, #1
 8007fec:	4798      	blx	r3
        rslt = bmi160_get_regs(BMI160_IF_CONF_ADDR, &if_conf, 1, dev);
 8007fee:	f107 010e 	add.w	r1, r7, #14
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	206b      	movs	r0, #107	; 0x6b
 8007ff8:	f7fe fdf6 	bl	8006be8 <bmi160_get_regs>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]
        if_conf |= (uint8_t)(1 << 5);
 8008000:	7bbb      	ldrb	r3, [r7, #14]
 8008002:	f043 0320 	orr.w	r3, r3, #32
 8008006:	b2db      	uxtb	r3, r3
 8008008:	73bb      	strb	r3, [r7, #14]
        if (rslt == BMI160_OK)
 800800a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d108      	bne.n	8008024 <config_sec_if+0x68>
        {
            /*enable the secondary interface also*/
            rslt = bmi160_set_regs(BMI160_IF_CONF_ADDR, &if_conf, 1, dev);
 8008012:	f107 010e 	add.w	r1, r7, #14
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	206b      	movs	r0, #107	; 0x6b
 800801c:	f7fe fe17 	bl	8006c4e <bmi160_set_regs>
 8008020:	4603      	mov	r3, r0
 8008022:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8008024:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <config_aux_odr>:

/*!
 * @brief This API configure the ODR of the auxiliary sensor.
 */
static int8_t config_aux_odr(const struct bmi160_dev *dev)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t aux_odr;

    rslt = bmi160_get_regs(BMI160_AUX_ODR_ADDR, &aux_odr, 1, dev);
 8008038:	f107 010e 	add.w	r1, r7, #14
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	2044      	movs	r0, #68	; 0x44
 8008042:	f7fe fdd1 	bl	8006be8 <bmi160_get_regs>
 8008046:	4603      	mov	r3, r0
 8008048:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800804a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d112      	bne.n	8008078 <config_aux_odr+0x48>
    {
        aux_odr = (uint8_t)(dev->aux_cfg.aux_odr);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	7d1b      	ldrb	r3, [r3, #20]
 8008056:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800805a:	b2db      	uxtb	r3, r3
 800805c:	73bb      	strb	r3, [r7, #14]

        /* Set the secondary interface ODR
         * i.e polling rate of secondary sensor */
        rslt = bmi160_set_regs(BMI160_AUX_ODR_ADDR, &aux_odr, 1, dev);
 800805e:	f107 010e 	add.w	r1, r7, #14
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	2044      	movs	r0, #68	; 0x44
 8008068:	f7fe fdf1 	bl	8006c4e <bmi160_set_regs>
 800806c:	4603      	mov	r3, r0
 800806e:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_AUX_COM_DELAY);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008074:	200a      	movs	r0, #10
 8008076:	4798      	blx	r3
    }

    return rslt;
 8008078:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <map_read_len>:

/*!
 * @brief This API maps the actual burst read length set by user.
 */
static int8_t map_read_len(uint16_t *len, const struct bmi160_dev *dev)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	73fb      	strb	r3, [r7, #15]

    switch (dev->aux_cfg.aux_rd_burst_len)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	7d1b      	ldrb	r3, [r3, #20]
 8008096:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b03      	cmp	r3, #3
 800809e:	d81b      	bhi.n	80080d8 <map_read_len+0x54>
 80080a0:	a201      	add	r2, pc, #4	; (adr r2, 80080a8 <map_read_len+0x24>)
 80080a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a6:	bf00      	nop
 80080a8:	080080b9 	.word	0x080080b9
 80080ac:	080080c1 	.word	0x080080c1
 80080b0:	080080c9 	.word	0x080080c9
 80080b4:	080080d1 	.word	0x080080d1
    {
        case BMI160_AUX_READ_LEN_0:
            *len = 1;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	801a      	strh	r2, [r3, #0]
            break;
 80080be:	e00e      	b.n	80080de <map_read_len+0x5a>
        case BMI160_AUX_READ_LEN_1:
            *len = 2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	801a      	strh	r2, [r3, #0]
            break;
 80080c6:	e00a      	b.n	80080de <map_read_len+0x5a>
        case BMI160_AUX_READ_LEN_2:
            *len = 6;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2206      	movs	r2, #6
 80080cc:	801a      	strh	r2, [r3, #0]
            break;
 80080ce:	e006      	b.n	80080de <map_read_len+0x5a>
        case BMI160_AUX_READ_LEN_3:
            *len = 8;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2208      	movs	r2, #8
 80080d4:	801a      	strh	r2, [r3, #0]
            break;
 80080d6:	e002      	b.n	80080de <map_read_len+0x5a>
        default:
            rslt = BMI160_E_INVALID_INPUT;
 80080d8:	23fb      	movs	r3, #251	; 0xfb
 80080da:	73fb      	strb	r3, [r7, #15]
            break;
 80080dc:	bf00      	nop
    }

    return rslt;
 80080de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <config_aux_settg>:

/*!
 * @brief This API configure the settings of auxiliary sensor.
 */
static int8_t config_aux_settg(const struct bmi160_dev *dev)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = config_sec_if(dev);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7ff ff5f 	bl	8007fbc <config_sec_if>
 80080fe:	4603      	mov	r3, r0
 8008100:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8008102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d104      	bne.n	8008114 <config_aux_settg+0x24>
    {
        /* Configures the auxiliary interface settings */
        rslt = bmi160_config_aux_mode(dev);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f7ff f845 	bl	800719a <bmi160_config_aux_mode>
 8008110:	4603      	mov	r3, r0
 8008112:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008114:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <extract_aux_read>:
static int8_t extract_aux_read(uint16_t map_len,
                               uint8_t reg_addr,
                               uint8_t *aux_data,
                               uint16_t len,
                               const struct bmi160_dev *dev)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b088      	sub	sp, #32
 8008124:	af00      	add	r7, sp, #0
 8008126:	60ba      	str	r2, [r7, #8]
 8008128:	461a      	mov	r2, r3
 800812a:	4603      	mov	r3, r0
 800812c:	81fb      	strh	r3, [r7, #14]
 800812e:	460b      	mov	r3, r1
 8008130:	737b      	strb	r3, [r7, #13]
 8008132:	4613      	mov	r3, r2
 8008134:	80fb      	strh	r3, [r7, #6]
    int8_t rslt = BMI160_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	77fb      	strb	r3, [r7, #31]
    uint8_t data[8] = { 0, };
 800813a:	2300      	movs	r3, #0
 800813c:	613b      	str	r3, [r7, #16]
 800813e:	2300      	movs	r3, #0
 8008140:	617b      	str	r3, [r7, #20]
    uint8_t read_addr = BMI160_AUX_DATA_ADDR;
 8008142:	2304      	movs	r3, #4
 8008144:	76fb      	strb	r3, [r7, #27]
    uint8_t count = 0;
 8008146:	2300      	movs	r3, #0
 8008148:	77bb      	strb	r3, [r7, #30]
    uint8_t read_count;
    uint8_t read_len = (uint8_t)map_len;
 800814a:	89fb      	ldrh	r3, [r7, #14]
 800814c:	773b      	strb	r3, [r7, #28]

    for (; count < len;)
 800814e:	e054      	b.n	80081fa <extract_aux_read+0xda>
    {
        /* set address to read */
        rslt = bmi160_set_regs(BMI160_AUX_IF_2_ADDR, &reg_addr, 1, dev);
 8008150:	f107 010d 	add.w	r1, r7, #13
 8008154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008156:	2201      	movs	r2, #1
 8008158:	204d      	movs	r0, #77	; 0x4d
 800815a:	f7fe fd78 	bl	8006c4e <bmi160_set_regs>
 800815e:	4603      	mov	r3, r0
 8008160:	77fb      	strb	r3, [r7, #31]
        dev->delay_ms(BMI160_AUX_COM_DELAY);
 8008162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008166:	200a      	movs	r0, #10
 8008168:	4798      	blx	r3
        if (rslt == BMI160_OK)
 800816a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d143      	bne.n	80081fa <extract_aux_read+0xda>
        {
            rslt = bmi160_get_regs(read_addr, data, map_len, dev);
 8008172:	89fa      	ldrh	r2, [r7, #14]
 8008174:	f107 0110 	add.w	r1, r7, #16
 8008178:	7ef8      	ldrb	r0, [r7, #27]
 800817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817c:	f7fe fd34 	bl	8006be8 <bmi160_get_regs>
 8008180:	4603      	mov	r3, r0
 8008182:	77fb      	strb	r3, [r7, #31]
            if (rslt == BMI160_OK)
 8008184:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d133      	bne.n	80081f4 <extract_aux_read+0xd4>
            {
                read_count = 0;
 800818c:	2300      	movs	r3, #0
 800818e:	777b      	strb	r3, [r7, #29]

                /* if read len is less the burst read len
                 * mention by user*/
                if (len < map_len)
 8008190:	88fa      	ldrh	r2, [r7, #6]
 8008192:	89fb      	ldrh	r3, [r7, #14]
 8008194:	429a      	cmp	r2, r3
 8008196:	d202      	bcs.n	800819e <extract_aux_read+0x7e>
                {
                    read_len = (uint8_t)len;
 8008198:	88fb      	ldrh	r3, [r7, #6]
 800819a:	773b      	strb	r3, [r7, #28]
 800819c:	e01a      	b.n	80081d4 <extract_aux_read+0xb4>
                }
                else if ((len - count) < map_len)
 800819e:	88fa      	ldrh	r2, [r7, #6]
 80081a0:	7fbb      	ldrb	r3, [r7, #30]
 80081a2:	1ad2      	subs	r2, r2, r3
 80081a4:	89fb      	ldrh	r3, [r7, #14]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	da14      	bge.n	80081d4 <extract_aux_read+0xb4>
                {
                    read_len = (uint8_t)(len - count);
 80081aa:	88fb      	ldrh	r3, [r7, #6]
 80081ac:	b2da      	uxtb	r2, r3
 80081ae:	7fbb      	ldrb	r3, [r7, #30]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	773b      	strb	r3, [r7, #28]
                }

                for (; read_count < read_len; read_count++)
 80081b4:	e00e      	b.n	80081d4 <extract_aux_read+0xb4>
                {
                    aux_data[count + read_count] = data[read_count];
 80081b6:	7f7a      	ldrb	r2, [r7, #29]
 80081b8:	7fb9      	ldrb	r1, [r7, #30]
 80081ba:	7f7b      	ldrb	r3, [r7, #29]
 80081bc:	440b      	add	r3, r1
 80081be:	4619      	mov	r1, r3
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	440b      	add	r3, r1
 80081c4:	3220      	adds	r2, #32
 80081c6:	443a      	add	r2, r7
 80081c8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80081cc:	701a      	strb	r2, [r3, #0]
                for (; read_count < read_len; read_count++)
 80081ce:	7f7b      	ldrb	r3, [r7, #29]
 80081d0:	3301      	adds	r3, #1
 80081d2:	777b      	strb	r3, [r7, #29]
 80081d4:	7f7a      	ldrb	r2, [r7, #29]
 80081d6:	7f3b      	ldrb	r3, [r7, #28]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d3ec      	bcc.n	80081b6 <extract_aux_read+0x96>
                }

                reg_addr += (uint8_t)map_len;
 80081dc:	89fb      	ldrh	r3, [r7, #14]
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	7b7b      	ldrb	r3, [r7, #13]
 80081e2:	4413      	add	r3, r2
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	737b      	strb	r3, [r7, #13]
                count += (uint8_t)map_len;
 80081e8:	89fb      	ldrh	r3, [r7, #14]
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	7fbb      	ldrb	r3, [r7, #30]
 80081ee:	4413      	add	r3, r2
 80081f0:	77bb      	strb	r3, [r7, #30]
 80081f2:	e002      	b.n	80081fa <extract_aux_read+0xda>
            }
            else
            {
                rslt = BMI160_E_COM_FAIL;
 80081f4:	23fe      	movs	r3, #254	; 0xfe
 80081f6:	77fb      	strb	r3, [r7, #31]
                break;
 80081f8:	e004      	b.n	8008204 <extract_aux_read+0xe4>
    for (; count < len;)
 80081fa:	7fbb      	ldrb	r3, [r7, #30]
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	88fa      	ldrh	r2, [r7, #6]
 8008200:	429a      	cmp	r2, r3
 8008202:	d8a5      	bhi.n	8008150 <extract_aux_read+0x30>
            }
        }
    }

    return rslt;
 8008204:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3720      	adds	r7, #32
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <bridge_validate_data>:

const char space = ' ';
const char semicolon = ';';

// "1097;1919;1508;1508;1919;"
bool bridge_validate_data(char *s, int size) {
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
	int length = strlen(s);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7f7 ffe0 	bl	80001e0 <strlen>
 8008220:	4603      	mov	r3, r0
 8008222:	60fb      	str	r3, [r7, #12]
	if (s == NULL || length < size) {
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <bridge_validate_data+0x22>
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	429a      	cmp	r2, r3
 8008230:	da01      	bge.n	8008236 <bridge_validate_data+0x26>
		return false;
 8008232:	2300      	movs	r3, #0
 8008234:	e000      	b.n	8008238 <bridge_validate_data+0x28>
	}
	return true;
 8008236:	2301      	movs	r3, #1
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <bridge_get_transmit_sigint>:
	}
	d[counter] = (char) 0; //'\0'
	return d;
}

inline const short bridge_get_transmit_sigint() {
 8008240:	b480      	push	{r7}
 8008242:	af00      	add	r7, sp, #0
	return FC_BRIDGE_TRANSMIT_SIGINT;
 8008244:	f44f 7396 	mov.w	r3, #300	; 0x12c
}
 8008248:	4618      	mov	r0, r3
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <bridge_get_receive_sigint>:

inline const short bridge_get_receive_sigint() {
 8008252:	b480      	push	{r7}
 8008254:	af00      	add	r7, sp, #0
	return FC_BRIDGE_RECEIVE_SIGINT;
 8008256:	f240 132d 	movw	r3, #301	; 0x12d
}
 800825a:	4618      	mov	r0, r3
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <bridge_get_semicolon>:

inline const char* bridge_get_space() {
	return &space;
}

inline const char* bridge_get_semicolon() {
 8008264:	b480      	push	{r7}
 8008266:	af00      	add	r7, sp, #0
	return &semicolon;
 8008268:	4b02      	ldr	r3, [pc, #8]	; (8008274 <bridge_get_semicolon+0x10>)
}
 800826a:	4618      	mov	r0, r3
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr
 8008274:	0800eb6c 	.word	0x0800eb6c

08008278 <map>:
const uint32_t MOTOR_MAX = 8400;
const uint32_t MOTOR_MIN = 4200; //+1000 ??? TODO check

const int thrust_length = sizeof(THRUST_MAP_t) / sizeof(thrust_map[0]);

inline float map(float x, int in_min, int in_max, int out_min, int out_max) {
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	ed87 0a05 	vstr	s0, [r7, #20]
 8008282:	6138      	str	r0, [r7, #16]
 8008284:	60f9      	str	r1, [r7, #12]
 8008286:	60ba      	str	r2, [r7, #8]
 8008288:	607b      	str	r3, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	ee07 3a90 	vmov	s15, r3
 8008290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008294:	ed97 7a05 	vldr	s14, [r7, #20]
 8008298:	ee37 7a67 	vsub.f32	s14, s14, s15
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	ee07 3a90 	vmov	s15, r3
 80082a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082aa:	ee67 6a27 	vmul.f32	s13, s14, s15
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	ee07 3a90 	vmov	s15, r3
 80082b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	ee07 3a90 	vmov	s15, r3
 80082c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082ca:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80082ce:	eeb0 0a67 	vmov.f32	s0, s15
 80082d2:	371c      	adds	r7, #28
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <interpolate>:

float interpolate(float throttle) {
 80082dc:	b480      	push	{r7}
 80082de:	b087      	sub	sp, #28
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	ed87 0a01 	vstr	s0, [r7, #4]
	int i = 1;
 80082e6:	2301      	movs	r3, #1
 80082e8:	617b      	str	r3, [r7, #20]
	float result = 0.0f, pos = 0.0f;
 80082ea:	f04f 0300 	mov.w	r3, #0
 80082ee:	613b      	str	r3, [r7, #16]
 80082f0:	f04f 0300 	mov.w	r3, #0
 80082f4:	60fb      	str	r3, [r7, #12]
	for (; i < thrust_length; i++) {
 80082f6:	e011      	b.n	800831c <interpolate+0x40>
		if (throttle <= thrust_map[i][0]) {
 80082f8:	4a2f      	ldr	r2, [pc, #188]	; (80083b8 <interpolate+0xdc>)
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	00db      	lsls	r3, r3, #3
 80082fe:	4413      	add	r3, r2
 8008300:	edd3 7a00 	vldr	s15, [r3]
 8008304:	ed97 7a01 	vldr	s14, [r7, #4]
 8008308:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800830c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008310:	d900      	bls.n	8008314 <interpolate+0x38>
			continue;
		} else {
			break;
 8008312:	e007      	b.n	8008324 <interpolate+0x48>
			continue;
 8008314:	bf00      	nop
	for (; i < thrust_length; i++) {
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	3301      	adds	r3, #1
 800831a:	617b      	str	r3, [r7, #20]
 800831c:	220a      	movs	r2, #10
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	4293      	cmp	r3, r2
 8008322:	dbe9      	blt.n	80082f8 <interpolate+0x1c>
		}
	}
	pos = (throttle - thrust_map[i - 1][0])
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	3b01      	subs	r3, #1
 8008328:	4a23      	ldr	r2, [pc, #140]	; (80083b8 <interpolate+0xdc>)
 800832a:	00db      	lsls	r3, r3, #3
 800832c:	4413      	add	r3, r2
 800832e:	edd3 7a00 	vldr	s15, [r3]
 8008332:	ed97 7a01 	vldr	s14, [r7, #4]
 8008336:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ (thrust_map[i][0] - thrust_map[i - 1][0]);
 800833a:	4a1f      	ldr	r2, [pc, #124]	; (80083b8 <interpolate+0xdc>)
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	4413      	add	r3, r2
 8008342:	ed93 7a00 	vldr	s14, [r3]
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	3b01      	subs	r3, #1
 800834a:	4a1b      	ldr	r2, [pc, #108]	; (80083b8 <interpolate+0xdc>)
 800834c:	00db      	lsls	r3, r3, #3
 800834e:	4413      	add	r3, r2
 8008350:	edd3 7a00 	vldr	s15, [r3]
 8008354:	ee37 7a67 	vsub.f32	s14, s14, s15
	pos = (throttle - thrust_map[i - 1][0])
 8008358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800835c:	edc7 7a03 	vstr	s15, [r7, #12]
	result = thrust_map[i - 1][1]
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	3b01      	subs	r3, #1
 8008364:	4a14      	ldr	r2, [pc, #80]	; (80083b8 <interpolate+0xdc>)
 8008366:	00db      	lsls	r3, r3, #3
 8008368:	4413      	add	r3, r2
 800836a:	3304      	adds	r3, #4
 800836c:	ed93 7a00 	vldr	s14, [r3]
			+ (pos * (thrust_map[i][1] - thrust_map[i - 1][1]));
 8008370:	4a11      	ldr	r2, [pc, #68]	; (80083b8 <interpolate+0xdc>)
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	00db      	lsls	r3, r3, #3
 8008376:	4413      	add	r3, r2
 8008378:	3304      	adds	r3, #4
 800837a:	edd3 6a00 	vldr	s13, [r3]
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	3b01      	subs	r3, #1
 8008382:	4a0d      	ldr	r2, [pc, #52]	; (80083b8 <interpolate+0xdc>)
 8008384:	00db      	lsls	r3, r3, #3
 8008386:	4413      	add	r3, r2
 8008388:	3304      	adds	r3, #4
 800838a:	edd3 7a00 	vldr	s15, [r3]
 800838e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008392:	edd7 7a03 	vldr	s15, [r7, #12]
 8008396:	ee66 7aa7 	vmul.f32	s15, s13, s15
	result = thrust_map[i - 1][1]
 800839a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800839e:	edc7 7a04 	vstr	s15, [r7, #16]
	return result;
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	ee07 3a90 	vmov	s15, r3
}
 80083a8:	eeb0 0a67 	vmov.f32	s0, s15
 80083ac:	371c      	adds	r7, #28
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	0800eb70 	.word	0x0800eb70

080083bc <drone_queue_control>:

void drone_queue_control() {
 80083bc:	b590      	push	{r4, r7, lr}
 80083be:	ed2d 8b02 	vpush	{d8}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
	uint32_t data;
	if (queue_data_available(get_throttle_queue_rc())) {
 80083c6:	f000 f8f1 	bl	80085ac <get_throttle_queue_rc>
 80083ca:	4603      	mov	r3, r0
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 fa90 	bl	80088f2 <queue_data_available>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d023      	beq.n	8008420 <drone_queue_control+0x64>
		queue_dequeue(get_throttle_queue_rc(), &data);
 80083d8:	f000 f8e8 	bl	80085ac <get_throttle_queue_rc>
 80083dc:	4602      	mov	r2, r0
 80083de:	1d3b      	adds	r3, r7, #4
 80083e0:	4619      	mov	r1, r3
 80083e2:	4610      	mov	r0, r2
 80083e4:	f000 faba 	bl	800895c <queue_dequeue>
		throttle_s = ((float) data / (float) get_rc_channel_max()); // normalize between 0 and 1
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	ee07 3a90 	vmov	s15, r3
 80083ee:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80083f2:	f000 f921 	bl	8008638 <get_rc_channel_max>
 80083f6:	ee07 0a90 	vmov	s15, r0
 80083fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80083fe:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8008402:	4b64      	ldr	r3, [pc, #400]	; (8008594 <drone_queue_control+0x1d8>)
 8008404:	edc3 7a00 	vstr	s15, [r3]
		throttle_s = interpolate(throttle_s);
 8008408:	4b62      	ldr	r3, [pc, #392]	; (8008594 <drone_queue_control+0x1d8>)
 800840a:	edd3 7a00 	vldr	s15, [r3]
 800840e:	eeb0 0a67 	vmov.f32	s0, s15
 8008412:	f7ff ff63 	bl	80082dc <interpolate>
 8008416:	eef0 7a40 	vmov.f32	s15, s0
 800841a:	4b5e      	ldr	r3, [pc, #376]	; (8008594 <drone_queue_control+0x1d8>)
 800841c:	edc3 7a00 	vstr	s15, [r3]
	}
	if (queue_data_available(get_pitch_queue_rc())) {
 8008420:	f000 f8ce 	bl	80085c0 <get_pitch_queue_rc>
 8008424:	4603      	mov	r3, r0
 8008426:	4618      	mov	r0, r3
 8008428:	f000 fa63 	bl	80088f2 <queue_data_available>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d023      	beq.n	800847a <drone_queue_control+0xbe>
		queue_dequeue(get_pitch_queue_rc(), &data);
 8008432:	f000 f8c5 	bl	80085c0 <get_pitch_queue_rc>
 8008436:	4602      	mov	r2, r0
 8008438:	1d3b      	adds	r3, r7, #4
 800843a:	4619      	mov	r1, r3
 800843c:	4610      	mov	r0, r2
 800843e:	f000 fa8d 	bl	800895c <queue_dequeue>
		pitch_s = -map(data, get_rc_channel_min(), get_rc_channel_max(), -10,
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	ee07 3a90 	vmov	s15, r3
 8008448:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800844c:	f000 f8fd 	bl	800864a <get_rc_channel_min>
 8008450:	4603      	mov	r3, r0
 8008452:	461c      	mov	r4, r3
 8008454:	f000 f8f0 	bl	8008638 <get_rc_channel_max>
 8008458:	4603      	mov	r3, r0
 800845a:	4619      	mov	r1, r3
 800845c:	230a      	movs	r3, #10
 800845e:	f06f 0209 	mvn.w	r2, #9
 8008462:	4620      	mov	r0, r4
 8008464:	eeb0 0a48 	vmov.f32	s0, s16
 8008468:	f7ff ff06 	bl	8008278 <map>
 800846c:	eef0 7a40 	vmov.f32	s15, s0
 8008470:	eef1 7a67 	vneg.f32	s15, s15
 8008474:	4b48      	ldr	r3, [pc, #288]	; (8008598 <drone_queue_control+0x1dc>)
 8008476:	edc3 7a00 	vstr	s15, [r3]
				10);
	}
	if (queue_data_available(get_roll_queue_rc())) {
 800847a:	f000 f8ab 	bl	80085d4 <get_roll_queue_rc>
 800847e:	4603      	mov	r3, r0
 8008480:	4618      	mov	r0, r3
 8008482:	f000 fa36 	bl	80088f2 <queue_data_available>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d021      	beq.n	80084d0 <drone_queue_control+0x114>
		queue_dequeue(get_roll_queue_rc(), &data);
 800848c:	f000 f8a2 	bl	80085d4 <get_roll_queue_rc>
 8008490:	4602      	mov	r2, r0
 8008492:	1d3b      	adds	r3, r7, #4
 8008494:	4619      	mov	r1, r3
 8008496:	4610      	mov	r0, r2
 8008498:	f000 fa60 	bl	800895c <queue_dequeue>
		roll_s = -map(roll_s, get_rc_channel_min(), get_rc_channel_max(), -10,
 800849c:	4b3f      	ldr	r3, [pc, #252]	; (800859c <drone_queue_control+0x1e0>)
 800849e:	ed93 8a00 	vldr	s16, [r3]
 80084a2:	f000 f8d2 	bl	800864a <get_rc_channel_min>
 80084a6:	4603      	mov	r3, r0
 80084a8:	461c      	mov	r4, r3
 80084aa:	f000 f8c5 	bl	8008638 <get_rc_channel_max>
 80084ae:	4603      	mov	r3, r0
 80084b0:	4619      	mov	r1, r3
 80084b2:	230a      	movs	r3, #10
 80084b4:	f06f 0209 	mvn.w	r2, #9
 80084b8:	4620      	mov	r0, r4
 80084ba:	eeb0 0a48 	vmov.f32	s0, s16
 80084be:	f7ff fedb 	bl	8008278 <map>
 80084c2:	eef0 7a40 	vmov.f32	s15, s0
 80084c6:	eef1 7a67 	vneg.f32	s15, s15
 80084ca:	4b34      	ldr	r3, [pc, #208]	; (800859c <drone_queue_control+0x1e0>)
 80084cc:	edc3 7a00 	vstr	s15, [r3]
				10);
	}
	if (queue_data_available(get_yaw_queue_rc())) {
 80084d0:	f000 f88a 	bl	80085e8 <get_yaw_queue_rc>
 80084d4:	4603      	mov	r3, r0
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 fa0b 	bl	80088f2 <queue_data_available>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d01f      	beq.n	8008522 <drone_queue_control+0x166>
		queue_dequeue(get_yaw_queue_rc(), &data);
 80084e2:	f000 f881 	bl	80085e8 <get_yaw_queue_rc>
 80084e6:	4602      	mov	r2, r0
 80084e8:	1d3b      	adds	r3, r7, #4
 80084ea:	4619      	mov	r1, r3
 80084ec:	4610      	mov	r0, r2
 80084ee:	f000 fa35 	bl	800895c <queue_dequeue>
		yaw_s = map(yaw_s, get_rc_channel_min(), get_rc_channel_max(), -180,
 80084f2:	4b2b      	ldr	r3, [pc, #172]	; (80085a0 <drone_queue_control+0x1e4>)
 80084f4:	ed93 8a00 	vldr	s16, [r3]
 80084f8:	f000 f8a7 	bl	800864a <get_rc_channel_min>
 80084fc:	4603      	mov	r3, r0
 80084fe:	461c      	mov	r4, r3
 8008500:	f000 f89a 	bl	8008638 <get_rc_channel_max>
 8008504:	4603      	mov	r3, r0
 8008506:	4619      	mov	r1, r3
 8008508:	23b4      	movs	r3, #180	; 0xb4
 800850a:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 800850e:	4620      	mov	r0, r4
 8008510:	eeb0 0a48 	vmov.f32	s0, s16
 8008514:	f7ff feb0 	bl	8008278 <map>
 8008518:	eef0 7a40 	vmov.f32	s15, s0
 800851c:	4b20      	ldr	r3, [pc, #128]	; (80085a0 <drone_queue_control+0x1e4>)
 800851e:	edc3 7a00 	vstr	s15, [r3]
				180);
	}
	if (queue_data_available(get_gear_queue_rc())) {
 8008522:	f000 f86b 	bl	80085fc <get_gear_queue_rc>
 8008526:	4603      	mov	r3, r0
 8008528:	4618      	mov	r0, r3
 800852a:	f000 f9e2 	bl	80088f2 <queue_data_available>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00f      	beq.n	8008554 <drone_queue_control+0x198>
		queue_dequeue(get_gear_queue_rc(), &data);
 8008534:	f000 f862 	bl	80085fc <get_gear_queue_rc>
 8008538:	4602      	mov	r2, r0
 800853a:	1d3b      	adds	r3, r7, #4
 800853c:	4619      	mov	r1, r3
 800853e:	4610      	mov	r0, r2
 8008540:	f000 fa0c 	bl	800895c <queue_dequeue>
		gear_s = (float) data;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854e:	4b15      	ldr	r3, [pc, #84]	; (80085a4 <drone_queue_control+0x1e8>)
 8008550:	edc3 7a00 	vstr	s15, [r3]
	}
	if (queue_data_available(get_speed_queue_rc())) {
 8008554:	f000 f85c 	bl	8008610 <get_speed_queue_rc>
 8008558:	4603      	mov	r3, r0
 800855a:	4618      	mov	r0, r3
 800855c:	f000 f9c9 	bl	80088f2 <queue_data_available>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00f      	beq.n	8008586 <drone_queue_control+0x1ca>
		queue_dequeue(get_speed_queue_rc(), &data);
 8008566:	f000 f853 	bl	8008610 <get_speed_queue_rc>
 800856a:	4602      	mov	r2, r0
 800856c:	1d3b      	adds	r3, r7, #4
 800856e:	4619      	mov	r1, r3
 8008570:	4610      	mov	r0, r2
 8008572:	f000 f9f3 	bl	800895c <queue_dequeue>
		speed_s = (float) data;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	ee07 3a90 	vmov	s15, r3
 800857c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008580:	4b09      	ldr	r3, [pc, #36]	; (80085a8 <drone_queue_control+0x1ec>)
 8008582:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8008586:	bf00      	nop
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	ecbd 8b02 	vpop	{d8}
 8008590:	bd90      	pop	{r4, r7, pc}
 8008592:	bf00      	nop
 8008594:	20000864 	.word	0x20000864
 8008598:	2000086c 	.word	0x2000086c
 800859c:	20000868 	.word	0x20000868
 80085a0:	20000870 	.word	0x20000870
 80085a4:	20000874 	.word	0x20000874
 80085a8:	20000878 	.word	0x20000878

080085ac <get_throttle_queue_rc>:

inline Queue_t* get_throttle_queue_rc() {
 80085ac:	b480      	push	{r7}
 80085ae:	af00      	add	r7, sp, #0
	return &queues_rc[0];
 80085b0:	4b02      	ldr	r3, [pc, #8]	; (80085bc <get_throttle_queue_rc+0x10>)
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	2000087c 	.word	0x2000087c

080085c0 <get_pitch_queue_rc>:

inline Queue_t* get_pitch_queue_rc() {
 80085c0:	b480      	push	{r7}
 80085c2:	af00      	add	r7, sp, #0
	return &queues_rc[1];
 80085c4:	4b02      	ldr	r3, [pc, #8]	; (80085d0 <get_pitch_queue_rc+0x10>)
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	20000980 	.word	0x20000980

080085d4 <get_roll_queue_rc>:

inline Queue_t* get_roll_queue_rc() {
 80085d4:	b480      	push	{r7}
 80085d6:	af00      	add	r7, sp, #0
	return &queues_rc[2];
 80085d8:	4b02      	ldr	r3, [pc, #8]	; (80085e4 <get_roll_queue_rc+0x10>)
}
 80085da:	4618      	mov	r0, r3
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	20000a84 	.word	0x20000a84

080085e8 <get_yaw_queue_rc>:

inline Queue_t* get_yaw_queue_rc() {
 80085e8:	b480      	push	{r7}
 80085ea:	af00      	add	r7, sp, #0
	return &queues_rc[3];
 80085ec:	4b02      	ldr	r3, [pc, #8]	; (80085f8 <get_yaw_queue_rc+0x10>)
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr
 80085f8:	20000b88 	.word	0x20000b88

080085fc <get_gear_queue_rc>:

inline Queue_t* get_gear_queue_rc() {
 80085fc:	b480      	push	{r7}
 80085fe:	af00      	add	r7, sp, #0
	return &queues_rc[4];
 8008600:	4b02      	ldr	r3, [pc, #8]	; (800860c <get_gear_queue_rc+0x10>)
}
 8008602:	4618      	mov	r0, r3
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	20000c8c 	.word	0x20000c8c

08008610 <get_speed_queue_rc>:

inline Queue_t* get_speed_queue_rc() {
 8008610:	b480      	push	{r7}
 8008612:	af00      	add	r7, sp, #0
	return &queues_rc[5];
 8008614:	4b02      	ldr	r3, [pc, #8]	; (8008620 <get_speed_queue_rc+0x10>)
}
 8008616:	4618      	mov	r0, r3
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr
 8008620:	20000d90 	.word	0x20000d90

08008624 <get_queues_rc>:

inline Queue_t* get_queues_rc() {
 8008624:	b480      	push	{r7}
 8008626:	af00      	add	r7, sp, #0
	return queues_rc;
 8008628:	4b02      	ldr	r3, [pc, #8]	; (8008634 <get_queues_rc+0x10>)
}
 800862a:	4618      	mov	r0, r3
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr
 8008634:	2000087c 	.word	0x2000087c

08008638 <get_rc_channel_max>:

inline const THRUST_MAP_t* get_thrust_map() {
	return &thrust_map;
}

inline const uint32_t get_rc_channel_max() {
 8008638:	b480      	push	{r7}
 800863a:	af00      	add	r7, sp, #0
	return RC_CHANNELS_MAX;
 800863c:	f240 737f 	movw	r3, #1919	; 0x77f
}
 8008640:	4618      	mov	r0, r3
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr

0800864a <get_rc_channel_min>:

inline const uint32_t get_rc_channel_mid() {
	return RC_CHANNELS_MID;
}

inline const uint32_t get_rc_channel_min() {
 800864a:	b480      	push	{r7}
 800864c:	af00      	add	r7, sp, #0
	return RC_CHANNELS_MIN;
 800864e:	f240 4349 	movw	r3, #1097	; 0x449
}
 8008652:	4618      	mov	r0, r3
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <get_memory_order>:
#include <stdbool.h>

static volatile bool initialized = false;
static const memory_order memory_order_drone = memory_order_seq_cst;

inline const memory_order* get_memory_order() {
 800865c:	b480      	push	{r7}
 800865e:	af00      	add	r7, sp, #0
	return &memory_order_drone;
 8008660:	4b02      	ldr	r3, [pc, #8]	; (800866c <get_memory_order+0x10>)
}
 8008662:	4618      	mov	r0, r3
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr
 800866c:	0800ebc0 	.word	0x0800ebc0

08008670 <pre_init>:

void pre_init() {
 8008670:	b480      	push	{r7}
 8008672:	af00      	add	r7, sp, #0
	if (!initialized) {
 8008674:	4b08      	ldr	r3, [pc, #32]	; (8008698 <pre_init+0x28>)
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	b2db      	uxtb	r3, r3
 800867a:	f083 0301 	eor.w	r3, r3, #1
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	d004      	beq.n	800868e <pre_init+0x1e>
		atomic_signal_fence(memory_order_drone);
		atomic_thread_fence(memory_order_drone);
 8008684:	f3bf 8f5b 	dmb	ish
		initialized = true;
 8008688:	4b03      	ldr	r3, [pc, #12]	; (8008698 <pre_init+0x28>)
 800868a:	2201      	movs	r2, #1
 800868c:	701a      	strb	r2, [r3, #0]
	}
}
 800868e:	bf00      	nop
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr
 8008698:	20000e94 	.word	0x20000e94

0800869c <quaternion_to_euler>:
}

/*
 * Convert Quaternion to Euler Angle
 */
void quaternion_to_euler(const Quaternion_t *qr, EulerAngle_t *ea) {
 800869c:	b580      	push	{r7, lr}
 800869e:	b090      	sub	sp, #64	; 0x40
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
	float q0q0, q1q1, q2q2, q3q3;
	float dq0, dq1, dq2;
	float dq1q3, dq0q2, dq1q2;
	float dq0q1, dq2q3, dq0q3;

	q0q0 = qr->q0 * qr->q0;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	ed93 7a00 	vldr	s14, [r3]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	edd3 7a00 	vldr	s15, [r3]
 80086b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086b6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	q1q1 = qr->q1 * qr->q1;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80086c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ca:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	q2q2 = qr->q2 * qr->q2;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	ed93 7a02 	vldr	s14, [r3, #8]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80086da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086de:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	q3q3 = qr->q3 * qr->q3;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80086ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086f2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	dq0 = 2 * qr->q0;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	edd3 7a00 	vldr	s15, [r3]
 80086fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008700:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	dq1 = 2 * qr->q1;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	edd3 7a01 	vldr	s15, [r3, #4]
 800870a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800870e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	dq2 = 2 * qr->q2;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	edd3 7a02 	vldr	s15, [r3, #8]
 8008718:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800871c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	dq1q2 = dq1 * qr->q2;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	edd3 7a02 	vldr	s15, [r3, #8]
 8008726:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800872a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800872e:	edc7 7a08 	vstr	s15, [r7, #32]
	dq1q3 = dq1 * qr->q3;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	edd3 7a03 	vldr	s15, [r3, #12]
 8008738:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800873c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008740:	edc7 7a07 	vstr	s15, [r7, #28]
	dq0q2 = dq0 * qr->q2;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	edd3 7a02 	vldr	s15, [r3, #8]
 800874a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800874e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008752:	edc7 7a06 	vstr	s15, [r7, #24]
	dq0q3 = dq0 * qr->q3;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	edd3 7a03 	vldr	s15, [r3, #12]
 800875c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008764:	edc7 7a05 	vstr	s15, [r7, #20]
	dq0q1 = dq0 * qr->q1;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	edd3 7a01 	vldr	s15, [r3, #4]
 800876e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008776:	edc7 7a04 	vstr	s15, [r7, #16]
	dq2q3 = dq2 * qr->q3;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	edd3 7a03 	vldr	s15, [r3, #12]
 8008780:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008788:	edc7 7a03 	vstr	s15, [r7, #12]

	ea->pitch_x = atan2f(dq0q1 + dq2q3, q0q0 + q3q3 - q1q1 - q2q2);
 800878c:	ed97 7a04 	vldr	s14, [r7, #16]
 8008790:	edd7 7a03 	vldr	s15, [r7, #12]
 8008794:	ee77 6a27 	vadd.f32	s13, s14, s15
 8008798:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800879c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80087a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80087a4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80087a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80087ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80087b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087b4:	eef0 0a67 	vmov.f32	s1, s15
 80087b8:	eeb0 0a66 	vmov.f32	s0, s13
 80087bc:	f005 feca 	bl	800e554 <atan2f>
 80087c0:	eef0 7a40 	vmov.f32	s15, s0
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	edc3 7a00 	vstr	s15, [r3]
	ea->roll_y = asinf(dq0q2 - dq1q3);
 80087ca:	ed97 7a06 	vldr	s14, [r7, #24]
 80087ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80087d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087d6:	eeb0 0a67 	vmov.f32	s0, s15
 80087da:	f005 fe8f 	bl	800e4fc <asinf>
 80087de:	eef0 7a40 	vmov.f32	s15, s0
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	edc3 7a01 	vstr	s15, [r3, #4]
	ea->yaw_z = atan2f(dq1q2 + dq0q3, q0q0 + q1q1 - q2q2 - q3q3);
 80087e8:	ed97 7a08 	vldr	s14, [r7, #32]
 80087ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80087f0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80087f4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80087f8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80087fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008800:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008804:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008808:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800880c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008810:	eef0 0a67 	vmov.f32	s1, s15
 8008814:	eeb0 0a66 	vmov.f32	s0, s13
 8008818:	f005 fe9c 	bl	800e554 <atan2f>
 800881c:	eef0 7a40 	vmov.f32	s15, s0
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8008826:	bf00      	nop
 8008828:	3740      	adds	r7, #64	; 0x40
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <queue_store_data>:
 *  Created on: Dec 23, 2023
 *      Author: konrad
 */
#include "queue.h"

inline static void queue_store_data(Queue_t *queue, uint32_t data) {
 800882e:	b590      	push	{r4, r7, lr}
 8008830:	b085      	sub	sp, #20
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	6039      	str	r1, [r7, #0]
	atomic_store_explicit(&queue->q[queue->pW], data, *get_memory_order());
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	885b      	ldrh	r3, [r3, #2]
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	4413      	add	r3, r2
 8008842:	3304      	adds	r3, #4
 8008844:	60fb      	str	r3, [r7, #12]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	60bb      	str	r3, [r7, #8]
 800884a:	68bc      	ldr	r4, [r7, #8]
 800884c:	f7ff ff06 	bl	800865c <get_memory_order>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f3bf 8f5b 	dmb	ish
 8008856:	601c      	str	r4, [r3, #0]
 8008858:	f3bf 8f5b 	dmb	ish
}
 800885c:	bf00      	nop
 800885e:	3714      	adds	r7, #20
 8008860:	46bd      	mov	sp, r7
 8008862:	bd90      	pop	{r4, r7, pc}

08008864 <queue_get_data>:

inline static uint32_t queue_get_data(Queue_t *queue) {
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
	return atomic_load_explicit(&queue->q[queue->pR], *get_memory_order());
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	881b      	ldrh	r3, [r3, #0]
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	4413      	add	r3, r2
 8008876:	3304      	adds	r3, #4
 8008878:	60fb      	str	r3, [r7, #12]
 800887a:	f7ff feef 	bl	800865c <get_memory_order>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f3bf 8f5b 	dmb	ish
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f3bf 8f5b 	dmb	ish
 800888a:	60bb      	str	r3, [r7, #8]
 800888c:	68bb      	ldr	r3, [r7, #8]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <queue_full>:

inline static bool queue_full(Queue_t *queue) {
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
	return (((queue->pW + 1) % QUEUE_SIZE) == queue->pR);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	885b      	ldrh	r3, [r3, #2]
 80088a2:	3301      	adds	r3, #1
 80088a4:	425a      	negs	r2, r3
 80088a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80088ae:	bf58      	it	pl
 80088b0:	4253      	negpl	r3, r2
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	8812      	ldrh	r2, [r2, #0]
 80088b6:	4293      	cmp	r3, r2
 80088b8:	bf0c      	ite	eq
 80088ba:	2301      	moveq	r3, #1
 80088bc:	2300      	movne	r3, #0
 80088be:	b2db      	uxtb	r3, r3
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <queue_empty>:

inline static bool queue_empty(Queue_t *queue) {
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
	return (queue->pW == queue->pR);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	885a      	ldrh	r2, [r3, #2]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	881b      	ldrh	r3, [r3, #0]
 80088dc:	429a      	cmp	r2, r3
 80088de:	bf0c      	ite	eq
 80088e0:	2301      	moveq	r3, #1
 80088e2:	2300      	movne	r3, #0
 80088e4:	b2db      	uxtb	r3, r3
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <queue_data_available>:

inline bool queue_data_available(Queue_t *queue) {
 80088f2:	b480      	push	{r7}
 80088f4:	b083      	sub	sp, #12
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
	return (queue->pW > queue->pR);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	885a      	ldrh	r2, [r3, #2]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	881b      	ldrh	r3, [r3, #0]
 8008902:	429a      	cmp	r2, r3
 8008904:	bf8c      	ite	hi
 8008906:	2301      	movhi	r3, #1
 8008908:	2300      	movls	r3, #0
 800890a:	b2db      	uxtb	r3, r3
}
 800890c:	4618      	mov	r0, r3
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <queue_enqueue>:

bool queue_enqueue(Queue_t *queue, uint32_t data) {
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
	if (queue_full(queue)) {
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7ff ffb7 	bl	8008896 <queue_full>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <queue_enqueue+0x1a>
		return false;
 800892e:	2300      	movs	r3, #0
 8008930:	e010      	b.n	8008954 <queue_enqueue+0x3c>
	} else {
		queue_store_data(queue, data);
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff ff7a 	bl	800882e <queue_store_data>
		queue->pW = ((queue->pW + 1) == QUEUE_SIZE) ? 0 : queue->pW + 1;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	885b      	ldrh	r3, [r3, #2]
 800893e:	2b3f      	cmp	r3, #63	; 0x3f
 8008940:	d004      	beq.n	800894c <queue_enqueue+0x34>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	885b      	ldrh	r3, [r3, #2]
 8008946:	3301      	adds	r3, #1
 8008948:	b29a      	uxth	r2, r3
 800894a:	e000      	b.n	800894e <queue_enqueue+0x36>
 800894c:	2200      	movs	r2, #0
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	805a      	strh	r2, [r3, #2]
		return true;
 8008952:	2301      	movs	r3, #1
	}
}
 8008954:	4618      	mov	r0, r3
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <queue_dequeue>:

bool queue_dequeue(Queue_t *queue, uint32_t *data) {
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
	if (queue_empty(queue))
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7ff ffb0 	bl	80088cc <queue_empty>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <queue_dequeue+0x1a>
		return false;
 8008972:	2300      	movs	r3, #0
 8008974:	e012      	b.n	800899c <queue_dequeue+0x40>
	else {
		*data = queue_get_data(queue);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f7ff ff74 	bl	8008864 <queue_get_data>
 800897c:	4602      	mov	r2, r0
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	601a      	str	r2, [r3, #0]
		queue->pR = ((queue->pR + 1) == QUEUE_SIZE) ? 0 : queue->pR + 1;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	881b      	ldrh	r3, [r3, #0]
 8008986:	2b3f      	cmp	r3, #63	; 0x3f
 8008988:	d004      	beq.n	8008994 <queue_dequeue+0x38>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	3301      	adds	r3, #1
 8008990:	b29a      	uxth	r2, r3
 8008992:	e000      	b.n	8008996 <queue_dequeue+0x3a>
 8008994:	2200      	movs	r2, #0
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	801a      	strh	r2, [r3, #0]
		return true;
 800899a:	2301      	movs	r3, #1
	}
}
 800899c:	4618      	mov	r0, r3
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80089a4:	b480      	push	{r7}
 80089a6:	af00      	add	r7, sp, #0
  return 1;
 80089a8:	2301      	movs	r3, #1
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <_kill>:

int _kill(int pid, int sig)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80089be:	f005 f83b 	bl	800da38 <__errno>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2216      	movs	r2, #22
 80089c6:	601a      	str	r2, [r3, #0]
  return -1;
 80089c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <_exit>:

void _exit (int status)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80089dc:	f04f 31ff 	mov.w	r1, #4294967295
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f7ff ffe7 	bl	80089b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80089e6:	e7fe      	b.n	80089e6 <_exit+0x12>

080089e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80089f4:	2300      	movs	r3, #0
 80089f6:	617b      	str	r3, [r7, #20]
 80089f8:	e00a      	b.n	8008a10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80089fa:	f3af 8000 	nop.w
 80089fe:	4601      	mov	r1, r0
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	1c5a      	adds	r2, r3, #1
 8008a04:	60ba      	str	r2, [r7, #8]
 8008a06:	b2ca      	uxtb	r2, r1
 8008a08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	617b      	str	r3, [r7, #20]
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	dbf0      	blt.n	80089fa <_read+0x12>
  }

  return len;
 8008a18:	687b      	ldr	r3, [r7, #4]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3718      	adds	r7, #24
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b086      	sub	sp, #24
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	60b9      	str	r1, [r7, #8]
 8008a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a2e:	2300      	movs	r3, #0
 8008a30:	617b      	str	r3, [r7, #20]
 8008a32:	e009      	b.n	8008a48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	1c5a      	adds	r2, r3, #1
 8008a38:	60ba      	str	r2, [r7, #8]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	3301      	adds	r3, #1
 8008a46:	617b      	str	r3, [r7, #20]
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	dbf1      	blt.n	8008a34 <_write+0x12>
  }
  return len;
 8008a50:	687b      	ldr	r3, [r7, #4]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3718      	adds	r7, #24
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <_close>:

int _close(int file)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b083      	sub	sp, #12
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008a62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b083      	sub	sp, #12
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008a82:	605a      	str	r2, [r3, #4]
  return 0;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <_isatty>:

int _isatty(int file)
{
 8008a92:	b480      	push	{r7}
 8008a94:	b083      	sub	sp, #12
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008a9a:	2301      	movs	r3, #1
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3714      	adds	r7, #20
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
	...

08008ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b086      	sub	sp, #24
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008acc:	4a14      	ldr	r2, [pc, #80]	; (8008b20 <_sbrk+0x5c>)
 8008ace:	4b15      	ldr	r3, [pc, #84]	; (8008b24 <_sbrk+0x60>)
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008ad8:	4b13      	ldr	r3, [pc, #76]	; (8008b28 <_sbrk+0x64>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d102      	bne.n	8008ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008ae0:	4b11      	ldr	r3, [pc, #68]	; (8008b28 <_sbrk+0x64>)
 8008ae2:	4a12      	ldr	r2, [pc, #72]	; (8008b2c <_sbrk+0x68>)
 8008ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008ae6:	4b10      	ldr	r3, [pc, #64]	; (8008b28 <_sbrk+0x64>)
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4413      	add	r3, r2
 8008aee:	693a      	ldr	r2, [r7, #16]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d207      	bcs.n	8008b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008af4:	f004 ffa0 	bl	800da38 <__errno>
 8008af8:	4603      	mov	r3, r0
 8008afa:	220c      	movs	r2, #12
 8008afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008afe:	f04f 33ff 	mov.w	r3, #4294967295
 8008b02:	e009      	b.n	8008b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008b04:	4b08      	ldr	r3, [pc, #32]	; (8008b28 <_sbrk+0x64>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008b0a:	4b07      	ldr	r3, [pc, #28]	; (8008b28 <_sbrk+0x64>)
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4413      	add	r3, r2
 8008b12:	4a05      	ldr	r2, [pc, #20]	; (8008b28 <_sbrk+0x64>)
 8008b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008b16:	68fb      	ldr	r3, [r7, #12]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3718      	adds	r7, #24
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	20020000 	.word	0x20020000
 8008b24:	00000400 	.word	0x00000400
 8008b28:	20000e98 	.word	0x20000e98
 8008b2c:	20000ff0 	.word	0x20000ff0

08008b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008b34:	4b0e      	ldr	r3, [pc, #56]	; (8008b70 <HAL_Init+0x40>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a0d      	ldr	r2, [pc, #52]	; (8008b70 <HAL_Init+0x40>)
 8008b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008b40:	4b0b      	ldr	r3, [pc, #44]	; (8008b70 <HAL_Init+0x40>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a0a      	ldr	r2, [pc, #40]	; (8008b70 <HAL_Init+0x40>)
 8008b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008b4c:	4b08      	ldr	r3, [pc, #32]	; (8008b70 <HAL_Init+0x40>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a07      	ldr	r2, [pc, #28]	; (8008b70 <HAL_Init+0x40>)
 8008b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008b58:	2003      	movs	r0, #3
 8008b5a:	f000 f94f 	bl	8008dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008b5e:	200f      	movs	r0, #15
 8008b60:	f000 f808 	bl	8008b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008b64:	f7fc ffc8 	bl	8005af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	40023c00 	.word	0x40023c00

08008b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008b7c:	4b12      	ldr	r3, [pc, #72]	; (8008bc8 <HAL_InitTick+0x54>)
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	4b12      	ldr	r3, [pc, #72]	; (8008bcc <HAL_InitTick+0x58>)
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	4619      	mov	r1, r3
 8008b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 f967 	bl	8008e66 <HAL_SYSTICK_Config>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e00e      	b.n	8008bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b0f      	cmp	r3, #15
 8008ba6:	d80a      	bhi.n	8008bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008ba8:	2200      	movs	r2, #0
 8008baa:	6879      	ldr	r1, [r7, #4]
 8008bac:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb0:	f000 f92f 	bl	8008e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008bb4:	4a06      	ldr	r2, [pc, #24]	; (8008bd0 <HAL_InitTick+0x5c>)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	e000      	b.n	8008bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	200001e0 	.word	0x200001e0
 8008bcc:	200001f0 	.word	0x200001f0
 8008bd0:	200001ec 	.word	0x200001ec

08008bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008bd8:	4b06      	ldr	r3, [pc, #24]	; (8008bf4 <HAL_IncTick+0x20>)
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	4b06      	ldr	r3, [pc, #24]	; (8008bf8 <HAL_IncTick+0x24>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4413      	add	r3, r2
 8008be4:	4a04      	ldr	r2, [pc, #16]	; (8008bf8 <HAL_IncTick+0x24>)
 8008be6:	6013      	str	r3, [r2, #0]
}
 8008be8:	bf00      	nop
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	200001f0 	.word	0x200001f0
 8008bf8:	20000e9c 	.word	0x20000e9c

08008bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8008c00:	4b03      	ldr	r3, [pc, #12]	; (8008c10 <HAL_GetTick+0x14>)
 8008c02:	681b      	ldr	r3, [r3, #0]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	20000e9c 	.word	0x20000e9c

08008c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008c1c:	f7ff ffee 	bl	8008bfc <HAL_GetTick>
 8008c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2c:	d005      	beq.n	8008c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008c2e:	4b0a      	ldr	r3, [pc, #40]	; (8008c58 <HAL_Delay+0x44>)
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	461a      	mov	r2, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	4413      	add	r3, r2
 8008c38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008c3a:	bf00      	nop
 8008c3c:	f7ff ffde 	bl	8008bfc <HAL_GetTick>
 8008c40:	4602      	mov	r2, r0
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d8f7      	bhi.n	8008c3c <HAL_Delay+0x28>
  {
  }
}
 8008c4c:	bf00      	nop
 8008c4e:	bf00      	nop
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	200001f0 	.word	0x200001f0

08008c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f003 0307 	and.w	r3, r3, #7
 8008c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008c6c:	4b0c      	ldr	r3, [pc, #48]	; (8008ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008c78:	4013      	ands	r3, r2
 8008c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008c8e:	4a04      	ldr	r2, [pc, #16]	; (8008ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	60d3      	str	r3, [r2, #12]
}
 8008c94:	bf00      	nop
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr
 8008ca0:	e000ed00 	.word	0xe000ed00

08008ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ca8:	4b04      	ldr	r3, [pc, #16]	; (8008cbc <__NVIC_GetPriorityGrouping+0x18>)
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	0a1b      	lsrs	r3, r3, #8
 8008cae:	f003 0307 	and.w	r3, r3, #7
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr
 8008cbc:	e000ed00 	.word	0xe000ed00

08008cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	db0b      	blt.n	8008cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008cd2:	79fb      	ldrb	r3, [r7, #7]
 8008cd4:	f003 021f 	and.w	r2, r3, #31
 8008cd8:	4907      	ldr	r1, [pc, #28]	; (8008cf8 <__NVIC_EnableIRQ+0x38>)
 8008cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cde:	095b      	lsrs	r3, r3, #5
 8008ce0:	2001      	movs	r0, #1
 8008ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8008ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008cea:	bf00      	nop
 8008cec:	370c      	adds	r7, #12
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	e000e100 	.word	0xe000e100

08008cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	6039      	str	r1, [r7, #0]
 8008d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	db0a      	blt.n	8008d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	b2da      	uxtb	r2, r3
 8008d14:	490c      	ldr	r1, [pc, #48]	; (8008d48 <__NVIC_SetPriority+0x4c>)
 8008d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d1a:	0112      	lsls	r2, r2, #4
 8008d1c:	b2d2      	uxtb	r2, r2
 8008d1e:	440b      	add	r3, r1
 8008d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008d24:	e00a      	b.n	8008d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	b2da      	uxtb	r2, r3
 8008d2a:	4908      	ldr	r1, [pc, #32]	; (8008d4c <__NVIC_SetPriority+0x50>)
 8008d2c:	79fb      	ldrb	r3, [r7, #7]
 8008d2e:	f003 030f 	and.w	r3, r3, #15
 8008d32:	3b04      	subs	r3, #4
 8008d34:	0112      	lsls	r2, r2, #4
 8008d36:	b2d2      	uxtb	r2, r2
 8008d38:	440b      	add	r3, r1
 8008d3a:	761a      	strb	r2, [r3, #24]
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	e000e100 	.word	0xe000e100
 8008d4c:	e000ed00 	.word	0xe000ed00

08008d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b089      	sub	sp, #36	; 0x24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f003 0307 	and.w	r3, r3, #7
 8008d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	f1c3 0307 	rsb	r3, r3, #7
 8008d6a:	2b04      	cmp	r3, #4
 8008d6c:	bf28      	it	cs
 8008d6e:	2304      	movcs	r3, #4
 8008d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	3304      	adds	r3, #4
 8008d76:	2b06      	cmp	r3, #6
 8008d78:	d902      	bls.n	8008d80 <NVIC_EncodePriority+0x30>
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	3b03      	subs	r3, #3
 8008d7e:	e000      	b.n	8008d82 <NVIC_EncodePriority+0x32>
 8008d80:	2300      	movs	r3, #0
 8008d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d84:	f04f 32ff 	mov.w	r2, #4294967295
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8e:	43da      	mvns	r2, r3
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	401a      	ands	r2, r3
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d98:	f04f 31ff 	mov.w	r1, #4294967295
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8008da2:	43d9      	mvns	r1, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008da8:	4313      	orrs	r3, r2
         );
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3724      	adds	r7, #36	; 0x24
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
	...

08008db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008dc8:	d301      	bcc.n	8008dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e00f      	b.n	8008dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008dce:	4a0a      	ldr	r2, [pc, #40]	; (8008df8 <SysTick_Config+0x40>)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008dd6:	210f      	movs	r1, #15
 8008dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ddc:	f7ff ff8e 	bl	8008cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008de0:	4b05      	ldr	r3, [pc, #20]	; (8008df8 <SysTick_Config+0x40>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008de6:	4b04      	ldr	r3, [pc, #16]	; (8008df8 <SysTick_Config+0x40>)
 8008de8:	2207      	movs	r2, #7
 8008dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	e000e010 	.word	0xe000e010

08008dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f7ff ff29 	bl	8008c5c <__NVIC_SetPriorityGrouping>
}
 8008e0a:	bf00      	nop
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b086      	sub	sp, #24
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	4603      	mov	r3, r0
 8008e1a:	60b9      	str	r1, [r7, #8]
 8008e1c:	607a      	str	r2, [r7, #4]
 8008e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008e20:	2300      	movs	r3, #0
 8008e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008e24:	f7ff ff3e 	bl	8008ca4 <__NVIC_GetPriorityGrouping>
 8008e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	68b9      	ldr	r1, [r7, #8]
 8008e2e:	6978      	ldr	r0, [r7, #20]
 8008e30:	f7ff ff8e 	bl	8008d50 <NVIC_EncodePriority>
 8008e34:	4602      	mov	r2, r0
 8008e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e3a:	4611      	mov	r1, r2
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7ff ff5d 	bl	8008cfc <__NVIC_SetPriority>
}
 8008e42:	bf00      	nop
 8008e44:	3718      	adds	r7, #24
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b082      	sub	sp, #8
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	4603      	mov	r3, r0
 8008e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7ff ff31 	bl	8008cc0 <__NVIC_EnableIRQ>
}
 8008e5e:	bf00      	nop
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b082      	sub	sp, #8
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f7ff ffa2 	bl	8008db8 <SysTick_Config>
 8008e74:	4603      	mov	r3, r0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b084      	sub	sp, #16
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e8a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008e8c:	f7ff feb6 	bl	8008bfc <HAL_GetTick>
 8008e90:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d008      	beq.n	8008eb0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2280      	movs	r2, #128	; 0x80
 8008ea2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e052      	b.n	8008f56 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f022 0216 	bic.w	r2, r2, #22
 8008ebe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	695a      	ldr	r2, [r3, #20]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ece:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d103      	bne.n	8008ee0 <HAL_DMA_Abort+0x62>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d007      	beq.n	8008ef0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f022 0208 	bic.w	r2, r2, #8
 8008eee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f022 0201 	bic.w	r2, r2, #1
 8008efe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008f00:	e013      	b.n	8008f2a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008f02:	f7ff fe7b 	bl	8008bfc <HAL_GetTick>
 8008f06:	4602      	mov	r2, r0
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	1ad3      	subs	r3, r2, r3
 8008f0c:	2b05      	cmp	r3, #5
 8008f0e:	d90c      	bls.n	8008f2a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2220      	movs	r2, #32
 8008f14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2203      	movs	r2, #3
 8008f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008f26:	2303      	movs	r3, #3
 8008f28:	e015      	b.n	8008f56 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 0301 	and.w	r3, r3, #1
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1e4      	bne.n	8008f02 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f3c:	223f      	movs	r2, #63	; 0x3f
 8008f3e:	409a      	lsls	r2, r3
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b083      	sub	sp, #12
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d004      	beq.n	8008f7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2280      	movs	r2, #128	; 0x80
 8008f76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e00c      	b.n	8008f96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2205      	movs	r2, #5
 8008f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f022 0201 	bic.w	r2, r2, #1
 8008f92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	370c      	adds	r7, #12
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	b083      	sub	sp, #12
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	370c      	adds	r7, #12
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
	...

08008fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b089      	sub	sp, #36	; 0x24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	61fb      	str	r3, [r7, #28]
 8008fd6:	e159      	b.n	800928c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008fd8:	2201      	movs	r2, #1
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	697a      	ldr	r2, [r7, #20]
 8008fe8:	4013      	ands	r3, r2
 8008fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008fec:	693a      	ldr	r2, [r7, #16]
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	f040 8148 	bne.w	8009286 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	f003 0303 	and.w	r3, r3, #3
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d005      	beq.n	800900e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800900a:	2b02      	cmp	r3, #2
 800900c:	d130      	bne.n	8009070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	005b      	lsls	r3, r3, #1
 8009018:	2203      	movs	r2, #3
 800901a:	fa02 f303 	lsl.w	r3, r2, r3
 800901e:	43db      	mvns	r3, r3
 8009020:	69ba      	ldr	r2, [r7, #24]
 8009022:	4013      	ands	r3, r2
 8009024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	68da      	ldr	r2, [r3, #12]
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	005b      	lsls	r3, r3, #1
 800902e:	fa02 f303 	lsl.w	r3, r2, r3
 8009032:	69ba      	ldr	r2, [r7, #24]
 8009034:	4313      	orrs	r3, r2
 8009036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	69ba      	ldr	r2, [r7, #24]
 800903c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009044:	2201      	movs	r2, #1
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	fa02 f303 	lsl.w	r3, r2, r3
 800904c:	43db      	mvns	r3, r3
 800904e:	69ba      	ldr	r2, [r7, #24]
 8009050:	4013      	ands	r3, r2
 8009052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	091b      	lsrs	r3, r3, #4
 800905a:	f003 0201 	and.w	r2, r3, #1
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	fa02 f303 	lsl.w	r3, r2, r3
 8009064:	69ba      	ldr	r2, [r7, #24]
 8009066:	4313      	orrs	r3, r2
 8009068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	69ba      	ldr	r2, [r7, #24]
 800906e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	f003 0303 	and.w	r3, r3, #3
 8009078:	2b03      	cmp	r3, #3
 800907a:	d017      	beq.n	80090ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	005b      	lsls	r3, r3, #1
 8009086:	2203      	movs	r2, #3
 8009088:	fa02 f303 	lsl.w	r3, r2, r3
 800908c:	43db      	mvns	r3, r3
 800908e:	69ba      	ldr	r2, [r7, #24]
 8009090:	4013      	ands	r3, r2
 8009092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	689a      	ldr	r2, [r3, #8]
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	005b      	lsls	r3, r3, #1
 800909c:	fa02 f303 	lsl.w	r3, r2, r3
 80090a0:	69ba      	ldr	r2, [r7, #24]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	69ba      	ldr	r2, [r7, #24]
 80090aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	f003 0303 	and.w	r3, r3, #3
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d123      	bne.n	8009100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	08da      	lsrs	r2, r3, #3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	3208      	adds	r2, #8
 80090c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	220f      	movs	r2, #15
 80090d0:	fa02 f303 	lsl.w	r3, r2, r3
 80090d4:	43db      	mvns	r3, r3
 80090d6:	69ba      	ldr	r2, [r7, #24]
 80090d8:	4013      	ands	r3, r2
 80090da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	691a      	ldr	r2, [r3, #16]
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	f003 0307 	and.w	r3, r3, #7
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	fa02 f303 	lsl.w	r3, r2, r3
 80090ec:	69ba      	ldr	r2, [r7, #24]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	08da      	lsrs	r2, r3, #3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	3208      	adds	r2, #8
 80090fa:	69b9      	ldr	r1, [r7, #24]
 80090fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	005b      	lsls	r3, r3, #1
 800910a:	2203      	movs	r2, #3
 800910c:	fa02 f303 	lsl.w	r3, r2, r3
 8009110:	43db      	mvns	r3, r3
 8009112:	69ba      	ldr	r2, [r7, #24]
 8009114:	4013      	ands	r3, r2
 8009116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	f003 0203 	and.w	r2, r3, #3
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	005b      	lsls	r3, r3, #1
 8009124:	fa02 f303 	lsl.w	r3, r2, r3
 8009128:	69ba      	ldr	r2, [r7, #24]
 800912a:	4313      	orrs	r3, r2
 800912c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	69ba      	ldr	r2, [r7, #24]
 8009132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 80a2 	beq.w	8009286 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009142:	2300      	movs	r3, #0
 8009144:	60fb      	str	r3, [r7, #12]
 8009146:	4b57      	ldr	r3, [pc, #348]	; (80092a4 <HAL_GPIO_Init+0x2e8>)
 8009148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800914a:	4a56      	ldr	r2, [pc, #344]	; (80092a4 <HAL_GPIO_Init+0x2e8>)
 800914c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009150:	6453      	str	r3, [r2, #68]	; 0x44
 8009152:	4b54      	ldr	r3, [pc, #336]	; (80092a4 <HAL_GPIO_Init+0x2e8>)
 8009154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800915a:	60fb      	str	r3, [r7, #12]
 800915c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800915e:	4a52      	ldr	r2, [pc, #328]	; (80092a8 <HAL_GPIO_Init+0x2ec>)
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	089b      	lsrs	r3, r3, #2
 8009164:	3302      	adds	r3, #2
 8009166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800916a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	f003 0303 	and.w	r3, r3, #3
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	220f      	movs	r2, #15
 8009176:	fa02 f303 	lsl.w	r3, r2, r3
 800917a:	43db      	mvns	r3, r3
 800917c:	69ba      	ldr	r2, [r7, #24]
 800917e:	4013      	ands	r3, r2
 8009180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a49      	ldr	r2, [pc, #292]	; (80092ac <HAL_GPIO_Init+0x2f0>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d019      	beq.n	80091be <HAL_GPIO_Init+0x202>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a48      	ldr	r2, [pc, #288]	; (80092b0 <HAL_GPIO_Init+0x2f4>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d013      	beq.n	80091ba <HAL_GPIO_Init+0x1fe>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a47      	ldr	r2, [pc, #284]	; (80092b4 <HAL_GPIO_Init+0x2f8>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d00d      	beq.n	80091b6 <HAL_GPIO_Init+0x1fa>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a46      	ldr	r2, [pc, #280]	; (80092b8 <HAL_GPIO_Init+0x2fc>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d007      	beq.n	80091b2 <HAL_GPIO_Init+0x1f6>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a45      	ldr	r2, [pc, #276]	; (80092bc <HAL_GPIO_Init+0x300>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d101      	bne.n	80091ae <HAL_GPIO_Init+0x1f2>
 80091aa:	2304      	movs	r3, #4
 80091ac:	e008      	b.n	80091c0 <HAL_GPIO_Init+0x204>
 80091ae:	2307      	movs	r3, #7
 80091b0:	e006      	b.n	80091c0 <HAL_GPIO_Init+0x204>
 80091b2:	2303      	movs	r3, #3
 80091b4:	e004      	b.n	80091c0 <HAL_GPIO_Init+0x204>
 80091b6:	2302      	movs	r3, #2
 80091b8:	e002      	b.n	80091c0 <HAL_GPIO_Init+0x204>
 80091ba:	2301      	movs	r3, #1
 80091bc:	e000      	b.n	80091c0 <HAL_GPIO_Init+0x204>
 80091be:	2300      	movs	r3, #0
 80091c0:	69fa      	ldr	r2, [r7, #28]
 80091c2:	f002 0203 	and.w	r2, r2, #3
 80091c6:	0092      	lsls	r2, r2, #2
 80091c8:	4093      	lsls	r3, r2
 80091ca:	69ba      	ldr	r2, [r7, #24]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80091d0:	4935      	ldr	r1, [pc, #212]	; (80092a8 <HAL_GPIO_Init+0x2ec>)
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	089b      	lsrs	r3, r3, #2
 80091d6:	3302      	adds	r3, #2
 80091d8:	69ba      	ldr	r2, [r7, #24]
 80091da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80091de:	4b38      	ldr	r3, [pc, #224]	; (80092c0 <HAL_GPIO_Init+0x304>)
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	43db      	mvns	r3, r3
 80091e8:	69ba      	ldr	r2, [r7, #24]
 80091ea:	4013      	ands	r3, r2
 80091ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80091fa:	69ba      	ldr	r2, [r7, #24]
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	4313      	orrs	r3, r2
 8009200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009202:	4a2f      	ldr	r2, [pc, #188]	; (80092c0 <HAL_GPIO_Init+0x304>)
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009208:	4b2d      	ldr	r3, [pc, #180]	; (80092c0 <HAL_GPIO_Init+0x304>)
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	43db      	mvns	r3, r3
 8009212:	69ba      	ldr	r2, [r7, #24]
 8009214:	4013      	ands	r3, r2
 8009216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009220:	2b00      	cmp	r3, #0
 8009222:	d003      	beq.n	800922c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009224:	69ba      	ldr	r2, [r7, #24]
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	4313      	orrs	r3, r2
 800922a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800922c:	4a24      	ldr	r2, [pc, #144]	; (80092c0 <HAL_GPIO_Init+0x304>)
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009232:	4b23      	ldr	r3, [pc, #140]	; (80092c0 <HAL_GPIO_Init+0x304>)
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	43db      	mvns	r3, r3
 800923c:	69ba      	ldr	r2, [r7, #24]
 800923e:	4013      	ands	r3, r2
 8009240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800924a:	2b00      	cmp	r3, #0
 800924c:	d003      	beq.n	8009256 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800924e:	69ba      	ldr	r2, [r7, #24]
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	4313      	orrs	r3, r2
 8009254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009256:	4a1a      	ldr	r2, [pc, #104]	; (80092c0 <HAL_GPIO_Init+0x304>)
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800925c:	4b18      	ldr	r3, [pc, #96]	; (80092c0 <HAL_GPIO_Init+0x304>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	43db      	mvns	r3, r3
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	4013      	ands	r3, r2
 800926a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d003      	beq.n	8009280 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8009278:	69ba      	ldr	r2, [r7, #24]
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	4313      	orrs	r3, r2
 800927e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009280:	4a0f      	ldr	r2, [pc, #60]	; (80092c0 <HAL_GPIO_Init+0x304>)
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009286:	69fb      	ldr	r3, [r7, #28]
 8009288:	3301      	adds	r3, #1
 800928a:	61fb      	str	r3, [r7, #28]
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	2b0f      	cmp	r3, #15
 8009290:	f67f aea2 	bls.w	8008fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009294:	bf00      	nop
 8009296:	bf00      	nop
 8009298:	3724      	adds	r7, #36	; 0x24
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	40023800 	.word	0x40023800
 80092a8:	40013800 	.word	0x40013800
 80092ac:	40020000 	.word	0x40020000
 80092b0:	40020400 	.word	0x40020400
 80092b4:	40020800 	.word	0x40020800
 80092b8:	40020c00 	.word	0x40020c00
 80092bc:	40021000 	.word	0x40021000
 80092c0:	40013c00 	.word	0x40013c00

080092c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	460b      	mov	r3, r1
 80092ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	691a      	ldr	r2, [r3, #16]
 80092d4:	887b      	ldrh	r3, [r7, #2]
 80092d6:	4013      	ands	r3, r2
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d002      	beq.n	80092e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80092dc:	2301      	movs	r3, #1
 80092de:	73fb      	strb	r3, [r7, #15]
 80092e0:	e001      	b.n	80092e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80092e2:	2300      	movs	r3, #0
 80092e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3714      	adds	r7, #20
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e12b      	b.n	800955e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800930c:	b2db      	uxtb	r3, r3
 800930e:	2b00      	cmp	r3, #0
 8009310:	d106      	bne.n	8009320 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7fb ff60 	bl	80051e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2224      	movs	r2, #36	; 0x24
 8009324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f022 0201 	bic.w	r2, r2, #1
 8009336:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009346:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009356:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009358:	f001 fcc0 	bl	800acdc <HAL_RCC_GetPCLK1Freq>
 800935c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	4a81      	ldr	r2, [pc, #516]	; (8009568 <HAL_I2C_Init+0x274>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d807      	bhi.n	8009378 <HAL_I2C_Init+0x84>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	4a80      	ldr	r2, [pc, #512]	; (800956c <HAL_I2C_Init+0x278>)
 800936c:	4293      	cmp	r3, r2
 800936e:	bf94      	ite	ls
 8009370:	2301      	movls	r3, #1
 8009372:	2300      	movhi	r3, #0
 8009374:	b2db      	uxtb	r3, r3
 8009376:	e006      	b.n	8009386 <HAL_I2C_Init+0x92>
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	4a7d      	ldr	r2, [pc, #500]	; (8009570 <HAL_I2C_Init+0x27c>)
 800937c:	4293      	cmp	r3, r2
 800937e:	bf94      	ite	ls
 8009380:	2301      	movls	r3, #1
 8009382:	2300      	movhi	r3, #0
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	e0e7      	b.n	800955e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	4a78      	ldr	r2, [pc, #480]	; (8009574 <HAL_I2C_Init+0x280>)
 8009392:	fba2 2303 	umull	r2, r3, r2, r3
 8009396:	0c9b      	lsrs	r3, r3, #18
 8009398:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	430a      	orrs	r2, r1
 80093ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	6a1b      	ldr	r3, [r3, #32]
 80093b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	4a6a      	ldr	r2, [pc, #424]	; (8009568 <HAL_I2C_Init+0x274>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d802      	bhi.n	80093c8 <HAL_I2C_Init+0xd4>
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	3301      	adds	r3, #1
 80093c6:	e009      	b.n	80093dc <HAL_I2C_Init+0xe8>
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80093ce:	fb02 f303 	mul.w	r3, r2, r3
 80093d2:	4a69      	ldr	r2, [pc, #420]	; (8009578 <HAL_I2C_Init+0x284>)
 80093d4:	fba2 2303 	umull	r2, r3, r2, r3
 80093d8:	099b      	lsrs	r3, r3, #6
 80093da:	3301      	adds	r3, #1
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	6812      	ldr	r2, [r2, #0]
 80093e0:	430b      	orrs	r3, r1
 80093e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	69db      	ldr	r3, [r3, #28]
 80093ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80093ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	495c      	ldr	r1, [pc, #368]	; (8009568 <HAL_I2C_Init+0x274>)
 80093f8:	428b      	cmp	r3, r1
 80093fa:	d819      	bhi.n	8009430 <HAL_I2C_Init+0x13c>
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	1e59      	subs	r1, r3, #1
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	005b      	lsls	r3, r3, #1
 8009406:	fbb1 f3f3 	udiv	r3, r1, r3
 800940a:	1c59      	adds	r1, r3, #1
 800940c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009410:	400b      	ands	r3, r1
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00a      	beq.n	800942c <HAL_I2C_Init+0x138>
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	1e59      	subs	r1, r3, #1
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	005b      	lsls	r3, r3, #1
 8009420:	fbb1 f3f3 	udiv	r3, r1, r3
 8009424:	3301      	adds	r3, #1
 8009426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800942a:	e051      	b.n	80094d0 <HAL_I2C_Init+0x1dc>
 800942c:	2304      	movs	r3, #4
 800942e:	e04f      	b.n	80094d0 <HAL_I2C_Init+0x1dc>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d111      	bne.n	800945c <HAL_I2C_Init+0x168>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	1e58      	subs	r0, r3, #1
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6859      	ldr	r1, [r3, #4]
 8009440:	460b      	mov	r3, r1
 8009442:	005b      	lsls	r3, r3, #1
 8009444:	440b      	add	r3, r1
 8009446:	fbb0 f3f3 	udiv	r3, r0, r3
 800944a:	3301      	adds	r3, #1
 800944c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009450:	2b00      	cmp	r3, #0
 8009452:	bf0c      	ite	eq
 8009454:	2301      	moveq	r3, #1
 8009456:	2300      	movne	r3, #0
 8009458:	b2db      	uxtb	r3, r3
 800945a:	e012      	b.n	8009482 <HAL_I2C_Init+0x18e>
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	1e58      	subs	r0, r3, #1
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6859      	ldr	r1, [r3, #4]
 8009464:	460b      	mov	r3, r1
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	440b      	add	r3, r1
 800946a:	0099      	lsls	r1, r3, #2
 800946c:	440b      	add	r3, r1
 800946e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009472:	3301      	adds	r3, #1
 8009474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009478:	2b00      	cmp	r3, #0
 800947a:	bf0c      	ite	eq
 800947c:	2301      	moveq	r3, #1
 800947e:	2300      	movne	r3, #0
 8009480:	b2db      	uxtb	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <HAL_I2C_Init+0x196>
 8009486:	2301      	movs	r3, #1
 8009488:	e022      	b.n	80094d0 <HAL_I2C_Init+0x1dc>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10e      	bne.n	80094b0 <HAL_I2C_Init+0x1bc>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	1e58      	subs	r0, r3, #1
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6859      	ldr	r1, [r3, #4]
 800949a:	460b      	mov	r3, r1
 800949c:	005b      	lsls	r3, r3, #1
 800949e:	440b      	add	r3, r1
 80094a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80094a4:	3301      	adds	r3, #1
 80094a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094ae:	e00f      	b.n	80094d0 <HAL_I2C_Init+0x1dc>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	1e58      	subs	r0, r3, #1
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6859      	ldr	r1, [r3, #4]
 80094b8:	460b      	mov	r3, r1
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	440b      	add	r3, r1
 80094be:	0099      	lsls	r1, r3, #2
 80094c0:	440b      	add	r3, r1
 80094c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80094c6:	3301      	adds	r3, #1
 80094c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80094d0:	6879      	ldr	r1, [r7, #4]
 80094d2:	6809      	ldr	r1, [r1, #0]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	69da      	ldr	r2, [r3, #28]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a1b      	ldr	r3, [r3, #32]
 80094ea:	431a      	orrs	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	430a      	orrs	r2, r1
 80094f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80094fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	6911      	ldr	r1, [r2, #16]
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	68d2      	ldr	r2, [r2, #12]
 800950a:	4311      	orrs	r1, r2
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	6812      	ldr	r2, [r2, #0]
 8009510:	430b      	orrs	r3, r1
 8009512:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	695a      	ldr	r2, [r3, #20]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	699b      	ldr	r3, [r3, #24]
 8009526:	431a      	orrs	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	430a      	orrs	r2, r1
 800952e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f042 0201 	orr.w	r2, r2, #1
 800953e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2220      	movs	r2, #32
 800954a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	000186a0 	.word	0x000186a0
 800956c:	001e847f 	.word	0x001e847f
 8009570:	003d08ff 	.word	0x003d08ff
 8009574:	431bde83 	.word	0x431bde83
 8009578:	10624dd3 	.word	0x10624dd3

0800957c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b088      	sub	sp, #32
 8009580:	af02      	add	r7, sp, #8
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	607a      	str	r2, [r7, #4]
 8009586:	461a      	mov	r2, r3
 8009588:	460b      	mov	r3, r1
 800958a:	817b      	strh	r3, [r7, #10]
 800958c:	4613      	mov	r3, r2
 800958e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009590:	f7ff fb34 	bl	8008bfc <HAL_GetTick>
 8009594:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b20      	cmp	r3, #32
 80095a0:	f040 80e0 	bne.w	8009764 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	2319      	movs	r3, #25
 80095aa:	2201      	movs	r2, #1
 80095ac:	4970      	ldr	r1, [pc, #448]	; (8009770 <HAL_I2C_Master_Transmit+0x1f4>)
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f000 fd86 	bl	800a0c0 <I2C_WaitOnFlagUntilTimeout>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d001      	beq.n	80095be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80095ba:	2302      	movs	r3, #2
 80095bc:	e0d3      	b.n	8009766 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d101      	bne.n	80095cc <HAL_I2C_Master_Transmit+0x50>
 80095c8:	2302      	movs	r3, #2
 80095ca:	e0cc      	b.n	8009766 <HAL_I2C_Master_Transmit+0x1ea>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d007      	beq.n	80095f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f042 0201 	orr.w	r2, r2, #1
 80095f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009600:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2221      	movs	r2, #33	; 0x21
 8009606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2210      	movs	r2, #16
 800960e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	893a      	ldrh	r2, [r7, #8]
 8009622:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009628:	b29a      	uxth	r2, r3
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	4a50      	ldr	r2, [pc, #320]	; (8009774 <HAL_I2C_Master_Transmit+0x1f8>)
 8009632:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009634:	8979      	ldrh	r1, [r7, #10]
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	6a3a      	ldr	r2, [r7, #32]
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f000 fbf0 	bl	8009e20 <I2C_MasterRequestWrite>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e08d      	b.n	8009766 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800964a:	2300      	movs	r3, #0
 800964c:	613b      	str	r3, [r7, #16]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	695b      	ldr	r3, [r3, #20]
 8009654:	613b      	str	r3, [r7, #16]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	699b      	ldr	r3, [r3, #24]
 800965c:	613b      	str	r3, [r7, #16]
 800965e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009660:	e066      	b.n	8009730 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009662:	697a      	ldr	r2, [r7, #20]
 8009664:	6a39      	ldr	r1, [r7, #32]
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f000 fe00 	bl	800a26c <I2C_WaitOnTXEFlagUntilTimeout>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00d      	beq.n	800968e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009676:	2b04      	cmp	r3, #4
 8009678:	d107      	bne.n	800968a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009688:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	e06b      	b.n	8009766 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009692:	781a      	ldrb	r2, [r3, #0]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969e:	1c5a      	adds	r2, r3, #1
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	3b01      	subs	r3, #1
 80096ac:	b29a      	uxth	r2, r3
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096b6:	3b01      	subs	r3, #1
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	f003 0304 	and.w	r3, r3, #4
 80096c8:	2b04      	cmp	r3, #4
 80096ca:	d11b      	bne.n	8009704 <HAL_I2C_Master_Transmit+0x188>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d017      	beq.n	8009704 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d8:	781a      	ldrb	r2, [r3, #0]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e4:	1c5a      	adds	r2, r3, #1
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	3b01      	subs	r3, #1
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096fc:	3b01      	subs	r3, #1
 80096fe:	b29a      	uxth	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009704:	697a      	ldr	r2, [r7, #20]
 8009706:	6a39      	ldr	r1, [r7, #32]
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f000 fdf0 	bl	800a2ee <I2C_WaitOnBTFFlagUntilTimeout>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00d      	beq.n	8009730 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009718:	2b04      	cmp	r3, #4
 800971a:	d107      	bne.n	800972c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800972a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	e01a      	b.n	8009766 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009734:	2b00      	cmp	r3, #0
 8009736:	d194      	bne.n	8009662 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2220      	movs	r2, #32
 800974c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	e000      	b.n	8009766 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009764:	2302      	movs	r3, #2
  }
}
 8009766:	4618      	mov	r0, r3
 8009768:	3718      	adds	r7, #24
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	00100002 	.word	0x00100002
 8009774:	ffff0000 	.word	0xffff0000

08009778 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b08c      	sub	sp, #48	; 0x30
 800977c:	af02      	add	r7, sp, #8
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	607a      	str	r2, [r7, #4]
 8009782:	461a      	mov	r2, r3
 8009784:	460b      	mov	r3, r1
 8009786:	817b      	strh	r3, [r7, #10]
 8009788:	4613      	mov	r3, r2
 800978a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800978c:	f7ff fa36 	bl	8008bfc <HAL_GetTick>
 8009790:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009798:	b2db      	uxtb	r3, r3
 800979a:	2b20      	cmp	r3, #32
 800979c:	f040 820b 	bne.w	8009bb6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	9300      	str	r3, [sp, #0]
 80097a4:	2319      	movs	r3, #25
 80097a6:	2201      	movs	r2, #1
 80097a8:	497c      	ldr	r1, [pc, #496]	; (800999c <HAL_I2C_Master_Receive+0x224>)
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f000 fc88 	bl	800a0c0 <I2C_WaitOnFlagUntilTimeout>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d001      	beq.n	80097ba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80097b6:	2302      	movs	r3, #2
 80097b8:	e1fe      	b.n	8009bb8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d101      	bne.n	80097c8 <HAL_I2C_Master_Receive+0x50>
 80097c4:	2302      	movs	r3, #2
 80097c6:	e1f7      	b.n	8009bb8 <HAL_I2C_Master_Receive+0x440>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f003 0301 	and.w	r3, r3, #1
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d007      	beq.n	80097ee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f042 0201 	orr.w	r2, r2, #1
 80097ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2222      	movs	r2, #34	; 0x22
 8009802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2210      	movs	r2, #16
 800980a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	893a      	ldrh	r2, [r7, #8]
 800981e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009824:	b29a      	uxth	r2, r3
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	4a5c      	ldr	r2, [pc, #368]	; (80099a0 <HAL_I2C_Master_Receive+0x228>)
 800982e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009830:	8979      	ldrh	r1, [r7, #10]
 8009832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f000 fb74 	bl	8009f24 <I2C_MasterRequestRead>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d001      	beq.n	8009846 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e1b8      	b.n	8009bb8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800984a:	2b00      	cmp	r3, #0
 800984c:	d113      	bne.n	8009876 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800984e:	2300      	movs	r3, #0
 8009850:	623b      	str	r3, [r7, #32]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	695b      	ldr	r3, [r3, #20]
 8009858:	623b      	str	r3, [r7, #32]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	623b      	str	r3, [r7, #32]
 8009862:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	e18c      	b.n	8009b90 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800987a:	2b01      	cmp	r3, #1
 800987c:	d11b      	bne.n	80098b6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800988c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800988e:	2300      	movs	r3, #0
 8009890:	61fb      	str	r3, [r7, #28]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	695b      	ldr	r3, [r3, #20]
 8009898:	61fb      	str	r3, [r7, #28]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	699b      	ldr	r3, [r3, #24]
 80098a0:	61fb      	str	r3, [r7, #28]
 80098a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098b2:	601a      	str	r2, [r3, #0]
 80098b4:	e16c      	b.n	8009b90 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d11b      	bne.n	80098f6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098de:	2300      	movs	r3, #0
 80098e0:	61bb      	str	r3, [r7, #24]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	695b      	ldr	r3, [r3, #20]
 80098e8:	61bb      	str	r3, [r7, #24]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	61bb      	str	r3, [r7, #24]
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	e14c      	b.n	8009b90 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009904:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009906:	2300      	movs	r3, #0
 8009908:	617b      	str	r3, [r7, #20]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	695b      	ldr	r3, [r3, #20]
 8009910:	617b      	str	r3, [r7, #20]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	699b      	ldr	r3, [r3, #24]
 8009918:	617b      	str	r3, [r7, #20]
 800991a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800991c:	e138      	b.n	8009b90 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009922:	2b03      	cmp	r3, #3
 8009924:	f200 80f1 	bhi.w	8009b0a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800992c:	2b01      	cmp	r3, #1
 800992e:	d123      	bne.n	8009978 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009932:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f000 fd1b 	bl	800a370 <I2C_WaitOnRXNEFlagUntilTimeout>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	e139      	b.n	8009bb8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	691a      	ldr	r2, [r3, #16]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994e:	b2d2      	uxtb	r2, r2
 8009950:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009956:	1c5a      	adds	r2, r3, #1
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009960:	3b01      	subs	r3, #1
 8009962:	b29a      	uxth	r2, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800996c:	b29b      	uxth	r3, r3
 800996e:	3b01      	subs	r3, #1
 8009970:	b29a      	uxth	r2, r3
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009976:	e10b      	b.n	8009b90 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800997c:	2b02      	cmp	r3, #2
 800997e:	d14e      	bne.n	8009a1e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009986:	2200      	movs	r2, #0
 8009988:	4906      	ldr	r1, [pc, #24]	; (80099a4 <HAL_I2C_Master_Receive+0x22c>)
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 fb98 	bl	800a0c0 <I2C_WaitOnFlagUntilTimeout>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d008      	beq.n	80099a8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e10e      	b.n	8009bb8 <HAL_I2C_Master_Receive+0x440>
 800999a:	bf00      	nop
 800999c:	00100002 	.word	0x00100002
 80099a0:	ffff0000 	.word	0xffff0000
 80099a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	691a      	ldr	r2, [r3, #16]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c2:	b2d2      	uxtb	r2, r2
 80099c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ca:	1c5a      	adds	r2, r3, #1
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099d4:	3b01      	subs	r3, #1
 80099d6:	b29a      	uxth	r2, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	3b01      	subs	r3, #1
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	691a      	ldr	r2, [r3, #16]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f4:	b2d2      	uxtb	r2, r2
 80099f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fc:	1c5a      	adds	r2, r3, #1
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a06:	3b01      	subs	r3, #1
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	3b01      	subs	r3, #1
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a1c:	e0b8      	b.n	8009b90 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a20:	9300      	str	r3, [sp, #0]
 8009a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a24:	2200      	movs	r2, #0
 8009a26:	4966      	ldr	r1, [pc, #408]	; (8009bc0 <HAL_I2C_Master_Receive+0x448>)
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 fb49 	bl	800a0c0 <I2C_WaitOnFlagUntilTimeout>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e0bf      	b.n	8009bb8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	691a      	ldr	r2, [r3, #16]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a52:	b2d2      	uxtb	r2, r2
 8009a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5a:	1c5a      	adds	r2, r3, #1
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a64:	3b01      	subs	r3, #1
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	3b01      	subs	r3, #1
 8009a74:	b29a      	uxth	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a80:	2200      	movs	r2, #0
 8009a82:	494f      	ldr	r1, [pc, #316]	; (8009bc0 <HAL_I2C_Master_Receive+0x448>)
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f000 fb1b 	bl	800a0c0 <I2C_WaitOnFlagUntilTimeout>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d001      	beq.n	8009a94 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	e091      	b.n	8009bb8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009aa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	691a      	ldr	r2, [r3, #16]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aae:	b2d2      	uxtb	r2, r2
 8009ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab6:	1c5a      	adds	r2, r3, #1
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	691a      	ldr	r2, [r3, #16]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae0:	b2d2      	uxtb	r2, r2
 8009ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae8:	1c5a      	adds	r2, r3, #1
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009af2:	3b01      	subs	r3, #1
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	3b01      	subs	r3, #1
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009b08:	e042      	b.n	8009b90 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f000 fc2e 	bl	800a370 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d001      	beq.n	8009b1e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e04c      	b.n	8009bb8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	691a      	ldr	r2, [r3, #16]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b28:	b2d2      	uxtb	r2, r2
 8009b2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b30:	1c5a      	adds	r2, r3, #1
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	695b      	ldr	r3, [r3, #20]
 8009b56:	f003 0304 	and.w	r3, r3, #4
 8009b5a:	2b04      	cmp	r3, #4
 8009b5c:	d118      	bne.n	8009b90 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	691a      	ldr	r2, [r3, #16]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b68:	b2d2      	uxtb	r2, r2
 8009b6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b70:	1c5a      	adds	r2, r3, #1
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f47f aec2 	bne.w	800991e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2220      	movs	r2, #32
 8009b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	e000      	b.n	8009bb8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009bb6:	2302      	movs	r3, #2
  }
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3728      	adds	r7, #40	; 0x28
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	00010004 	.word	0x00010004

08009bc4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b08a      	sub	sp, #40	; 0x28
 8009bc8:	af02      	add	r7, sp, #8
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	607a      	str	r2, [r7, #4]
 8009bce:	603b      	str	r3, [r7, #0]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009bd4:	f7ff f812 	bl	8008bfc <HAL_GetTick>
 8009bd8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	2b20      	cmp	r3, #32
 8009be8:	f040 8111 	bne.w	8009e0e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	2319      	movs	r3, #25
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	4988      	ldr	r1, [pc, #544]	; (8009e18 <HAL_I2C_IsDeviceReady+0x254>)
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f000 fa62 	bl	800a0c0 <I2C_WaitOnFlagUntilTimeout>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d001      	beq.n	8009c06 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8009c02:	2302      	movs	r3, #2
 8009c04:	e104      	b.n	8009e10 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d101      	bne.n	8009c14 <HAL_I2C_IsDeviceReady+0x50>
 8009c10:	2302      	movs	r3, #2
 8009c12:	e0fd      	b.n	8009e10 <HAL_I2C_IsDeviceReady+0x24c>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f003 0301 	and.w	r3, r3, #1
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d007      	beq.n	8009c3a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f042 0201 	orr.w	r2, r2, #1
 8009c38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2224      	movs	r2, #36	; 0x24
 8009c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	4a70      	ldr	r2, [pc, #448]	; (8009e1c <HAL_I2C_IsDeviceReady+0x258>)
 8009c5c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c6c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f000 fa20 	bl	800a0c0 <I2C_WaitOnFlagUntilTimeout>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00d      	beq.n	8009ca2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c94:	d103      	bne.n	8009c9e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c9c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	e0b6      	b.n	8009e10 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009ca2:	897b      	ldrh	r3, [r7, #10]
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009cb0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8009cb2:	f7fe ffa3 	bl	8008bfc <HAL_GetTick>
 8009cb6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	695b      	ldr	r3, [r3, #20]
 8009cbe:	f003 0302 	and.w	r3, r3, #2
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	bf0c      	ite	eq
 8009cc6:	2301      	moveq	r3, #1
 8009cc8:	2300      	movne	r3, #0
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	695b      	ldr	r3, [r3, #20]
 8009cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cdc:	bf0c      	ite	eq
 8009cde:	2301      	moveq	r3, #1
 8009ce0:	2300      	movne	r3, #0
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009ce6:	e025      	b.n	8009d34 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009ce8:	f7fe ff88 	bl	8008bfc <HAL_GetTick>
 8009cec:	4602      	mov	r2, r0
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d302      	bcc.n	8009cfe <HAL_I2C_IsDeviceReady+0x13a>
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d103      	bne.n	8009d06 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	22a0      	movs	r2, #160	; 0xa0
 8009d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	695b      	ldr	r3, [r3, #20]
 8009d0c:	f003 0302 	and.w	r3, r3, #2
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	bf0c      	ite	eq
 8009d14:	2301      	moveq	r3, #1
 8009d16:	2300      	movne	r3, #0
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d2a:	bf0c      	ite	eq
 8009d2c:	2301      	moveq	r3, #1
 8009d2e:	2300      	movne	r3, #0
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2ba0      	cmp	r3, #160	; 0xa0
 8009d3e:	d005      	beq.n	8009d4c <HAL_I2C_IsDeviceReady+0x188>
 8009d40:	7dfb      	ldrb	r3, [r7, #23]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d102      	bne.n	8009d4c <HAL_I2C_IsDeviceReady+0x188>
 8009d46:	7dbb      	ldrb	r3, [r7, #22]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d0cd      	beq.n	8009ce8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2220      	movs	r2, #32
 8009d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	695b      	ldr	r3, [r3, #20]
 8009d5a:	f003 0302 	and.w	r3, r3, #2
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d129      	bne.n	8009db6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d70:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d72:	2300      	movs	r3, #0
 8009d74:	613b      	str	r3, [r7, #16]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	695b      	ldr	r3, [r3, #20]
 8009d7c:	613b      	str	r3, [r7, #16]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	613b      	str	r3, [r7, #16]
 8009d86:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	9300      	str	r3, [sp, #0]
 8009d8c:	2319      	movs	r3, #25
 8009d8e:	2201      	movs	r2, #1
 8009d90:	4921      	ldr	r1, [pc, #132]	; (8009e18 <HAL_I2C_IsDeviceReady+0x254>)
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f000 f994 	bl	800a0c0 <I2C_WaitOnFlagUntilTimeout>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d001      	beq.n	8009da2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e036      	b.n	8009e10 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2220      	movs	r2, #32
 8009da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	e02c      	b.n	8009e10 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dc4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009dce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	9300      	str	r3, [sp, #0]
 8009dd4:	2319      	movs	r3, #25
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	490f      	ldr	r1, [pc, #60]	; (8009e18 <HAL_I2C_IsDeviceReady+0x254>)
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f000 f970 	bl	800a0c0 <I2C_WaitOnFlagUntilTimeout>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d001      	beq.n	8009dea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	e012      	b.n	8009e10 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	3301      	adds	r3, #1
 8009dee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009df0:	69ba      	ldr	r2, [r7, #24]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	f4ff af32 	bcc.w	8009c5e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2220      	movs	r2, #32
 8009dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e000      	b.n	8009e10 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8009e0e:	2302      	movs	r3, #2
  }
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3720      	adds	r7, #32
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	00100002 	.word	0x00100002
 8009e1c:	ffff0000 	.word	0xffff0000

08009e20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b088      	sub	sp, #32
 8009e24:	af02      	add	r7, sp, #8
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	607a      	str	r2, [r7, #4]
 8009e2a:	603b      	str	r3, [r7, #0]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	2b08      	cmp	r3, #8
 8009e3a:	d006      	beq.n	8009e4a <I2C_MasterRequestWrite+0x2a>
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d003      	beq.n	8009e4a <I2C_MasterRequestWrite+0x2a>
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009e48:	d108      	bne.n	8009e5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e58:	601a      	str	r2, [r3, #0]
 8009e5a:	e00b      	b.n	8009e74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e60:	2b12      	cmp	r3, #18
 8009e62:	d107      	bne.n	8009e74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f000 f91d 	bl	800a0c0 <I2C_WaitOnFlagUntilTimeout>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00d      	beq.n	8009ea8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e9a:	d103      	bne.n	8009ea4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ea2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	e035      	b.n	8009f14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009eb0:	d108      	bne.n	8009ec4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009eb2:	897b      	ldrh	r3, [r7, #10]
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009ec0:	611a      	str	r2, [r3, #16]
 8009ec2:	e01b      	b.n	8009efc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009ec4:	897b      	ldrh	r3, [r7, #10]
 8009ec6:	11db      	asrs	r3, r3, #7
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	f003 0306 	and.w	r3, r3, #6
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	f063 030f 	orn	r3, r3, #15
 8009ed4:	b2da      	uxtb	r2, r3
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	490e      	ldr	r1, [pc, #56]	; (8009f1c <I2C_MasterRequestWrite+0xfc>)
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f000 f943 	bl	800a16e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d001      	beq.n	8009ef2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e010      	b.n	8009f14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009ef2:	897b      	ldrh	r3, [r7, #10]
 8009ef4:	b2da      	uxtb	r2, r3
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	4907      	ldr	r1, [pc, #28]	; (8009f20 <I2C_MasterRequestWrite+0x100>)
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f000 f933 	bl	800a16e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e000      	b.n	8009f14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009f12:	2300      	movs	r3, #0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3718      	adds	r7, #24
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	00010008 	.word	0x00010008
 8009f20:	00010002 	.word	0x00010002

08009f24 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b088      	sub	sp, #32
 8009f28:	af02      	add	r7, sp, #8
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	607a      	str	r2, [r7, #4]
 8009f2e:	603b      	str	r3, [r7, #0]
 8009f30:	460b      	mov	r3, r1
 8009f32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f38:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f48:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	2b08      	cmp	r3, #8
 8009f4e:	d006      	beq.n	8009f5e <I2C_MasterRequestRead+0x3a>
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d003      	beq.n	8009f5e <I2C_MasterRequestRead+0x3a>
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009f5c:	d108      	bne.n	8009f70 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f6c:	601a      	str	r2, [r3, #0]
 8009f6e:	e00b      	b.n	8009f88 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f74:	2b11      	cmp	r3, #17
 8009f76:	d107      	bne.n	8009f88 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f000 f893 	bl	800a0c0 <I2C_WaitOnFlagUntilTimeout>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d00d      	beq.n	8009fbc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fae:	d103      	bne.n	8009fb8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	e079      	b.n	800a0b0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fc4:	d108      	bne.n	8009fd8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009fc6:	897b      	ldrh	r3, [r7, #10]
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	f043 0301 	orr.w	r3, r3, #1
 8009fce:	b2da      	uxtb	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	611a      	str	r2, [r3, #16]
 8009fd6:	e05f      	b.n	800a098 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009fd8:	897b      	ldrh	r3, [r7, #10]
 8009fda:	11db      	asrs	r3, r3, #7
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	f003 0306 	and.w	r3, r3, #6
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	f063 030f 	orn	r3, r3, #15
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	4930      	ldr	r1, [pc, #192]	; (800a0b8 <I2C_MasterRequestRead+0x194>)
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f000 f8b9 	bl	800a16e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e054      	b.n	800a0b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a006:	897b      	ldrh	r3, [r7, #10]
 800a008:	b2da      	uxtb	r2, r3
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	4929      	ldr	r1, [pc, #164]	; (800a0bc <I2C_MasterRequestRead+0x198>)
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f000 f8a9 	bl	800a16e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	e044      	b.n	800a0b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a026:	2300      	movs	r3, #0
 800a028:	613b      	str	r3, [r7, #16]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	695b      	ldr	r3, [r3, #20]
 800a030:	613b      	str	r3, [r7, #16]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	699b      	ldr	r3, [r3, #24]
 800a038:	613b      	str	r3, [r7, #16]
 800a03a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a04a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	9300      	str	r3, [sp, #0]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	f000 f831 	bl	800a0c0 <I2C_WaitOnFlagUntilTimeout>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00d      	beq.n	800a080 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a06e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a072:	d103      	bne.n	800a07c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a07a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800a07c:	2303      	movs	r3, #3
 800a07e:	e017      	b.n	800a0b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a080:	897b      	ldrh	r3, [r7, #10]
 800a082:	11db      	asrs	r3, r3, #7
 800a084:	b2db      	uxtb	r3, r3
 800a086:	f003 0306 	and.w	r3, r3, #6
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	f063 030e 	orn	r3, r3, #14
 800a090:	b2da      	uxtb	r2, r3
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	4907      	ldr	r1, [pc, #28]	; (800a0bc <I2C_MasterRequestRead+0x198>)
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f000 f865 	bl	800a16e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d001      	beq.n	800a0ae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e000      	b.n	800a0b0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3718      	adds	r7, #24
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	00010008 	.word	0x00010008
 800a0bc:	00010002 	.word	0x00010002

0800a0c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	603b      	str	r3, [r7, #0]
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a0d0:	e025      	b.n	800a11e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d8:	d021      	beq.n	800a11e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0da:	f7fe fd8f 	bl	8008bfc <HAL_GetTick>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	1ad3      	subs	r3, r2, r3
 800a0e4:	683a      	ldr	r2, [r7, #0]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d302      	bcc.n	800a0f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d116      	bne.n	800a11e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2220      	movs	r2, #32
 800a0fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2200      	movs	r2, #0
 800a102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a10a:	f043 0220 	orr.w	r2, r3, #32
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	e023      	b.n	800a166 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	0c1b      	lsrs	r3, r3, #16
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2b01      	cmp	r3, #1
 800a126:	d10d      	bne.n	800a144 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	695b      	ldr	r3, [r3, #20]
 800a12e:	43da      	mvns	r2, r3
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	4013      	ands	r3, r2
 800a134:	b29b      	uxth	r3, r3
 800a136:	2b00      	cmp	r3, #0
 800a138:	bf0c      	ite	eq
 800a13a:	2301      	moveq	r3, #1
 800a13c:	2300      	movne	r3, #0
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	461a      	mov	r2, r3
 800a142:	e00c      	b.n	800a15e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	699b      	ldr	r3, [r3, #24]
 800a14a:	43da      	mvns	r2, r3
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	4013      	ands	r3, r2
 800a150:	b29b      	uxth	r3, r3
 800a152:	2b00      	cmp	r3, #0
 800a154:	bf0c      	ite	eq
 800a156:	2301      	moveq	r3, #1
 800a158:	2300      	movne	r3, #0
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	461a      	mov	r2, r3
 800a15e:	79fb      	ldrb	r3, [r7, #7]
 800a160:	429a      	cmp	r2, r3
 800a162:	d0b6      	beq.n	800a0d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b084      	sub	sp, #16
 800a172:	af00      	add	r7, sp, #0
 800a174:	60f8      	str	r0, [r7, #12]
 800a176:	60b9      	str	r1, [r7, #8]
 800a178:	607a      	str	r2, [r7, #4]
 800a17a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a17c:	e051      	b.n	800a222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	695b      	ldr	r3, [r3, #20]
 800a184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a18c:	d123      	bne.n	800a1d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a19c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a1a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2220      	movs	r2, #32
 800a1b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c2:	f043 0204 	orr.w	r2, r3, #4
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e046      	b.n	800a264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1dc:	d021      	beq.n	800a222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1de:	f7fe fd0d 	bl	8008bfc <HAL_GetTick>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	1ad3      	subs	r3, r2, r3
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d302      	bcc.n	800a1f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d116      	bne.n	800a222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2220      	movs	r2, #32
 800a1fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20e:	f043 0220 	orr.w	r2, r3, #32
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	e020      	b.n	800a264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	0c1b      	lsrs	r3, r3, #16
 800a226:	b2db      	uxtb	r3, r3
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d10c      	bne.n	800a246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	695b      	ldr	r3, [r3, #20]
 800a232:	43da      	mvns	r2, r3
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	4013      	ands	r3, r2
 800a238:	b29b      	uxth	r3, r3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	bf14      	ite	ne
 800a23e:	2301      	movne	r3, #1
 800a240:	2300      	moveq	r3, #0
 800a242:	b2db      	uxtb	r3, r3
 800a244:	e00b      	b.n	800a25e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	43da      	mvns	r2, r3
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	4013      	ands	r3, r2
 800a252:	b29b      	uxth	r3, r3
 800a254:	2b00      	cmp	r3, #0
 800a256:	bf14      	ite	ne
 800a258:	2301      	movne	r3, #1
 800a25a:	2300      	moveq	r3, #0
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d18d      	bne.n	800a17e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3710      	adds	r7, #16
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a278:	e02d      	b.n	800a2d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f000 f8ce 	bl	800a41c <I2C_IsAcknowledgeFailed>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d001      	beq.n	800a28a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	e02d      	b.n	800a2e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a290:	d021      	beq.n	800a2d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a292:	f7fe fcb3 	bl	8008bfc <HAL_GetTick>
 800a296:	4602      	mov	r2, r0
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d302      	bcc.n	800a2a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d116      	bne.n	800a2d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2220      	movs	r2, #32
 800a2b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c2:	f043 0220 	orr.w	r2, r3, #32
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e007      	b.n	800a2e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	695b      	ldr	r3, [r3, #20]
 800a2dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2e0:	2b80      	cmp	r3, #128	; 0x80
 800a2e2:	d1ca      	bne.n	800a27a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b084      	sub	sp, #16
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	60f8      	str	r0, [r7, #12]
 800a2f6:	60b9      	str	r1, [r7, #8]
 800a2f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a2fa:	e02d      	b.n	800a358 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f000 f88d 	bl	800a41c <I2C_IsAcknowledgeFailed>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d001      	beq.n	800a30c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	e02d      	b.n	800a368 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a312:	d021      	beq.n	800a358 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a314:	f7fe fc72 	bl	8008bfc <HAL_GetTick>
 800a318:	4602      	mov	r2, r0
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	1ad3      	subs	r3, r2, r3
 800a31e:	68ba      	ldr	r2, [r7, #8]
 800a320:	429a      	cmp	r2, r3
 800a322:	d302      	bcc.n	800a32a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d116      	bne.n	800a358 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2200      	movs	r2, #0
 800a32e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2220      	movs	r2, #32
 800a334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a344:	f043 0220 	orr.w	r2, r3, #32
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	e007      	b.n	800a368 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	695b      	ldr	r3, [r3, #20]
 800a35e:	f003 0304 	and.w	r3, r3, #4
 800a362:	2b04      	cmp	r3, #4
 800a364:	d1ca      	bne.n	800a2fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a37c:	e042      	b.n	800a404 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	695b      	ldr	r3, [r3, #20]
 800a384:	f003 0310 	and.w	r3, r3, #16
 800a388:	2b10      	cmp	r3, #16
 800a38a:	d119      	bne.n	800a3c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f06f 0210 	mvn.w	r2, #16
 800a394:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2200      	movs	r2, #0
 800a39a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2220      	movs	r2, #32
 800a3a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e029      	b.n	800a414 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3c0:	f7fe fc1c 	bl	8008bfc <HAL_GetTick>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	68ba      	ldr	r2, [r7, #8]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d302      	bcc.n	800a3d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d116      	bne.n	800a404 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2220      	movs	r2, #32
 800a3e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f0:	f043 0220 	orr.w	r2, r3, #32
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	e007      	b.n	800a414 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a40e:	2b40      	cmp	r3, #64	; 0x40
 800a410:	d1b5      	bne.n	800a37e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	695b      	ldr	r3, [r3, #20]
 800a42a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a42e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a432:	d11b      	bne.n	800a46c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a43c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2220      	movs	r2, #32
 800a448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a458:	f043 0204 	orr.w	r2, r3, #4
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	e000      	b.n	800a46e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
	...

0800a47c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d101      	bne.n	800a48e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e267      	b.n	800a95e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	2b00      	cmp	r3, #0
 800a498:	d075      	beq.n	800a586 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a49a:	4b88      	ldr	r3, [pc, #544]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	f003 030c 	and.w	r3, r3, #12
 800a4a2:	2b04      	cmp	r3, #4
 800a4a4:	d00c      	beq.n	800a4c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a4a6:	4b85      	ldr	r3, [pc, #532]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a4ae:	2b08      	cmp	r3, #8
 800a4b0:	d112      	bne.n	800a4d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a4b2:	4b82      	ldr	r3, [pc, #520]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4be:	d10b      	bne.n	800a4d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4c0:	4b7e      	ldr	r3, [pc, #504]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d05b      	beq.n	800a584 <HAL_RCC_OscConfig+0x108>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d157      	bne.n	800a584 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e242      	b.n	800a95e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4e0:	d106      	bne.n	800a4f0 <HAL_RCC_OscConfig+0x74>
 800a4e2:	4b76      	ldr	r3, [pc, #472]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a75      	ldr	r2, [pc, #468]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a4e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4ec:	6013      	str	r3, [r2, #0]
 800a4ee:	e01d      	b.n	800a52c <HAL_RCC_OscConfig+0xb0>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a4f8:	d10c      	bne.n	800a514 <HAL_RCC_OscConfig+0x98>
 800a4fa:	4b70      	ldr	r3, [pc, #448]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a6f      	ldr	r2, [pc, #444]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a504:	6013      	str	r3, [r2, #0]
 800a506:	4b6d      	ldr	r3, [pc, #436]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a6c      	ldr	r2, [pc, #432]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a50c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a510:	6013      	str	r3, [r2, #0]
 800a512:	e00b      	b.n	800a52c <HAL_RCC_OscConfig+0xb0>
 800a514:	4b69      	ldr	r3, [pc, #420]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a68      	ldr	r2, [pc, #416]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a51a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a51e:	6013      	str	r3, [r2, #0]
 800a520:	4b66      	ldr	r3, [pc, #408]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a65      	ldr	r2, [pc, #404]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a52a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d013      	beq.n	800a55c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a534:	f7fe fb62 	bl	8008bfc <HAL_GetTick>
 800a538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a53a:	e008      	b.n	800a54e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a53c:	f7fe fb5e 	bl	8008bfc <HAL_GetTick>
 800a540:	4602      	mov	r2, r0
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	1ad3      	subs	r3, r2, r3
 800a546:	2b64      	cmp	r3, #100	; 0x64
 800a548:	d901      	bls.n	800a54e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a54a:	2303      	movs	r3, #3
 800a54c:	e207      	b.n	800a95e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a54e:	4b5b      	ldr	r3, [pc, #364]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a556:	2b00      	cmp	r3, #0
 800a558:	d0f0      	beq.n	800a53c <HAL_RCC_OscConfig+0xc0>
 800a55a:	e014      	b.n	800a586 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a55c:	f7fe fb4e 	bl	8008bfc <HAL_GetTick>
 800a560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a562:	e008      	b.n	800a576 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a564:	f7fe fb4a 	bl	8008bfc <HAL_GetTick>
 800a568:	4602      	mov	r2, r0
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	2b64      	cmp	r3, #100	; 0x64
 800a570:	d901      	bls.n	800a576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a572:	2303      	movs	r3, #3
 800a574:	e1f3      	b.n	800a95e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a576:	4b51      	ldr	r3, [pc, #324]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1f0      	bne.n	800a564 <HAL_RCC_OscConfig+0xe8>
 800a582:	e000      	b.n	800a586 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f003 0302 	and.w	r3, r3, #2
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d063      	beq.n	800a65a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a592:	4b4a      	ldr	r3, [pc, #296]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	f003 030c 	and.w	r3, r3, #12
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00b      	beq.n	800a5b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a59e:	4b47      	ldr	r3, [pc, #284]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a5a6:	2b08      	cmp	r3, #8
 800a5a8:	d11c      	bne.n	800a5e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a5aa:	4b44      	ldr	r3, [pc, #272]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d116      	bne.n	800a5e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a5b6:	4b41      	ldr	r3, [pc, #260]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 0302 	and.w	r3, r3, #2
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d005      	beq.n	800a5ce <HAL_RCC_OscConfig+0x152>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d001      	beq.n	800a5ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e1c7      	b.n	800a95e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5ce:	4b3b      	ldr	r3, [pc, #236]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	00db      	lsls	r3, r3, #3
 800a5dc:	4937      	ldr	r1, [pc, #220]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a5e2:	e03a      	b.n	800a65a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d020      	beq.n	800a62e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a5ec:	4b34      	ldr	r3, [pc, #208]	; (800a6c0 <HAL_RCC_OscConfig+0x244>)
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5f2:	f7fe fb03 	bl	8008bfc <HAL_GetTick>
 800a5f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a5f8:	e008      	b.n	800a60c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a5fa:	f7fe faff 	bl	8008bfc <HAL_GetTick>
 800a5fe:	4602      	mov	r2, r0
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	2b02      	cmp	r3, #2
 800a606:	d901      	bls.n	800a60c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a608:	2303      	movs	r3, #3
 800a60a:	e1a8      	b.n	800a95e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a60c:	4b2b      	ldr	r3, [pc, #172]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 0302 	and.w	r3, r3, #2
 800a614:	2b00      	cmp	r3, #0
 800a616:	d0f0      	beq.n	800a5fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a618:	4b28      	ldr	r3, [pc, #160]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	00db      	lsls	r3, r3, #3
 800a626:	4925      	ldr	r1, [pc, #148]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a628:	4313      	orrs	r3, r2
 800a62a:	600b      	str	r3, [r1, #0]
 800a62c:	e015      	b.n	800a65a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a62e:	4b24      	ldr	r3, [pc, #144]	; (800a6c0 <HAL_RCC_OscConfig+0x244>)
 800a630:	2200      	movs	r2, #0
 800a632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a634:	f7fe fae2 	bl	8008bfc <HAL_GetTick>
 800a638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a63a:	e008      	b.n	800a64e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a63c:	f7fe fade 	bl	8008bfc <HAL_GetTick>
 800a640:	4602      	mov	r2, r0
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	1ad3      	subs	r3, r2, r3
 800a646:	2b02      	cmp	r3, #2
 800a648:	d901      	bls.n	800a64e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a64a:	2303      	movs	r3, #3
 800a64c:	e187      	b.n	800a95e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a64e:	4b1b      	ldr	r3, [pc, #108]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 0302 	and.w	r3, r3, #2
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1f0      	bne.n	800a63c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f003 0308 	and.w	r3, r3, #8
 800a662:	2b00      	cmp	r3, #0
 800a664:	d036      	beq.n	800a6d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	695b      	ldr	r3, [r3, #20]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d016      	beq.n	800a69c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a66e:	4b15      	ldr	r3, [pc, #84]	; (800a6c4 <HAL_RCC_OscConfig+0x248>)
 800a670:	2201      	movs	r2, #1
 800a672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a674:	f7fe fac2 	bl	8008bfc <HAL_GetTick>
 800a678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a67a:	e008      	b.n	800a68e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a67c:	f7fe fabe 	bl	8008bfc <HAL_GetTick>
 800a680:	4602      	mov	r2, r0
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	1ad3      	subs	r3, r2, r3
 800a686:	2b02      	cmp	r3, #2
 800a688:	d901      	bls.n	800a68e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a68a:	2303      	movs	r3, #3
 800a68c:	e167      	b.n	800a95e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a68e:	4b0b      	ldr	r3, [pc, #44]	; (800a6bc <HAL_RCC_OscConfig+0x240>)
 800a690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a692:	f003 0302 	and.w	r3, r3, #2
 800a696:	2b00      	cmp	r3, #0
 800a698:	d0f0      	beq.n	800a67c <HAL_RCC_OscConfig+0x200>
 800a69a:	e01b      	b.n	800a6d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a69c:	4b09      	ldr	r3, [pc, #36]	; (800a6c4 <HAL_RCC_OscConfig+0x248>)
 800a69e:	2200      	movs	r2, #0
 800a6a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a6a2:	f7fe faab 	bl	8008bfc <HAL_GetTick>
 800a6a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a6a8:	e00e      	b.n	800a6c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a6aa:	f7fe faa7 	bl	8008bfc <HAL_GetTick>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	1ad3      	subs	r3, r2, r3
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d907      	bls.n	800a6c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	e150      	b.n	800a95e <HAL_RCC_OscConfig+0x4e2>
 800a6bc:	40023800 	.word	0x40023800
 800a6c0:	42470000 	.word	0x42470000
 800a6c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a6c8:	4b88      	ldr	r3, [pc, #544]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a6ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6cc:	f003 0302 	and.w	r3, r3, #2
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d1ea      	bne.n	800a6aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f003 0304 	and.w	r3, r3, #4
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f000 8097 	beq.w	800a810 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a6e6:	4b81      	ldr	r3, [pc, #516]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d10f      	bne.n	800a712 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	60bb      	str	r3, [r7, #8]
 800a6f6:	4b7d      	ldr	r3, [pc, #500]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6fa:	4a7c      	ldr	r2, [pc, #496]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a6fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a700:	6413      	str	r3, [r2, #64]	; 0x40
 800a702:	4b7a      	ldr	r3, [pc, #488]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a70a:	60bb      	str	r3, [r7, #8]
 800a70c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a70e:	2301      	movs	r3, #1
 800a710:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a712:	4b77      	ldr	r3, [pc, #476]	; (800a8f0 <HAL_RCC_OscConfig+0x474>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d118      	bne.n	800a750 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a71e:	4b74      	ldr	r3, [pc, #464]	; (800a8f0 <HAL_RCC_OscConfig+0x474>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a73      	ldr	r2, [pc, #460]	; (800a8f0 <HAL_RCC_OscConfig+0x474>)
 800a724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a72a:	f7fe fa67 	bl	8008bfc <HAL_GetTick>
 800a72e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a730:	e008      	b.n	800a744 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a732:	f7fe fa63 	bl	8008bfc <HAL_GetTick>
 800a736:	4602      	mov	r2, r0
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	d901      	bls.n	800a744 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a740:	2303      	movs	r3, #3
 800a742:	e10c      	b.n	800a95e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a744:	4b6a      	ldr	r3, [pc, #424]	; (800a8f0 <HAL_RCC_OscConfig+0x474>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d0f0      	beq.n	800a732 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d106      	bne.n	800a766 <HAL_RCC_OscConfig+0x2ea>
 800a758:	4b64      	ldr	r3, [pc, #400]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a75a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a75c:	4a63      	ldr	r2, [pc, #396]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a75e:	f043 0301 	orr.w	r3, r3, #1
 800a762:	6713      	str	r3, [r2, #112]	; 0x70
 800a764:	e01c      	b.n	800a7a0 <HAL_RCC_OscConfig+0x324>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	2b05      	cmp	r3, #5
 800a76c:	d10c      	bne.n	800a788 <HAL_RCC_OscConfig+0x30c>
 800a76e:	4b5f      	ldr	r3, [pc, #380]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a772:	4a5e      	ldr	r2, [pc, #376]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a774:	f043 0304 	orr.w	r3, r3, #4
 800a778:	6713      	str	r3, [r2, #112]	; 0x70
 800a77a:	4b5c      	ldr	r3, [pc, #368]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a77e:	4a5b      	ldr	r2, [pc, #364]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a780:	f043 0301 	orr.w	r3, r3, #1
 800a784:	6713      	str	r3, [r2, #112]	; 0x70
 800a786:	e00b      	b.n	800a7a0 <HAL_RCC_OscConfig+0x324>
 800a788:	4b58      	ldr	r3, [pc, #352]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a78a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a78c:	4a57      	ldr	r2, [pc, #348]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a78e:	f023 0301 	bic.w	r3, r3, #1
 800a792:	6713      	str	r3, [r2, #112]	; 0x70
 800a794:	4b55      	ldr	r3, [pc, #340]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a798:	4a54      	ldr	r2, [pc, #336]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a79a:	f023 0304 	bic.w	r3, r3, #4
 800a79e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d015      	beq.n	800a7d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7a8:	f7fe fa28 	bl	8008bfc <HAL_GetTick>
 800a7ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7ae:	e00a      	b.n	800a7c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a7b0:	f7fe fa24 	bl	8008bfc <HAL_GetTick>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d901      	bls.n	800a7c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	e0cb      	b.n	800a95e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7c6:	4b49      	ldr	r3, [pc, #292]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a7c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ca:	f003 0302 	and.w	r3, r3, #2
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d0ee      	beq.n	800a7b0 <HAL_RCC_OscConfig+0x334>
 800a7d2:	e014      	b.n	800a7fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a7d4:	f7fe fa12 	bl	8008bfc <HAL_GetTick>
 800a7d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a7da:	e00a      	b.n	800a7f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a7dc:	f7fe fa0e 	bl	8008bfc <HAL_GetTick>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	1ad3      	subs	r3, r2, r3
 800a7e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d901      	bls.n	800a7f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	e0b5      	b.n	800a95e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a7f2:	4b3e      	ldr	r3, [pc, #248]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a7f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7f6:	f003 0302 	and.w	r3, r3, #2
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1ee      	bne.n	800a7dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a7fe:	7dfb      	ldrb	r3, [r7, #23]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d105      	bne.n	800a810 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a804:	4b39      	ldr	r3, [pc, #228]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a808:	4a38      	ldr	r2, [pc, #224]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a80a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a80e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	699b      	ldr	r3, [r3, #24]
 800a814:	2b00      	cmp	r3, #0
 800a816:	f000 80a1 	beq.w	800a95c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a81a:	4b34      	ldr	r3, [pc, #208]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	f003 030c 	and.w	r3, r3, #12
 800a822:	2b08      	cmp	r3, #8
 800a824:	d05c      	beq.n	800a8e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	699b      	ldr	r3, [r3, #24]
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d141      	bne.n	800a8b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a82e:	4b31      	ldr	r3, [pc, #196]	; (800a8f4 <HAL_RCC_OscConfig+0x478>)
 800a830:	2200      	movs	r2, #0
 800a832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a834:	f7fe f9e2 	bl	8008bfc <HAL_GetTick>
 800a838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a83a:	e008      	b.n	800a84e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a83c:	f7fe f9de 	bl	8008bfc <HAL_GetTick>
 800a840:	4602      	mov	r2, r0
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	2b02      	cmp	r3, #2
 800a848:	d901      	bls.n	800a84e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a84a:	2303      	movs	r3, #3
 800a84c:	e087      	b.n	800a95e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a84e:	4b27      	ldr	r3, [pc, #156]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1f0      	bne.n	800a83c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	69da      	ldr	r2, [r3, #28]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6a1b      	ldr	r3, [r3, #32]
 800a862:	431a      	orrs	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a868:	019b      	lsls	r3, r3, #6
 800a86a:	431a      	orrs	r2, r3
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a870:	085b      	lsrs	r3, r3, #1
 800a872:	3b01      	subs	r3, #1
 800a874:	041b      	lsls	r3, r3, #16
 800a876:	431a      	orrs	r2, r3
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87c:	061b      	lsls	r3, r3, #24
 800a87e:	491b      	ldr	r1, [pc, #108]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a880:	4313      	orrs	r3, r2
 800a882:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a884:	4b1b      	ldr	r3, [pc, #108]	; (800a8f4 <HAL_RCC_OscConfig+0x478>)
 800a886:	2201      	movs	r2, #1
 800a888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a88a:	f7fe f9b7 	bl	8008bfc <HAL_GetTick>
 800a88e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a890:	e008      	b.n	800a8a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a892:	f7fe f9b3 	bl	8008bfc <HAL_GetTick>
 800a896:	4602      	mov	r2, r0
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	1ad3      	subs	r3, r2, r3
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d901      	bls.n	800a8a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	e05c      	b.n	800a95e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a8a4:	4b11      	ldr	r3, [pc, #68]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d0f0      	beq.n	800a892 <HAL_RCC_OscConfig+0x416>
 800a8b0:	e054      	b.n	800a95c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a8b2:	4b10      	ldr	r3, [pc, #64]	; (800a8f4 <HAL_RCC_OscConfig+0x478>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8b8:	f7fe f9a0 	bl	8008bfc <HAL_GetTick>
 800a8bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a8be:	e008      	b.n	800a8d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a8c0:	f7fe f99c 	bl	8008bfc <HAL_GetTick>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d901      	bls.n	800a8d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a8ce:	2303      	movs	r3, #3
 800a8d0:	e045      	b.n	800a95e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a8d2:	4b06      	ldr	r3, [pc, #24]	; (800a8ec <HAL_RCC_OscConfig+0x470>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d1f0      	bne.n	800a8c0 <HAL_RCC_OscConfig+0x444>
 800a8de:	e03d      	b.n	800a95c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	699b      	ldr	r3, [r3, #24]
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d107      	bne.n	800a8f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e038      	b.n	800a95e <HAL_RCC_OscConfig+0x4e2>
 800a8ec:	40023800 	.word	0x40023800
 800a8f0:	40007000 	.word	0x40007000
 800a8f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a8f8:	4b1b      	ldr	r3, [pc, #108]	; (800a968 <HAL_RCC_OscConfig+0x4ec>)
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	699b      	ldr	r3, [r3, #24]
 800a902:	2b01      	cmp	r3, #1
 800a904:	d028      	beq.n	800a958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a910:	429a      	cmp	r2, r3
 800a912:	d121      	bne.n	800a958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a91e:	429a      	cmp	r2, r3
 800a920:	d11a      	bne.n	800a958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a928:	4013      	ands	r3, r2
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a92e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a930:	4293      	cmp	r3, r2
 800a932:	d111      	bne.n	800a958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a93e:	085b      	lsrs	r3, r3, #1
 800a940:	3b01      	subs	r3, #1
 800a942:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a944:	429a      	cmp	r2, r3
 800a946:	d107      	bne.n	800a958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a952:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a954:	429a      	cmp	r2, r3
 800a956:	d001      	beq.n	800a95c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	e000      	b.n	800a95e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3718      	adds	r7, #24
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	40023800 	.word	0x40023800

0800a96c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d101      	bne.n	800a980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a97c:	2301      	movs	r3, #1
 800a97e:	e0cc      	b.n	800ab1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a980:	4b68      	ldr	r3, [pc, #416]	; (800ab24 <HAL_RCC_ClockConfig+0x1b8>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f003 0307 	and.w	r3, r3, #7
 800a988:	683a      	ldr	r2, [r7, #0]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d90c      	bls.n	800a9a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a98e:	4b65      	ldr	r3, [pc, #404]	; (800ab24 <HAL_RCC_ClockConfig+0x1b8>)
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	b2d2      	uxtb	r2, r2
 800a994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a996:	4b63      	ldr	r3, [pc, #396]	; (800ab24 <HAL_RCC_ClockConfig+0x1b8>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f003 0307 	and.w	r3, r3, #7
 800a99e:	683a      	ldr	r2, [r7, #0]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d001      	beq.n	800a9a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e0b8      	b.n	800ab1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f003 0302 	and.w	r3, r3, #2
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d020      	beq.n	800a9f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 0304 	and.w	r3, r3, #4
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d005      	beq.n	800a9cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a9c0:	4b59      	ldr	r3, [pc, #356]	; (800ab28 <HAL_RCC_ClockConfig+0x1bc>)
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	4a58      	ldr	r2, [pc, #352]	; (800ab28 <HAL_RCC_ClockConfig+0x1bc>)
 800a9c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a9ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f003 0308 	and.w	r3, r3, #8
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d005      	beq.n	800a9e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a9d8:	4b53      	ldr	r3, [pc, #332]	; (800ab28 <HAL_RCC_ClockConfig+0x1bc>)
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	4a52      	ldr	r2, [pc, #328]	; (800ab28 <HAL_RCC_ClockConfig+0x1bc>)
 800a9de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a9e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9e4:	4b50      	ldr	r3, [pc, #320]	; (800ab28 <HAL_RCC_ClockConfig+0x1bc>)
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	494d      	ldr	r1, [pc, #308]	; (800ab28 <HAL_RCC_ClockConfig+0x1bc>)
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f003 0301 	and.w	r3, r3, #1
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d044      	beq.n	800aa8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d107      	bne.n	800aa1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa0a:	4b47      	ldr	r3, [pc, #284]	; (800ab28 <HAL_RCC_ClockConfig+0x1bc>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d119      	bne.n	800aa4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e07f      	b.n	800ab1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	d003      	beq.n	800aa2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aa26:	2b03      	cmp	r3, #3
 800aa28:	d107      	bne.n	800aa3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa2a:	4b3f      	ldr	r3, [pc, #252]	; (800ab28 <HAL_RCC_ClockConfig+0x1bc>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d109      	bne.n	800aa4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aa36:	2301      	movs	r3, #1
 800aa38:	e06f      	b.n	800ab1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa3a:	4b3b      	ldr	r3, [pc, #236]	; (800ab28 <HAL_RCC_ClockConfig+0x1bc>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f003 0302 	and.w	r3, r3, #2
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d101      	bne.n	800aa4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aa46:	2301      	movs	r3, #1
 800aa48:	e067      	b.n	800ab1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aa4a:	4b37      	ldr	r3, [pc, #220]	; (800ab28 <HAL_RCC_ClockConfig+0x1bc>)
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	f023 0203 	bic.w	r2, r3, #3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	4934      	ldr	r1, [pc, #208]	; (800ab28 <HAL_RCC_ClockConfig+0x1bc>)
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aa5c:	f7fe f8ce 	bl	8008bfc <HAL_GetTick>
 800aa60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa62:	e00a      	b.n	800aa7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa64:	f7fe f8ca 	bl	8008bfc <HAL_GetTick>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	1ad3      	subs	r3, r2, r3
 800aa6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d901      	bls.n	800aa7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aa76:	2303      	movs	r3, #3
 800aa78:	e04f      	b.n	800ab1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa7a:	4b2b      	ldr	r3, [pc, #172]	; (800ab28 <HAL_RCC_ClockConfig+0x1bc>)
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	f003 020c 	and.w	r2, r3, #12
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d1eb      	bne.n	800aa64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aa8c:	4b25      	ldr	r3, [pc, #148]	; (800ab24 <HAL_RCC_ClockConfig+0x1b8>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f003 0307 	and.w	r3, r3, #7
 800aa94:	683a      	ldr	r2, [r7, #0]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d20c      	bcs.n	800aab4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa9a:	4b22      	ldr	r3, [pc, #136]	; (800ab24 <HAL_RCC_ClockConfig+0x1b8>)
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	b2d2      	uxtb	r2, r2
 800aaa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aaa2:	4b20      	ldr	r3, [pc, #128]	; (800ab24 <HAL_RCC_ClockConfig+0x1b8>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f003 0307 	and.w	r3, r3, #7
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d001      	beq.n	800aab4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800aab0:	2301      	movs	r3, #1
 800aab2:	e032      	b.n	800ab1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f003 0304 	and.w	r3, r3, #4
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d008      	beq.n	800aad2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aac0:	4b19      	ldr	r3, [pc, #100]	; (800ab28 <HAL_RCC_ClockConfig+0x1bc>)
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	4916      	ldr	r1, [pc, #88]	; (800ab28 <HAL_RCC_ClockConfig+0x1bc>)
 800aace:	4313      	orrs	r3, r2
 800aad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f003 0308 	and.w	r3, r3, #8
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d009      	beq.n	800aaf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aade:	4b12      	ldr	r3, [pc, #72]	; (800ab28 <HAL_RCC_ClockConfig+0x1bc>)
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	00db      	lsls	r3, r3, #3
 800aaec:	490e      	ldr	r1, [pc, #56]	; (800ab28 <HAL_RCC_ClockConfig+0x1bc>)
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aaf2:	f000 f821 	bl	800ab38 <HAL_RCC_GetSysClockFreq>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	4b0b      	ldr	r3, [pc, #44]	; (800ab28 <HAL_RCC_ClockConfig+0x1bc>)
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	091b      	lsrs	r3, r3, #4
 800aafe:	f003 030f 	and.w	r3, r3, #15
 800ab02:	490a      	ldr	r1, [pc, #40]	; (800ab2c <HAL_RCC_ClockConfig+0x1c0>)
 800ab04:	5ccb      	ldrb	r3, [r1, r3]
 800ab06:	fa22 f303 	lsr.w	r3, r2, r3
 800ab0a:	4a09      	ldr	r2, [pc, #36]	; (800ab30 <HAL_RCC_ClockConfig+0x1c4>)
 800ab0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ab0e:	4b09      	ldr	r3, [pc, #36]	; (800ab34 <HAL_RCC_ClockConfig+0x1c8>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fe f82e 	bl	8008b74 <HAL_InitTick>

  return HAL_OK;
 800ab18:	2300      	movs	r3, #0
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3710      	adds	r7, #16
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	40023c00 	.word	0x40023c00
 800ab28:	40023800 	.word	0x40023800
 800ab2c:	0800eb50 	.word	0x0800eb50
 800ab30:	200001e0 	.word	0x200001e0
 800ab34:	200001ec 	.word	0x200001ec

0800ab38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab3c:	b090      	sub	sp, #64	; 0x40
 800ab3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ab40:	2300      	movs	r3, #0
 800ab42:	637b      	str	r3, [r7, #52]	; 0x34
 800ab44:	2300      	movs	r3, #0
 800ab46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab48:	2300      	movs	r3, #0
 800ab4a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ab50:	4b59      	ldr	r3, [pc, #356]	; (800acb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	f003 030c 	and.w	r3, r3, #12
 800ab58:	2b08      	cmp	r3, #8
 800ab5a:	d00d      	beq.n	800ab78 <HAL_RCC_GetSysClockFreq+0x40>
 800ab5c:	2b08      	cmp	r3, #8
 800ab5e:	f200 80a1 	bhi.w	800aca4 <HAL_RCC_GetSysClockFreq+0x16c>
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d002      	beq.n	800ab6c <HAL_RCC_GetSysClockFreq+0x34>
 800ab66:	2b04      	cmp	r3, #4
 800ab68:	d003      	beq.n	800ab72 <HAL_RCC_GetSysClockFreq+0x3a>
 800ab6a:	e09b      	b.n	800aca4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ab6c:	4b53      	ldr	r3, [pc, #332]	; (800acbc <HAL_RCC_GetSysClockFreq+0x184>)
 800ab6e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800ab70:	e09b      	b.n	800acaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ab72:	4b53      	ldr	r3, [pc, #332]	; (800acc0 <HAL_RCC_GetSysClockFreq+0x188>)
 800ab74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ab76:	e098      	b.n	800acaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ab78:	4b4f      	ldr	r3, [pc, #316]	; (800acb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab80:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ab82:	4b4d      	ldr	r3, [pc, #308]	; (800acb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d028      	beq.n	800abe0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ab8e:	4b4a      	ldr	r3, [pc, #296]	; (800acb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	099b      	lsrs	r3, r3, #6
 800ab94:	2200      	movs	r2, #0
 800ab96:	623b      	str	r3, [r7, #32]
 800ab98:	627a      	str	r2, [r7, #36]	; 0x24
 800ab9a:	6a3b      	ldr	r3, [r7, #32]
 800ab9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800aba0:	2100      	movs	r1, #0
 800aba2:	4b47      	ldr	r3, [pc, #284]	; (800acc0 <HAL_RCC_GetSysClockFreq+0x188>)
 800aba4:	fb03 f201 	mul.w	r2, r3, r1
 800aba8:	2300      	movs	r3, #0
 800abaa:	fb00 f303 	mul.w	r3, r0, r3
 800abae:	4413      	add	r3, r2
 800abb0:	4a43      	ldr	r2, [pc, #268]	; (800acc0 <HAL_RCC_GetSysClockFreq+0x188>)
 800abb2:	fba0 1202 	umull	r1, r2, r0, r2
 800abb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800abb8:	460a      	mov	r2, r1
 800abba:	62ba      	str	r2, [r7, #40]	; 0x28
 800abbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abbe:	4413      	add	r3, r2
 800abc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc4:	2200      	movs	r2, #0
 800abc6:	61bb      	str	r3, [r7, #24]
 800abc8:	61fa      	str	r2, [r7, #28]
 800abca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800abce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800abd2:	f7f5 ffdb 	bl	8000b8c <__aeabi_uldivmod>
 800abd6:	4602      	mov	r2, r0
 800abd8:	460b      	mov	r3, r1
 800abda:	4613      	mov	r3, r2
 800abdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abde:	e053      	b.n	800ac88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800abe0:	4b35      	ldr	r3, [pc, #212]	; (800acb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	099b      	lsrs	r3, r3, #6
 800abe6:	2200      	movs	r2, #0
 800abe8:	613b      	str	r3, [r7, #16]
 800abea:	617a      	str	r2, [r7, #20]
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800abf2:	f04f 0b00 	mov.w	fp, #0
 800abf6:	4652      	mov	r2, sl
 800abf8:	465b      	mov	r3, fp
 800abfa:	f04f 0000 	mov.w	r0, #0
 800abfe:	f04f 0100 	mov.w	r1, #0
 800ac02:	0159      	lsls	r1, r3, #5
 800ac04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ac08:	0150      	lsls	r0, r2, #5
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	ebb2 080a 	subs.w	r8, r2, sl
 800ac12:	eb63 090b 	sbc.w	r9, r3, fp
 800ac16:	f04f 0200 	mov.w	r2, #0
 800ac1a:	f04f 0300 	mov.w	r3, #0
 800ac1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ac22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ac26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ac2a:	ebb2 0408 	subs.w	r4, r2, r8
 800ac2e:	eb63 0509 	sbc.w	r5, r3, r9
 800ac32:	f04f 0200 	mov.w	r2, #0
 800ac36:	f04f 0300 	mov.w	r3, #0
 800ac3a:	00eb      	lsls	r3, r5, #3
 800ac3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ac40:	00e2      	lsls	r2, r4, #3
 800ac42:	4614      	mov	r4, r2
 800ac44:	461d      	mov	r5, r3
 800ac46:	eb14 030a 	adds.w	r3, r4, sl
 800ac4a:	603b      	str	r3, [r7, #0]
 800ac4c:	eb45 030b 	adc.w	r3, r5, fp
 800ac50:	607b      	str	r3, [r7, #4]
 800ac52:	f04f 0200 	mov.w	r2, #0
 800ac56:	f04f 0300 	mov.w	r3, #0
 800ac5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ac5e:	4629      	mov	r1, r5
 800ac60:	028b      	lsls	r3, r1, #10
 800ac62:	4621      	mov	r1, r4
 800ac64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ac68:	4621      	mov	r1, r4
 800ac6a:	028a      	lsls	r2, r1, #10
 800ac6c:	4610      	mov	r0, r2
 800ac6e:	4619      	mov	r1, r3
 800ac70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac72:	2200      	movs	r2, #0
 800ac74:	60bb      	str	r3, [r7, #8]
 800ac76:	60fa      	str	r2, [r7, #12]
 800ac78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ac7c:	f7f5 ff86 	bl	8000b8c <__aeabi_uldivmod>
 800ac80:	4602      	mov	r2, r0
 800ac82:	460b      	mov	r3, r1
 800ac84:	4613      	mov	r3, r2
 800ac86:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ac88:	4b0b      	ldr	r3, [pc, #44]	; (800acb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	0c1b      	lsrs	r3, r3, #16
 800ac8e:	f003 0303 	and.w	r3, r3, #3
 800ac92:	3301      	adds	r3, #1
 800ac94:	005b      	lsls	r3, r3, #1
 800ac96:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800ac98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aca0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800aca2:	e002      	b.n	800acaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aca4:	4b05      	ldr	r3, [pc, #20]	; (800acbc <HAL_RCC_GetSysClockFreq+0x184>)
 800aca6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800aca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800acaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800acac:	4618      	mov	r0, r3
 800acae:	3740      	adds	r7, #64	; 0x40
 800acb0:	46bd      	mov	sp, r7
 800acb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800acb6:	bf00      	nop
 800acb8:	40023800 	.word	0x40023800
 800acbc:	00f42400 	.word	0x00f42400
 800acc0:	017d7840 	.word	0x017d7840

0800acc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800acc4:	b480      	push	{r7}
 800acc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800acc8:	4b03      	ldr	r3, [pc, #12]	; (800acd8 <HAL_RCC_GetHCLKFreq+0x14>)
 800acca:	681b      	ldr	r3, [r3, #0]
}
 800accc:	4618      	mov	r0, r3
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	200001e0 	.word	0x200001e0

0800acdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ace0:	f7ff fff0 	bl	800acc4 <HAL_RCC_GetHCLKFreq>
 800ace4:	4602      	mov	r2, r0
 800ace6:	4b05      	ldr	r3, [pc, #20]	; (800acfc <HAL_RCC_GetPCLK1Freq+0x20>)
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	0a9b      	lsrs	r3, r3, #10
 800acec:	f003 0307 	and.w	r3, r3, #7
 800acf0:	4903      	ldr	r1, [pc, #12]	; (800ad00 <HAL_RCC_GetPCLK1Freq+0x24>)
 800acf2:	5ccb      	ldrb	r3, [r1, r3]
 800acf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	40023800 	.word	0x40023800
 800ad00:	0800eb60 	.word	0x0800eb60

0800ad04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ad08:	f7ff ffdc 	bl	800acc4 <HAL_RCC_GetHCLKFreq>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	4b05      	ldr	r3, [pc, #20]	; (800ad24 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	0b5b      	lsrs	r3, r3, #13
 800ad14:	f003 0307 	and.w	r3, r3, #7
 800ad18:	4903      	ldr	r1, [pc, #12]	; (800ad28 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad1a:	5ccb      	ldrb	r3, [r1, r3]
 800ad1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	40023800 	.word	0x40023800
 800ad28:	0800eb60 	.word	0x0800eb60

0800ad2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d101      	bne.n	800ad3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e041      	b.n	800adc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d106      	bne.n	800ad58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f7fb f810 	bl	8005d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2202      	movs	r2, #2
 800ad5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	3304      	adds	r3, #4
 800ad68:	4619      	mov	r1, r3
 800ad6a:	4610      	mov	r0, r2
 800ad6c:	f000 fb12 	bl	800b394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2201      	movs	r2, #1
 800ad74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2201      	movs	r2, #1
 800ad84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2201      	movs	r2, #1
 800adb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2201      	movs	r2, #1
 800adbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3708      	adds	r7, #8
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
	...

0800adcc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adda:	b2db      	uxtb	r3, r3
 800addc:	2b01      	cmp	r3, #1
 800adde:	d001      	beq.n	800ade4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	e03c      	b.n	800ae5e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2202      	movs	r2, #2
 800ade8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a1e      	ldr	r2, [pc, #120]	; (800ae6c <HAL_TIM_Base_Start+0xa0>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d018      	beq.n	800ae28 <HAL_TIM_Base_Start+0x5c>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adfe:	d013      	beq.n	800ae28 <HAL_TIM_Base_Start+0x5c>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a1a      	ldr	r2, [pc, #104]	; (800ae70 <HAL_TIM_Base_Start+0xa4>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d00e      	beq.n	800ae28 <HAL_TIM_Base_Start+0x5c>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a19      	ldr	r2, [pc, #100]	; (800ae74 <HAL_TIM_Base_Start+0xa8>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d009      	beq.n	800ae28 <HAL_TIM_Base_Start+0x5c>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a17      	ldr	r2, [pc, #92]	; (800ae78 <HAL_TIM_Base_Start+0xac>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d004      	beq.n	800ae28 <HAL_TIM_Base_Start+0x5c>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a16      	ldr	r2, [pc, #88]	; (800ae7c <HAL_TIM_Base_Start+0xb0>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d111      	bne.n	800ae4c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	f003 0307 	and.w	r3, r3, #7
 800ae32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2b06      	cmp	r3, #6
 800ae38:	d010      	beq.n	800ae5c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f042 0201 	orr.w	r2, r2, #1
 800ae48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae4a:	e007      	b.n	800ae5c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f042 0201 	orr.w	r2, r2, #1
 800ae5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3714      	adds	r7, #20
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr
 800ae6a:	bf00      	nop
 800ae6c:	40010000 	.word	0x40010000
 800ae70:	40000400 	.word	0x40000400
 800ae74:	40000800 	.word	0x40000800
 800ae78:	40000c00 	.word	0x40000c00
 800ae7c:	40014000 	.word	0x40014000

0800ae80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d101      	bne.n	800ae92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e041      	b.n	800af16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d106      	bne.n	800aeac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f7fa ff44 	bl	8005d34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2202      	movs	r2, #2
 800aeb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	3304      	adds	r3, #4
 800aebc:	4619      	mov	r1, r3
 800aebe:	4610      	mov	r0, r2
 800aec0:	f000 fa68 	bl	800b394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2201      	movs	r2, #1
 800aed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2201      	movs	r2, #1
 800aee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3708      	adds	r7, #8
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
	...

0800af20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d109      	bne.n	800af44 <HAL_TIM_PWM_Start+0x24>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af36:	b2db      	uxtb	r3, r3
 800af38:	2b01      	cmp	r3, #1
 800af3a:	bf14      	ite	ne
 800af3c:	2301      	movne	r3, #1
 800af3e:	2300      	moveq	r3, #0
 800af40:	b2db      	uxtb	r3, r3
 800af42:	e022      	b.n	800af8a <HAL_TIM_PWM_Start+0x6a>
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	2b04      	cmp	r3, #4
 800af48:	d109      	bne.n	800af5e <HAL_TIM_PWM_Start+0x3e>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800af50:	b2db      	uxtb	r3, r3
 800af52:	2b01      	cmp	r3, #1
 800af54:	bf14      	ite	ne
 800af56:	2301      	movne	r3, #1
 800af58:	2300      	moveq	r3, #0
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	e015      	b.n	800af8a <HAL_TIM_PWM_Start+0x6a>
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	2b08      	cmp	r3, #8
 800af62:	d109      	bne.n	800af78 <HAL_TIM_PWM_Start+0x58>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	bf14      	ite	ne
 800af70:	2301      	movne	r3, #1
 800af72:	2300      	moveq	r3, #0
 800af74:	b2db      	uxtb	r3, r3
 800af76:	e008      	b.n	800af8a <HAL_TIM_PWM_Start+0x6a>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	2b01      	cmp	r3, #1
 800af82:	bf14      	ite	ne
 800af84:	2301      	movne	r3, #1
 800af86:	2300      	moveq	r3, #0
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d001      	beq.n	800af92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	e068      	b.n	800b064 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d104      	bne.n	800afa2 <HAL_TIM_PWM_Start+0x82>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2202      	movs	r2, #2
 800af9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afa0:	e013      	b.n	800afca <HAL_TIM_PWM_Start+0xaa>
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	2b04      	cmp	r3, #4
 800afa6:	d104      	bne.n	800afb2 <HAL_TIM_PWM_Start+0x92>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2202      	movs	r2, #2
 800afac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800afb0:	e00b      	b.n	800afca <HAL_TIM_PWM_Start+0xaa>
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	2b08      	cmp	r3, #8
 800afb6:	d104      	bne.n	800afc2 <HAL_TIM_PWM_Start+0xa2>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2202      	movs	r2, #2
 800afbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800afc0:	e003      	b.n	800afca <HAL_TIM_PWM_Start+0xaa>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2202      	movs	r2, #2
 800afc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2201      	movs	r2, #1
 800afd0:	6839      	ldr	r1, [r7, #0]
 800afd2:	4618      	mov	r0, r3
 800afd4:	f000 fc84 	bl	800b8e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a23      	ldr	r2, [pc, #140]	; (800b06c <HAL_TIM_PWM_Start+0x14c>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d107      	bne.n	800aff2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aff0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4a1d      	ldr	r2, [pc, #116]	; (800b06c <HAL_TIM_PWM_Start+0x14c>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d018      	beq.n	800b02e <HAL_TIM_PWM_Start+0x10e>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b004:	d013      	beq.n	800b02e <HAL_TIM_PWM_Start+0x10e>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a19      	ldr	r2, [pc, #100]	; (800b070 <HAL_TIM_PWM_Start+0x150>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d00e      	beq.n	800b02e <HAL_TIM_PWM_Start+0x10e>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a17      	ldr	r2, [pc, #92]	; (800b074 <HAL_TIM_PWM_Start+0x154>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d009      	beq.n	800b02e <HAL_TIM_PWM_Start+0x10e>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a16      	ldr	r2, [pc, #88]	; (800b078 <HAL_TIM_PWM_Start+0x158>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d004      	beq.n	800b02e <HAL_TIM_PWM_Start+0x10e>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a14      	ldr	r2, [pc, #80]	; (800b07c <HAL_TIM_PWM_Start+0x15c>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d111      	bne.n	800b052 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	f003 0307 	and.w	r3, r3, #7
 800b038:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2b06      	cmp	r3, #6
 800b03e:	d010      	beq.n	800b062 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f042 0201 	orr.w	r2, r2, #1
 800b04e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b050:	e007      	b.n	800b062 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f042 0201 	orr.w	r2, r2, #1
 800b060:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b062:	2300      	movs	r3, #0
}
 800b064:	4618      	mov	r0, r3
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	40010000 	.word	0x40010000
 800b070:	40000400 	.word	0x40000400
 800b074:	40000800 	.word	0x40000800
 800b078:	40000c00 	.word	0x40000c00
 800b07c:	40014000 	.word	0x40014000

0800b080 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b086      	sub	sp, #24
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b096:	2b01      	cmp	r3, #1
 800b098:	d101      	bne.n	800b09e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b09a:	2302      	movs	r3, #2
 800b09c:	e0ae      	b.n	800b1fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2b0c      	cmp	r3, #12
 800b0aa:	f200 809f 	bhi.w	800b1ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b0ae:	a201      	add	r2, pc, #4	; (adr r2, 800b0b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b4:	0800b0e9 	.word	0x0800b0e9
 800b0b8:	0800b1ed 	.word	0x0800b1ed
 800b0bc:	0800b1ed 	.word	0x0800b1ed
 800b0c0:	0800b1ed 	.word	0x0800b1ed
 800b0c4:	0800b129 	.word	0x0800b129
 800b0c8:	0800b1ed 	.word	0x0800b1ed
 800b0cc:	0800b1ed 	.word	0x0800b1ed
 800b0d0:	0800b1ed 	.word	0x0800b1ed
 800b0d4:	0800b16b 	.word	0x0800b16b
 800b0d8:	0800b1ed 	.word	0x0800b1ed
 800b0dc:	0800b1ed 	.word	0x0800b1ed
 800b0e0:	0800b1ed 	.word	0x0800b1ed
 800b0e4:	0800b1ab 	.word	0x0800b1ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	68b9      	ldr	r1, [r7, #8]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f000 f9d0 	bl	800b494 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	699a      	ldr	r2, [r3, #24]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f042 0208 	orr.w	r2, r2, #8
 800b102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	699a      	ldr	r2, [r3, #24]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f022 0204 	bic.w	r2, r2, #4
 800b112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	6999      	ldr	r1, [r3, #24]
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	691a      	ldr	r2, [r3, #16]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	430a      	orrs	r2, r1
 800b124:	619a      	str	r2, [r3, #24]
      break;
 800b126:	e064      	b.n	800b1f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	68b9      	ldr	r1, [r7, #8]
 800b12e:	4618      	mov	r0, r3
 800b130:	f000 fa16 	bl	800b560 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	699a      	ldr	r2, [r3, #24]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	699a      	ldr	r2, [r3, #24]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	6999      	ldr	r1, [r3, #24]
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	691b      	ldr	r3, [r3, #16]
 800b15e:	021a      	lsls	r2, r3, #8
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	430a      	orrs	r2, r1
 800b166:	619a      	str	r2, [r3, #24]
      break;
 800b168:	e043      	b.n	800b1f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	68b9      	ldr	r1, [r7, #8]
 800b170:	4618      	mov	r0, r3
 800b172:	f000 fa61 	bl	800b638 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	69da      	ldr	r2, [r3, #28]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f042 0208 	orr.w	r2, r2, #8
 800b184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	69da      	ldr	r2, [r3, #28]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f022 0204 	bic.w	r2, r2, #4
 800b194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	69d9      	ldr	r1, [r3, #28]
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	691a      	ldr	r2, [r3, #16]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	430a      	orrs	r2, r1
 800b1a6:	61da      	str	r2, [r3, #28]
      break;
 800b1a8:	e023      	b.n	800b1f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	68b9      	ldr	r1, [r7, #8]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 faab 	bl	800b70c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	69da      	ldr	r2, [r3, #28]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	69da      	ldr	r2, [r3, #28]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	69d9      	ldr	r1, [r3, #28]
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	021a      	lsls	r2, r3, #8
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	430a      	orrs	r2, r1
 800b1e8:	61da      	str	r2, [r3, #28]
      break;
 800b1ea:	e002      	b.n	800b1f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	75fb      	strb	r3, [r7, #23]
      break;
 800b1f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b1fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3718      	adds	r7, #24
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b20e:	2300      	movs	r3, #0
 800b210:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d101      	bne.n	800b220 <HAL_TIM_ConfigClockSource+0x1c>
 800b21c:	2302      	movs	r3, #2
 800b21e:	e0b4      	b.n	800b38a <HAL_TIM_ConfigClockSource+0x186>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2201      	movs	r2, #1
 800b224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2202      	movs	r2, #2
 800b22c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b23e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b246:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	68ba      	ldr	r2, [r7, #8]
 800b24e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b258:	d03e      	beq.n	800b2d8 <HAL_TIM_ConfigClockSource+0xd4>
 800b25a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b25e:	f200 8087 	bhi.w	800b370 <HAL_TIM_ConfigClockSource+0x16c>
 800b262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b266:	f000 8086 	beq.w	800b376 <HAL_TIM_ConfigClockSource+0x172>
 800b26a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b26e:	d87f      	bhi.n	800b370 <HAL_TIM_ConfigClockSource+0x16c>
 800b270:	2b70      	cmp	r3, #112	; 0x70
 800b272:	d01a      	beq.n	800b2aa <HAL_TIM_ConfigClockSource+0xa6>
 800b274:	2b70      	cmp	r3, #112	; 0x70
 800b276:	d87b      	bhi.n	800b370 <HAL_TIM_ConfigClockSource+0x16c>
 800b278:	2b60      	cmp	r3, #96	; 0x60
 800b27a:	d050      	beq.n	800b31e <HAL_TIM_ConfigClockSource+0x11a>
 800b27c:	2b60      	cmp	r3, #96	; 0x60
 800b27e:	d877      	bhi.n	800b370 <HAL_TIM_ConfigClockSource+0x16c>
 800b280:	2b50      	cmp	r3, #80	; 0x50
 800b282:	d03c      	beq.n	800b2fe <HAL_TIM_ConfigClockSource+0xfa>
 800b284:	2b50      	cmp	r3, #80	; 0x50
 800b286:	d873      	bhi.n	800b370 <HAL_TIM_ConfigClockSource+0x16c>
 800b288:	2b40      	cmp	r3, #64	; 0x40
 800b28a:	d058      	beq.n	800b33e <HAL_TIM_ConfigClockSource+0x13a>
 800b28c:	2b40      	cmp	r3, #64	; 0x40
 800b28e:	d86f      	bhi.n	800b370 <HAL_TIM_ConfigClockSource+0x16c>
 800b290:	2b30      	cmp	r3, #48	; 0x30
 800b292:	d064      	beq.n	800b35e <HAL_TIM_ConfigClockSource+0x15a>
 800b294:	2b30      	cmp	r3, #48	; 0x30
 800b296:	d86b      	bhi.n	800b370 <HAL_TIM_ConfigClockSource+0x16c>
 800b298:	2b20      	cmp	r3, #32
 800b29a:	d060      	beq.n	800b35e <HAL_TIM_ConfigClockSource+0x15a>
 800b29c:	2b20      	cmp	r3, #32
 800b29e:	d867      	bhi.n	800b370 <HAL_TIM_ConfigClockSource+0x16c>
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d05c      	beq.n	800b35e <HAL_TIM_ConfigClockSource+0x15a>
 800b2a4:	2b10      	cmp	r3, #16
 800b2a6:	d05a      	beq.n	800b35e <HAL_TIM_ConfigClockSource+0x15a>
 800b2a8:	e062      	b.n	800b370 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6818      	ldr	r0, [r3, #0]
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	6899      	ldr	r1, [r3, #8]
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	685a      	ldr	r2, [r3, #4]
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	f000 faf1 	bl	800b8a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b2cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	68ba      	ldr	r2, [r7, #8]
 800b2d4:	609a      	str	r2, [r3, #8]
      break;
 800b2d6:	e04f      	b.n	800b378 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6818      	ldr	r0, [r3, #0]
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	6899      	ldr	r1, [r3, #8]
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	685a      	ldr	r2, [r3, #4]
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	f000 fada 	bl	800b8a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	689a      	ldr	r2, [r3, #8]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b2fa:	609a      	str	r2, [r3, #8]
      break;
 800b2fc:	e03c      	b.n	800b378 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6818      	ldr	r0, [r3, #0]
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	6859      	ldr	r1, [r3, #4]
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	461a      	mov	r2, r3
 800b30c:	f000 fa4e 	bl	800b7ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2150      	movs	r1, #80	; 0x50
 800b316:	4618      	mov	r0, r3
 800b318:	f000 faa7 	bl	800b86a <TIM_ITRx_SetConfig>
      break;
 800b31c:	e02c      	b.n	800b378 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6818      	ldr	r0, [r3, #0]
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	6859      	ldr	r1, [r3, #4]
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	461a      	mov	r2, r3
 800b32c:	f000 fa6d 	bl	800b80a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	2160      	movs	r1, #96	; 0x60
 800b336:	4618      	mov	r0, r3
 800b338:	f000 fa97 	bl	800b86a <TIM_ITRx_SetConfig>
      break;
 800b33c:	e01c      	b.n	800b378 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6818      	ldr	r0, [r3, #0]
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	6859      	ldr	r1, [r3, #4]
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	461a      	mov	r2, r3
 800b34c:	f000 fa2e 	bl	800b7ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2140      	movs	r1, #64	; 0x40
 800b356:	4618      	mov	r0, r3
 800b358:	f000 fa87 	bl	800b86a <TIM_ITRx_SetConfig>
      break;
 800b35c:	e00c      	b.n	800b378 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4619      	mov	r1, r3
 800b368:	4610      	mov	r0, r2
 800b36a:	f000 fa7e 	bl	800b86a <TIM_ITRx_SetConfig>
      break;
 800b36e:	e003      	b.n	800b378 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	73fb      	strb	r3, [r7, #15]
      break;
 800b374:	e000      	b.n	800b378 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b376:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b388:	7bfb      	ldrb	r3, [r7, #15]
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3710      	adds	r7, #16
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
	...

0800b394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b394:	b480      	push	{r7}
 800b396:	b085      	sub	sp, #20
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4a34      	ldr	r2, [pc, #208]	; (800b478 <TIM_Base_SetConfig+0xe4>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d00f      	beq.n	800b3cc <TIM_Base_SetConfig+0x38>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3b2:	d00b      	beq.n	800b3cc <TIM_Base_SetConfig+0x38>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	4a31      	ldr	r2, [pc, #196]	; (800b47c <TIM_Base_SetConfig+0xe8>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d007      	beq.n	800b3cc <TIM_Base_SetConfig+0x38>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	4a30      	ldr	r2, [pc, #192]	; (800b480 <TIM_Base_SetConfig+0xec>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d003      	beq.n	800b3cc <TIM_Base_SetConfig+0x38>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	4a2f      	ldr	r2, [pc, #188]	; (800b484 <TIM_Base_SetConfig+0xf0>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d108      	bne.n	800b3de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	4a25      	ldr	r2, [pc, #148]	; (800b478 <TIM_Base_SetConfig+0xe4>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d01b      	beq.n	800b41e <TIM_Base_SetConfig+0x8a>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3ec:	d017      	beq.n	800b41e <TIM_Base_SetConfig+0x8a>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4a22      	ldr	r2, [pc, #136]	; (800b47c <TIM_Base_SetConfig+0xe8>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d013      	beq.n	800b41e <TIM_Base_SetConfig+0x8a>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	4a21      	ldr	r2, [pc, #132]	; (800b480 <TIM_Base_SetConfig+0xec>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d00f      	beq.n	800b41e <TIM_Base_SetConfig+0x8a>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4a20      	ldr	r2, [pc, #128]	; (800b484 <TIM_Base_SetConfig+0xf0>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d00b      	beq.n	800b41e <TIM_Base_SetConfig+0x8a>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4a1f      	ldr	r2, [pc, #124]	; (800b488 <TIM_Base_SetConfig+0xf4>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d007      	beq.n	800b41e <TIM_Base_SetConfig+0x8a>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	4a1e      	ldr	r2, [pc, #120]	; (800b48c <TIM_Base_SetConfig+0xf8>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d003      	beq.n	800b41e <TIM_Base_SetConfig+0x8a>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	4a1d      	ldr	r2, [pc, #116]	; (800b490 <TIM_Base_SetConfig+0xfc>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d108      	bne.n	800b430 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	68fa      	ldr	r2, [r7, #12]
 800b42c:	4313      	orrs	r3, r2
 800b42e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	695b      	ldr	r3, [r3, #20]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	68fa      	ldr	r2, [r7, #12]
 800b442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	689a      	ldr	r2, [r3, #8]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	4a08      	ldr	r2, [pc, #32]	; (800b478 <TIM_Base_SetConfig+0xe4>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d103      	bne.n	800b464 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	691a      	ldr	r2, [r3, #16]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2201      	movs	r2, #1
 800b468:	615a      	str	r2, [r3, #20]
}
 800b46a:	bf00      	nop
 800b46c:	3714      	adds	r7, #20
 800b46e:	46bd      	mov	sp, r7
 800b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b474:	4770      	bx	lr
 800b476:	bf00      	nop
 800b478:	40010000 	.word	0x40010000
 800b47c:	40000400 	.word	0x40000400
 800b480:	40000800 	.word	0x40000800
 800b484:	40000c00 	.word	0x40000c00
 800b488:	40014000 	.word	0x40014000
 800b48c:	40014400 	.word	0x40014400
 800b490:	40014800 	.word	0x40014800

0800b494 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b494:	b480      	push	{r7}
 800b496:	b087      	sub	sp, #28
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a1b      	ldr	r3, [r3, #32]
 800b4a2:	f023 0201 	bic.w	r2, r3, #1
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a1b      	ldr	r3, [r3, #32]
 800b4ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	699b      	ldr	r3, [r3, #24]
 800b4ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f023 0303 	bic.w	r3, r3, #3
 800b4ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68fa      	ldr	r2, [r7, #12]
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	f023 0302 	bic.w	r3, r3, #2
 800b4dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	689b      	ldr	r3, [r3, #8]
 800b4e2:	697a      	ldr	r2, [r7, #20]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	4a1c      	ldr	r2, [pc, #112]	; (800b55c <TIM_OC1_SetConfig+0xc8>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d10c      	bne.n	800b50a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	f023 0308 	bic.w	r3, r3, #8
 800b4f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	697a      	ldr	r2, [r7, #20]
 800b4fe:	4313      	orrs	r3, r2
 800b500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	f023 0304 	bic.w	r3, r3, #4
 800b508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4a13      	ldr	r2, [pc, #76]	; (800b55c <TIM_OC1_SetConfig+0xc8>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d111      	bne.n	800b536 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	695b      	ldr	r3, [r3, #20]
 800b526:	693a      	ldr	r2, [r7, #16]
 800b528:	4313      	orrs	r3, r2
 800b52a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	699b      	ldr	r3, [r3, #24]
 800b530:	693a      	ldr	r2, [r7, #16]
 800b532:	4313      	orrs	r3, r2
 800b534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	693a      	ldr	r2, [r7, #16]
 800b53a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	685a      	ldr	r2, [r3, #4]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	697a      	ldr	r2, [r7, #20]
 800b54e:	621a      	str	r2, [r3, #32]
}
 800b550:	bf00      	nop
 800b552:	371c      	adds	r7, #28
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr
 800b55c:	40010000 	.word	0x40010000

0800b560 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b560:	b480      	push	{r7}
 800b562:	b087      	sub	sp, #28
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6a1b      	ldr	r3, [r3, #32]
 800b56e:	f023 0210 	bic.w	r2, r3, #16
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a1b      	ldr	r3, [r3, #32]
 800b57a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	699b      	ldr	r3, [r3, #24]
 800b586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b58e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	021b      	lsls	r3, r3, #8
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	f023 0320 	bic.w	r3, r3, #32
 800b5aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	011b      	lsls	r3, r3, #4
 800b5b2:	697a      	ldr	r2, [r7, #20]
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	4a1e      	ldr	r2, [pc, #120]	; (800b634 <TIM_OC2_SetConfig+0xd4>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d10d      	bne.n	800b5dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	011b      	lsls	r3, r3, #4
 800b5ce:	697a      	ldr	r2, [r7, #20]
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a15      	ldr	r2, [pc, #84]	; (800b634 <TIM_OC2_SetConfig+0xd4>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d113      	bne.n	800b60c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b5ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	695b      	ldr	r3, [r3, #20]
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	693a      	ldr	r2, [r7, #16]
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	699b      	ldr	r3, [r3, #24]
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	693a      	ldr	r2, [r7, #16]
 800b608:	4313      	orrs	r3, r2
 800b60a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	693a      	ldr	r2, [r7, #16]
 800b610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	685a      	ldr	r2, [r3, #4]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	697a      	ldr	r2, [r7, #20]
 800b624:	621a      	str	r2, [r3, #32]
}
 800b626:	bf00      	nop
 800b628:	371c      	adds	r7, #28
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr
 800b632:	bf00      	nop
 800b634:	40010000 	.word	0x40010000

0800b638 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b638:	b480      	push	{r7}
 800b63a:	b087      	sub	sp, #28
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a1b      	ldr	r3, [r3, #32]
 800b646:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6a1b      	ldr	r3, [r3, #32]
 800b652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	69db      	ldr	r3, [r3, #28]
 800b65e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f023 0303 	bic.w	r3, r3, #3
 800b66e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	68fa      	ldr	r2, [r7, #12]
 800b676:	4313      	orrs	r3, r2
 800b678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	689b      	ldr	r3, [r3, #8]
 800b686:	021b      	lsls	r3, r3, #8
 800b688:	697a      	ldr	r2, [r7, #20]
 800b68a:	4313      	orrs	r3, r2
 800b68c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	4a1d      	ldr	r2, [pc, #116]	; (800b708 <TIM_OC3_SetConfig+0xd0>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d10d      	bne.n	800b6b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b69c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	021b      	lsls	r3, r3, #8
 800b6a4:	697a      	ldr	r2, [r7, #20]
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b6b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4a14      	ldr	r2, [pc, #80]	; (800b708 <TIM_OC3_SetConfig+0xd0>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d113      	bne.n	800b6e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	695b      	ldr	r3, [r3, #20]
 800b6ce:	011b      	lsls	r3, r3, #4
 800b6d0:	693a      	ldr	r2, [r7, #16]
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	699b      	ldr	r3, [r3, #24]
 800b6da:	011b      	lsls	r3, r3, #4
 800b6dc:	693a      	ldr	r2, [r7, #16]
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	693a      	ldr	r2, [r7, #16]
 800b6e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	685a      	ldr	r2, [r3, #4]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	697a      	ldr	r2, [r7, #20]
 800b6fa:	621a      	str	r2, [r3, #32]
}
 800b6fc:	bf00      	nop
 800b6fe:	371c      	adds	r7, #28
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr
 800b708:	40010000 	.word	0x40010000

0800b70c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b087      	sub	sp, #28
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6a1b      	ldr	r3, [r3, #32]
 800b71a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6a1b      	ldr	r3, [r3, #32]
 800b726:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	69db      	ldr	r3, [r3, #28]
 800b732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b73a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	021b      	lsls	r3, r3, #8
 800b74a:	68fa      	ldr	r2, [r7, #12]
 800b74c:	4313      	orrs	r3, r2
 800b74e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	031b      	lsls	r3, r3, #12
 800b75e:	693a      	ldr	r2, [r7, #16]
 800b760:	4313      	orrs	r3, r2
 800b762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	4a10      	ldr	r2, [pc, #64]	; (800b7a8 <TIM_OC4_SetConfig+0x9c>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d109      	bne.n	800b780 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b772:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	695b      	ldr	r3, [r3, #20]
 800b778:	019b      	lsls	r3, r3, #6
 800b77a:	697a      	ldr	r2, [r7, #20]
 800b77c:	4313      	orrs	r3, r2
 800b77e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	697a      	ldr	r2, [r7, #20]
 800b784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	685a      	ldr	r2, [r3, #4]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	693a      	ldr	r2, [r7, #16]
 800b798:	621a      	str	r2, [r3, #32]
}
 800b79a:	bf00      	nop
 800b79c:	371c      	adds	r7, #28
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	40010000 	.word	0x40010000

0800b7ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b087      	sub	sp, #28
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	6a1b      	ldr	r3, [r3, #32]
 800b7bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	6a1b      	ldr	r3, [r3, #32]
 800b7c2:	f023 0201 	bic.w	r2, r3, #1
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	699b      	ldr	r3, [r3, #24]
 800b7ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b7d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	011b      	lsls	r3, r3, #4
 800b7dc:	693a      	ldr	r2, [r7, #16]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	f023 030a 	bic.w	r3, r3, #10
 800b7e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b7ea:	697a      	ldr	r2, [r7, #20]
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	693a      	ldr	r2, [r7, #16]
 800b7f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	697a      	ldr	r2, [r7, #20]
 800b7fc:	621a      	str	r2, [r3, #32]
}
 800b7fe:	bf00      	nop
 800b800:	371c      	adds	r7, #28
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr

0800b80a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b80a:	b480      	push	{r7}
 800b80c:	b087      	sub	sp, #28
 800b80e:	af00      	add	r7, sp, #0
 800b810:	60f8      	str	r0, [r7, #12]
 800b812:	60b9      	str	r1, [r7, #8]
 800b814:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6a1b      	ldr	r3, [r3, #32]
 800b81a:	f023 0210 	bic.w	r2, r3, #16
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	699b      	ldr	r3, [r3, #24]
 800b826:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6a1b      	ldr	r3, [r3, #32]
 800b82c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b834:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	031b      	lsls	r3, r3, #12
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	4313      	orrs	r3, r2
 800b83e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b846:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	011b      	lsls	r3, r3, #4
 800b84c:	693a      	ldr	r2, [r7, #16]
 800b84e:	4313      	orrs	r3, r2
 800b850:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	697a      	ldr	r2, [r7, #20]
 800b856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	693a      	ldr	r2, [r7, #16]
 800b85c:	621a      	str	r2, [r3, #32]
}
 800b85e:	bf00      	nop
 800b860:	371c      	adds	r7, #28
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b86a:	b480      	push	{r7}
 800b86c:	b085      	sub	sp, #20
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b880:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b882:	683a      	ldr	r2, [r7, #0]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	4313      	orrs	r3, r2
 800b888:	f043 0307 	orr.w	r3, r3, #7
 800b88c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	68fa      	ldr	r2, [r7, #12]
 800b892:	609a      	str	r2, [r3, #8]
}
 800b894:	bf00      	nop
 800b896:	3714      	adds	r7, #20
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b087      	sub	sp, #28
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	607a      	str	r2, [r7, #4]
 800b8ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	021a      	lsls	r2, r3, #8
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	431a      	orrs	r2, r3
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	697a      	ldr	r2, [r7, #20]
 800b8d2:	609a      	str	r2, [r3, #8]
}
 800b8d4:	bf00      	nop
 800b8d6:	371c      	adds	r7, #28
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b087      	sub	sp, #28
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	f003 031f 	and.w	r3, r3, #31
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b8f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6a1a      	ldr	r2, [r3, #32]
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	43db      	mvns	r3, r3
 800b902:	401a      	ands	r2, r3
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6a1a      	ldr	r2, [r3, #32]
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	f003 031f 	and.w	r3, r3, #31
 800b912:	6879      	ldr	r1, [r7, #4]
 800b914:	fa01 f303 	lsl.w	r3, r1, r3
 800b918:	431a      	orrs	r2, r3
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	621a      	str	r2, [r3, #32]
}
 800b91e:	bf00      	nop
 800b920:	371c      	adds	r7, #28
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr
	...

0800b92c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d101      	bne.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b940:	2302      	movs	r3, #2
 800b942:	e050      	b.n	800b9e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2201      	movs	r2, #1
 800b948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2202      	movs	r2, #2
 800b950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b96a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	4313      	orrs	r3, r2
 800b974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	68fa      	ldr	r2, [r7, #12]
 800b97c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4a1c      	ldr	r2, [pc, #112]	; (800b9f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d018      	beq.n	800b9ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b990:	d013      	beq.n	800b9ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a18      	ldr	r2, [pc, #96]	; (800b9f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d00e      	beq.n	800b9ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a16      	ldr	r2, [pc, #88]	; (800b9fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d009      	beq.n	800b9ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a15      	ldr	r2, [pc, #84]	; (800ba00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d004      	beq.n	800b9ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a13      	ldr	r2, [pc, #76]	; (800ba04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d10c      	bne.n	800b9d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	68ba      	ldr	r2, [r7, #8]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	68ba      	ldr	r2, [r7, #8]
 800b9d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3714      	adds	r7, #20
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr
 800b9f2:	bf00      	nop
 800b9f4:	40010000 	.word	0x40010000
 800b9f8:	40000400 	.word	0x40000400
 800b9fc:	40000800 	.word	0x40000800
 800ba00:	40000c00 	.word	0x40000c00
 800ba04:	40014000 	.word	0x40014000

0800ba08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d101      	bne.n	800ba1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba16:	2301      	movs	r3, #1
 800ba18:	e04a      	b.n	800bab0 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d111      	bne.n	800ba4a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 ff7a 	bl	800c928 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d102      	bne.n	800ba42 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	4a1e      	ldr	r2, [pc, #120]	; (800bab8 <HAL_UART_Init+0xb0>)
 800ba40:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2224      	movs	r2, #36	; 0x24
 800ba4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	68da      	ldr	r2, [r3, #12]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ba60:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f001 f9e2 	bl	800ce2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	691a      	ldr	r2, [r3, #16]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ba76:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	695a      	ldr	r2, [r3, #20]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ba86:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	68da      	ldr	r2, [r3, #12]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ba96:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2220      	movs	r2, #32
 800baa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2220      	movs	r2, #32
 800baaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800baae:	2300      	movs	r3, #0
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	080063c9 	.word	0x080063c9

0800babc <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800babc:	b480      	push	{r7}
 800babe:	b087      	sub	sp, #28
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	460b      	mov	r3, r1
 800bac6:	607a      	str	r2, [r7, #4]
 800bac8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800baca:	2300      	movs	r3, #0
 800bacc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d107      	bne.n	800bae4 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bad8:	f043 0220 	orr.w	r2, r3, #32
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800bae0:	2301      	movs	r3, #1
 800bae2:	e08c      	b.n	800bbfe <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800baea:	2b01      	cmp	r3, #1
 800baec:	d101      	bne.n	800baf2 <HAL_UART_RegisterCallback+0x36>
 800baee:	2302      	movs	r3, #2
 800baf0:	e085      	b.n	800bbfe <HAL_UART_RegisterCallback+0x142>
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2201      	movs	r2, #1
 800baf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	2b20      	cmp	r3, #32
 800bb04:	d151      	bne.n	800bbaa <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800bb06:	7afb      	ldrb	r3, [r7, #11]
 800bb08:	2b0c      	cmp	r3, #12
 800bb0a:	d845      	bhi.n	800bb98 <HAL_UART_RegisterCallback+0xdc>
 800bb0c:	a201      	add	r2, pc, #4	; (adr r2, 800bb14 <HAL_UART_RegisterCallback+0x58>)
 800bb0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb12:	bf00      	nop
 800bb14:	0800bb49 	.word	0x0800bb49
 800bb18:	0800bb51 	.word	0x0800bb51
 800bb1c:	0800bb59 	.word	0x0800bb59
 800bb20:	0800bb61 	.word	0x0800bb61
 800bb24:	0800bb69 	.word	0x0800bb69
 800bb28:	0800bb71 	.word	0x0800bb71
 800bb2c:	0800bb79 	.word	0x0800bb79
 800bb30:	0800bb81 	.word	0x0800bb81
 800bb34:	0800bb99 	.word	0x0800bb99
 800bb38:	0800bb99 	.word	0x0800bb99
 800bb3c:	0800bb99 	.word	0x0800bb99
 800bb40:	0800bb89 	.word	0x0800bb89
 800bb44:	0800bb91 	.word	0x0800bb91
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800bb4e:	e051      	b.n	800bbf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800bb56:	e04d      	b.n	800bbf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800bb5e:	e049      	b.n	800bbf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800bb66:	e045      	b.n	800bbf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800bb6e:	e041      	b.n	800bbf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800bb76:	e03d      	b.n	800bbf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800bb7e:	e039      	b.n	800bbf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800bb86:	e035      	b.n	800bbf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800bb8e:	e031      	b.n	800bbf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800bb96:	e02d      	b.n	800bbf4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb9c:	f043 0220 	orr.w	r2, r3, #32
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	75fb      	strb	r3, [r7, #23]
        break;
 800bba8:	e024      	b.n	800bbf4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d116      	bne.n	800bbe4 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800bbb6:	7afb      	ldrb	r3, [r7, #11]
 800bbb8:	2b0b      	cmp	r3, #11
 800bbba:	d002      	beq.n	800bbc2 <HAL_UART_RegisterCallback+0x106>
 800bbbc:	2b0c      	cmp	r3, #12
 800bbbe:	d004      	beq.n	800bbca <HAL_UART_RegisterCallback+0x10e>
 800bbc0:	e007      	b.n	800bbd2 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800bbc8:	e014      	b.n	800bbf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800bbd0:	e010      	b.n	800bbf4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd6:	f043 0220 	orr.w	r2, r3, #32
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	75fb      	strb	r3, [r7, #23]
        break;
 800bbe2:	e007      	b.n	800bbf4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe8:	f043 0220 	orr.w	r2, r3, #32
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bbfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	371c      	adds	r7, #28
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr
 800bc0a:	bf00      	nop

0800bc0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b08a      	sub	sp, #40	; 0x28
 800bc10:	af02      	add	r7, sp, #8
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	603b      	str	r3, [r7, #0]
 800bc18:	4613      	mov	r3, r2
 800bc1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	2b20      	cmp	r3, #32
 800bc2a:	d17c      	bne.n	800bd26 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d002      	beq.n	800bc38 <HAL_UART_Transmit+0x2c>
 800bc32:	88fb      	ldrh	r3, [r7, #6]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d101      	bne.n	800bc3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	e075      	b.n	800bd28 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d101      	bne.n	800bc4a <HAL_UART_Transmit+0x3e>
 800bc46:	2302      	movs	r3, #2
 800bc48:	e06e      	b.n	800bd28 <HAL_UART_Transmit+0x11c>
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2200      	movs	r2, #0
 800bc56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2221      	movs	r2, #33	; 0x21
 800bc5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bc60:	f7fc ffcc 	bl	8008bfc <HAL_GetTick>
 800bc64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	88fa      	ldrh	r2, [r7, #6]
 800bc6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	88fa      	ldrh	r2, [r7, #6]
 800bc70:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc7a:	d108      	bne.n	800bc8e <HAL_UART_Transmit+0x82>
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	691b      	ldr	r3, [r3, #16]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d104      	bne.n	800bc8e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bc84:	2300      	movs	r3, #0
 800bc86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	61bb      	str	r3, [r7, #24]
 800bc8c:	e003      	b.n	800bc96 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bc92:	2300      	movs	r3, #0
 800bc94:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bc9e:	e02a      	b.n	800bcf6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	9300      	str	r3, [sp, #0]
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	2200      	movs	r2, #0
 800bca8:	2180      	movs	r1, #128	; 0x80
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f000 fe74 	bl	800c998 <UART_WaitOnFlagUntilTimeout>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d001      	beq.n	800bcba <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	e036      	b.n	800bd28 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d10b      	bne.n	800bcd8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	881b      	ldrh	r3, [r3, #0]
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bcce:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	3302      	adds	r3, #2
 800bcd4:	61bb      	str	r3, [r7, #24]
 800bcd6:	e007      	b.n	800bce8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bcd8:	69fb      	ldr	r3, [r7, #28]
 800bcda:	781a      	ldrb	r2, [r3, #0]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	3301      	adds	r3, #1
 800bce6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	3b01      	subs	r3, #1
 800bcf0:	b29a      	uxth	r2, r3
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d1cf      	bne.n	800bca0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	9300      	str	r3, [sp, #0]
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	2200      	movs	r2, #0
 800bd08:	2140      	movs	r1, #64	; 0x40
 800bd0a:	68f8      	ldr	r0, [r7, #12]
 800bd0c:	f000 fe44 	bl	800c998 <UART_WaitOnFlagUntilTimeout>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d001      	beq.n	800bd1a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bd16:	2303      	movs	r3, #3
 800bd18:	e006      	b.n	800bd28 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2220      	movs	r2, #32
 800bd1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bd22:	2300      	movs	r3, #0
 800bd24:	e000      	b.n	800bd28 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bd26:	2302      	movs	r3, #2
  }
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3720      	adds	r7, #32
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b08a      	sub	sp, #40	; 0x28
 800bd34:	af02      	add	r7, sp, #8
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	60b9      	str	r1, [r7, #8]
 800bd3a:	603b      	str	r3, [r7, #0]
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bd40:	2300      	movs	r3, #0
 800bd42:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	2b20      	cmp	r3, #32
 800bd4e:	f040 808c 	bne.w	800be6a <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d002      	beq.n	800bd5e <HAL_UART_Receive+0x2e>
 800bd58:	88fb      	ldrh	r3, [r7, #6]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d101      	bne.n	800bd62 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e084      	b.n	800be6c <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d101      	bne.n	800bd70 <HAL_UART_Receive+0x40>
 800bd6c:	2302      	movs	r3, #2
 800bd6e:	e07d      	b.n	800be6c <HAL_UART_Receive+0x13c>
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2201      	movs	r2, #1
 800bd74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2222      	movs	r2, #34	; 0x22
 800bd82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bd8c:	f7fc ff36 	bl	8008bfc <HAL_GetTick>
 800bd90:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	88fa      	ldrh	r2, [r7, #6]
 800bd96:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	88fa      	ldrh	r2, [r7, #6]
 800bd9c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	689b      	ldr	r3, [r3, #8]
 800bda2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bda6:	d108      	bne.n	800bdba <HAL_UART_Receive+0x8a>
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	691b      	ldr	r3, [r3, #16]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d104      	bne.n	800bdba <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	61bb      	str	r3, [r7, #24]
 800bdb8:	e003      	b.n	800bdc2 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800bdca:	e043      	b.n	800be54 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	2120      	movs	r1, #32
 800bdd6:	68f8      	ldr	r0, [r7, #12]
 800bdd8:	f000 fdde 	bl	800c998 <UART_WaitOnFlagUntilTimeout>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d001      	beq.n	800bde6 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800bde2:	2303      	movs	r3, #3
 800bde4:	e042      	b.n	800be6c <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800bde6:	69fb      	ldr	r3, [r7, #28]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10c      	bne.n	800be06 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	3302      	adds	r3, #2
 800be02:	61bb      	str	r3, [r7, #24]
 800be04:	e01f      	b.n	800be46 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be0e:	d007      	beq.n	800be20 <HAL_UART_Receive+0xf0>
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10a      	bne.n	800be2e <HAL_UART_Receive+0xfe>
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	691b      	ldr	r3, [r3, #16]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d106      	bne.n	800be2e <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	b2da      	uxtb	r2, r3
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	701a      	strb	r2, [r3, #0]
 800be2c:	e008      	b.n	800be40 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	b2db      	uxtb	r3, r3
 800be36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be3a:	b2da      	uxtb	r2, r3
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800be40:	69fb      	ldr	r3, [r7, #28]
 800be42:	3301      	adds	r3, #1
 800be44:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	3b01      	subs	r3, #1
 800be4e:	b29a      	uxth	r2, r3
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be58:	b29b      	uxth	r3, r3
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d1b6      	bne.n	800bdcc <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2220      	movs	r2, #32
 800be62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800be66:	2300      	movs	r3, #0
 800be68:	e000      	b.n	800be6c <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800be6a:	2302      	movs	r3, #2
  }
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3720      	adds	r7, #32
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800be74:	b480      	push	{r7}
 800be76:	b085      	sub	sp, #20
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	4613      	mov	r3, r2
 800be80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	2b20      	cmp	r3, #32
 800be8c:	d130      	bne.n	800bef0 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d002      	beq.n	800be9a <HAL_UART_Transmit_IT+0x26>
 800be94:	88fb      	ldrh	r3, [r7, #6]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d101      	bne.n	800be9e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	e029      	b.n	800bef2 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d101      	bne.n	800beac <HAL_UART_Transmit_IT+0x38>
 800bea8:	2302      	movs	r3, #2
 800beaa:	e022      	b.n	800bef2 <HAL_UART_Transmit_IT+0x7e>
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2201      	movs	r2, #1
 800beb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	68ba      	ldr	r2, [r7, #8]
 800beb8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	88fa      	ldrh	r2, [r7, #6]
 800bebe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	88fa      	ldrh	r2, [r7, #6]
 800bec4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2221      	movs	r2, #33	; 0x21
 800bed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2200      	movs	r2, #0
 800bed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	68da      	ldr	r2, [r3, #12]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800beea:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800beec:	2300      	movs	r3, #0
 800beee:	e000      	b.n	800bef2 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800bef0:	2302      	movs	r3, #2
  }
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3714      	adds	r7, #20
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr

0800befe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b084      	sub	sp, #16
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	60f8      	str	r0, [r7, #12]
 800bf06:	60b9      	str	r1, [r7, #8]
 800bf08:	4613      	mov	r3, r2
 800bf0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	2b20      	cmp	r3, #32
 800bf16:	d11d      	bne.n	800bf54 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d002      	beq.n	800bf24 <HAL_UART_Receive_IT+0x26>
 800bf1e:	88fb      	ldrh	r3, [r7, #6]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d101      	bne.n	800bf28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bf24:	2301      	movs	r3, #1
 800bf26:	e016      	b.n	800bf56 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	d101      	bne.n	800bf36 <HAL_UART_Receive_IT+0x38>
 800bf32:	2302      	movs	r3, #2
 800bf34:	e00f      	b.n	800bf56 <HAL_UART_Receive_IT+0x58>
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2201      	movs	r2, #1
 800bf3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2200      	movs	r2, #0
 800bf42:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bf44:	88fb      	ldrh	r3, [r7, #6]
 800bf46:	461a      	mov	r2, r3
 800bf48:	68b9      	ldr	r1, [r7, #8]
 800bf4a:	68f8      	ldr	r0, [r7, #12]
 800bf4c:	f000 fd92 	bl	800ca74 <UART_Start_Receive_IT>
 800bf50:	4603      	mov	r3, r0
 800bf52:	e000      	b.n	800bf56 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bf54:	2302      	movs	r3, #2
  }
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3710      	adds	r7, #16
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}

0800bf5e <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800bf5e:	b580      	push	{r7, lr}
 800bf60:	b0a0      	sub	sp, #128	; 0x80
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	330c      	adds	r3, #12
 800bf6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf70:	e853 3f00 	ldrex	r3, [r3]
 800bf74:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800bf76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf78:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800bf7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	330c      	adds	r3, #12
 800bf84:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bf86:	66ba      	str	r2, [r7, #104]	; 0x68
 800bf88:	667b      	str	r3, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf8a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bf8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf8e:	e841 2300 	strex	r3, r2, [r1]
 800bf92:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bf94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d1e5      	bne.n	800bf66 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	3314      	adds	r3, #20
 800bfa0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfa4:	e853 3f00 	ldrex	r3, [r3]
 800bfa8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bfaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfac:	f023 0301 	bic.w	r3, r3, #1
 800bfb0:	67bb      	str	r3, [r7, #120]	; 0x78
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	3314      	adds	r3, #20
 800bfb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bfba:	657a      	str	r2, [r7, #84]	; 0x54
 800bfbc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bfc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bfc2:	e841 2300 	strex	r3, r2, [r1]
 800bfc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bfc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d1e5      	bne.n	800bf9a <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d119      	bne.n	800c00a <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	330c      	adds	r3, #12
 800bfdc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe0:	e853 3f00 	ldrex	r3, [r3]
 800bfe4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe8:	f023 0310 	bic.w	r3, r3, #16
 800bfec:	677b      	str	r3, [r7, #116]	; 0x74
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	330c      	adds	r3, #12
 800bff4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bff6:	643a      	str	r2, [r7, #64]	; 0x40
 800bff8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bffa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bffc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bffe:	e841 2300 	strex	r3, r2, [r1]
 800c002:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c006:	2b00      	cmp	r3, #0
 800c008:	d1e5      	bne.n	800bfd6 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	695b      	ldr	r3, [r3, #20]
 800c010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c014:	2b80      	cmp	r3, #128	; 0x80
 800c016:	d136      	bne.n	800c086 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	3314      	adds	r3, #20
 800c01e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c020:	6a3b      	ldr	r3, [r7, #32]
 800c022:	e853 3f00 	ldrex	r3, [r3]
 800c026:	61fb      	str	r3, [r7, #28]
   return(result);
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c02e:	673b      	str	r3, [r7, #112]	; 0x70
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	3314      	adds	r3, #20
 800c036:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c038:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c03a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c03e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c040:	e841 2300 	strex	r3, r2, [r1]
 800c044:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d1e5      	bne.n	800c018 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c050:	2b00      	cmp	r3, #0
 800c052:	d018      	beq.n	800c086 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c058:	2200      	movs	r2, #0
 800c05a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c060:	4618      	mov	r0, r3
 800c062:	f7fc ff0c 	bl	8008e7e <HAL_DMA_Abort>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00c      	beq.n	800c086 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c070:	4618      	mov	r0, r3
 800c072:	f7fc ff96 	bl	8008fa2 <HAL_DMA_GetError>
 800c076:	4603      	mov	r3, r0
 800c078:	2b20      	cmp	r3, #32
 800c07a:	d104      	bne.n	800c086 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2210      	movs	r2, #16
 800c080:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800c082:	2303      	movs	r3, #3
 800c084:	e052      	b.n	800c12c <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	695b      	ldr	r3, [r3, #20]
 800c08c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c090:	2b40      	cmp	r3, #64	; 0x40
 800c092:	d136      	bne.n	800c102 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	3314      	adds	r3, #20
 800c09a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	e853 3f00 	ldrex	r3, [r3]
 800c0a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	3314      	adds	r3, #20
 800c0b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c0b4:	61ba      	str	r2, [r7, #24]
 800c0b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b8:	6979      	ldr	r1, [r7, #20]
 800c0ba:	69ba      	ldr	r2, [r7, #24]
 800c0bc:	e841 2300 	strex	r3, r2, [r1]
 800c0c0:	613b      	str	r3, [r7, #16]
   return(result);
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d1e5      	bne.n	800c094 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d018      	beq.n	800c102 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7fc fece 	bl	8008e7e <HAL_DMA_Abort>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00c      	beq.n	800c102 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7fc ff58 	bl	8008fa2 <HAL_DMA_GetError>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2b20      	cmp	r3, #32
 800c0f6:	d104      	bne.n	800c102 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2210      	movs	r2, #16
 800c0fc:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800c0fe:	2303      	movs	r3, #3
 800c100:	e014      	b.n	800c12c <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2200      	movs	r2, #0
 800c10c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2200      	movs	r2, #0
 800c112:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2220      	movs	r2, #32
 800c118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2220      	movs	r2, #32
 800c120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2200      	movs	r2, #0
 800c128:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800c12a:	2300      	movs	r3, #0
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3780      	adds	r7, #128	; 0x80
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b08e      	sub	sp, #56	; 0x38
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	330c      	adds	r3, #12
 800c142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c144:	6a3b      	ldr	r3, [r7, #32]
 800c146:	e853 3f00 	ldrex	r3, [r3]
 800c14a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c152:	637b      	str	r3, [r7, #52]	; 0x34
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	330c      	adds	r3, #12
 800c15a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c15c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c15e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c164:	e841 2300 	strex	r3, r2, [r1]
 800c168:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d1e5      	bne.n	800c13c <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	695b      	ldr	r3, [r3, #20]
 800c176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c17a:	2b80      	cmp	r3, #128	; 0x80
 800c17c:	d136      	bne.n	800c1ec <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	3314      	adds	r3, #20
 800c184:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	e853 3f00 	ldrex	r3, [r3]
 800c18c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c194:	633b      	str	r3, [r7, #48]	; 0x30
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	3314      	adds	r3, #20
 800c19c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c19e:	61ba      	str	r2, [r7, #24]
 800c1a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a2:	6979      	ldr	r1, [r7, #20]
 800c1a4:	69ba      	ldr	r2, [r7, #24]
 800c1a6:	e841 2300 	strex	r3, r2, [r1]
 800c1aa:	613b      	str	r3, [r7, #16]
   return(result);
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d1e5      	bne.n	800c17e <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d018      	beq.n	800c1ec <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1be:	2200      	movs	r2, #0
 800c1c0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7fc fe59 	bl	8008e7e <HAL_DMA_Abort>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d00c      	beq.n	800c1ec <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7fc fee3 	bl	8008fa2 <HAL_DMA_GetError>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b20      	cmp	r3, #32
 800c1e0:	d104      	bne.n	800c1ec <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2210      	movs	r2, #16
 800c1e6:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800c1e8:	2303      	movs	r3, #3
 800c1ea:	e007      	b.n	800c1fc <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2220      	movs	r2, #32
 800c1f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c1fa:	2300      	movs	r3, #0
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3738      	adds	r7, #56	; 0x38
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b09a      	sub	sp, #104	; 0x68
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	330c      	adds	r3, #12
 800c212:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c216:	e853 3f00 	ldrex	r3, [r3]
 800c21a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c21c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c21e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c222:	667b      	str	r3, [r7, #100]	; 0x64
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	330c      	adds	r3, #12
 800c22a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c22c:	657a      	str	r2, [r7, #84]	; 0x54
 800c22e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c230:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c232:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c234:	e841 2300 	strex	r3, r2, [r1]
 800c238:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c23a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1e5      	bne.n	800c20c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	3314      	adds	r3, #20
 800c246:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c24a:	e853 3f00 	ldrex	r3, [r3]
 800c24e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c252:	f023 0301 	bic.w	r3, r3, #1
 800c256:	663b      	str	r3, [r7, #96]	; 0x60
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	3314      	adds	r3, #20
 800c25e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c260:	643a      	str	r2, [r7, #64]	; 0x40
 800c262:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c264:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c266:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c268:	e841 2300 	strex	r3, r2, [r1]
 800c26c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c270:	2b00      	cmp	r3, #0
 800c272:	d1e5      	bne.n	800c240 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d119      	bne.n	800c2b0 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	330c      	adds	r3, #12
 800c282:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c284:	6a3b      	ldr	r3, [r7, #32]
 800c286:	e853 3f00 	ldrex	r3, [r3]
 800c28a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	f023 0310 	bic.w	r3, r3, #16
 800c292:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	330c      	adds	r3, #12
 800c29a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c29c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c29e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2a4:	e841 2300 	strex	r3, r2, [r1]
 800c2a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d1e5      	bne.n	800c27c <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	695b      	ldr	r3, [r3, #20]
 800c2b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2ba:	2b40      	cmp	r3, #64	; 0x40
 800c2bc:	d136      	bne.n	800c32c <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	3314      	adds	r3, #20
 800c2c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	e853 3f00 	ldrex	r3, [r3]
 800c2cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2d4:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	3314      	adds	r3, #20
 800c2dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2de:	61ba      	str	r2, [r7, #24]
 800c2e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e2:	6979      	ldr	r1, [r7, #20]
 800c2e4:	69ba      	ldr	r2, [r7, #24]
 800c2e6:	e841 2300 	strex	r3, r2, [r1]
 800c2ea:	613b      	str	r3, [r7, #16]
   return(result);
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1e5      	bne.n	800c2be <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d018      	beq.n	800c32c <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2fe:	2200      	movs	r2, #0
 800c300:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c306:	4618      	mov	r0, r3
 800c308:	f7fc fdb9 	bl	8008e7e <HAL_DMA_Abort>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00c      	beq.n	800c32c <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c316:	4618      	mov	r0, r3
 800c318:	f7fc fe43 	bl	8008fa2 <HAL_DMA_GetError>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b20      	cmp	r3, #32
 800c320:	d104      	bne.n	800c32c <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2210      	movs	r2, #16
 800c326:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800c328:	2303      	movs	r3, #3
 800c32a:	e00a      	b.n	800c342 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2200      	movs	r2, #0
 800c330:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2220      	movs	r2, #32
 800c336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2200      	movs	r2, #0
 800c33e:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3768      	adds	r7, #104	; 0x68
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
	...

0800c34c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b0ba      	sub	sp, #232	; 0xe8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	695b      	ldr	r3, [r3, #20]
 800c36e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c372:	2300      	movs	r3, #0
 800c374:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c378:	2300      	movs	r3, #0
 800c37a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c37e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c382:	f003 030f 	and.w	r3, r3, #15
 800c386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c38a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d10f      	bne.n	800c3b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c396:	f003 0320 	and.w	r3, r3, #32
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d009      	beq.n	800c3b2 <HAL_UART_IRQHandler+0x66>
 800c39e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3a2:	f003 0320 	and.w	r3, r3, #32
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d003      	beq.n	800c3b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 fc81 	bl	800ccb2 <UART_Receive_IT>
      return;
 800c3b0:	e25b      	b.n	800c86a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c3b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f000 80e1 	beq.w	800c57e <HAL_UART_IRQHandler+0x232>
 800c3bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3c0:	f003 0301 	and.w	r3, r3, #1
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d106      	bne.n	800c3d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c3c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	f000 80d4 	beq.w	800c57e <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c3d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3da:	f003 0301 	and.w	r3, r3, #1
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d00b      	beq.n	800c3fa <HAL_UART_IRQHandler+0xae>
 800c3e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d005      	beq.n	800c3fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f2:	f043 0201 	orr.w	r2, r3, #1
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c3fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3fe:	f003 0304 	and.w	r3, r3, #4
 800c402:	2b00      	cmp	r3, #0
 800c404:	d00b      	beq.n	800c41e <HAL_UART_IRQHandler+0xd2>
 800c406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c40a:	f003 0301 	and.w	r3, r3, #1
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d005      	beq.n	800c41e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c416:	f043 0202 	orr.w	r2, r3, #2
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c41e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c422:	f003 0302 	and.w	r3, r3, #2
 800c426:	2b00      	cmp	r3, #0
 800c428:	d00b      	beq.n	800c442 <HAL_UART_IRQHandler+0xf6>
 800c42a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c42e:	f003 0301 	and.w	r3, r3, #1
 800c432:	2b00      	cmp	r3, #0
 800c434:	d005      	beq.n	800c442 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c43a:	f043 0204 	orr.w	r2, r3, #4
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c446:	f003 0308 	and.w	r3, r3, #8
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d011      	beq.n	800c472 <HAL_UART_IRQHandler+0x126>
 800c44e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c452:	f003 0320 	and.w	r3, r3, #32
 800c456:	2b00      	cmp	r3, #0
 800c458:	d105      	bne.n	800c466 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c45a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c45e:	f003 0301 	and.w	r3, r3, #1
 800c462:	2b00      	cmp	r3, #0
 800c464:	d005      	beq.n	800c472 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c46a:	f043 0208 	orr.w	r2, r3, #8
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c476:	2b00      	cmp	r3, #0
 800c478:	f000 81f2 	beq.w	800c860 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c47c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c480:	f003 0320 	and.w	r3, r3, #32
 800c484:	2b00      	cmp	r3, #0
 800c486:	d008      	beq.n	800c49a <HAL_UART_IRQHandler+0x14e>
 800c488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c48c:	f003 0320 	and.w	r3, r3, #32
 800c490:	2b00      	cmp	r3, #0
 800c492:	d002      	beq.n	800c49a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f000 fc0c 	bl	800ccb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	695b      	ldr	r3, [r3, #20]
 800c4a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4a4:	2b40      	cmp	r3, #64	; 0x40
 800c4a6:	bf0c      	ite	eq
 800c4a8:	2301      	moveq	r3, #1
 800c4aa:	2300      	movne	r3, #0
 800c4ac:	b2db      	uxtb	r3, r3
 800c4ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4b6:	f003 0308 	and.w	r3, r3, #8
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d103      	bne.n	800c4c6 <HAL_UART_IRQHandler+0x17a>
 800c4be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d051      	beq.n	800c56a <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 fb12 	bl	800caf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	695b      	ldr	r3, [r3, #20]
 800c4d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4d6:	2b40      	cmp	r3, #64	; 0x40
 800c4d8:	d142      	bne.n	800c560 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	3314      	adds	r3, #20
 800c4e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c4e8:	e853 3f00 	ldrex	r3, [r3]
 800c4ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c4f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c4f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	3314      	adds	r3, #20
 800c502:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c506:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c50a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c50e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c512:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c516:	e841 2300 	strex	r3, r2, [r1]
 800c51a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c51e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c522:	2b00      	cmp	r3, #0
 800c524:	d1d9      	bne.n	800c4da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d013      	beq.n	800c556 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c532:	4a7f      	ldr	r2, [pc, #508]	; (800c730 <HAL_UART_IRQHandler+0x3e4>)
 800c534:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7fc fd0f 	bl	8008f5e <HAL_DMA_Abort_IT>
 800c540:	4603      	mov	r3, r0
 800c542:	2b00      	cmp	r3, #0
 800c544:	d019      	beq.n	800c57a <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c54a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c550:	4610      	mov	r0, r2
 800c552:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c554:	e011      	b.n	800c57a <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c55e:	e00c      	b.n	800c57a <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c568:	e007      	b.n	800c57a <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c578:	e172      	b.n	800c860 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c57a:	bf00      	nop
    return;
 800c57c:	e170      	b.n	800c860 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c582:	2b01      	cmp	r3, #1
 800c584:	f040 814c 	bne.w	800c820 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c58c:	f003 0310 	and.w	r3, r3, #16
 800c590:	2b00      	cmp	r3, #0
 800c592:	f000 8145 	beq.w	800c820 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c59a:	f003 0310 	and.w	r3, r3, #16
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f000 813e 	beq.w	800c820 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	60bb      	str	r3, [r7, #8]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	60bb      	str	r3, [r7, #8]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	60bb      	str	r3, [r7, #8]
 800c5b8:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	695b      	ldr	r3, [r3, #20]
 800c5c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5c4:	2b40      	cmp	r3, #64	; 0x40
 800c5c6:	f040 80b5 	bne.w	800c734 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c5d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	f000 8142 	beq.w	800c864 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c5e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	f080 813b 	bcs.w	800c864 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c5f4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5fa:	69db      	ldr	r3, [r3, #28]
 800c5fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c600:	f000 8088 	beq.w	800c714 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	330c      	adds	r3, #12
 800c60a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c60e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c612:	e853 3f00 	ldrex	r3, [r3]
 800c616:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c61a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c61e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c622:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	330c      	adds	r3, #12
 800c62c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c630:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c634:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c638:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c63c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c640:	e841 2300 	strex	r3, r2, [r1]
 800c644:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c648:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d1d9      	bne.n	800c604 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	3314      	adds	r3, #20
 800c656:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c65a:	e853 3f00 	ldrex	r3, [r3]
 800c65e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c660:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c662:	f023 0301 	bic.w	r3, r3, #1
 800c666:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	3314      	adds	r3, #20
 800c670:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c674:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c678:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c67a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c67c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c680:	e841 2300 	strex	r3, r2, [r1]
 800c684:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c686:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d1e1      	bne.n	800c650 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	3314      	adds	r3, #20
 800c692:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c696:	e853 3f00 	ldrex	r3, [r3]
 800c69a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c69c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c69e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	3314      	adds	r3, #20
 800c6ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c6b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c6b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c6b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c6b8:	e841 2300 	strex	r3, r2, [r1]
 800c6bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c6be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1e3      	bne.n	800c68c <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2220      	movs	r2, #32
 800c6c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	330c      	adds	r3, #12
 800c6d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6dc:	e853 3f00 	ldrex	r3, [r3]
 800c6e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c6e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6e4:	f023 0310 	bic.w	r3, r3, #16
 800c6e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	330c      	adds	r3, #12
 800c6f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c6f6:	65ba      	str	r2, [r7, #88]	; 0x58
 800c6f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c6fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c6fe:	e841 2300 	strex	r3, r2, [r1]
 800c702:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1e3      	bne.n	800c6d2 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c70e:	4618      	mov	r0, r3
 800c710:	f7fc fbb5 	bl	8008e7e <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800c71c:	687a      	ldr	r2, [r7, #4]
 800c71e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800c720:	b292      	uxth	r2, r2
 800c722:	1a8a      	subs	r2, r1, r2
 800c724:	b292      	uxth	r2, r2
 800c726:	4611      	mov	r1, r2
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c72c:	e09a      	b.n	800c864 <HAL_UART_IRQHandler+0x518>
 800c72e:	bf00      	nop
 800c730:	0800cbb7 	.word	0x0800cbb7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	1ad3      	subs	r3, r2, r3
 800c740:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c748:	b29b      	uxth	r3, r3
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	f000 808c 	beq.w	800c868 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c750:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c754:	2b00      	cmp	r3, #0
 800c756:	f000 8087 	beq.w	800c868 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	330c      	adds	r3, #12
 800c760:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c764:	e853 3f00 	ldrex	r3, [r3]
 800c768:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c76c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c770:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	330c      	adds	r3, #12
 800c77a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c77e:	647a      	str	r2, [r7, #68]	; 0x44
 800c780:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c782:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c784:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c786:	e841 2300 	strex	r3, r2, [r1]
 800c78a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c78c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d1e3      	bne.n	800c75a <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	3314      	adds	r3, #20
 800c798:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79c:	e853 3f00 	ldrex	r3, [r3]
 800c7a0:	623b      	str	r3, [r7, #32]
   return(result);
 800c7a2:	6a3b      	ldr	r3, [r7, #32]
 800c7a4:	f023 0301 	bic.w	r3, r3, #1
 800c7a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	3314      	adds	r3, #20
 800c7b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c7b6:	633a      	str	r2, [r7, #48]	; 0x30
 800c7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7be:	e841 2300 	strex	r3, r2, [r1]
 800c7c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d1e3      	bne.n	800c792 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2220      	movs	r2, #32
 800c7ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	330c      	adds	r3, #12
 800c7de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	e853 3f00 	ldrex	r3, [r3]
 800c7e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f023 0310 	bic.w	r3, r3, #16
 800c7ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	330c      	adds	r3, #12
 800c7f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c7fc:	61fa      	str	r2, [r7, #28]
 800c7fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c800:	69b9      	ldr	r1, [r7, #24]
 800c802:	69fa      	ldr	r2, [r7, #28]
 800c804:	e841 2300 	strex	r3, r2, [r1]
 800c808:	617b      	str	r3, [r7, #20]
   return(result);
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d1e3      	bne.n	800c7d8 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c814:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800c818:	4611      	mov	r1, r2
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c81e:	e023      	b.n	800c868 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d009      	beq.n	800c840 <HAL_UART_IRQHandler+0x4f4>
 800c82c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c834:	2b00      	cmp	r3, #0
 800c836:	d003      	beq.n	800c840 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f000 f9d1 	bl	800cbe0 <UART_Transmit_IT>
    return;
 800c83e:	e014      	b.n	800c86a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00e      	beq.n	800c86a <HAL_UART_IRQHandler+0x51e>
 800c84c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c854:	2b00      	cmp	r3, #0
 800c856:	d008      	beq.n	800c86a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 fa11 	bl	800cc80 <UART_EndTransmit_IT>
    return;
 800c85e:	e004      	b.n	800c86a <HAL_UART_IRQHandler+0x51e>
    return;
 800c860:	bf00      	nop
 800c862:	e002      	b.n	800c86a <HAL_UART_IRQHandler+0x51e>
      return;
 800c864:	bf00      	nop
 800c866:	e000      	b.n	800c86a <HAL_UART_IRQHandler+0x51e>
      return;
 800c868:	bf00      	nop
  }
}
 800c86a:	37e8      	adds	r7, #232	; 0xe8
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c870:	b480      	push	{r7}
 800c872:	b083      	sub	sp, #12
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c878:	bf00      	nop
 800c87a:	370c      	adds	r7, #12
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr

0800c884 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c884:	b480      	push	{r7}
 800c886:	b083      	sub	sp, #12
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c88c:	bf00      	nop
 800c88e:	370c      	adds	r7, #12
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr

0800c898 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c898:	b480      	push	{r7}
 800c89a:	b083      	sub	sp, #12
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c8a0:	bf00      	nop
 800c8a2:	370c      	adds	r7, #12
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr

0800c8ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c8b4:	bf00      	nop
 800c8b6:	370c      	adds	r7, #12
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr

0800c8c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b083      	sub	sp, #12
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c8c8:	bf00      	nop
 800c8ca:	370c      	adds	r7, #12
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr

0800c8d4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b083      	sub	sp, #12
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c8dc:	bf00      	nop
 800c8de:	370c      	adds	r7, #12
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800c8f0:	bf00      	nop
 800c8f2:	370c      	adds	r7, #12
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr

0800c8fc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b083      	sub	sp, #12
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c904:	bf00      	nop
 800c906:	370c      	adds	r7, #12
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c910:	b480      	push	{r7}
 800c912:	b083      	sub	sp, #12
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	460b      	mov	r3, r1
 800c91a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c91c:	bf00      	nop
 800c91e:	370c      	adds	r7, #12
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	4a10      	ldr	r2, [pc, #64]	; (800c974 <UART_InitCallbacksToDefault+0x4c>)
 800c934:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	4a0f      	ldr	r2, [pc, #60]	; (800c978 <UART_InitCallbacksToDefault+0x50>)
 800c93a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	4a0f      	ldr	r2, [pc, #60]	; (800c97c <UART_InitCallbacksToDefault+0x54>)
 800c940:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	4a0e      	ldr	r2, [pc, #56]	; (800c980 <UART_InitCallbacksToDefault+0x58>)
 800c946:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	4a0e      	ldr	r2, [pc, #56]	; (800c984 <UART_InitCallbacksToDefault+0x5c>)
 800c94c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	4a0d      	ldr	r2, [pc, #52]	; (800c988 <UART_InitCallbacksToDefault+0x60>)
 800c952:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	4a0d      	ldr	r2, [pc, #52]	; (800c98c <UART_InitCallbacksToDefault+0x64>)
 800c958:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	4a0c      	ldr	r2, [pc, #48]	; (800c990 <UART_InitCallbacksToDefault+0x68>)
 800c95e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	4a0c      	ldr	r2, [pc, #48]	; (800c994 <UART_InitCallbacksToDefault+0x6c>)
 800c964:	669a      	str	r2, [r3, #104]	; 0x68

}
 800c966:	bf00      	nop
 800c968:	370c      	adds	r7, #12
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	0800c885 	.word	0x0800c885
 800c978:	0800c871 	.word	0x0800c871
 800c97c:	0800c8ad 	.word	0x0800c8ad
 800c980:	0800c899 	.word	0x0800c899
 800c984:	0800c8c1 	.word	0x0800c8c1
 800c988:	0800c8d5 	.word	0x0800c8d5
 800c98c:	0800c8e9 	.word	0x0800c8e9
 800c990:	0800c8fd 	.word	0x0800c8fd
 800c994:	0800c911 	.word	0x0800c911

0800c998 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b090      	sub	sp, #64	; 0x40
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	603b      	str	r3, [r7, #0]
 800c9a4:	4613      	mov	r3, r2
 800c9a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9a8:	e050      	b.n	800ca4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c9aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b0:	d04c      	beq.n	800ca4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c9b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d007      	beq.n	800c9c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800c9b8:	f7fc f920 	bl	8008bfc <HAL_GetTick>
 800c9bc:	4602      	mov	r2, r0
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	1ad3      	subs	r3, r2, r3
 800c9c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d241      	bcs.n	800ca4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	330c      	adds	r3, #12
 800c9ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d2:	e853 3f00 	ldrex	r3, [r3]
 800c9d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c9de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	330c      	adds	r3, #12
 800c9e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c9e8:	637a      	str	r2, [r7, #52]	; 0x34
 800c9ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c9ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9f0:	e841 2300 	strex	r3, r2, [r1]
 800c9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1e5      	bne.n	800c9c8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	3314      	adds	r3, #20
 800ca02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	e853 3f00 	ldrex	r3, [r3]
 800ca0a:	613b      	str	r3, [r7, #16]
   return(result);
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	f023 0301 	bic.w	r3, r3, #1
 800ca12:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	3314      	adds	r3, #20
 800ca1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca1c:	623a      	str	r2, [r7, #32]
 800ca1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca20:	69f9      	ldr	r1, [r7, #28]
 800ca22:	6a3a      	ldr	r2, [r7, #32]
 800ca24:	e841 2300 	strex	r3, r2, [r1]
 800ca28:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca2a:	69bb      	ldr	r3, [r7, #24]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d1e5      	bne.n	800c9fc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2220      	movs	r2, #32
 800ca34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2220      	movs	r2, #32
 800ca3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2200      	movs	r2, #0
 800ca44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ca48:	2303      	movs	r3, #3
 800ca4a:	e00f      	b.n	800ca6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	681a      	ldr	r2, [r3, #0]
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	4013      	ands	r3, r2
 800ca56:	68ba      	ldr	r2, [r7, #8]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	bf0c      	ite	eq
 800ca5c:	2301      	moveq	r3, #1
 800ca5e:	2300      	movne	r3, #0
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	461a      	mov	r2, r3
 800ca64:	79fb      	ldrb	r3, [r7, #7]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d09f      	beq.n	800c9aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ca6a:	2300      	movs	r3, #0
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3740      	adds	r7, #64	; 0x40
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b085      	sub	sp, #20
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	60f8      	str	r0, [r7, #12]
 800ca7c:	60b9      	str	r1, [r7, #8]
 800ca7e:	4613      	mov	r3, r2
 800ca80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	68ba      	ldr	r2, [r7, #8]
 800ca86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	88fa      	ldrh	r2, [r7, #6]
 800ca8c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	88fa      	ldrh	r2, [r7, #6]
 800ca92:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2200      	movs	r2, #0
 800ca98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2222      	movs	r2, #34	; 0x22
 800ca9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2200      	movs	r2, #0
 800caa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	691b      	ldr	r3, [r3, #16]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d007      	beq.n	800cac2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	68da      	ldr	r2, [r3, #12]
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cac0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	695a      	ldr	r2, [r3, #20]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f042 0201 	orr.w	r2, r2, #1
 800cad0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	68da      	ldr	r2, [r3, #12]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f042 0220 	orr.w	r2, r2, #32
 800cae0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cae2:	2300      	movs	r3, #0
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3714      	adds	r7, #20
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr

0800caf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b095      	sub	sp, #84	; 0x54
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	330c      	adds	r3, #12
 800cafe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb02:	e853 3f00 	ldrex	r3, [r3]
 800cb06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cb0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	330c      	adds	r3, #12
 800cb16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb18:	643a      	str	r2, [r7, #64]	; 0x40
 800cb1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cb1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb20:	e841 2300 	strex	r3, r2, [r1]
 800cb24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d1e5      	bne.n	800caf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	3314      	adds	r3, #20
 800cb32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb34:	6a3b      	ldr	r3, [r7, #32]
 800cb36:	e853 3f00 	ldrex	r3, [r3]
 800cb3a:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	f023 0301 	bic.w	r3, r3, #1
 800cb42:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	3314      	adds	r3, #20
 800cb4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb54:	e841 2300 	strex	r3, r2, [r1]
 800cb58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d1e5      	bne.n	800cb2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d119      	bne.n	800cb9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	330c      	adds	r3, #12
 800cb6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	e853 3f00 	ldrex	r3, [r3]
 800cb76:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	f023 0310 	bic.w	r3, r3, #16
 800cb7e:	647b      	str	r3, [r7, #68]	; 0x44
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	330c      	adds	r3, #12
 800cb86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb88:	61ba      	str	r2, [r7, #24]
 800cb8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb8c:	6979      	ldr	r1, [r7, #20]
 800cb8e:	69ba      	ldr	r2, [r7, #24]
 800cb90:	e841 2300 	strex	r3, r2, [r1]
 800cb94:	613b      	str	r3, [r7, #16]
   return(result);
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d1e5      	bne.n	800cb68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2220      	movs	r2, #32
 800cba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2200      	movs	r2, #0
 800cba8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800cbaa:	bf00      	nop
 800cbac:	3754      	adds	r7, #84	; 0x54
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr

0800cbb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b084      	sub	sp, #16
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbd8:	bf00      	nop
 800cbda:	3710      	adds	r7, #16
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b085      	sub	sp, #20
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	2b21      	cmp	r3, #33	; 0x21
 800cbf2:	d13e      	bne.n	800cc72 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbfc:	d114      	bne.n	800cc28 <UART_Transmit_IT+0x48>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	691b      	ldr	r3, [r3, #16]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d110      	bne.n	800cc28 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6a1b      	ldr	r3, [r3, #32]
 800cc0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	881b      	ldrh	r3, [r3, #0]
 800cc10:	461a      	mov	r2, r3
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc1a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6a1b      	ldr	r3, [r3, #32]
 800cc20:	1c9a      	adds	r2, r3, #2
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	621a      	str	r2, [r3, #32]
 800cc26:	e008      	b.n	800cc3a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6a1b      	ldr	r3, [r3, #32]
 800cc2c:	1c59      	adds	r1, r3, #1
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	6211      	str	r1, [r2, #32]
 800cc32:	781a      	ldrb	r2, [r3, #0]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	3b01      	subs	r3, #1
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	4619      	mov	r1, r3
 800cc48:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d10f      	bne.n	800cc6e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	68da      	ldr	r2, [r3, #12]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cc5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	68da      	ldr	r2, [r3, #12]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	e000      	b.n	800cc74 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cc72:	2302      	movs	r3, #2
  }
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3714      	adds	r7, #20
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	68da      	ldr	r2, [r3, #12]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc96:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2220      	movs	r2, #32
 800cc9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cca8:	2300      	movs	r3, #0
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3708      	adds	r7, #8
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ccb2:	b580      	push	{r7, lr}
 800ccb4:	b08c      	sub	sp, #48	; 0x30
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	2b22      	cmp	r3, #34	; 0x22
 800ccc4:	f040 80ad 	bne.w	800ce22 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	689b      	ldr	r3, [r3, #8]
 800cccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccd0:	d117      	bne.n	800cd02 <UART_Receive_IT+0x50>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	691b      	ldr	r3, [r3, #16]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d113      	bne.n	800cd02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cce2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	b29b      	uxth	r3, r3
 800ccec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccf0:	b29a      	uxth	r2, r3
 800ccf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccfa:	1c9a      	adds	r2, r3, #2
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	629a      	str	r2, [r3, #40]	; 0x28
 800cd00:	e026      	b.n	800cd50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd14:	d007      	beq.n	800cd26 <UART_Receive_IT+0x74>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d10a      	bne.n	800cd34 <UART_Receive_IT+0x82>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	691b      	ldr	r3, [r3, #16]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d106      	bne.n	800cd34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	b2da      	uxtb	r2, r3
 800cd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd30:	701a      	strb	r2, [r3, #0]
 800cd32:	e008      	b.n	800cd46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	b2db      	uxtb	r3, r3
 800cd3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd40:	b2da      	uxtb	r2, r3
 800cd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd4a:	1c5a      	adds	r2, r3, #1
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	3b01      	subs	r3, #1
 800cd58:	b29b      	uxth	r3, r3
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d15c      	bne.n	800ce1e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	68da      	ldr	r2, [r3, #12]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f022 0220 	bic.w	r2, r2, #32
 800cd72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	68da      	ldr	r2, [r3, #12]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	695a      	ldr	r2, [r3, #20]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f022 0201 	bic.w	r2, r2, #1
 800cd92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2220      	movs	r2, #32
 800cd98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	d136      	bne.n	800ce12 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2200      	movs	r2, #0
 800cda8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	330c      	adds	r3, #12
 800cdb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	e853 3f00 	ldrex	r3, [r3]
 800cdb8:	613b      	str	r3, [r7, #16]
   return(result);
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	f023 0310 	bic.w	r3, r3, #16
 800cdc0:	627b      	str	r3, [r7, #36]	; 0x24
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	330c      	adds	r3, #12
 800cdc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdca:	623a      	str	r2, [r7, #32]
 800cdcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdce:	69f9      	ldr	r1, [r7, #28]
 800cdd0:	6a3a      	ldr	r2, [r7, #32]
 800cdd2:	e841 2300 	strex	r3, r2, [r1]
 800cdd6:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdd8:	69bb      	ldr	r3, [r7, #24]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d1e5      	bne.n	800cdaa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f003 0310 	and.w	r3, r3, #16
 800cde8:	2b10      	cmp	r3, #16
 800cdea:	d10a      	bne.n	800ce02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cdec:	2300      	movs	r3, #0
 800cdee:	60fb      	str	r3, [r7, #12]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	60fb      	str	r3, [r7, #12]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	60fb      	str	r3, [r7, #12]
 800ce00:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce06:	687a      	ldr	r2, [r7, #4]
 800ce08:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800ce0a:	4611      	mov	r1, r2
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	4798      	blx	r3
 800ce10:	e003      	b.n	800ce1a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	e002      	b.n	800ce24 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	e000      	b.n	800ce24 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800ce22:	2302      	movs	r3, #2
  }
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3730      	adds	r7, #48	; 0x30
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce30:	b0c0      	sub	sp, #256	; 0x100
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	691b      	ldr	r3, [r3, #16]
 800ce40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ce44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce48:	68d9      	ldr	r1, [r3, #12]
 800ce4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	ea40 0301 	orr.w	r3, r0, r1
 800ce54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ce56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce5a:	689a      	ldr	r2, [r3, #8]
 800ce5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce60:	691b      	ldr	r3, [r3, #16]
 800ce62:	431a      	orrs	r2, r3
 800ce64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce68:	695b      	ldr	r3, [r3, #20]
 800ce6a:	431a      	orrs	r2, r3
 800ce6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce70:	69db      	ldr	r3, [r3, #28]
 800ce72:	4313      	orrs	r3, r2
 800ce74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ce78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	68db      	ldr	r3, [r3, #12]
 800ce80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ce84:	f021 010c 	bic.w	r1, r1, #12
 800ce88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ce92:	430b      	orrs	r3, r1
 800ce94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ce96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	695b      	ldr	r3, [r3, #20]
 800ce9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cea6:	6999      	ldr	r1, [r3, #24]
 800cea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	ea40 0301 	orr.w	r3, r0, r1
 800ceb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ceb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	4b8f      	ldr	r3, [pc, #572]	; (800d0f8 <UART_SetConfig+0x2cc>)
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d005      	beq.n	800cecc <UART_SetConfig+0xa0>
 800cec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cec4:	681a      	ldr	r2, [r3, #0]
 800cec6:	4b8d      	ldr	r3, [pc, #564]	; (800d0fc <UART_SetConfig+0x2d0>)
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d104      	bne.n	800ced6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cecc:	f7fd ff1a 	bl	800ad04 <HAL_RCC_GetPCLK2Freq>
 800ced0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ced4:	e003      	b.n	800cede <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ced6:	f7fd ff01 	bl	800acdc <HAL_RCC_GetPCLK1Freq>
 800ceda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cee2:	69db      	ldr	r3, [r3, #28]
 800cee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cee8:	f040 810c 	bne.w	800d104 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ceec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cef0:	2200      	movs	r2, #0
 800cef2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cef6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cefa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cefe:	4622      	mov	r2, r4
 800cf00:	462b      	mov	r3, r5
 800cf02:	1891      	adds	r1, r2, r2
 800cf04:	65b9      	str	r1, [r7, #88]	; 0x58
 800cf06:	415b      	adcs	r3, r3
 800cf08:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cf0e:	4621      	mov	r1, r4
 800cf10:	eb12 0801 	adds.w	r8, r2, r1
 800cf14:	4629      	mov	r1, r5
 800cf16:	eb43 0901 	adc.w	r9, r3, r1
 800cf1a:	f04f 0200 	mov.w	r2, #0
 800cf1e:	f04f 0300 	mov.w	r3, #0
 800cf22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cf26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cf2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cf2e:	4690      	mov	r8, r2
 800cf30:	4699      	mov	r9, r3
 800cf32:	4623      	mov	r3, r4
 800cf34:	eb18 0303 	adds.w	r3, r8, r3
 800cf38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cf3c:	462b      	mov	r3, r5
 800cf3e:	eb49 0303 	adc.w	r3, r9, r3
 800cf42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cf46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cf52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cf56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cf5a:	460b      	mov	r3, r1
 800cf5c:	18db      	adds	r3, r3, r3
 800cf5e:	653b      	str	r3, [r7, #80]	; 0x50
 800cf60:	4613      	mov	r3, r2
 800cf62:	eb42 0303 	adc.w	r3, r2, r3
 800cf66:	657b      	str	r3, [r7, #84]	; 0x54
 800cf68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cf6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cf70:	f7f3 fe0c 	bl	8000b8c <__aeabi_uldivmod>
 800cf74:	4602      	mov	r2, r0
 800cf76:	460b      	mov	r3, r1
 800cf78:	4b61      	ldr	r3, [pc, #388]	; (800d100 <UART_SetConfig+0x2d4>)
 800cf7a:	fba3 2302 	umull	r2, r3, r3, r2
 800cf7e:	095b      	lsrs	r3, r3, #5
 800cf80:	011c      	lsls	r4, r3, #4
 800cf82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf86:	2200      	movs	r2, #0
 800cf88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cf8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cf90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cf94:	4642      	mov	r2, r8
 800cf96:	464b      	mov	r3, r9
 800cf98:	1891      	adds	r1, r2, r2
 800cf9a:	64b9      	str	r1, [r7, #72]	; 0x48
 800cf9c:	415b      	adcs	r3, r3
 800cf9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfa0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cfa4:	4641      	mov	r1, r8
 800cfa6:	eb12 0a01 	adds.w	sl, r2, r1
 800cfaa:	4649      	mov	r1, r9
 800cfac:	eb43 0b01 	adc.w	fp, r3, r1
 800cfb0:	f04f 0200 	mov.w	r2, #0
 800cfb4:	f04f 0300 	mov.w	r3, #0
 800cfb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cfbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cfc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cfc4:	4692      	mov	sl, r2
 800cfc6:	469b      	mov	fp, r3
 800cfc8:	4643      	mov	r3, r8
 800cfca:	eb1a 0303 	adds.w	r3, sl, r3
 800cfce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cfd2:	464b      	mov	r3, r9
 800cfd4:	eb4b 0303 	adc.w	r3, fp, r3
 800cfd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cfdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cfe8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cfec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cff0:	460b      	mov	r3, r1
 800cff2:	18db      	adds	r3, r3, r3
 800cff4:	643b      	str	r3, [r7, #64]	; 0x40
 800cff6:	4613      	mov	r3, r2
 800cff8:	eb42 0303 	adc.w	r3, r2, r3
 800cffc:	647b      	str	r3, [r7, #68]	; 0x44
 800cffe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d002:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d006:	f7f3 fdc1 	bl	8000b8c <__aeabi_uldivmod>
 800d00a:	4602      	mov	r2, r0
 800d00c:	460b      	mov	r3, r1
 800d00e:	4611      	mov	r1, r2
 800d010:	4b3b      	ldr	r3, [pc, #236]	; (800d100 <UART_SetConfig+0x2d4>)
 800d012:	fba3 2301 	umull	r2, r3, r3, r1
 800d016:	095b      	lsrs	r3, r3, #5
 800d018:	2264      	movs	r2, #100	; 0x64
 800d01a:	fb02 f303 	mul.w	r3, r2, r3
 800d01e:	1acb      	subs	r3, r1, r3
 800d020:	00db      	lsls	r3, r3, #3
 800d022:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d026:	4b36      	ldr	r3, [pc, #216]	; (800d100 <UART_SetConfig+0x2d4>)
 800d028:	fba3 2302 	umull	r2, r3, r3, r2
 800d02c:	095b      	lsrs	r3, r3, #5
 800d02e:	005b      	lsls	r3, r3, #1
 800d030:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d034:	441c      	add	r4, r3
 800d036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d03a:	2200      	movs	r2, #0
 800d03c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d040:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d044:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d048:	4642      	mov	r2, r8
 800d04a:	464b      	mov	r3, r9
 800d04c:	1891      	adds	r1, r2, r2
 800d04e:	63b9      	str	r1, [r7, #56]	; 0x38
 800d050:	415b      	adcs	r3, r3
 800d052:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d054:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d058:	4641      	mov	r1, r8
 800d05a:	1851      	adds	r1, r2, r1
 800d05c:	6339      	str	r1, [r7, #48]	; 0x30
 800d05e:	4649      	mov	r1, r9
 800d060:	414b      	adcs	r3, r1
 800d062:	637b      	str	r3, [r7, #52]	; 0x34
 800d064:	f04f 0200 	mov.w	r2, #0
 800d068:	f04f 0300 	mov.w	r3, #0
 800d06c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d070:	4659      	mov	r1, fp
 800d072:	00cb      	lsls	r3, r1, #3
 800d074:	4651      	mov	r1, sl
 800d076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d07a:	4651      	mov	r1, sl
 800d07c:	00ca      	lsls	r2, r1, #3
 800d07e:	4610      	mov	r0, r2
 800d080:	4619      	mov	r1, r3
 800d082:	4603      	mov	r3, r0
 800d084:	4642      	mov	r2, r8
 800d086:	189b      	adds	r3, r3, r2
 800d088:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d08c:	464b      	mov	r3, r9
 800d08e:	460a      	mov	r2, r1
 800d090:	eb42 0303 	adc.w	r3, r2, r3
 800d094:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d0a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d0a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d0ac:	460b      	mov	r3, r1
 800d0ae:	18db      	adds	r3, r3, r3
 800d0b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	eb42 0303 	adc.w	r3, r2, r3
 800d0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d0be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d0c2:	f7f3 fd63 	bl	8000b8c <__aeabi_uldivmod>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	4b0d      	ldr	r3, [pc, #52]	; (800d100 <UART_SetConfig+0x2d4>)
 800d0cc:	fba3 1302 	umull	r1, r3, r3, r2
 800d0d0:	095b      	lsrs	r3, r3, #5
 800d0d2:	2164      	movs	r1, #100	; 0x64
 800d0d4:	fb01 f303 	mul.w	r3, r1, r3
 800d0d8:	1ad3      	subs	r3, r2, r3
 800d0da:	00db      	lsls	r3, r3, #3
 800d0dc:	3332      	adds	r3, #50	; 0x32
 800d0de:	4a08      	ldr	r2, [pc, #32]	; (800d100 <UART_SetConfig+0x2d4>)
 800d0e0:	fba2 2303 	umull	r2, r3, r2, r3
 800d0e4:	095b      	lsrs	r3, r3, #5
 800d0e6:	f003 0207 	and.w	r2, r3, #7
 800d0ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4422      	add	r2, r4
 800d0f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d0f4:	e106      	b.n	800d304 <UART_SetConfig+0x4d8>
 800d0f6:	bf00      	nop
 800d0f8:	40011000 	.word	0x40011000
 800d0fc:	40011400 	.word	0x40011400
 800d100:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d108:	2200      	movs	r2, #0
 800d10a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d10e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d112:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d116:	4642      	mov	r2, r8
 800d118:	464b      	mov	r3, r9
 800d11a:	1891      	adds	r1, r2, r2
 800d11c:	6239      	str	r1, [r7, #32]
 800d11e:	415b      	adcs	r3, r3
 800d120:	627b      	str	r3, [r7, #36]	; 0x24
 800d122:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d126:	4641      	mov	r1, r8
 800d128:	1854      	adds	r4, r2, r1
 800d12a:	4649      	mov	r1, r9
 800d12c:	eb43 0501 	adc.w	r5, r3, r1
 800d130:	f04f 0200 	mov.w	r2, #0
 800d134:	f04f 0300 	mov.w	r3, #0
 800d138:	00eb      	lsls	r3, r5, #3
 800d13a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d13e:	00e2      	lsls	r2, r4, #3
 800d140:	4614      	mov	r4, r2
 800d142:	461d      	mov	r5, r3
 800d144:	4643      	mov	r3, r8
 800d146:	18e3      	adds	r3, r4, r3
 800d148:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d14c:	464b      	mov	r3, r9
 800d14e:	eb45 0303 	adc.w	r3, r5, r3
 800d152:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d162:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d166:	f04f 0200 	mov.w	r2, #0
 800d16a:	f04f 0300 	mov.w	r3, #0
 800d16e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d172:	4629      	mov	r1, r5
 800d174:	008b      	lsls	r3, r1, #2
 800d176:	4621      	mov	r1, r4
 800d178:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d17c:	4621      	mov	r1, r4
 800d17e:	008a      	lsls	r2, r1, #2
 800d180:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d184:	f7f3 fd02 	bl	8000b8c <__aeabi_uldivmod>
 800d188:	4602      	mov	r2, r0
 800d18a:	460b      	mov	r3, r1
 800d18c:	4b60      	ldr	r3, [pc, #384]	; (800d310 <UART_SetConfig+0x4e4>)
 800d18e:	fba3 2302 	umull	r2, r3, r3, r2
 800d192:	095b      	lsrs	r3, r3, #5
 800d194:	011c      	lsls	r4, r3, #4
 800d196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d19a:	2200      	movs	r2, #0
 800d19c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d1a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d1a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d1a8:	4642      	mov	r2, r8
 800d1aa:	464b      	mov	r3, r9
 800d1ac:	1891      	adds	r1, r2, r2
 800d1ae:	61b9      	str	r1, [r7, #24]
 800d1b0:	415b      	adcs	r3, r3
 800d1b2:	61fb      	str	r3, [r7, #28]
 800d1b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d1b8:	4641      	mov	r1, r8
 800d1ba:	1851      	adds	r1, r2, r1
 800d1bc:	6139      	str	r1, [r7, #16]
 800d1be:	4649      	mov	r1, r9
 800d1c0:	414b      	adcs	r3, r1
 800d1c2:	617b      	str	r3, [r7, #20]
 800d1c4:	f04f 0200 	mov.w	r2, #0
 800d1c8:	f04f 0300 	mov.w	r3, #0
 800d1cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d1d0:	4659      	mov	r1, fp
 800d1d2:	00cb      	lsls	r3, r1, #3
 800d1d4:	4651      	mov	r1, sl
 800d1d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d1da:	4651      	mov	r1, sl
 800d1dc:	00ca      	lsls	r2, r1, #3
 800d1de:	4610      	mov	r0, r2
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	4642      	mov	r2, r8
 800d1e6:	189b      	adds	r3, r3, r2
 800d1e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d1ec:	464b      	mov	r3, r9
 800d1ee:	460a      	mov	r2, r1
 800d1f0:	eb42 0303 	adc.w	r3, r2, r3
 800d1f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d1f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	2200      	movs	r2, #0
 800d200:	67bb      	str	r3, [r7, #120]	; 0x78
 800d202:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d204:	f04f 0200 	mov.w	r2, #0
 800d208:	f04f 0300 	mov.w	r3, #0
 800d20c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d210:	4649      	mov	r1, r9
 800d212:	008b      	lsls	r3, r1, #2
 800d214:	4641      	mov	r1, r8
 800d216:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d21a:	4641      	mov	r1, r8
 800d21c:	008a      	lsls	r2, r1, #2
 800d21e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d222:	f7f3 fcb3 	bl	8000b8c <__aeabi_uldivmod>
 800d226:	4602      	mov	r2, r0
 800d228:	460b      	mov	r3, r1
 800d22a:	4611      	mov	r1, r2
 800d22c:	4b38      	ldr	r3, [pc, #224]	; (800d310 <UART_SetConfig+0x4e4>)
 800d22e:	fba3 2301 	umull	r2, r3, r3, r1
 800d232:	095b      	lsrs	r3, r3, #5
 800d234:	2264      	movs	r2, #100	; 0x64
 800d236:	fb02 f303 	mul.w	r3, r2, r3
 800d23a:	1acb      	subs	r3, r1, r3
 800d23c:	011b      	lsls	r3, r3, #4
 800d23e:	3332      	adds	r3, #50	; 0x32
 800d240:	4a33      	ldr	r2, [pc, #204]	; (800d310 <UART_SetConfig+0x4e4>)
 800d242:	fba2 2303 	umull	r2, r3, r2, r3
 800d246:	095b      	lsrs	r3, r3, #5
 800d248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d24c:	441c      	add	r4, r3
 800d24e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d252:	2200      	movs	r2, #0
 800d254:	673b      	str	r3, [r7, #112]	; 0x70
 800d256:	677a      	str	r2, [r7, #116]	; 0x74
 800d258:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d25c:	4642      	mov	r2, r8
 800d25e:	464b      	mov	r3, r9
 800d260:	1891      	adds	r1, r2, r2
 800d262:	60b9      	str	r1, [r7, #8]
 800d264:	415b      	adcs	r3, r3
 800d266:	60fb      	str	r3, [r7, #12]
 800d268:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d26c:	4641      	mov	r1, r8
 800d26e:	1851      	adds	r1, r2, r1
 800d270:	6039      	str	r1, [r7, #0]
 800d272:	4649      	mov	r1, r9
 800d274:	414b      	adcs	r3, r1
 800d276:	607b      	str	r3, [r7, #4]
 800d278:	f04f 0200 	mov.w	r2, #0
 800d27c:	f04f 0300 	mov.w	r3, #0
 800d280:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d284:	4659      	mov	r1, fp
 800d286:	00cb      	lsls	r3, r1, #3
 800d288:	4651      	mov	r1, sl
 800d28a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d28e:	4651      	mov	r1, sl
 800d290:	00ca      	lsls	r2, r1, #3
 800d292:	4610      	mov	r0, r2
 800d294:	4619      	mov	r1, r3
 800d296:	4603      	mov	r3, r0
 800d298:	4642      	mov	r2, r8
 800d29a:	189b      	adds	r3, r3, r2
 800d29c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d29e:	464b      	mov	r3, r9
 800d2a0:	460a      	mov	r2, r1
 800d2a2:	eb42 0303 	adc.w	r3, r2, r3
 800d2a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d2a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	663b      	str	r3, [r7, #96]	; 0x60
 800d2b2:	667a      	str	r2, [r7, #100]	; 0x64
 800d2b4:	f04f 0200 	mov.w	r2, #0
 800d2b8:	f04f 0300 	mov.w	r3, #0
 800d2bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d2c0:	4649      	mov	r1, r9
 800d2c2:	008b      	lsls	r3, r1, #2
 800d2c4:	4641      	mov	r1, r8
 800d2c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d2ca:	4641      	mov	r1, r8
 800d2cc:	008a      	lsls	r2, r1, #2
 800d2ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d2d2:	f7f3 fc5b 	bl	8000b8c <__aeabi_uldivmod>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	460b      	mov	r3, r1
 800d2da:	4b0d      	ldr	r3, [pc, #52]	; (800d310 <UART_SetConfig+0x4e4>)
 800d2dc:	fba3 1302 	umull	r1, r3, r3, r2
 800d2e0:	095b      	lsrs	r3, r3, #5
 800d2e2:	2164      	movs	r1, #100	; 0x64
 800d2e4:	fb01 f303 	mul.w	r3, r1, r3
 800d2e8:	1ad3      	subs	r3, r2, r3
 800d2ea:	011b      	lsls	r3, r3, #4
 800d2ec:	3332      	adds	r3, #50	; 0x32
 800d2ee:	4a08      	ldr	r2, [pc, #32]	; (800d310 <UART_SetConfig+0x4e4>)
 800d2f0:	fba2 2303 	umull	r2, r3, r2, r3
 800d2f4:	095b      	lsrs	r3, r3, #5
 800d2f6:	f003 020f 	and.w	r2, r3, #15
 800d2fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4422      	add	r2, r4
 800d302:	609a      	str	r2, [r3, #8]
}
 800d304:	bf00      	nop
 800d306:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d30a:	46bd      	mov	sp, r7
 800d30c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d310:	51eb851f 	.word	0x51eb851f

0800d314 <atoi>:
 800d314:	220a      	movs	r2, #10
 800d316:	2100      	movs	r1, #0
 800d318:	f000 b936 	b.w	800d588 <strtol>

0800d31c <malloc>:
 800d31c:	4b02      	ldr	r3, [pc, #8]	; (800d328 <malloc+0xc>)
 800d31e:	4601      	mov	r1, r0
 800d320:	6818      	ldr	r0, [r3, #0]
 800d322:	f000 b823 	b.w	800d36c <_malloc_r>
 800d326:	bf00      	nop
 800d328:	2000024c 	.word	0x2000024c

0800d32c <sbrk_aligned>:
 800d32c:	b570      	push	{r4, r5, r6, lr}
 800d32e:	4e0e      	ldr	r6, [pc, #56]	; (800d368 <sbrk_aligned+0x3c>)
 800d330:	460c      	mov	r4, r1
 800d332:	6831      	ldr	r1, [r6, #0]
 800d334:	4605      	mov	r5, r0
 800d336:	b911      	cbnz	r1, 800d33e <sbrk_aligned+0x12>
 800d338:	f000 fb5c 	bl	800d9f4 <_sbrk_r>
 800d33c:	6030      	str	r0, [r6, #0]
 800d33e:	4621      	mov	r1, r4
 800d340:	4628      	mov	r0, r5
 800d342:	f000 fb57 	bl	800d9f4 <_sbrk_r>
 800d346:	1c43      	adds	r3, r0, #1
 800d348:	d00a      	beq.n	800d360 <sbrk_aligned+0x34>
 800d34a:	1cc4      	adds	r4, r0, #3
 800d34c:	f024 0403 	bic.w	r4, r4, #3
 800d350:	42a0      	cmp	r0, r4
 800d352:	d007      	beq.n	800d364 <sbrk_aligned+0x38>
 800d354:	1a21      	subs	r1, r4, r0
 800d356:	4628      	mov	r0, r5
 800d358:	f000 fb4c 	bl	800d9f4 <_sbrk_r>
 800d35c:	3001      	adds	r0, #1
 800d35e:	d101      	bne.n	800d364 <sbrk_aligned+0x38>
 800d360:	f04f 34ff 	mov.w	r4, #4294967295
 800d364:	4620      	mov	r0, r4
 800d366:	bd70      	pop	{r4, r5, r6, pc}
 800d368:	20000ea4 	.word	0x20000ea4

0800d36c <_malloc_r>:
 800d36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d370:	1ccd      	adds	r5, r1, #3
 800d372:	f025 0503 	bic.w	r5, r5, #3
 800d376:	3508      	adds	r5, #8
 800d378:	2d0c      	cmp	r5, #12
 800d37a:	bf38      	it	cc
 800d37c:	250c      	movcc	r5, #12
 800d37e:	2d00      	cmp	r5, #0
 800d380:	4607      	mov	r7, r0
 800d382:	db01      	blt.n	800d388 <_malloc_r+0x1c>
 800d384:	42a9      	cmp	r1, r5
 800d386:	d905      	bls.n	800d394 <_malloc_r+0x28>
 800d388:	230c      	movs	r3, #12
 800d38a:	603b      	str	r3, [r7, #0]
 800d38c:	2600      	movs	r6, #0
 800d38e:	4630      	mov	r0, r6
 800d390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d394:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d468 <_malloc_r+0xfc>
 800d398:	f000 f868 	bl	800d46c <__malloc_lock>
 800d39c:	f8d8 3000 	ldr.w	r3, [r8]
 800d3a0:	461c      	mov	r4, r3
 800d3a2:	bb5c      	cbnz	r4, 800d3fc <_malloc_r+0x90>
 800d3a4:	4629      	mov	r1, r5
 800d3a6:	4638      	mov	r0, r7
 800d3a8:	f7ff ffc0 	bl	800d32c <sbrk_aligned>
 800d3ac:	1c43      	adds	r3, r0, #1
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	d155      	bne.n	800d45e <_malloc_r+0xf2>
 800d3b2:	f8d8 4000 	ldr.w	r4, [r8]
 800d3b6:	4626      	mov	r6, r4
 800d3b8:	2e00      	cmp	r6, #0
 800d3ba:	d145      	bne.n	800d448 <_malloc_r+0xdc>
 800d3bc:	2c00      	cmp	r4, #0
 800d3be:	d048      	beq.n	800d452 <_malloc_r+0xe6>
 800d3c0:	6823      	ldr	r3, [r4, #0]
 800d3c2:	4631      	mov	r1, r6
 800d3c4:	4638      	mov	r0, r7
 800d3c6:	eb04 0903 	add.w	r9, r4, r3
 800d3ca:	f000 fb13 	bl	800d9f4 <_sbrk_r>
 800d3ce:	4581      	cmp	r9, r0
 800d3d0:	d13f      	bne.n	800d452 <_malloc_r+0xe6>
 800d3d2:	6821      	ldr	r1, [r4, #0]
 800d3d4:	1a6d      	subs	r5, r5, r1
 800d3d6:	4629      	mov	r1, r5
 800d3d8:	4638      	mov	r0, r7
 800d3da:	f7ff ffa7 	bl	800d32c <sbrk_aligned>
 800d3de:	3001      	adds	r0, #1
 800d3e0:	d037      	beq.n	800d452 <_malloc_r+0xe6>
 800d3e2:	6823      	ldr	r3, [r4, #0]
 800d3e4:	442b      	add	r3, r5
 800d3e6:	6023      	str	r3, [r4, #0]
 800d3e8:	f8d8 3000 	ldr.w	r3, [r8]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d038      	beq.n	800d462 <_malloc_r+0xf6>
 800d3f0:	685a      	ldr	r2, [r3, #4]
 800d3f2:	42a2      	cmp	r2, r4
 800d3f4:	d12b      	bne.n	800d44e <_malloc_r+0xe2>
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	605a      	str	r2, [r3, #4]
 800d3fa:	e00f      	b.n	800d41c <_malloc_r+0xb0>
 800d3fc:	6822      	ldr	r2, [r4, #0]
 800d3fe:	1b52      	subs	r2, r2, r5
 800d400:	d41f      	bmi.n	800d442 <_malloc_r+0xd6>
 800d402:	2a0b      	cmp	r2, #11
 800d404:	d917      	bls.n	800d436 <_malloc_r+0xca>
 800d406:	1961      	adds	r1, r4, r5
 800d408:	42a3      	cmp	r3, r4
 800d40a:	6025      	str	r5, [r4, #0]
 800d40c:	bf18      	it	ne
 800d40e:	6059      	strne	r1, [r3, #4]
 800d410:	6863      	ldr	r3, [r4, #4]
 800d412:	bf08      	it	eq
 800d414:	f8c8 1000 	streq.w	r1, [r8]
 800d418:	5162      	str	r2, [r4, r5]
 800d41a:	604b      	str	r3, [r1, #4]
 800d41c:	4638      	mov	r0, r7
 800d41e:	f104 060b 	add.w	r6, r4, #11
 800d422:	f000 f829 	bl	800d478 <__malloc_unlock>
 800d426:	f026 0607 	bic.w	r6, r6, #7
 800d42a:	1d23      	adds	r3, r4, #4
 800d42c:	1af2      	subs	r2, r6, r3
 800d42e:	d0ae      	beq.n	800d38e <_malloc_r+0x22>
 800d430:	1b9b      	subs	r3, r3, r6
 800d432:	50a3      	str	r3, [r4, r2]
 800d434:	e7ab      	b.n	800d38e <_malloc_r+0x22>
 800d436:	42a3      	cmp	r3, r4
 800d438:	6862      	ldr	r2, [r4, #4]
 800d43a:	d1dd      	bne.n	800d3f8 <_malloc_r+0x8c>
 800d43c:	f8c8 2000 	str.w	r2, [r8]
 800d440:	e7ec      	b.n	800d41c <_malloc_r+0xb0>
 800d442:	4623      	mov	r3, r4
 800d444:	6864      	ldr	r4, [r4, #4]
 800d446:	e7ac      	b.n	800d3a2 <_malloc_r+0x36>
 800d448:	4634      	mov	r4, r6
 800d44a:	6876      	ldr	r6, [r6, #4]
 800d44c:	e7b4      	b.n	800d3b8 <_malloc_r+0x4c>
 800d44e:	4613      	mov	r3, r2
 800d450:	e7cc      	b.n	800d3ec <_malloc_r+0x80>
 800d452:	230c      	movs	r3, #12
 800d454:	603b      	str	r3, [r7, #0]
 800d456:	4638      	mov	r0, r7
 800d458:	f000 f80e 	bl	800d478 <__malloc_unlock>
 800d45c:	e797      	b.n	800d38e <_malloc_r+0x22>
 800d45e:	6025      	str	r5, [r4, #0]
 800d460:	e7dc      	b.n	800d41c <_malloc_r+0xb0>
 800d462:	605b      	str	r3, [r3, #4]
 800d464:	deff      	udf	#255	; 0xff
 800d466:	bf00      	nop
 800d468:	20000ea0 	.word	0x20000ea0

0800d46c <__malloc_lock>:
 800d46c:	4801      	ldr	r0, [pc, #4]	; (800d474 <__malloc_lock+0x8>)
 800d46e:	f000 bb0e 	b.w	800da8e <__retarget_lock_acquire_recursive>
 800d472:	bf00      	nop
 800d474:	20000fe8 	.word	0x20000fe8

0800d478 <__malloc_unlock>:
 800d478:	4801      	ldr	r0, [pc, #4]	; (800d480 <__malloc_unlock+0x8>)
 800d47a:	f000 bb09 	b.w	800da90 <__retarget_lock_release_recursive>
 800d47e:	bf00      	nop
 800d480:	20000fe8 	.word	0x20000fe8

0800d484 <_strtol_l.constprop.0>:
 800d484:	2b01      	cmp	r3, #1
 800d486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d48a:	d001      	beq.n	800d490 <_strtol_l.constprop.0+0xc>
 800d48c:	2b24      	cmp	r3, #36	; 0x24
 800d48e:	d906      	bls.n	800d49e <_strtol_l.constprop.0+0x1a>
 800d490:	f000 fad2 	bl	800da38 <__errno>
 800d494:	2316      	movs	r3, #22
 800d496:	6003      	str	r3, [r0, #0]
 800d498:	2000      	movs	r0, #0
 800d49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d49e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d584 <_strtol_l.constprop.0+0x100>
 800d4a2:	460d      	mov	r5, r1
 800d4a4:	462e      	mov	r6, r5
 800d4a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4aa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d4ae:	f017 0708 	ands.w	r7, r7, #8
 800d4b2:	d1f7      	bne.n	800d4a4 <_strtol_l.constprop.0+0x20>
 800d4b4:	2c2d      	cmp	r4, #45	; 0x2d
 800d4b6:	d132      	bne.n	800d51e <_strtol_l.constprop.0+0x9a>
 800d4b8:	782c      	ldrb	r4, [r5, #0]
 800d4ba:	2701      	movs	r7, #1
 800d4bc:	1cb5      	adds	r5, r6, #2
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d05b      	beq.n	800d57a <_strtol_l.constprop.0+0xf6>
 800d4c2:	2b10      	cmp	r3, #16
 800d4c4:	d109      	bne.n	800d4da <_strtol_l.constprop.0+0x56>
 800d4c6:	2c30      	cmp	r4, #48	; 0x30
 800d4c8:	d107      	bne.n	800d4da <_strtol_l.constprop.0+0x56>
 800d4ca:	782c      	ldrb	r4, [r5, #0]
 800d4cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d4d0:	2c58      	cmp	r4, #88	; 0x58
 800d4d2:	d14d      	bne.n	800d570 <_strtol_l.constprop.0+0xec>
 800d4d4:	786c      	ldrb	r4, [r5, #1]
 800d4d6:	2310      	movs	r3, #16
 800d4d8:	3502      	adds	r5, #2
 800d4da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d4de:	f108 38ff 	add.w	r8, r8, #4294967295
 800d4e2:	f04f 0e00 	mov.w	lr, #0
 800d4e6:	fbb8 f9f3 	udiv	r9, r8, r3
 800d4ea:	4676      	mov	r6, lr
 800d4ec:	fb03 8a19 	mls	sl, r3, r9, r8
 800d4f0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d4f4:	f1bc 0f09 	cmp.w	ip, #9
 800d4f8:	d816      	bhi.n	800d528 <_strtol_l.constprop.0+0xa4>
 800d4fa:	4664      	mov	r4, ip
 800d4fc:	42a3      	cmp	r3, r4
 800d4fe:	dd24      	ble.n	800d54a <_strtol_l.constprop.0+0xc6>
 800d500:	f1be 3fff 	cmp.w	lr, #4294967295
 800d504:	d008      	beq.n	800d518 <_strtol_l.constprop.0+0x94>
 800d506:	45b1      	cmp	r9, r6
 800d508:	d31c      	bcc.n	800d544 <_strtol_l.constprop.0+0xc0>
 800d50a:	d101      	bne.n	800d510 <_strtol_l.constprop.0+0x8c>
 800d50c:	45a2      	cmp	sl, r4
 800d50e:	db19      	blt.n	800d544 <_strtol_l.constprop.0+0xc0>
 800d510:	fb06 4603 	mla	r6, r6, r3, r4
 800d514:	f04f 0e01 	mov.w	lr, #1
 800d518:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d51c:	e7e8      	b.n	800d4f0 <_strtol_l.constprop.0+0x6c>
 800d51e:	2c2b      	cmp	r4, #43	; 0x2b
 800d520:	bf04      	itt	eq
 800d522:	782c      	ldrbeq	r4, [r5, #0]
 800d524:	1cb5      	addeq	r5, r6, #2
 800d526:	e7ca      	b.n	800d4be <_strtol_l.constprop.0+0x3a>
 800d528:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d52c:	f1bc 0f19 	cmp.w	ip, #25
 800d530:	d801      	bhi.n	800d536 <_strtol_l.constprop.0+0xb2>
 800d532:	3c37      	subs	r4, #55	; 0x37
 800d534:	e7e2      	b.n	800d4fc <_strtol_l.constprop.0+0x78>
 800d536:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d53a:	f1bc 0f19 	cmp.w	ip, #25
 800d53e:	d804      	bhi.n	800d54a <_strtol_l.constprop.0+0xc6>
 800d540:	3c57      	subs	r4, #87	; 0x57
 800d542:	e7db      	b.n	800d4fc <_strtol_l.constprop.0+0x78>
 800d544:	f04f 3eff 	mov.w	lr, #4294967295
 800d548:	e7e6      	b.n	800d518 <_strtol_l.constprop.0+0x94>
 800d54a:	f1be 3fff 	cmp.w	lr, #4294967295
 800d54e:	d105      	bne.n	800d55c <_strtol_l.constprop.0+0xd8>
 800d550:	2322      	movs	r3, #34	; 0x22
 800d552:	6003      	str	r3, [r0, #0]
 800d554:	4646      	mov	r6, r8
 800d556:	b942      	cbnz	r2, 800d56a <_strtol_l.constprop.0+0xe6>
 800d558:	4630      	mov	r0, r6
 800d55a:	e79e      	b.n	800d49a <_strtol_l.constprop.0+0x16>
 800d55c:	b107      	cbz	r7, 800d560 <_strtol_l.constprop.0+0xdc>
 800d55e:	4276      	negs	r6, r6
 800d560:	2a00      	cmp	r2, #0
 800d562:	d0f9      	beq.n	800d558 <_strtol_l.constprop.0+0xd4>
 800d564:	f1be 0f00 	cmp.w	lr, #0
 800d568:	d000      	beq.n	800d56c <_strtol_l.constprop.0+0xe8>
 800d56a:	1e69      	subs	r1, r5, #1
 800d56c:	6011      	str	r1, [r2, #0]
 800d56e:	e7f3      	b.n	800d558 <_strtol_l.constprop.0+0xd4>
 800d570:	2430      	movs	r4, #48	; 0x30
 800d572:	2b00      	cmp	r3, #0
 800d574:	d1b1      	bne.n	800d4da <_strtol_l.constprop.0+0x56>
 800d576:	2308      	movs	r3, #8
 800d578:	e7af      	b.n	800d4da <_strtol_l.constprop.0+0x56>
 800d57a:	2c30      	cmp	r4, #48	; 0x30
 800d57c:	d0a5      	beq.n	800d4ca <_strtol_l.constprop.0+0x46>
 800d57e:	230a      	movs	r3, #10
 800d580:	e7ab      	b.n	800d4da <_strtol_l.constprop.0+0x56>
 800d582:	bf00      	nop
 800d584:	0800ebc2 	.word	0x0800ebc2

0800d588 <strtol>:
 800d588:	4613      	mov	r3, r2
 800d58a:	460a      	mov	r2, r1
 800d58c:	4601      	mov	r1, r0
 800d58e:	4802      	ldr	r0, [pc, #8]	; (800d598 <strtol+0x10>)
 800d590:	6800      	ldr	r0, [r0, #0]
 800d592:	f7ff bf77 	b.w	800d484 <_strtol_l.constprop.0>
 800d596:	bf00      	nop
 800d598:	2000024c 	.word	0x2000024c

0800d59c <std>:
 800d59c:	2300      	movs	r3, #0
 800d59e:	b510      	push	{r4, lr}
 800d5a0:	4604      	mov	r4, r0
 800d5a2:	e9c0 3300 	strd	r3, r3, [r0]
 800d5a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d5aa:	6083      	str	r3, [r0, #8]
 800d5ac:	8181      	strh	r1, [r0, #12]
 800d5ae:	6643      	str	r3, [r0, #100]	; 0x64
 800d5b0:	81c2      	strh	r2, [r0, #14]
 800d5b2:	6183      	str	r3, [r0, #24]
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	2208      	movs	r2, #8
 800d5b8:	305c      	adds	r0, #92	; 0x5c
 800d5ba:	f000 f8f4 	bl	800d7a6 <memset>
 800d5be:	4b0d      	ldr	r3, [pc, #52]	; (800d5f4 <std+0x58>)
 800d5c0:	6263      	str	r3, [r4, #36]	; 0x24
 800d5c2:	4b0d      	ldr	r3, [pc, #52]	; (800d5f8 <std+0x5c>)
 800d5c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800d5c6:	4b0d      	ldr	r3, [pc, #52]	; (800d5fc <std+0x60>)
 800d5c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d5ca:	4b0d      	ldr	r3, [pc, #52]	; (800d600 <std+0x64>)
 800d5cc:	6323      	str	r3, [r4, #48]	; 0x30
 800d5ce:	4b0d      	ldr	r3, [pc, #52]	; (800d604 <std+0x68>)
 800d5d0:	6224      	str	r4, [r4, #32]
 800d5d2:	429c      	cmp	r4, r3
 800d5d4:	d006      	beq.n	800d5e4 <std+0x48>
 800d5d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d5da:	4294      	cmp	r4, r2
 800d5dc:	d002      	beq.n	800d5e4 <std+0x48>
 800d5de:	33d0      	adds	r3, #208	; 0xd0
 800d5e0:	429c      	cmp	r4, r3
 800d5e2:	d105      	bne.n	800d5f0 <std+0x54>
 800d5e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5ec:	f000 ba4e 	b.w	800da8c <__retarget_lock_init_recursive>
 800d5f0:	bd10      	pop	{r4, pc}
 800d5f2:	bf00      	nop
 800d5f4:	0800d721 	.word	0x0800d721
 800d5f8:	0800d743 	.word	0x0800d743
 800d5fc:	0800d77b 	.word	0x0800d77b
 800d600:	0800d79f 	.word	0x0800d79f
 800d604:	20000ea8 	.word	0x20000ea8

0800d608 <stdio_exit_handler>:
 800d608:	4a02      	ldr	r2, [pc, #8]	; (800d614 <stdio_exit_handler+0xc>)
 800d60a:	4903      	ldr	r1, [pc, #12]	; (800d618 <stdio_exit_handler+0x10>)
 800d60c:	4803      	ldr	r0, [pc, #12]	; (800d61c <stdio_exit_handler+0x14>)
 800d60e:	f000 b869 	b.w	800d6e4 <_fwalk_sglue>
 800d612:	bf00      	nop
 800d614:	200001f4 	.word	0x200001f4
 800d618:	0800dca1 	.word	0x0800dca1
 800d61c:	20000200 	.word	0x20000200

0800d620 <cleanup_stdio>:
 800d620:	6841      	ldr	r1, [r0, #4]
 800d622:	4b0c      	ldr	r3, [pc, #48]	; (800d654 <cleanup_stdio+0x34>)
 800d624:	4299      	cmp	r1, r3
 800d626:	b510      	push	{r4, lr}
 800d628:	4604      	mov	r4, r0
 800d62a:	d001      	beq.n	800d630 <cleanup_stdio+0x10>
 800d62c:	f000 fb38 	bl	800dca0 <_fflush_r>
 800d630:	68a1      	ldr	r1, [r4, #8]
 800d632:	4b09      	ldr	r3, [pc, #36]	; (800d658 <cleanup_stdio+0x38>)
 800d634:	4299      	cmp	r1, r3
 800d636:	d002      	beq.n	800d63e <cleanup_stdio+0x1e>
 800d638:	4620      	mov	r0, r4
 800d63a:	f000 fb31 	bl	800dca0 <_fflush_r>
 800d63e:	68e1      	ldr	r1, [r4, #12]
 800d640:	4b06      	ldr	r3, [pc, #24]	; (800d65c <cleanup_stdio+0x3c>)
 800d642:	4299      	cmp	r1, r3
 800d644:	d004      	beq.n	800d650 <cleanup_stdio+0x30>
 800d646:	4620      	mov	r0, r4
 800d648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d64c:	f000 bb28 	b.w	800dca0 <_fflush_r>
 800d650:	bd10      	pop	{r4, pc}
 800d652:	bf00      	nop
 800d654:	20000ea8 	.word	0x20000ea8
 800d658:	20000f10 	.word	0x20000f10
 800d65c:	20000f78 	.word	0x20000f78

0800d660 <global_stdio_init.part.0>:
 800d660:	b510      	push	{r4, lr}
 800d662:	4b0b      	ldr	r3, [pc, #44]	; (800d690 <global_stdio_init.part.0+0x30>)
 800d664:	4c0b      	ldr	r4, [pc, #44]	; (800d694 <global_stdio_init.part.0+0x34>)
 800d666:	4a0c      	ldr	r2, [pc, #48]	; (800d698 <global_stdio_init.part.0+0x38>)
 800d668:	601a      	str	r2, [r3, #0]
 800d66a:	4620      	mov	r0, r4
 800d66c:	2200      	movs	r2, #0
 800d66e:	2104      	movs	r1, #4
 800d670:	f7ff ff94 	bl	800d59c <std>
 800d674:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d678:	2201      	movs	r2, #1
 800d67a:	2109      	movs	r1, #9
 800d67c:	f7ff ff8e 	bl	800d59c <std>
 800d680:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d684:	2202      	movs	r2, #2
 800d686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d68a:	2112      	movs	r1, #18
 800d68c:	f7ff bf86 	b.w	800d59c <std>
 800d690:	20000fe0 	.word	0x20000fe0
 800d694:	20000ea8 	.word	0x20000ea8
 800d698:	0800d609 	.word	0x0800d609

0800d69c <__sfp_lock_acquire>:
 800d69c:	4801      	ldr	r0, [pc, #4]	; (800d6a4 <__sfp_lock_acquire+0x8>)
 800d69e:	f000 b9f6 	b.w	800da8e <__retarget_lock_acquire_recursive>
 800d6a2:	bf00      	nop
 800d6a4:	20000fe9 	.word	0x20000fe9

0800d6a8 <__sfp_lock_release>:
 800d6a8:	4801      	ldr	r0, [pc, #4]	; (800d6b0 <__sfp_lock_release+0x8>)
 800d6aa:	f000 b9f1 	b.w	800da90 <__retarget_lock_release_recursive>
 800d6ae:	bf00      	nop
 800d6b0:	20000fe9 	.word	0x20000fe9

0800d6b4 <__sinit>:
 800d6b4:	b510      	push	{r4, lr}
 800d6b6:	4604      	mov	r4, r0
 800d6b8:	f7ff fff0 	bl	800d69c <__sfp_lock_acquire>
 800d6bc:	6a23      	ldr	r3, [r4, #32]
 800d6be:	b11b      	cbz	r3, 800d6c8 <__sinit+0x14>
 800d6c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6c4:	f7ff bff0 	b.w	800d6a8 <__sfp_lock_release>
 800d6c8:	4b04      	ldr	r3, [pc, #16]	; (800d6dc <__sinit+0x28>)
 800d6ca:	6223      	str	r3, [r4, #32]
 800d6cc:	4b04      	ldr	r3, [pc, #16]	; (800d6e0 <__sinit+0x2c>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d1f5      	bne.n	800d6c0 <__sinit+0xc>
 800d6d4:	f7ff ffc4 	bl	800d660 <global_stdio_init.part.0>
 800d6d8:	e7f2      	b.n	800d6c0 <__sinit+0xc>
 800d6da:	bf00      	nop
 800d6dc:	0800d621 	.word	0x0800d621
 800d6e0:	20000fe0 	.word	0x20000fe0

0800d6e4 <_fwalk_sglue>:
 800d6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6e8:	4607      	mov	r7, r0
 800d6ea:	4688      	mov	r8, r1
 800d6ec:	4614      	mov	r4, r2
 800d6ee:	2600      	movs	r6, #0
 800d6f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d6f4:	f1b9 0901 	subs.w	r9, r9, #1
 800d6f8:	d505      	bpl.n	800d706 <_fwalk_sglue+0x22>
 800d6fa:	6824      	ldr	r4, [r4, #0]
 800d6fc:	2c00      	cmp	r4, #0
 800d6fe:	d1f7      	bne.n	800d6f0 <_fwalk_sglue+0xc>
 800d700:	4630      	mov	r0, r6
 800d702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d706:	89ab      	ldrh	r3, [r5, #12]
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d907      	bls.n	800d71c <_fwalk_sglue+0x38>
 800d70c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d710:	3301      	adds	r3, #1
 800d712:	d003      	beq.n	800d71c <_fwalk_sglue+0x38>
 800d714:	4629      	mov	r1, r5
 800d716:	4638      	mov	r0, r7
 800d718:	47c0      	blx	r8
 800d71a:	4306      	orrs	r6, r0
 800d71c:	3568      	adds	r5, #104	; 0x68
 800d71e:	e7e9      	b.n	800d6f4 <_fwalk_sglue+0x10>

0800d720 <__sread>:
 800d720:	b510      	push	{r4, lr}
 800d722:	460c      	mov	r4, r1
 800d724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d728:	f000 f93e 	bl	800d9a8 <_read_r>
 800d72c:	2800      	cmp	r0, #0
 800d72e:	bfab      	itete	ge
 800d730:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d732:	89a3      	ldrhlt	r3, [r4, #12]
 800d734:	181b      	addge	r3, r3, r0
 800d736:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d73a:	bfac      	ite	ge
 800d73c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d73e:	81a3      	strhlt	r3, [r4, #12]
 800d740:	bd10      	pop	{r4, pc}

0800d742 <__swrite>:
 800d742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d746:	461f      	mov	r7, r3
 800d748:	898b      	ldrh	r3, [r1, #12]
 800d74a:	05db      	lsls	r3, r3, #23
 800d74c:	4605      	mov	r5, r0
 800d74e:	460c      	mov	r4, r1
 800d750:	4616      	mov	r6, r2
 800d752:	d505      	bpl.n	800d760 <__swrite+0x1e>
 800d754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d758:	2302      	movs	r3, #2
 800d75a:	2200      	movs	r2, #0
 800d75c:	f000 f912 	bl	800d984 <_lseek_r>
 800d760:	89a3      	ldrh	r3, [r4, #12]
 800d762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d766:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d76a:	81a3      	strh	r3, [r4, #12]
 800d76c:	4632      	mov	r2, r6
 800d76e:	463b      	mov	r3, r7
 800d770:	4628      	mov	r0, r5
 800d772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d776:	f000 b94d 	b.w	800da14 <_write_r>

0800d77a <__sseek>:
 800d77a:	b510      	push	{r4, lr}
 800d77c:	460c      	mov	r4, r1
 800d77e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d782:	f000 f8ff 	bl	800d984 <_lseek_r>
 800d786:	1c43      	adds	r3, r0, #1
 800d788:	89a3      	ldrh	r3, [r4, #12]
 800d78a:	bf15      	itete	ne
 800d78c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d78e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d792:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d796:	81a3      	strheq	r3, [r4, #12]
 800d798:	bf18      	it	ne
 800d79a:	81a3      	strhne	r3, [r4, #12]
 800d79c:	bd10      	pop	{r4, pc}

0800d79e <__sclose>:
 800d79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7a2:	f000 b8df 	b.w	800d964 <_close_r>

0800d7a6 <memset>:
 800d7a6:	4402      	add	r2, r0
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d100      	bne.n	800d7b0 <memset+0xa>
 800d7ae:	4770      	bx	lr
 800d7b0:	f803 1b01 	strb.w	r1, [r3], #1
 800d7b4:	e7f9      	b.n	800d7aa <memset+0x4>

0800d7b6 <strncmp>:
 800d7b6:	b510      	push	{r4, lr}
 800d7b8:	b16a      	cbz	r2, 800d7d6 <strncmp+0x20>
 800d7ba:	3901      	subs	r1, #1
 800d7bc:	1884      	adds	r4, r0, r2
 800d7be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d103      	bne.n	800d7d2 <strncmp+0x1c>
 800d7ca:	42a0      	cmp	r0, r4
 800d7cc:	d001      	beq.n	800d7d2 <strncmp+0x1c>
 800d7ce:	2a00      	cmp	r2, #0
 800d7d0:	d1f5      	bne.n	800d7be <strncmp+0x8>
 800d7d2:	1ad0      	subs	r0, r2, r3
 800d7d4:	bd10      	pop	{r4, pc}
 800d7d6:	4610      	mov	r0, r2
 800d7d8:	e7fc      	b.n	800d7d4 <strncmp+0x1e>
	...

0800d7dc <strtok>:
 800d7dc:	4b16      	ldr	r3, [pc, #88]	; (800d838 <strtok+0x5c>)
 800d7de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d7e0:	681e      	ldr	r6, [r3, #0]
 800d7e2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800d7e4:	4605      	mov	r5, r0
 800d7e6:	b9fc      	cbnz	r4, 800d828 <strtok+0x4c>
 800d7e8:	2050      	movs	r0, #80	; 0x50
 800d7ea:	9101      	str	r1, [sp, #4]
 800d7ec:	f7ff fd96 	bl	800d31c <malloc>
 800d7f0:	9901      	ldr	r1, [sp, #4]
 800d7f2:	6470      	str	r0, [r6, #68]	; 0x44
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	b920      	cbnz	r0, 800d802 <strtok+0x26>
 800d7f8:	4b10      	ldr	r3, [pc, #64]	; (800d83c <strtok+0x60>)
 800d7fa:	4811      	ldr	r0, [pc, #68]	; (800d840 <strtok+0x64>)
 800d7fc:	215b      	movs	r1, #91	; 0x5b
 800d7fe:	f000 f95f 	bl	800dac0 <__assert_func>
 800d802:	e9c0 4400 	strd	r4, r4, [r0]
 800d806:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d80a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d80e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d812:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d816:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d81a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d81e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d822:	6184      	str	r4, [r0, #24]
 800d824:	7704      	strb	r4, [r0, #28]
 800d826:	6244      	str	r4, [r0, #36]	; 0x24
 800d828:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800d82a:	2301      	movs	r3, #1
 800d82c:	4628      	mov	r0, r5
 800d82e:	b002      	add	sp, #8
 800d830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d834:	f000 b806 	b.w	800d844 <__strtok_r>
 800d838:	2000024c 	.word	0x2000024c
 800d83c:	0800ecc2 	.word	0x0800ecc2
 800d840:	0800ecd9 	.word	0x0800ecd9

0800d844 <__strtok_r>:
 800d844:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d846:	b908      	cbnz	r0, 800d84c <__strtok_r+0x8>
 800d848:	6810      	ldr	r0, [r2, #0]
 800d84a:	b188      	cbz	r0, 800d870 <__strtok_r+0x2c>
 800d84c:	4604      	mov	r4, r0
 800d84e:	4620      	mov	r0, r4
 800d850:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d854:	460f      	mov	r7, r1
 800d856:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d85a:	b91e      	cbnz	r6, 800d864 <__strtok_r+0x20>
 800d85c:	b965      	cbnz	r5, 800d878 <__strtok_r+0x34>
 800d85e:	6015      	str	r5, [r2, #0]
 800d860:	4628      	mov	r0, r5
 800d862:	e005      	b.n	800d870 <__strtok_r+0x2c>
 800d864:	42b5      	cmp	r5, r6
 800d866:	d1f6      	bne.n	800d856 <__strtok_r+0x12>
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d1f0      	bne.n	800d84e <__strtok_r+0xa>
 800d86c:	6014      	str	r4, [r2, #0]
 800d86e:	7003      	strb	r3, [r0, #0]
 800d870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d872:	461c      	mov	r4, r3
 800d874:	e00c      	b.n	800d890 <__strtok_r+0x4c>
 800d876:	b915      	cbnz	r5, 800d87e <__strtok_r+0x3a>
 800d878:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d87c:	460e      	mov	r6, r1
 800d87e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d882:	42ab      	cmp	r3, r5
 800d884:	d1f7      	bne.n	800d876 <__strtok_r+0x32>
 800d886:	2b00      	cmp	r3, #0
 800d888:	d0f3      	beq.n	800d872 <__strtok_r+0x2e>
 800d88a:	2300      	movs	r3, #0
 800d88c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d890:	6014      	str	r4, [r2, #0]
 800d892:	e7ed      	b.n	800d870 <__strtok_r+0x2c>

0800d894 <strtok_r>:
 800d894:	2301      	movs	r3, #1
 800d896:	f7ff bfd5 	b.w	800d844 <__strtok_r>

0800d89a <_init_signal_r>:
 800d89a:	b538      	push	{r3, r4, r5, lr}
 800d89c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800d89e:	4604      	mov	r4, r0
 800d8a0:	b955      	cbnz	r5, 800d8b8 <_init_signal_r+0x1e>
 800d8a2:	2180      	movs	r1, #128	; 0x80
 800d8a4:	f7ff fd62 	bl	800d36c <_malloc_r>
 800d8a8:	63e0      	str	r0, [r4, #60]	; 0x3c
 800d8aa:	b138      	cbz	r0, 800d8bc <_init_signal_r+0x22>
 800d8ac:	1f03      	subs	r3, r0, #4
 800d8ae:	307c      	adds	r0, #124	; 0x7c
 800d8b0:	f843 5f04 	str.w	r5, [r3, #4]!
 800d8b4:	4283      	cmp	r3, r0
 800d8b6:	d1fb      	bne.n	800d8b0 <_init_signal_r+0x16>
 800d8b8:	2000      	movs	r0, #0
 800d8ba:	bd38      	pop	{r3, r4, r5, pc}
 800d8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c0:	e7fb      	b.n	800d8ba <_init_signal_r+0x20>

0800d8c2 <_signal_r>:
 800d8c2:	291f      	cmp	r1, #31
 800d8c4:	b570      	push	{r4, r5, r6, lr}
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	460d      	mov	r5, r1
 800d8ca:	4616      	mov	r6, r2
 800d8cc:	d904      	bls.n	800d8d8 <_signal_r+0x16>
 800d8ce:	2316      	movs	r3, #22
 800d8d0:	6003      	str	r3, [r0, #0]
 800d8d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d8d6:	e006      	b.n	800d8e6 <_signal_r+0x24>
 800d8d8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800d8da:	b12b      	cbz	r3, 800d8e8 <_signal_r+0x26>
 800d8dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d8de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d8e2:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 800d8e6:	bd70      	pop	{r4, r5, r6, pc}
 800d8e8:	f7ff ffd7 	bl	800d89a <_init_signal_r>
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	d0f5      	beq.n	800d8dc <_signal_r+0x1a>
 800d8f0:	e7ef      	b.n	800d8d2 <_signal_r+0x10>

0800d8f2 <_raise_r>:
 800d8f2:	291f      	cmp	r1, #31
 800d8f4:	b538      	push	{r3, r4, r5, lr}
 800d8f6:	4604      	mov	r4, r0
 800d8f8:	460d      	mov	r5, r1
 800d8fa:	d904      	bls.n	800d906 <_raise_r+0x14>
 800d8fc:	2316      	movs	r3, #22
 800d8fe:	6003      	str	r3, [r0, #0]
 800d900:	f04f 30ff 	mov.w	r0, #4294967295
 800d904:	bd38      	pop	{r3, r4, r5, pc}
 800d906:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d908:	b112      	cbz	r2, 800d910 <_raise_r+0x1e>
 800d90a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d90e:	b94b      	cbnz	r3, 800d924 <_raise_r+0x32>
 800d910:	4620      	mov	r0, r4
 800d912:	f000 f86d 	bl	800d9f0 <_getpid_r>
 800d916:	462a      	mov	r2, r5
 800d918:	4601      	mov	r1, r0
 800d91a:	4620      	mov	r0, r4
 800d91c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d920:	f000 b854 	b.w	800d9cc <_kill_r>
 800d924:	2b01      	cmp	r3, #1
 800d926:	d00a      	beq.n	800d93e <_raise_r+0x4c>
 800d928:	1c59      	adds	r1, r3, #1
 800d92a:	d103      	bne.n	800d934 <_raise_r+0x42>
 800d92c:	2316      	movs	r3, #22
 800d92e:	6003      	str	r3, [r0, #0]
 800d930:	2001      	movs	r0, #1
 800d932:	e7e7      	b.n	800d904 <_raise_r+0x12>
 800d934:	2400      	movs	r4, #0
 800d936:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d93a:	4628      	mov	r0, r5
 800d93c:	4798      	blx	r3
 800d93e:	2000      	movs	r0, #0
 800d940:	e7e0      	b.n	800d904 <_raise_r+0x12>
	...

0800d944 <raise>:
 800d944:	4b02      	ldr	r3, [pc, #8]	; (800d950 <raise+0xc>)
 800d946:	4601      	mov	r1, r0
 800d948:	6818      	ldr	r0, [r3, #0]
 800d94a:	f7ff bfd2 	b.w	800d8f2 <_raise_r>
 800d94e:	bf00      	nop
 800d950:	2000024c 	.word	0x2000024c

0800d954 <signal>:
 800d954:	4b02      	ldr	r3, [pc, #8]	; (800d960 <signal+0xc>)
 800d956:	460a      	mov	r2, r1
 800d958:	4601      	mov	r1, r0
 800d95a:	6818      	ldr	r0, [r3, #0]
 800d95c:	f7ff bfb1 	b.w	800d8c2 <_signal_r>
 800d960:	2000024c 	.word	0x2000024c

0800d964 <_close_r>:
 800d964:	b538      	push	{r3, r4, r5, lr}
 800d966:	4d06      	ldr	r5, [pc, #24]	; (800d980 <_close_r+0x1c>)
 800d968:	2300      	movs	r3, #0
 800d96a:	4604      	mov	r4, r0
 800d96c:	4608      	mov	r0, r1
 800d96e:	602b      	str	r3, [r5, #0]
 800d970:	f7fb f873 	bl	8008a5a <_close>
 800d974:	1c43      	adds	r3, r0, #1
 800d976:	d102      	bne.n	800d97e <_close_r+0x1a>
 800d978:	682b      	ldr	r3, [r5, #0]
 800d97a:	b103      	cbz	r3, 800d97e <_close_r+0x1a>
 800d97c:	6023      	str	r3, [r4, #0]
 800d97e:	bd38      	pop	{r3, r4, r5, pc}
 800d980:	20000fe4 	.word	0x20000fe4

0800d984 <_lseek_r>:
 800d984:	b538      	push	{r3, r4, r5, lr}
 800d986:	4d07      	ldr	r5, [pc, #28]	; (800d9a4 <_lseek_r+0x20>)
 800d988:	4604      	mov	r4, r0
 800d98a:	4608      	mov	r0, r1
 800d98c:	4611      	mov	r1, r2
 800d98e:	2200      	movs	r2, #0
 800d990:	602a      	str	r2, [r5, #0]
 800d992:	461a      	mov	r2, r3
 800d994:	f7fb f888 	bl	8008aa8 <_lseek>
 800d998:	1c43      	adds	r3, r0, #1
 800d99a:	d102      	bne.n	800d9a2 <_lseek_r+0x1e>
 800d99c:	682b      	ldr	r3, [r5, #0]
 800d99e:	b103      	cbz	r3, 800d9a2 <_lseek_r+0x1e>
 800d9a0:	6023      	str	r3, [r4, #0]
 800d9a2:	bd38      	pop	{r3, r4, r5, pc}
 800d9a4:	20000fe4 	.word	0x20000fe4

0800d9a8 <_read_r>:
 800d9a8:	b538      	push	{r3, r4, r5, lr}
 800d9aa:	4d07      	ldr	r5, [pc, #28]	; (800d9c8 <_read_r+0x20>)
 800d9ac:	4604      	mov	r4, r0
 800d9ae:	4608      	mov	r0, r1
 800d9b0:	4611      	mov	r1, r2
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	602a      	str	r2, [r5, #0]
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	f7fb f816 	bl	80089e8 <_read>
 800d9bc:	1c43      	adds	r3, r0, #1
 800d9be:	d102      	bne.n	800d9c6 <_read_r+0x1e>
 800d9c0:	682b      	ldr	r3, [r5, #0]
 800d9c2:	b103      	cbz	r3, 800d9c6 <_read_r+0x1e>
 800d9c4:	6023      	str	r3, [r4, #0]
 800d9c6:	bd38      	pop	{r3, r4, r5, pc}
 800d9c8:	20000fe4 	.word	0x20000fe4

0800d9cc <_kill_r>:
 800d9cc:	b538      	push	{r3, r4, r5, lr}
 800d9ce:	4d07      	ldr	r5, [pc, #28]	; (800d9ec <_kill_r+0x20>)
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	4608      	mov	r0, r1
 800d9d6:	4611      	mov	r1, r2
 800d9d8:	602b      	str	r3, [r5, #0]
 800d9da:	f7fa ffeb 	bl	80089b4 <_kill>
 800d9de:	1c43      	adds	r3, r0, #1
 800d9e0:	d102      	bne.n	800d9e8 <_kill_r+0x1c>
 800d9e2:	682b      	ldr	r3, [r5, #0]
 800d9e4:	b103      	cbz	r3, 800d9e8 <_kill_r+0x1c>
 800d9e6:	6023      	str	r3, [r4, #0]
 800d9e8:	bd38      	pop	{r3, r4, r5, pc}
 800d9ea:	bf00      	nop
 800d9ec:	20000fe4 	.word	0x20000fe4

0800d9f0 <_getpid_r>:
 800d9f0:	f7fa bfd8 	b.w	80089a4 <_getpid>

0800d9f4 <_sbrk_r>:
 800d9f4:	b538      	push	{r3, r4, r5, lr}
 800d9f6:	4d06      	ldr	r5, [pc, #24]	; (800da10 <_sbrk_r+0x1c>)
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	4604      	mov	r4, r0
 800d9fc:	4608      	mov	r0, r1
 800d9fe:	602b      	str	r3, [r5, #0]
 800da00:	f7fb f860 	bl	8008ac4 <_sbrk>
 800da04:	1c43      	adds	r3, r0, #1
 800da06:	d102      	bne.n	800da0e <_sbrk_r+0x1a>
 800da08:	682b      	ldr	r3, [r5, #0]
 800da0a:	b103      	cbz	r3, 800da0e <_sbrk_r+0x1a>
 800da0c:	6023      	str	r3, [r4, #0]
 800da0e:	bd38      	pop	{r3, r4, r5, pc}
 800da10:	20000fe4 	.word	0x20000fe4

0800da14 <_write_r>:
 800da14:	b538      	push	{r3, r4, r5, lr}
 800da16:	4d07      	ldr	r5, [pc, #28]	; (800da34 <_write_r+0x20>)
 800da18:	4604      	mov	r4, r0
 800da1a:	4608      	mov	r0, r1
 800da1c:	4611      	mov	r1, r2
 800da1e:	2200      	movs	r2, #0
 800da20:	602a      	str	r2, [r5, #0]
 800da22:	461a      	mov	r2, r3
 800da24:	f7fa fffd 	bl	8008a22 <_write>
 800da28:	1c43      	adds	r3, r0, #1
 800da2a:	d102      	bne.n	800da32 <_write_r+0x1e>
 800da2c:	682b      	ldr	r3, [r5, #0]
 800da2e:	b103      	cbz	r3, 800da32 <_write_r+0x1e>
 800da30:	6023      	str	r3, [r4, #0]
 800da32:	bd38      	pop	{r3, r4, r5, pc}
 800da34:	20000fe4 	.word	0x20000fe4

0800da38 <__errno>:
 800da38:	4b01      	ldr	r3, [pc, #4]	; (800da40 <__errno+0x8>)
 800da3a:	6818      	ldr	r0, [r3, #0]
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	2000024c 	.word	0x2000024c

0800da44 <__libc_init_array>:
 800da44:	b570      	push	{r4, r5, r6, lr}
 800da46:	4d0d      	ldr	r5, [pc, #52]	; (800da7c <__libc_init_array+0x38>)
 800da48:	4c0d      	ldr	r4, [pc, #52]	; (800da80 <__libc_init_array+0x3c>)
 800da4a:	1b64      	subs	r4, r4, r5
 800da4c:	10a4      	asrs	r4, r4, #2
 800da4e:	2600      	movs	r6, #0
 800da50:	42a6      	cmp	r6, r4
 800da52:	d109      	bne.n	800da68 <__libc_init_array+0x24>
 800da54:	4d0b      	ldr	r5, [pc, #44]	; (800da84 <__libc_init_array+0x40>)
 800da56:	4c0c      	ldr	r4, [pc, #48]	; (800da88 <__libc_init_array+0x44>)
 800da58:	f000 ffea 	bl	800ea30 <_init>
 800da5c:	1b64      	subs	r4, r4, r5
 800da5e:	10a4      	asrs	r4, r4, #2
 800da60:	2600      	movs	r6, #0
 800da62:	42a6      	cmp	r6, r4
 800da64:	d105      	bne.n	800da72 <__libc_init_array+0x2e>
 800da66:	bd70      	pop	{r4, r5, r6, pc}
 800da68:	f855 3b04 	ldr.w	r3, [r5], #4
 800da6c:	4798      	blx	r3
 800da6e:	3601      	adds	r6, #1
 800da70:	e7ee      	b.n	800da50 <__libc_init_array+0xc>
 800da72:	f855 3b04 	ldr.w	r3, [r5], #4
 800da76:	4798      	blx	r3
 800da78:	3601      	adds	r6, #1
 800da7a:	e7f2      	b.n	800da62 <__libc_init_array+0x1e>
 800da7c:	0800ede4 	.word	0x0800ede4
 800da80:	0800ede4 	.word	0x0800ede4
 800da84:	0800ede4 	.word	0x0800ede4
 800da88:	0800ede8 	.word	0x0800ede8

0800da8c <__retarget_lock_init_recursive>:
 800da8c:	4770      	bx	lr

0800da8e <__retarget_lock_acquire_recursive>:
 800da8e:	4770      	bx	lr

0800da90 <__retarget_lock_release_recursive>:
 800da90:	4770      	bx	lr

0800da92 <strcpy>:
 800da92:	4603      	mov	r3, r0
 800da94:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da98:	f803 2b01 	strb.w	r2, [r3], #1
 800da9c:	2a00      	cmp	r2, #0
 800da9e:	d1f9      	bne.n	800da94 <strcpy+0x2>
 800daa0:	4770      	bx	lr

0800daa2 <memcpy>:
 800daa2:	440a      	add	r2, r1
 800daa4:	4291      	cmp	r1, r2
 800daa6:	f100 33ff 	add.w	r3, r0, #4294967295
 800daaa:	d100      	bne.n	800daae <memcpy+0xc>
 800daac:	4770      	bx	lr
 800daae:	b510      	push	{r4, lr}
 800dab0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dab4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dab8:	4291      	cmp	r1, r2
 800daba:	d1f9      	bne.n	800dab0 <memcpy+0xe>
 800dabc:	bd10      	pop	{r4, pc}
	...

0800dac0 <__assert_func>:
 800dac0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dac2:	4614      	mov	r4, r2
 800dac4:	461a      	mov	r2, r3
 800dac6:	4b09      	ldr	r3, [pc, #36]	; (800daec <__assert_func+0x2c>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4605      	mov	r5, r0
 800dacc:	68d8      	ldr	r0, [r3, #12]
 800dace:	b14c      	cbz	r4, 800dae4 <__assert_func+0x24>
 800dad0:	4b07      	ldr	r3, [pc, #28]	; (800daf0 <__assert_func+0x30>)
 800dad2:	9100      	str	r1, [sp, #0]
 800dad4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dad8:	4906      	ldr	r1, [pc, #24]	; (800daf4 <__assert_func+0x34>)
 800dada:	462b      	mov	r3, r5
 800dadc:	f000 f908 	bl	800dcf0 <fiprintf>
 800dae0:	f000 f918 	bl	800dd14 <abort>
 800dae4:	4b04      	ldr	r3, [pc, #16]	; (800daf8 <__assert_func+0x38>)
 800dae6:	461c      	mov	r4, r3
 800dae8:	e7f3      	b.n	800dad2 <__assert_func+0x12>
 800daea:	bf00      	nop
 800daec:	2000024c 	.word	0x2000024c
 800daf0:	0800ed33 	.word	0x0800ed33
 800daf4:	0800ed40 	.word	0x0800ed40
 800daf8:	0800ed6e 	.word	0x0800ed6e

0800dafc <_free_r>:
 800dafc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dafe:	2900      	cmp	r1, #0
 800db00:	d044      	beq.n	800db8c <_free_r+0x90>
 800db02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db06:	9001      	str	r0, [sp, #4]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	f1a1 0404 	sub.w	r4, r1, #4
 800db0e:	bfb8      	it	lt
 800db10:	18e4      	addlt	r4, r4, r3
 800db12:	f7ff fcab 	bl	800d46c <__malloc_lock>
 800db16:	4a1e      	ldr	r2, [pc, #120]	; (800db90 <_free_r+0x94>)
 800db18:	9801      	ldr	r0, [sp, #4]
 800db1a:	6813      	ldr	r3, [r2, #0]
 800db1c:	b933      	cbnz	r3, 800db2c <_free_r+0x30>
 800db1e:	6063      	str	r3, [r4, #4]
 800db20:	6014      	str	r4, [r2, #0]
 800db22:	b003      	add	sp, #12
 800db24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db28:	f7ff bca6 	b.w	800d478 <__malloc_unlock>
 800db2c:	42a3      	cmp	r3, r4
 800db2e:	d908      	bls.n	800db42 <_free_r+0x46>
 800db30:	6825      	ldr	r5, [r4, #0]
 800db32:	1961      	adds	r1, r4, r5
 800db34:	428b      	cmp	r3, r1
 800db36:	bf01      	itttt	eq
 800db38:	6819      	ldreq	r1, [r3, #0]
 800db3a:	685b      	ldreq	r3, [r3, #4]
 800db3c:	1949      	addeq	r1, r1, r5
 800db3e:	6021      	streq	r1, [r4, #0]
 800db40:	e7ed      	b.n	800db1e <_free_r+0x22>
 800db42:	461a      	mov	r2, r3
 800db44:	685b      	ldr	r3, [r3, #4]
 800db46:	b10b      	cbz	r3, 800db4c <_free_r+0x50>
 800db48:	42a3      	cmp	r3, r4
 800db4a:	d9fa      	bls.n	800db42 <_free_r+0x46>
 800db4c:	6811      	ldr	r1, [r2, #0]
 800db4e:	1855      	adds	r5, r2, r1
 800db50:	42a5      	cmp	r5, r4
 800db52:	d10b      	bne.n	800db6c <_free_r+0x70>
 800db54:	6824      	ldr	r4, [r4, #0]
 800db56:	4421      	add	r1, r4
 800db58:	1854      	adds	r4, r2, r1
 800db5a:	42a3      	cmp	r3, r4
 800db5c:	6011      	str	r1, [r2, #0]
 800db5e:	d1e0      	bne.n	800db22 <_free_r+0x26>
 800db60:	681c      	ldr	r4, [r3, #0]
 800db62:	685b      	ldr	r3, [r3, #4]
 800db64:	6053      	str	r3, [r2, #4]
 800db66:	440c      	add	r4, r1
 800db68:	6014      	str	r4, [r2, #0]
 800db6a:	e7da      	b.n	800db22 <_free_r+0x26>
 800db6c:	d902      	bls.n	800db74 <_free_r+0x78>
 800db6e:	230c      	movs	r3, #12
 800db70:	6003      	str	r3, [r0, #0]
 800db72:	e7d6      	b.n	800db22 <_free_r+0x26>
 800db74:	6825      	ldr	r5, [r4, #0]
 800db76:	1961      	adds	r1, r4, r5
 800db78:	428b      	cmp	r3, r1
 800db7a:	bf04      	itt	eq
 800db7c:	6819      	ldreq	r1, [r3, #0]
 800db7e:	685b      	ldreq	r3, [r3, #4]
 800db80:	6063      	str	r3, [r4, #4]
 800db82:	bf04      	itt	eq
 800db84:	1949      	addeq	r1, r1, r5
 800db86:	6021      	streq	r1, [r4, #0]
 800db88:	6054      	str	r4, [r2, #4]
 800db8a:	e7ca      	b.n	800db22 <_free_r+0x26>
 800db8c:	b003      	add	sp, #12
 800db8e:	bd30      	pop	{r4, r5, pc}
 800db90:	20000ea0 	.word	0x20000ea0

0800db94 <__sflush_r>:
 800db94:	898a      	ldrh	r2, [r1, #12]
 800db96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db9a:	4605      	mov	r5, r0
 800db9c:	0710      	lsls	r0, r2, #28
 800db9e:	460c      	mov	r4, r1
 800dba0:	d458      	bmi.n	800dc54 <__sflush_r+0xc0>
 800dba2:	684b      	ldr	r3, [r1, #4]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	dc05      	bgt.n	800dbb4 <__sflush_r+0x20>
 800dba8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	dc02      	bgt.n	800dbb4 <__sflush_r+0x20>
 800dbae:	2000      	movs	r0, #0
 800dbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbb6:	2e00      	cmp	r6, #0
 800dbb8:	d0f9      	beq.n	800dbae <__sflush_r+0x1a>
 800dbba:	2300      	movs	r3, #0
 800dbbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dbc0:	682f      	ldr	r7, [r5, #0]
 800dbc2:	6a21      	ldr	r1, [r4, #32]
 800dbc4:	602b      	str	r3, [r5, #0]
 800dbc6:	d032      	beq.n	800dc2e <__sflush_r+0x9a>
 800dbc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dbca:	89a3      	ldrh	r3, [r4, #12]
 800dbcc:	075a      	lsls	r2, r3, #29
 800dbce:	d505      	bpl.n	800dbdc <__sflush_r+0x48>
 800dbd0:	6863      	ldr	r3, [r4, #4]
 800dbd2:	1ac0      	subs	r0, r0, r3
 800dbd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dbd6:	b10b      	cbz	r3, 800dbdc <__sflush_r+0x48>
 800dbd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dbda:	1ac0      	subs	r0, r0, r3
 800dbdc:	2300      	movs	r3, #0
 800dbde:	4602      	mov	r2, r0
 800dbe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbe2:	6a21      	ldr	r1, [r4, #32]
 800dbe4:	4628      	mov	r0, r5
 800dbe6:	47b0      	blx	r6
 800dbe8:	1c43      	adds	r3, r0, #1
 800dbea:	89a3      	ldrh	r3, [r4, #12]
 800dbec:	d106      	bne.n	800dbfc <__sflush_r+0x68>
 800dbee:	6829      	ldr	r1, [r5, #0]
 800dbf0:	291d      	cmp	r1, #29
 800dbf2:	d82b      	bhi.n	800dc4c <__sflush_r+0xb8>
 800dbf4:	4a29      	ldr	r2, [pc, #164]	; (800dc9c <__sflush_r+0x108>)
 800dbf6:	410a      	asrs	r2, r1
 800dbf8:	07d6      	lsls	r6, r2, #31
 800dbfa:	d427      	bmi.n	800dc4c <__sflush_r+0xb8>
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	6062      	str	r2, [r4, #4]
 800dc00:	04d9      	lsls	r1, r3, #19
 800dc02:	6922      	ldr	r2, [r4, #16]
 800dc04:	6022      	str	r2, [r4, #0]
 800dc06:	d504      	bpl.n	800dc12 <__sflush_r+0x7e>
 800dc08:	1c42      	adds	r2, r0, #1
 800dc0a:	d101      	bne.n	800dc10 <__sflush_r+0x7c>
 800dc0c:	682b      	ldr	r3, [r5, #0]
 800dc0e:	b903      	cbnz	r3, 800dc12 <__sflush_r+0x7e>
 800dc10:	6560      	str	r0, [r4, #84]	; 0x54
 800dc12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc14:	602f      	str	r7, [r5, #0]
 800dc16:	2900      	cmp	r1, #0
 800dc18:	d0c9      	beq.n	800dbae <__sflush_r+0x1a>
 800dc1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc1e:	4299      	cmp	r1, r3
 800dc20:	d002      	beq.n	800dc28 <__sflush_r+0x94>
 800dc22:	4628      	mov	r0, r5
 800dc24:	f7ff ff6a 	bl	800dafc <_free_r>
 800dc28:	2000      	movs	r0, #0
 800dc2a:	6360      	str	r0, [r4, #52]	; 0x34
 800dc2c:	e7c0      	b.n	800dbb0 <__sflush_r+0x1c>
 800dc2e:	2301      	movs	r3, #1
 800dc30:	4628      	mov	r0, r5
 800dc32:	47b0      	blx	r6
 800dc34:	1c41      	adds	r1, r0, #1
 800dc36:	d1c8      	bne.n	800dbca <__sflush_r+0x36>
 800dc38:	682b      	ldr	r3, [r5, #0]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d0c5      	beq.n	800dbca <__sflush_r+0x36>
 800dc3e:	2b1d      	cmp	r3, #29
 800dc40:	d001      	beq.n	800dc46 <__sflush_r+0xb2>
 800dc42:	2b16      	cmp	r3, #22
 800dc44:	d101      	bne.n	800dc4a <__sflush_r+0xb6>
 800dc46:	602f      	str	r7, [r5, #0]
 800dc48:	e7b1      	b.n	800dbae <__sflush_r+0x1a>
 800dc4a:	89a3      	ldrh	r3, [r4, #12]
 800dc4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc50:	81a3      	strh	r3, [r4, #12]
 800dc52:	e7ad      	b.n	800dbb0 <__sflush_r+0x1c>
 800dc54:	690f      	ldr	r7, [r1, #16]
 800dc56:	2f00      	cmp	r7, #0
 800dc58:	d0a9      	beq.n	800dbae <__sflush_r+0x1a>
 800dc5a:	0793      	lsls	r3, r2, #30
 800dc5c:	680e      	ldr	r6, [r1, #0]
 800dc5e:	bf08      	it	eq
 800dc60:	694b      	ldreq	r3, [r1, #20]
 800dc62:	600f      	str	r7, [r1, #0]
 800dc64:	bf18      	it	ne
 800dc66:	2300      	movne	r3, #0
 800dc68:	eba6 0807 	sub.w	r8, r6, r7
 800dc6c:	608b      	str	r3, [r1, #8]
 800dc6e:	f1b8 0f00 	cmp.w	r8, #0
 800dc72:	dd9c      	ble.n	800dbae <__sflush_r+0x1a>
 800dc74:	6a21      	ldr	r1, [r4, #32]
 800dc76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc78:	4643      	mov	r3, r8
 800dc7a:	463a      	mov	r2, r7
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	47b0      	blx	r6
 800dc80:	2800      	cmp	r0, #0
 800dc82:	dc06      	bgt.n	800dc92 <__sflush_r+0xfe>
 800dc84:	89a3      	ldrh	r3, [r4, #12]
 800dc86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc8a:	81a3      	strh	r3, [r4, #12]
 800dc8c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc90:	e78e      	b.n	800dbb0 <__sflush_r+0x1c>
 800dc92:	4407      	add	r7, r0
 800dc94:	eba8 0800 	sub.w	r8, r8, r0
 800dc98:	e7e9      	b.n	800dc6e <__sflush_r+0xda>
 800dc9a:	bf00      	nop
 800dc9c:	dfbffffe 	.word	0xdfbffffe

0800dca0 <_fflush_r>:
 800dca0:	b538      	push	{r3, r4, r5, lr}
 800dca2:	690b      	ldr	r3, [r1, #16]
 800dca4:	4605      	mov	r5, r0
 800dca6:	460c      	mov	r4, r1
 800dca8:	b913      	cbnz	r3, 800dcb0 <_fflush_r+0x10>
 800dcaa:	2500      	movs	r5, #0
 800dcac:	4628      	mov	r0, r5
 800dcae:	bd38      	pop	{r3, r4, r5, pc}
 800dcb0:	b118      	cbz	r0, 800dcba <_fflush_r+0x1a>
 800dcb2:	6a03      	ldr	r3, [r0, #32]
 800dcb4:	b90b      	cbnz	r3, 800dcba <_fflush_r+0x1a>
 800dcb6:	f7ff fcfd 	bl	800d6b4 <__sinit>
 800dcba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d0f3      	beq.n	800dcaa <_fflush_r+0xa>
 800dcc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dcc4:	07d0      	lsls	r0, r2, #31
 800dcc6:	d404      	bmi.n	800dcd2 <_fflush_r+0x32>
 800dcc8:	0599      	lsls	r1, r3, #22
 800dcca:	d402      	bmi.n	800dcd2 <_fflush_r+0x32>
 800dccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcce:	f7ff fede 	bl	800da8e <__retarget_lock_acquire_recursive>
 800dcd2:	4628      	mov	r0, r5
 800dcd4:	4621      	mov	r1, r4
 800dcd6:	f7ff ff5d 	bl	800db94 <__sflush_r>
 800dcda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dcdc:	07da      	lsls	r2, r3, #31
 800dcde:	4605      	mov	r5, r0
 800dce0:	d4e4      	bmi.n	800dcac <_fflush_r+0xc>
 800dce2:	89a3      	ldrh	r3, [r4, #12]
 800dce4:	059b      	lsls	r3, r3, #22
 800dce6:	d4e1      	bmi.n	800dcac <_fflush_r+0xc>
 800dce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcea:	f7ff fed1 	bl	800da90 <__retarget_lock_release_recursive>
 800dcee:	e7dd      	b.n	800dcac <_fflush_r+0xc>

0800dcf0 <fiprintf>:
 800dcf0:	b40e      	push	{r1, r2, r3}
 800dcf2:	b503      	push	{r0, r1, lr}
 800dcf4:	4601      	mov	r1, r0
 800dcf6:	ab03      	add	r3, sp, #12
 800dcf8:	4805      	ldr	r0, [pc, #20]	; (800dd10 <fiprintf+0x20>)
 800dcfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcfe:	6800      	ldr	r0, [r0, #0]
 800dd00:	9301      	str	r3, [sp, #4]
 800dd02:	f000 f837 	bl	800dd74 <_vfiprintf_r>
 800dd06:	b002      	add	sp, #8
 800dd08:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd0c:	b003      	add	sp, #12
 800dd0e:	4770      	bx	lr
 800dd10:	2000024c 	.word	0x2000024c

0800dd14 <abort>:
 800dd14:	b508      	push	{r3, lr}
 800dd16:	2006      	movs	r0, #6
 800dd18:	f7ff fe14 	bl	800d944 <raise>
 800dd1c:	2001      	movs	r0, #1
 800dd1e:	f7fa fe59 	bl	80089d4 <_exit>

0800dd22 <__sfputc_r>:
 800dd22:	6893      	ldr	r3, [r2, #8]
 800dd24:	3b01      	subs	r3, #1
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	b410      	push	{r4}
 800dd2a:	6093      	str	r3, [r2, #8]
 800dd2c:	da08      	bge.n	800dd40 <__sfputc_r+0x1e>
 800dd2e:	6994      	ldr	r4, [r2, #24]
 800dd30:	42a3      	cmp	r3, r4
 800dd32:	db01      	blt.n	800dd38 <__sfputc_r+0x16>
 800dd34:	290a      	cmp	r1, #10
 800dd36:	d103      	bne.n	800dd40 <__sfputc_r+0x1e>
 800dd38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd3c:	f000 bac4 	b.w	800e2c8 <__swbuf_r>
 800dd40:	6813      	ldr	r3, [r2, #0]
 800dd42:	1c58      	adds	r0, r3, #1
 800dd44:	6010      	str	r0, [r2, #0]
 800dd46:	7019      	strb	r1, [r3, #0]
 800dd48:	4608      	mov	r0, r1
 800dd4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd4e:	4770      	bx	lr

0800dd50 <__sfputs_r>:
 800dd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd52:	4606      	mov	r6, r0
 800dd54:	460f      	mov	r7, r1
 800dd56:	4614      	mov	r4, r2
 800dd58:	18d5      	adds	r5, r2, r3
 800dd5a:	42ac      	cmp	r4, r5
 800dd5c:	d101      	bne.n	800dd62 <__sfputs_r+0x12>
 800dd5e:	2000      	movs	r0, #0
 800dd60:	e007      	b.n	800dd72 <__sfputs_r+0x22>
 800dd62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd66:	463a      	mov	r2, r7
 800dd68:	4630      	mov	r0, r6
 800dd6a:	f7ff ffda 	bl	800dd22 <__sfputc_r>
 800dd6e:	1c43      	adds	r3, r0, #1
 800dd70:	d1f3      	bne.n	800dd5a <__sfputs_r+0xa>
 800dd72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dd74 <_vfiprintf_r>:
 800dd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd78:	460d      	mov	r5, r1
 800dd7a:	b09d      	sub	sp, #116	; 0x74
 800dd7c:	4614      	mov	r4, r2
 800dd7e:	4698      	mov	r8, r3
 800dd80:	4606      	mov	r6, r0
 800dd82:	b118      	cbz	r0, 800dd8c <_vfiprintf_r+0x18>
 800dd84:	6a03      	ldr	r3, [r0, #32]
 800dd86:	b90b      	cbnz	r3, 800dd8c <_vfiprintf_r+0x18>
 800dd88:	f7ff fc94 	bl	800d6b4 <__sinit>
 800dd8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd8e:	07d9      	lsls	r1, r3, #31
 800dd90:	d405      	bmi.n	800dd9e <_vfiprintf_r+0x2a>
 800dd92:	89ab      	ldrh	r3, [r5, #12]
 800dd94:	059a      	lsls	r2, r3, #22
 800dd96:	d402      	bmi.n	800dd9e <_vfiprintf_r+0x2a>
 800dd98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd9a:	f7ff fe78 	bl	800da8e <__retarget_lock_acquire_recursive>
 800dd9e:	89ab      	ldrh	r3, [r5, #12]
 800dda0:	071b      	lsls	r3, r3, #28
 800dda2:	d501      	bpl.n	800dda8 <_vfiprintf_r+0x34>
 800dda4:	692b      	ldr	r3, [r5, #16]
 800dda6:	b99b      	cbnz	r3, 800ddd0 <_vfiprintf_r+0x5c>
 800dda8:	4629      	mov	r1, r5
 800ddaa:	4630      	mov	r0, r6
 800ddac:	f000 faca 	bl	800e344 <__swsetup_r>
 800ddb0:	b170      	cbz	r0, 800ddd0 <_vfiprintf_r+0x5c>
 800ddb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddb4:	07dc      	lsls	r4, r3, #31
 800ddb6:	d504      	bpl.n	800ddc2 <_vfiprintf_r+0x4e>
 800ddb8:	f04f 30ff 	mov.w	r0, #4294967295
 800ddbc:	b01d      	add	sp, #116	; 0x74
 800ddbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc2:	89ab      	ldrh	r3, [r5, #12]
 800ddc4:	0598      	lsls	r0, r3, #22
 800ddc6:	d4f7      	bmi.n	800ddb8 <_vfiprintf_r+0x44>
 800ddc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddca:	f7ff fe61 	bl	800da90 <__retarget_lock_release_recursive>
 800ddce:	e7f3      	b.n	800ddb8 <_vfiprintf_r+0x44>
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	9309      	str	r3, [sp, #36]	; 0x24
 800ddd4:	2320      	movs	r3, #32
 800ddd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ddda:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddde:	2330      	movs	r3, #48	; 0x30
 800dde0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800df94 <_vfiprintf_r+0x220>
 800dde4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dde8:	f04f 0901 	mov.w	r9, #1
 800ddec:	4623      	mov	r3, r4
 800ddee:	469a      	mov	sl, r3
 800ddf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddf4:	b10a      	cbz	r2, 800ddfa <_vfiprintf_r+0x86>
 800ddf6:	2a25      	cmp	r2, #37	; 0x25
 800ddf8:	d1f9      	bne.n	800ddee <_vfiprintf_r+0x7a>
 800ddfa:	ebba 0b04 	subs.w	fp, sl, r4
 800ddfe:	d00b      	beq.n	800de18 <_vfiprintf_r+0xa4>
 800de00:	465b      	mov	r3, fp
 800de02:	4622      	mov	r2, r4
 800de04:	4629      	mov	r1, r5
 800de06:	4630      	mov	r0, r6
 800de08:	f7ff ffa2 	bl	800dd50 <__sfputs_r>
 800de0c:	3001      	adds	r0, #1
 800de0e:	f000 80a9 	beq.w	800df64 <_vfiprintf_r+0x1f0>
 800de12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de14:	445a      	add	r2, fp
 800de16:	9209      	str	r2, [sp, #36]	; 0x24
 800de18:	f89a 3000 	ldrb.w	r3, [sl]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	f000 80a1 	beq.w	800df64 <_vfiprintf_r+0x1f0>
 800de22:	2300      	movs	r3, #0
 800de24:	f04f 32ff 	mov.w	r2, #4294967295
 800de28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de2c:	f10a 0a01 	add.w	sl, sl, #1
 800de30:	9304      	str	r3, [sp, #16]
 800de32:	9307      	str	r3, [sp, #28]
 800de34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de38:	931a      	str	r3, [sp, #104]	; 0x68
 800de3a:	4654      	mov	r4, sl
 800de3c:	2205      	movs	r2, #5
 800de3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de42:	4854      	ldr	r0, [pc, #336]	; (800df94 <_vfiprintf_r+0x220>)
 800de44:	f7f2 f9d4 	bl	80001f0 <memchr>
 800de48:	9a04      	ldr	r2, [sp, #16]
 800de4a:	b9d8      	cbnz	r0, 800de84 <_vfiprintf_r+0x110>
 800de4c:	06d1      	lsls	r1, r2, #27
 800de4e:	bf44      	itt	mi
 800de50:	2320      	movmi	r3, #32
 800de52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de56:	0713      	lsls	r3, r2, #28
 800de58:	bf44      	itt	mi
 800de5a:	232b      	movmi	r3, #43	; 0x2b
 800de5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de60:	f89a 3000 	ldrb.w	r3, [sl]
 800de64:	2b2a      	cmp	r3, #42	; 0x2a
 800de66:	d015      	beq.n	800de94 <_vfiprintf_r+0x120>
 800de68:	9a07      	ldr	r2, [sp, #28]
 800de6a:	4654      	mov	r4, sl
 800de6c:	2000      	movs	r0, #0
 800de6e:	f04f 0c0a 	mov.w	ip, #10
 800de72:	4621      	mov	r1, r4
 800de74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de78:	3b30      	subs	r3, #48	; 0x30
 800de7a:	2b09      	cmp	r3, #9
 800de7c:	d94d      	bls.n	800df1a <_vfiprintf_r+0x1a6>
 800de7e:	b1b0      	cbz	r0, 800deae <_vfiprintf_r+0x13a>
 800de80:	9207      	str	r2, [sp, #28]
 800de82:	e014      	b.n	800deae <_vfiprintf_r+0x13a>
 800de84:	eba0 0308 	sub.w	r3, r0, r8
 800de88:	fa09 f303 	lsl.w	r3, r9, r3
 800de8c:	4313      	orrs	r3, r2
 800de8e:	9304      	str	r3, [sp, #16]
 800de90:	46a2      	mov	sl, r4
 800de92:	e7d2      	b.n	800de3a <_vfiprintf_r+0xc6>
 800de94:	9b03      	ldr	r3, [sp, #12]
 800de96:	1d19      	adds	r1, r3, #4
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	9103      	str	r1, [sp, #12]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	bfbb      	ittet	lt
 800dea0:	425b      	neglt	r3, r3
 800dea2:	f042 0202 	orrlt.w	r2, r2, #2
 800dea6:	9307      	strge	r3, [sp, #28]
 800dea8:	9307      	strlt	r3, [sp, #28]
 800deaa:	bfb8      	it	lt
 800deac:	9204      	strlt	r2, [sp, #16]
 800deae:	7823      	ldrb	r3, [r4, #0]
 800deb0:	2b2e      	cmp	r3, #46	; 0x2e
 800deb2:	d10c      	bne.n	800dece <_vfiprintf_r+0x15a>
 800deb4:	7863      	ldrb	r3, [r4, #1]
 800deb6:	2b2a      	cmp	r3, #42	; 0x2a
 800deb8:	d134      	bne.n	800df24 <_vfiprintf_r+0x1b0>
 800deba:	9b03      	ldr	r3, [sp, #12]
 800debc:	1d1a      	adds	r2, r3, #4
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	9203      	str	r2, [sp, #12]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	bfb8      	it	lt
 800dec6:	f04f 33ff 	movlt.w	r3, #4294967295
 800deca:	3402      	adds	r4, #2
 800decc:	9305      	str	r3, [sp, #20]
 800dece:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800dfa4 <_vfiprintf_r+0x230>
 800ded2:	7821      	ldrb	r1, [r4, #0]
 800ded4:	2203      	movs	r2, #3
 800ded6:	4650      	mov	r0, sl
 800ded8:	f7f2 f98a 	bl	80001f0 <memchr>
 800dedc:	b138      	cbz	r0, 800deee <_vfiprintf_r+0x17a>
 800dede:	9b04      	ldr	r3, [sp, #16]
 800dee0:	eba0 000a 	sub.w	r0, r0, sl
 800dee4:	2240      	movs	r2, #64	; 0x40
 800dee6:	4082      	lsls	r2, r0
 800dee8:	4313      	orrs	r3, r2
 800deea:	3401      	adds	r4, #1
 800deec:	9304      	str	r3, [sp, #16]
 800deee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800def2:	4829      	ldr	r0, [pc, #164]	; (800df98 <_vfiprintf_r+0x224>)
 800def4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800def8:	2206      	movs	r2, #6
 800defa:	f7f2 f979 	bl	80001f0 <memchr>
 800defe:	2800      	cmp	r0, #0
 800df00:	d03f      	beq.n	800df82 <_vfiprintf_r+0x20e>
 800df02:	4b26      	ldr	r3, [pc, #152]	; (800df9c <_vfiprintf_r+0x228>)
 800df04:	bb1b      	cbnz	r3, 800df4e <_vfiprintf_r+0x1da>
 800df06:	9b03      	ldr	r3, [sp, #12]
 800df08:	3307      	adds	r3, #7
 800df0a:	f023 0307 	bic.w	r3, r3, #7
 800df0e:	3308      	adds	r3, #8
 800df10:	9303      	str	r3, [sp, #12]
 800df12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df14:	443b      	add	r3, r7
 800df16:	9309      	str	r3, [sp, #36]	; 0x24
 800df18:	e768      	b.n	800ddec <_vfiprintf_r+0x78>
 800df1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800df1e:	460c      	mov	r4, r1
 800df20:	2001      	movs	r0, #1
 800df22:	e7a6      	b.n	800de72 <_vfiprintf_r+0xfe>
 800df24:	2300      	movs	r3, #0
 800df26:	3401      	adds	r4, #1
 800df28:	9305      	str	r3, [sp, #20]
 800df2a:	4619      	mov	r1, r3
 800df2c:	f04f 0c0a 	mov.w	ip, #10
 800df30:	4620      	mov	r0, r4
 800df32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df36:	3a30      	subs	r2, #48	; 0x30
 800df38:	2a09      	cmp	r2, #9
 800df3a:	d903      	bls.n	800df44 <_vfiprintf_r+0x1d0>
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d0c6      	beq.n	800dece <_vfiprintf_r+0x15a>
 800df40:	9105      	str	r1, [sp, #20]
 800df42:	e7c4      	b.n	800dece <_vfiprintf_r+0x15a>
 800df44:	fb0c 2101 	mla	r1, ip, r1, r2
 800df48:	4604      	mov	r4, r0
 800df4a:	2301      	movs	r3, #1
 800df4c:	e7f0      	b.n	800df30 <_vfiprintf_r+0x1bc>
 800df4e:	ab03      	add	r3, sp, #12
 800df50:	9300      	str	r3, [sp, #0]
 800df52:	462a      	mov	r2, r5
 800df54:	4b12      	ldr	r3, [pc, #72]	; (800dfa0 <_vfiprintf_r+0x22c>)
 800df56:	a904      	add	r1, sp, #16
 800df58:	4630      	mov	r0, r6
 800df5a:	f3af 8000 	nop.w
 800df5e:	4607      	mov	r7, r0
 800df60:	1c78      	adds	r0, r7, #1
 800df62:	d1d6      	bne.n	800df12 <_vfiprintf_r+0x19e>
 800df64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df66:	07d9      	lsls	r1, r3, #31
 800df68:	d405      	bmi.n	800df76 <_vfiprintf_r+0x202>
 800df6a:	89ab      	ldrh	r3, [r5, #12]
 800df6c:	059a      	lsls	r2, r3, #22
 800df6e:	d402      	bmi.n	800df76 <_vfiprintf_r+0x202>
 800df70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df72:	f7ff fd8d 	bl	800da90 <__retarget_lock_release_recursive>
 800df76:	89ab      	ldrh	r3, [r5, #12]
 800df78:	065b      	lsls	r3, r3, #25
 800df7a:	f53f af1d 	bmi.w	800ddb8 <_vfiprintf_r+0x44>
 800df7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df80:	e71c      	b.n	800ddbc <_vfiprintf_r+0x48>
 800df82:	ab03      	add	r3, sp, #12
 800df84:	9300      	str	r3, [sp, #0]
 800df86:	462a      	mov	r2, r5
 800df88:	4b05      	ldr	r3, [pc, #20]	; (800dfa0 <_vfiprintf_r+0x22c>)
 800df8a:	a904      	add	r1, sp, #16
 800df8c:	4630      	mov	r0, r6
 800df8e:	f000 f879 	bl	800e084 <_printf_i>
 800df92:	e7e4      	b.n	800df5e <_vfiprintf_r+0x1ea>
 800df94:	0800ed6f 	.word	0x0800ed6f
 800df98:	0800ed79 	.word	0x0800ed79
 800df9c:	00000000 	.word	0x00000000
 800dfa0:	0800dd51 	.word	0x0800dd51
 800dfa4:	0800ed75 	.word	0x0800ed75

0800dfa8 <_printf_common>:
 800dfa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfac:	4616      	mov	r6, r2
 800dfae:	4699      	mov	r9, r3
 800dfb0:	688a      	ldr	r2, [r1, #8]
 800dfb2:	690b      	ldr	r3, [r1, #16]
 800dfb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	bfb8      	it	lt
 800dfbc:	4613      	movlt	r3, r2
 800dfbe:	6033      	str	r3, [r6, #0]
 800dfc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dfc4:	4607      	mov	r7, r0
 800dfc6:	460c      	mov	r4, r1
 800dfc8:	b10a      	cbz	r2, 800dfce <_printf_common+0x26>
 800dfca:	3301      	adds	r3, #1
 800dfcc:	6033      	str	r3, [r6, #0]
 800dfce:	6823      	ldr	r3, [r4, #0]
 800dfd0:	0699      	lsls	r1, r3, #26
 800dfd2:	bf42      	ittt	mi
 800dfd4:	6833      	ldrmi	r3, [r6, #0]
 800dfd6:	3302      	addmi	r3, #2
 800dfd8:	6033      	strmi	r3, [r6, #0]
 800dfda:	6825      	ldr	r5, [r4, #0]
 800dfdc:	f015 0506 	ands.w	r5, r5, #6
 800dfe0:	d106      	bne.n	800dff0 <_printf_common+0x48>
 800dfe2:	f104 0a19 	add.w	sl, r4, #25
 800dfe6:	68e3      	ldr	r3, [r4, #12]
 800dfe8:	6832      	ldr	r2, [r6, #0]
 800dfea:	1a9b      	subs	r3, r3, r2
 800dfec:	42ab      	cmp	r3, r5
 800dfee:	dc26      	bgt.n	800e03e <_printf_common+0x96>
 800dff0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dff4:	1e13      	subs	r3, r2, #0
 800dff6:	6822      	ldr	r2, [r4, #0]
 800dff8:	bf18      	it	ne
 800dffa:	2301      	movne	r3, #1
 800dffc:	0692      	lsls	r2, r2, #26
 800dffe:	d42b      	bmi.n	800e058 <_printf_common+0xb0>
 800e000:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e004:	4649      	mov	r1, r9
 800e006:	4638      	mov	r0, r7
 800e008:	47c0      	blx	r8
 800e00a:	3001      	adds	r0, #1
 800e00c:	d01e      	beq.n	800e04c <_printf_common+0xa4>
 800e00e:	6823      	ldr	r3, [r4, #0]
 800e010:	6922      	ldr	r2, [r4, #16]
 800e012:	f003 0306 	and.w	r3, r3, #6
 800e016:	2b04      	cmp	r3, #4
 800e018:	bf02      	ittt	eq
 800e01a:	68e5      	ldreq	r5, [r4, #12]
 800e01c:	6833      	ldreq	r3, [r6, #0]
 800e01e:	1aed      	subeq	r5, r5, r3
 800e020:	68a3      	ldr	r3, [r4, #8]
 800e022:	bf0c      	ite	eq
 800e024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e028:	2500      	movne	r5, #0
 800e02a:	4293      	cmp	r3, r2
 800e02c:	bfc4      	itt	gt
 800e02e:	1a9b      	subgt	r3, r3, r2
 800e030:	18ed      	addgt	r5, r5, r3
 800e032:	2600      	movs	r6, #0
 800e034:	341a      	adds	r4, #26
 800e036:	42b5      	cmp	r5, r6
 800e038:	d11a      	bne.n	800e070 <_printf_common+0xc8>
 800e03a:	2000      	movs	r0, #0
 800e03c:	e008      	b.n	800e050 <_printf_common+0xa8>
 800e03e:	2301      	movs	r3, #1
 800e040:	4652      	mov	r2, sl
 800e042:	4649      	mov	r1, r9
 800e044:	4638      	mov	r0, r7
 800e046:	47c0      	blx	r8
 800e048:	3001      	adds	r0, #1
 800e04a:	d103      	bne.n	800e054 <_printf_common+0xac>
 800e04c:	f04f 30ff 	mov.w	r0, #4294967295
 800e050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e054:	3501      	adds	r5, #1
 800e056:	e7c6      	b.n	800dfe6 <_printf_common+0x3e>
 800e058:	18e1      	adds	r1, r4, r3
 800e05a:	1c5a      	adds	r2, r3, #1
 800e05c:	2030      	movs	r0, #48	; 0x30
 800e05e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e062:	4422      	add	r2, r4
 800e064:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e068:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e06c:	3302      	adds	r3, #2
 800e06e:	e7c7      	b.n	800e000 <_printf_common+0x58>
 800e070:	2301      	movs	r3, #1
 800e072:	4622      	mov	r2, r4
 800e074:	4649      	mov	r1, r9
 800e076:	4638      	mov	r0, r7
 800e078:	47c0      	blx	r8
 800e07a:	3001      	adds	r0, #1
 800e07c:	d0e6      	beq.n	800e04c <_printf_common+0xa4>
 800e07e:	3601      	adds	r6, #1
 800e080:	e7d9      	b.n	800e036 <_printf_common+0x8e>
	...

0800e084 <_printf_i>:
 800e084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e088:	7e0f      	ldrb	r7, [r1, #24]
 800e08a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e08c:	2f78      	cmp	r7, #120	; 0x78
 800e08e:	4691      	mov	r9, r2
 800e090:	4680      	mov	r8, r0
 800e092:	460c      	mov	r4, r1
 800e094:	469a      	mov	sl, r3
 800e096:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e09a:	d807      	bhi.n	800e0ac <_printf_i+0x28>
 800e09c:	2f62      	cmp	r7, #98	; 0x62
 800e09e:	d80a      	bhi.n	800e0b6 <_printf_i+0x32>
 800e0a0:	2f00      	cmp	r7, #0
 800e0a2:	f000 80d4 	beq.w	800e24e <_printf_i+0x1ca>
 800e0a6:	2f58      	cmp	r7, #88	; 0x58
 800e0a8:	f000 80c0 	beq.w	800e22c <_printf_i+0x1a8>
 800e0ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e0b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e0b4:	e03a      	b.n	800e12c <_printf_i+0xa8>
 800e0b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e0ba:	2b15      	cmp	r3, #21
 800e0bc:	d8f6      	bhi.n	800e0ac <_printf_i+0x28>
 800e0be:	a101      	add	r1, pc, #4	; (adr r1, 800e0c4 <_printf_i+0x40>)
 800e0c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e0c4:	0800e11d 	.word	0x0800e11d
 800e0c8:	0800e131 	.word	0x0800e131
 800e0cc:	0800e0ad 	.word	0x0800e0ad
 800e0d0:	0800e0ad 	.word	0x0800e0ad
 800e0d4:	0800e0ad 	.word	0x0800e0ad
 800e0d8:	0800e0ad 	.word	0x0800e0ad
 800e0dc:	0800e131 	.word	0x0800e131
 800e0e0:	0800e0ad 	.word	0x0800e0ad
 800e0e4:	0800e0ad 	.word	0x0800e0ad
 800e0e8:	0800e0ad 	.word	0x0800e0ad
 800e0ec:	0800e0ad 	.word	0x0800e0ad
 800e0f0:	0800e235 	.word	0x0800e235
 800e0f4:	0800e15d 	.word	0x0800e15d
 800e0f8:	0800e1ef 	.word	0x0800e1ef
 800e0fc:	0800e0ad 	.word	0x0800e0ad
 800e100:	0800e0ad 	.word	0x0800e0ad
 800e104:	0800e257 	.word	0x0800e257
 800e108:	0800e0ad 	.word	0x0800e0ad
 800e10c:	0800e15d 	.word	0x0800e15d
 800e110:	0800e0ad 	.word	0x0800e0ad
 800e114:	0800e0ad 	.word	0x0800e0ad
 800e118:	0800e1f7 	.word	0x0800e1f7
 800e11c:	682b      	ldr	r3, [r5, #0]
 800e11e:	1d1a      	adds	r2, r3, #4
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	602a      	str	r2, [r5, #0]
 800e124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e12c:	2301      	movs	r3, #1
 800e12e:	e09f      	b.n	800e270 <_printf_i+0x1ec>
 800e130:	6820      	ldr	r0, [r4, #0]
 800e132:	682b      	ldr	r3, [r5, #0]
 800e134:	0607      	lsls	r7, r0, #24
 800e136:	f103 0104 	add.w	r1, r3, #4
 800e13a:	6029      	str	r1, [r5, #0]
 800e13c:	d501      	bpl.n	800e142 <_printf_i+0xbe>
 800e13e:	681e      	ldr	r6, [r3, #0]
 800e140:	e003      	b.n	800e14a <_printf_i+0xc6>
 800e142:	0646      	lsls	r6, r0, #25
 800e144:	d5fb      	bpl.n	800e13e <_printf_i+0xba>
 800e146:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e14a:	2e00      	cmp	r6, #0
 800e14c:	da03      	bge.n	800e156 <_printf_i+0xd2>
 800e14e:	232d      	movs	r3, #45	; 0x2d
 800e150:	4276      	negs	r6, r6
 800e152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e156:	485a      	ldr	r0, [pc, #360]	; (800e2c0 <_printf_i+0x23c>)
 800e158:	230a      	movs	r3, #10
 800e15a:	e012      	b.n	800e182 <_printf_i+0xfe>
 800e15c:	682b      	ldr	r3, [r5, #0]
 800e15e:	6820      	ldr	r0, [r4, #0]
 800e160:	1d19      	adds	r1, r3, #4
 800e162:	6029      	str	r1, [r5, #0]
 800e164:	0605      	lsls	r5, r0, #24
 800e166:	d501      	bpl.n	800e16c <_printf_i+0xe8>
 800e168:	681e      	ldr	r6, [r3, #0]
 800e16a:	e002      	b.n	800e172 <_printf_i+0xee>
 800e16c:	0641      	lsls	r1, r0, #25
 800e16e:	d5fb      	bpl.n	800e168 <_printf_i+0xe4>
 800e170:	881e      	ldrh	r6, [r3, #0]
 800e172:	4853      	ldr	r0, [pc, #332]	; (800e2c0 <_printf_i+0x23c>)
 800e174:	2f6f      	cmp	r7, #111	; 0x6f
 800e176:	bf0c      	ite	eq
 800e178:	2308      	moveq	r3, #8
 800e17a:	230a      	movne	r3, #10
 800e17c:	2100      	movs	r1, #0
 800e17e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e182:	6865      	ldr	r5, [r4, #4]
 800e184:	60a5      	str	r5, [r4, #8]
 800e186:	2d00      	cmp	r5, #0
 800e188:	bfa2      	ittt	ge
 800e18a:	6821      	ldrge	r1, [r4, #0]
 800e18c:	f021 0104 	bicge.w	r1, r1, #4
 800e190:	6021      	strge	r1, [r4, #0]
 800e192:	b90e      	cbnz	r6, 800e198 <_printf_i+0x114>
 800e194:	2d00      	cmp	r5, #0
 800e196:	d04b      	beq.n	800e230 <_printf_i+0x1ac>
 800e198:	4615      	mov	r5, r2
 800e19a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e19e:	fb03 6711 	mls	r7, r3, r1, r6
 800e1a2:	5dc7      	ldrb	r7, [r0, r7]
 800e1a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e1a8:	4637      	mov	r7, r6
 800e1aa:	42bb      	cmp	r3, r7
 800e1ac:	460e      	mov	r6, r1
 800e1ae:	d9f4      	bls.n	800e19a <_printf_i+0x116>
 800e1b0:	2b08      	cmp	r3, #8
 800e1b2:	d10b      	bne.n	800e1cc <_printf_i+0x148>
 800e1b4:	6823      	ldr	r3, [r4, #0]
 800e1b6:	07de      	lsls	r6, r3, #31
 800e1b8:	d508      	bpl.n	800e1cc <_printf_i+0x148>
 800e1ba:	6923      	ldr	r3, [r4, #16]
 800e1bc:	6861      	ldr	r1, [r4, #4]
 800e1be:	4299      	cmp	r1, r3
 800e1c0:	bfde      	ittt	le
 800e1c2:	2330      	movle	r3, #48	; 0x30
 800e1c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e1c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e1cc:	1b52      	subs	r2, r2, r5
 800e1ce:	6122      	str	r2, [r4, #16]
 800e1d0:	f8cd a000 	str.w	sl, [sp]
 800e1d4:	464b      	mov	r3, r9
 800e1d6:	aa03      	add	r2, sp, #12
 800e1d8:	4621      	mov	r1, r4
 800e1da:	4640      	mov	r0, r8
 800e1dc:	f7ff fee4 	bl	800dfa8 <_printf_common>
 800e1e0:	3001      	adds	r0, #1
 800e1e2:	d14a      	bne.n	800e27a <_printf_i+0x1f6>
 800e1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e1e8:	b004      	add	sp, #16
 800e1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1ee:	6823      	ldr	r3, [r4, #0]
 800e1f0:	f043 0320 	orr.w	r3, r3, #32
 800e1f4:	6023      	str	r3, [r4, #0]
 800e1f6:	4833      	ldr	r0, [pc, #204]	; (800e2c4 <_printf_i+0x240>)
 800e1f8:	2778      	movs	r7, #120	; 0x78
 800e1fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e1fe:	6823      	ldr	r3, [r4, #0]
 800e200:	6829      	ldr	r1, [r5, #0]
 800e202:	061f      	lsls	r7, r3, #24
 800e204:	f851 6b04 	ldr.w	r6, [r1], #4
 800e208:	d402      	bmi.n	800e210 <_printf_i+0x18c>
 800e20a:	065f      	lsls	r7, r3, #25
 800e20c:	bf48      	it	mi
 800e20e:	b2b6      	uxthmi	r6, r6
 800e210:	07df      	lsls	r7, r3, #31
 800e212:	bf48      	it	mi
 800e214:	f043 0320 	orrmi.w	r3, r3, #32
 800e218:	6029      	str	r1, [r5, #0]
 800e21a:	bf48      	it	mi
 800e21c:	6023      	strmi	r3, [r4, #0]
 800e21e:	b91e      	cbnz	r6, 800e228 <_printf_i+0x1a4>
 800e220:	6823      	ldr	r3, [r4, #0]
 800e222:	f023 0320 	bic.w	r3, r3, #32
 800e226:	6023      	str	r3, [r4, #0]
 800e228:	2310      	movs	r3, #16
 800e22a:	e7a7      	b.n	800e17c <_printf_i+0xf8>
 800e22c:	4824      	ldr	r0, [pc, #144]	; (800e2c0 <_printf_i+0x23c>)
 800e22e:	e7e4      	b.n	800e1fa <_printf_i+0x176>
 800e230:	4615      	mov	r5, r2
 800e232:	e7bd      	b.n	800e1b0 <_printf_i+0x12c>
 800e234:	682b      	ldr	r3, [r5, #0]
 800e236:	6826      	ldr	r6, [r4, #0]
 800e238:	6961      	ldr	r1, [r4, #20]
 800e23a:	1d18      	adds	r0, r3, #4
 800e23c:	6028      	str	r0, [r5, #0]
 800e23e:	0635      	lsls	r5, r6, #24
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	d501      	bpl.n	800e248 <_printf_i+0x1c4>
 800e244:	6019      	str	r1, [r3, #0]
 800e246:	e002      	b.n	800e24e <_printf_i+0x1ca>
 800e248:	0670      	lsls	r0, r6, #25
 800e24a:	d5fb      	bpl.n	800e244 <_printf_i+0x1c0>
 800e24c:	8019      	strh	r1, [r3, #0]
 800e24e:	2300      	movs	r3, #0
 800e250:	6123      	str	r3, [r4, #16]
 800e252:	4615      	mov	r5, r2
 800e254:	e7bc      	b.n	800e1d0 <_printf_i+0x14c>
 800e256:	682b      	ldr	r3, [r5, #0]
 800e258:	1d1a      	adds	r2, r3, #4
 800e25a:	602a      	str	r2, [r5, #0]
 800e25c:	681d      	ldr	r5, [r3, #0]
 800e25e:	6862      	ldr	r2, [r4, #4]
 800e260:	2100      	movs	r1, #0
 800e262:	4628      	mov	r0, r5
 800e264:	f7f1 ffc4 	bl	80001f0 <memchr>
 800e268:	b108      	cbz	r0, 800e26e <_printf_i+0x1ea>
 800e26a:	1b40      	subs	r0, r0, r5
 800e26c:	6060      	str	r0, [r4, #4]
 800e26e:	6863      	ldr	r3, [r4, #4]
 800e270:	6123      	str	r3, [r4, #16]
 800e272:	2300      	movs	r3, #0
 800e274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e278:	e7aa      	b.n	800e1d0 <_printf_i+0x14c>
 800e27a:	6923      	ldr	r3, [r4, #16]
 800e27c:	462a      	mov	r2, r5
 800e27e:	4649      	mov	r1, r9
 800e280:	4640      	mov	r0, r8
 800e282:	47d0      	blx	sl
 800e284:	3001      	adds	r0, #1
 800e286:	d0ad      	beq.n	800e1e4 <_printf_i+0x160>
 800e288:	6823      	ldr	r3, [r4, #0]
 800e28a:	079b      	lsls	r3, r3, #30
 800e28c:	d413      	bmi.n	800e2b6 <_printf_i+0x232>
 800e28e:	68e0      	ldr	r0, [r4, #12]
 800e290:	9b03      	ldr	r3, [sp, #12]
 800e292:	4298      	cmp	r0, r3
 800e294:	bfb8      	it	lt
 800e296:	4618      	movlt	r0, r3
 800e298:	e7a6      	b.n	800e1e8 <_printf_i+0x164>
 800e29a:	2301      	movs	r3, #1
 800e29c:	4632      	mov	r2, r6
 800e29e:	4649      	mov	r1, r9
 800e2a0:	4640      	mov	r0, r8
 800e2a2:	47d0      	blx	sl
 800e2a4:	3001      	adds	r0, #1
 800e2a6:	d09d      	beq.n	800e1e4 <_printf_i+0x160>
 800e2a8:	3501      	adds	r5, #1
 800e2aa:	68e3      	ldr	r3, [r4, #12]
 800e2ac:	9903      	ldr	r1, [sp, #12]
 800e2ae:	1a5b      	subs	r3, r3, r1
 800e2b0:	42ab      	cmp	r3, r5
 800e2b2:	dcf2      	bgt.n	800e29a <_printf_i+0x216>
 800e2b4:	e7eb      	b.n	800e28e <_printf_i+0x20a>
 800e2b6:	2500      	movs	r5, #0
 800e2b8:	f104 0619 	add.w	r6, r4, #25
 800e2bc:	e7f5      	b.n	800e2aa <_printf_i+0x226>
 800e2be:	bf00      	nop
 800e2c0:	0800ed80 	.word	0x0800ed80
 800e2c4:	0800ed91 	.word	0x0800ed91

0800e2c8 <__swbuf_r>:
 800e2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ca:	460e      	mov	r6, r1
 800e2cc:	4614      	mov	r4, r2
 800e2ce:	4605      	mov	r5, r0
 800e2d0:	b118      	cbz	r0, 800e2da <__swbuf_r+0x12>
 800e2d2:	6a03      	ldr	r3, [r0, #32]
 800e2d4:	b90b      	cbnz	r3, 800e2da <__swbuf_r+0x12>
 800e2d6:	f7ff f9ed 	bl	800d6b4 <__sinit>
 800e2da:	69a3      	ldr	r3, [r4, #24]
 800e2dc:	60a3      	str	r3, [r4, #8]
 800e2de:	89a3      	ldrh	r3, [r4, #12]
 800e2e0:	071a      	lsls	r2, r3, #28
 800e2e2:	d525      	bpl.n	800e330 <__swbuf_r+0x68>
 800e2e4:	6923      	ldr	r3, [r4, #16]
 800e2e6:	b31b      	cbz	r3, 800e330 <__swbuf_r+0x68>
 800e2e8:	6823      	ldr	r3, [r4, #0]
 800e2ea:	6922      	ldr	r2, [r4, #16]
 800e2ec:	1a98      	subs	r0, r3, r2
 800e2ee:	6963      	ldr	r3, [r4, #20]
 800e2f0:	b2f6      	uxtb	r6, r6
 800e2f2:	4283      	cmp	r3, r0
 800e2f4:	4637      	mov	r7, r6
 800e2f6:	dc04      	bgt.n	800e302 <__swbuf_r+0x3a>
 800e2f8:	4621      	mov	r1, r4
 800e2fa:	4628      	mov	r0, r5
 800e2fc:	f7ff fcd0 	bl	800dca0 <_fflush_r>
 800e300:	b9e0      	cbnz	r0, 800e33c <__swbuf_r+0x74>
 800e302:	68a3      	ldr	r3, [r4, #8]
 800e304:	3b01      	subs	r3, #1
 800e306:	60a3      	str	r3, [r4, #8]
 800e308:	6823      	ldr	r3, [r4, #0]
 800e30a:	1c5a      	adds	r2, r3, #1
 800e30c:	6022      	str	r2, [r4, #0]
 800e30e:	701e      	strb	r6, [r3, #0]
 800e310:	6962      	ldr	r2, [r4, #20]
 800e312:	1c43      	adds	r3, r0, #1
 800e314:	429a      	cmp	r2, r3
 800e316:	d004      	beq.n	800e322 <__swbuf_r+0x5a>
 800e318:	89a3      	ldrh	r3, [r4, #12]
 800e31a:	07db      	lsls	r3, r3, #31
 800e31c:	d506      	bpl.n	800e32c <__swbuf_r+0x64>
 800e31e:	2e0a      	cmp	r6, #10
 800e320:	d104      	bne.n	800e32c <__swbuf_r+0x64>
 800e322:	4621      	mov	r1, r4
 800e324:	4628      	mov	r0, r5
 800e326:	f7ff fcbb 	bl	800dca0 <_fflush_r>
 800e32a:	b938      	cbnz	r0, 800e33c <__swbuf_r+0x74>
 800e32c:	4638      	mov	r0, r7
 800e32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e330:	4621      	mov	r1, r4
 800e332:	4628      	mov	r0, r5
 800e334:	f000 f806 	bl	800e344 <__swsetup_r>
 800e338:	2800      	cmp	r0, #0
 800e33a:	d0d5      	beq.n	800e2e8 <__swbuf_r+0x20>
 800e33c:	f04f 37ff 	mov.w	r7, #4294967295
 800e340:	e7f4      	b.n	800e32c <__swbuf_r+0x64>
	...

0800e344 <__swsetup_r>:
 800e344:	b538      	push	{r3, r4, r5, lr}
 800e346:	4b2a      	ldr	r3, [pc, #168]	; (800e3f0 <__swsetup_r+0xac>)
 800e348:	4605      	mov	r5, r0
 800e34a:	6818      	ldr	r0, [r3, #0]
 800e34c:	460c      	mov	r4, r1
 800e34e:	b118      	cbz	r0, 800e358 <__swsetup_r+0x14>
 800e350:	6a03      	ldr	r3, [r0, #32]
 800e352:	b90b      	cbnz	r3, 800e358 <__swsetup_r+0x14>
 800e354:	f7ff f9ae 	bl	800d6b4 <__sinit>
 800e358:	89a3      	ldrh	r3, [r4, #12]
 800e35a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e35e:	0718      	lsls	r0, r3, #28
 800e360:	d422      	bmi.n	800e3a8 <__swsetup_r+0x64>
 800e362:	06d9      	lsls	r1, r3, #27
 800e364:	d407      	bmi.n	800e376 <__swsetup_r+0x32>
 800e366:	2309      	movs	r3, #9
 800e368:	602b      	str	r3, [r5, #0]
 800e36a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e36e:	81a3      	strh	r3, [r4, #12]
 800e370:	f04f 30ff 	mov.w	r0, #4294967295
 800e374:	e034      	b.n	800e3e0 <__swsetup_r+0x9c>
 800e376:	0758      	lsls	r0, r3, #29
 800e378:	d512      	bpl.n	800e3a0 <__swsetup_r+0x5c>
 800e37a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e37c:	b141      	cbz	r1, 800e390 <__swsetup_r+0x4c>
 800e37e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e382:	4299      	cmp	r1, r3
 800e384:	d002      	beq.n	800e38c <__swsetup_r+0x48>
 800e386:	4628      	mov	r0, r5
 800e388:	f7ff fbb8 	bl	800dafc <_free_r>
 800e38c:	2300      	movs	r3, #0
 800e38e:	6363      	str	r3, [r4, #52]	; 0x34
 800e390:	89a3      	ldrh	r3, [r4, #12]
 800e392:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e396:	81a3      	strh	r3, [r4, #12]
 800e398:	2300      	movs	r3, #0
 800e39a:	6063      	str	r3, [r4, #4]
 800e39c:	6923      	ldr	r3, [r4, #16]
 800e39e:	6023      	str	r3, [r4, #0]
 800e3a0:	89a3      	ldrh	r3, [r4, #12]
 800e3a2:	f043 0308 	orr.w	r3, r3, #8
 800e3a6:	81a3      	strh	r3, [r4, #12]
 800e3a8:	6923      	ldr	r3, [r4, #16]
 800e3aa:	b94b      	cbnz	r3, 800e3c0 <__swsetup_r+0x7c>
 800e3ac:	89a3      	ldrh	r3, [r4, #12]
 800e3ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e3b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3b6:	d003      	beq.n	800e3c0 <__swsetup_r+0x7c>
 800e3b8:	4621      	mov	r1, r4
 800e3ba:	4628      	mov	r0, r5
 800e3bc:	f000 f840 	bl	800e440 <__smakebuf_r>
 800e3c0:	89a0      	ldrh	r0, [r4, #12]
 800e3c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3c6:	f010 0301 	ands.w	r3, r0, #1
 800e3ca:	d00a      	beq.n	800e3e2 <__swsetup_r+0x9e>
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	60a3      	str	r3, [r4, #8]
 800e3d0:	6963      	ldr	r3, [r4, #20]
 800e3d2:	425b      	negs	r3, r3
 800e3d4:	61a3      	str	r3, [r4, #24]
 800e3d6:	6923      	ldr	r3, [r4, #16]
 800e3d8:	b943      	cbnz	r3, 800e3ec <__swsetup_r+0xa8>
 800e3da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e3de:	d1c4      	bne.n	800e36a <__swsetup_r+0x26>
 800e3e0:	bd38      	pop	{r3, r4, r5, pc}
 800e3e2:	0781      	lsls	r1, r0, #30
 800e3e4:	bf58      	it	pl
 800e3e6:	6963      	ldrpl	r3, [r4, #20]
 800e3e8:	60a3      	str	r3, [r4, #8]
 800e3ea:	e7f4      	b.n	800e3d6 <__swsetup_r+0x92>
 800e3ec:	2000      	movs	r0, #0
 800e3ee:	e7f7      	b.n	800e3e0 <__swsetup_r+0x9c>
 800e3f0:	2000024c 	.word	0x2000024c

0800e3f4 <__swhatbuf_r>:
 800e3f4:	b570      	push	{r4, r5, r6, lr}
 800e3f6:	460c      	mov	r4, r1
 800e3f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3fc:	2900      	cmp	r1, #0
 800e3fe:	b096      	sub	sp, #88	; 0x58
 800e400:	4615      	mov	r5, r2
 800e402:	461e      	mov	r6, r3
 800e404:	da0d      	bge.n	800e422 <__swhatbuf_r+0x2e>
 800e406:	89a3      	ldrh	r3, [r4, #12]
 800e408:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e40c:	f04f 0100 	mov.w	r1, #0
 800e410:	bf0c      	ite	eq
 800e412:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e416:	2340      	movne	r3, #64	; 0x40
 800e418:	2000      	movs	r0, #0
 800e41a:	6031      	str	r1, [r6, #0]
 800e41c:	602b      	str	r3, [r5, #0]
 800e41e:	b016      	add	sp, #88	; 0x58
 800e420:	bd70      	pop	{r4, r5, r6, pc}
 800e422:	466a      	mov	r2, sp
 800e424:	f000 f848 	bl	800e4b8 <_fstat_r>
 800e428:	2800      	cmp	r0, #0
 800e42a:	dbec      	blt.n	800e406 <__swhatbuf_r+0x12>
 800e42c:	9901      	ldr	r1, [sp, #4]
 800e42e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e432:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e436:	4259      	negs	r1, r3
 800e438:	4159      	adcs	r1, r3
 800e43a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e43e:	e7eb      	b.n	800e418 <__swhatbuf_r+0x24>

0800e440 <__smakebuf_r>:
 800e440:	898b      	ldrh	r3, [r1, #12]
 800e442:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e444:	079d      	lsls	r5, r3, #30
 800e446:	4606      	mov	r6, r0
 800e448:	460c      	mov	r4, r1
 800e44a:	d507      	bpl.n	800e45c <__smakebuf_r+0x1c>
 800e44c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e450:	6023      	str	r3, [r4, #0]
 800e452:	6123      	str	r3, [r4, #16]
 800e454:	2301      	movs	r3, #1
 800e456:	6163      	str	r3, [r4, #20]
 800e458:	b002      	add	sp, #8
 800e45a:	bd70      	pop	{r4, r5, r6, pc}
 800e45c:	ab01      	add	r3, sp, #4
 800e45e:	466a      	mov	r2, sp
 800e460:	f7ff ffc8 	bl	800e3f4 <__swhatbuf_r>
 800e464:	9900      	ldr	r1, [sp, #0]
 800e466:	4605      	mov	r5, r0
 800e468:	4630      	mov	r0, r6
 800e46a:	f7fe ff7f 	bl	800d36c <_malloc_r>
 800e46e:	b948      	cbnz	r0, 800e484 <__smakebuf_r+0x44>
 800e470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e474:	059a      	lsls	r2, r3, #22
 800e476:	d4ef      	bmi.n	800e458 <__smakebuf_r+0x18>
 800e478:	f023 0303 	bic.w	r3, r3, #3
 800e47c:	f043 0302 	orr.w	r3, r3, #2
 800e480:	81a3      	strh	r3, [r4, #12]
 800e482:	e7e3      	b.n	800e44c <__smakebuf_r+0xc>
 800e484:	89a3      	ldrh	r3, [r4, #12]
 800e486:	6020      	str	r0, [r4, #0]
 800e488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e48c:	81a3      	strh	r3, [r4, #12]
 800e48e:	9b00      	ldr	r3, [sp, #0]
 800e490:	6163      	str	r3, [r4, #20]
 800e492:	9b01      	ldr	r3, [sp, #4]
 800e494:	6120      	str	r0, [r4, #16]
 800e496:	b15b      	cbz	r3, 800e4b0 <__smakebuf_r+0x70>
 800e498:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e49c:	4630      	mov	r0, r6
 800e49e:	f000 f81d 	bl	800e4dc <_isatty_r>
 800e4a2:	b128      	cbz	r0, 800e4b0 <__smakebuf_r+0x70>
 800e4a4:	89a3      	ldrh	r3, [r4, #12]
 800e4a6:	f023 0303 	bic.w	r3, r3, #3
 800e4aa:	f043 0301 	orr.w	r3, r3, #1
 800e4ae:	81a3      	strh	r3, [r4, #12]
 800e4b0:	89a3      	ldrh	r3, [r4, #12]
 800e4b2:	431d      	orrs	r5, r3
 800e4b4:	81a5      	strh	r5, [r4, #12]
 800e4b6:	e7cf      	b.n	800e458 <__smakebuf_r+0x18>

0800e4b8 <_fstat_r>:
 800e4b8:	b538      	push	{r3, r4, r5, lr}
 800e4ba:	4d07      	ldr	r5, [pc, #28]	; (800e4d8 <_fstat_r+0x20>)
 800e4bc:	2300      	movs	r3, #0
 800e4be:	4604      	mov	r4, r0
 800e4c0:	4608      	mov	r0, r1
 800e4c2:	4611      	mov	r1, r2
 800e4c4:	602b      	str	r3, [r5, #0]
 800e4c6:	f7fa fad4 	bl	8008a72 <_fstat>
 800e4ca:	1c43      	adds	r3, r0, #1
 800e4cc:	d102      	bne.n	800e4d4 <_fstat_r+0x1c>
 800e4ce:	682b      	ldr	r3, [r5, #0]
 800e4d0:	b103      	cbz	r3, 800e4d4 <_fstat_r+0x1c>
 800e4d2:	6023      	str	r3, [r4, #0]
 800e4d4:	bd38      	pop	{r3, r4, r5, pc}
 800e4d6:	bf00      	nop
 800e4d8:	20000fe4 	.word	0x20000fe4

0800e4dc <_isatty_r>:
 800e4dc:	b538      	push	{r3, r4, r5, lr}
 800e4de:	4d06      	ldr	r5, [pc, #24]	; (800e4f8 <_isatty_r+0x1c>)
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	4604      	mov	r4, r0
 800e4e4:	4608      	mov	r0, r1
 800e4e6:	602b      	str	r3, [r5, #0]
 800e4e8:	f7fa fad3 	bl	8008a92 <_isatty>
 800e4ec:	1c43      	adds	r3, r0, #1
 800e4ee:	d102      	bne.n	800e4f6 <_isatty_r+0x1a>
 800e4f0:	682b      	ldr	r3, [r5, #0]
 800e4f2:	b103      	cbz	r3, 800e4f6 <_isatty_r+0x1a>
 800e4f4:	6023      	str	r3, [r4, #0]
 800e4f6:	bd38      	pop	{r3, r4, r5, pc}
 800e4f8:	20000fe4 	.word	0x20000fe4

0800e4fc <asinf>:
 800e4fc:	b508      	push	{r3, lr}
 800e4fe:	ed2d 8b02 	vpush	{d8}
 800e502:	eeb0 8a40 	vmov.f32	s16, s0
 800e506:	f000 f835 	bl	800e574 <__ieee754_asinf>
 800e50a:	eeb4 8a48 	vcmp.f32	s16, s16
 800e50e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e512:	eef0 8a40 	vmov.f32	s17, s0
 800e516:	d615      	bvs.n	800e544 <asinf+0x48>
 800e518:	eeb0 0a48 	vmov.f32	s0, s16
 800e51c:	f000 f81c 	bl	800e558 <fabsf>
 800e520:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e524:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e52c:	dd0a      	ble.n	800e544 <asinf+0x48>
 800e52e:	f7ff fa83 	bl	800da38 <__errno>
 800e532:	ecbd 8b02 	vpop	{d8}
 800e536:	2321      	movs	r3, #33	; 0x21
 800e538:	6003      	str	r3, [r0, #0]
 800e53a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e53e:	4804      	ldr	r0, [pc, #16]	; (800e550 <asinf+0x54>)
 800e540:	f000 b812 	b.w	800e568 <nanf>
 800e544:	eeb0 0a68 	vmov.f32	s0, s17
 800e548:	ecbd 8b02 	vpop	{d8}
 800e54c:	bd08      	pop	{r3, pc}
 800e54e:	bf00      	nop
 800e550:	0800ed6e 	.word	0x0800ed6e

0800e554 <atan2f>:
 800e554:	f000 b8f4 	b.w	800e740 <__ieee754_atan2f>

0800e558 <fabsf>:
 800e558:	ee10 3a10 	vmov	r3, s0
 800e55c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e560:	ee00 3a10 	vmov	s0, r3
 800e564:	4770      	bx	lr
	...

0800e568 <nanf>:
 800e568:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e570 <nanf+0x8>
 800e56c:	4770      	bx	lr
 800e56e:	bf00      	nop
 800e570:	7fc00000 	.word	0x7fc00000

0800e574 <__ieee754_asinf>:
 800e574:	b538      	push	{r3, r4, r5, lr}
 800e576:	ee10 5a10 	vmov	r5, s0
 800e57a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e57e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e582:	ed2d 8b04 	vpush	{d8-d9}
 800e586:	d10c      	bne.n	800e5a2 <__ieee754_asinf+0x2e>
 800e588:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800e700 <__ieee754_asinf+0x18c>
 800e58c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800e704 <__ieee754_asinf+0x190>
 800e590:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e594:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e598:	eeb0 0a67 	vmov.f32	s0, s15
 800e59c:	ecbd 8b04 	vpop	{d8-d9}
 800e5a0:	bd38      	pop	{r3, r4, r5, pc}
 800e5a2:	dd04      	ble.n	800e5ae <__ieee754_asinf+0x3a>
 800e5a4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e5a8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e5ac:	e7f6      	b.n	800e59c <__ieee754_asinf+0x28>
 800e5ae:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800e5b2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800e5b6:	da0b      	bge.n	800e5d0 <__ieee754_asinf+0x5c>
 800e5b8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800e5bc:	da52      	bge.n	800e664 <__ieee754_asinf+0xf0>
 800e5be:	eddf 7a52 	vldr	s15, [pc, #328]	; 800e708 <__ieee754_asinf+0x194>
 800e5c2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e5c6:	eef4 7ae8 	vcmpe.f32	s15, s17
 800e5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ce:	dce5      	bgt.n	800e59c <__ieee754_asinf+0x28>
 800e5d0:	f7ff ffc2 	bl	800e558 <fabsf>
 800e5d4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800e5d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e5dc:	ee20 8a27 	vmul.f32	s16, s0, s15
 800e5e0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800e70c <__ieee754_asinf+0x198>
 800e5e4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800e710 <__ieee754_asinf+0x19c>
 800e5e8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800e714 <__ieee754_asinf+0x1a0>
 800e5ec:	eea8 7a27 	vfma.f32	s14, s16, s15
 800e5f0:	eddf 7a49 	vldr	s15, [pc, #292]	; 800e718 <__ieee754_asinf+0x1a4>
 800e5f4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e5f8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800e71c <__ieee754_asinf+0x1a8>
 800e5fc:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e600:	eddf 7a47 	vldr	s15, [pc, #284]	; 800e720 <__ieee754_asinf+0x1ac>
 800e604:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e608:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800e724 <__ieee754_asinf+0x1b0>
 800e60c:	eea7 9a88 	vfma.f32	s18, s15, s16
 800e610:	eddf 7a45 	vldr	s15, [pc, #276]	; 800e728 <__ieee754_asinf+0x1b4>
 800e614:	eee8 7a07 	vfma.f32	s15, s16, s14
 800e618:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800e72c <__ieee754_asinf+0x1b8>
 800e61c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e620:	eddf 7a43 	vldr	s15, [pc, #268]	; 800e730 <__ieee754_asinf+0x1bc>
 800e624:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e628:	eeb0 0a48 	vmov.f32	s0, s16
 800e62c:	eee7 8a88 	vfma.f32	s17, s15, s16
 800e630:	f000 f9fa 	bl	800ea28 <__ieee754_sqrtf>
 800e634:	4b3f      	ldr	r3, [pc, #252]	; (800e734 <__ieee754_asinf+0x1c0>)
 800e636:	ee29 9a08 	vmul.f32	s18, s18, s16
 800e63a:	429c      	cmp	r4, r3
 800e63c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800e640:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e644:	dd3d      	ble.n	800e6c2 <__ieee754_asinf+0x14e>
 800e646:	eea0 0a06 	vfma.f32	s0, s0, s12
 800e64a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800e738 <__ieee754_asinf+0x1c4>
 800e64e:	eee0 7a26 	vfma.f32	s15, s0, s13
 800e652:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800e704 <__ieee754_asinf+0x190>
 800e656:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e65a:	2d00      	cmp	r5, #0
 800e65c:	bfd8      	it	le
 800e65e:	eeb1 0a40 	vnegle.f32	s0, s0
 800e662:	e79b      	b.n	800e59c <__ieee754_asinf+0x28>
 800e664:	ee60 7a00 	vmul.f32	s15, s0, s0
 800e668:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e710 <__ieee754_asinf+0x19c>
 800e66c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800e70c <__ieee754_asinf+0x198>
 800e670:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800e724 <__ieee754_asinf+0x1b0>
 800e674:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e678:	eddf 6a27 	vldr	s13, [pc, #156]	; 800e718 <__ieee754_asinf+0x1a4>
 800e67c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e680:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800e71c <__ieee754_asinf+0x1a8>
 800e684:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e688:	eddf 6a25 	vldr	s13, [pc, #148]	; 800e720 <__ieee754_asinf+0x1ac>
 800e68c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e690:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800e714 <__ieee754_asinf+0x1a0>
 800e694:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e698:	eddf 6a23 	vldr	s13, [pc, #140]	; 800e728 <__ieee754_asinf+0x1b4>
 800e69c:	eee7 6a86 	vfma.f32	s13, s15, s12
 800e6a0:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800e72c <__ieee754_asinf+0x1b8>
 800e6a4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800e6a8:	eddf 6a21 	vldr	s13, [pc, #132]	; 800e730 <__ieee754_asinf+0x1bc>
 800e6ac:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e6b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e6b4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800e6b8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800e6bc:	eea0 0a27 	vfma.f32	s0, s0, s15
 800e6c0:	e76c      	b.n	800e59c <__ieee754_asinf+0x28>
 800e6c2:	ee10 3a10 	vmov	r3, s0
 800e6c6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e6ca:	f023 030f 	bic.w	r3, r3, #15
 800e6ce:	ee07 3a10 	vmov	s14, r3
 800e6d2:	eea7 8a47 	vfms.f32	s16, s14, s14
 800e6d6:	ee70 7a07 	vadd.f32	s15, s0, s14
 800e6da:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e6de:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800e6e2:	eddf 7a07 	vldr	s15, [pc, #28]	; 800e700 <__ieee754_asinf+0x18c>
 800e6e6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800e6ea:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800e6ee:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800e73c <__ieee754_asinf+0x1c8>
 800e6f2:	eeb0 6a40 	vmov.f32	s12, s0
 800e6f6:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e6fa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e6fe:	e7aa      	b.n	800e656 <__ieee754_asinf+0xe2>
 800e700:	b33bbd2e 	.word	0xb33bbd2e
 800e704:	3fc90fdb 	.word	0x3fc90fdb
 800e708:	7149f2ca 	.word	0x7149f2ca
 800e70c:	3a4f7f04 	.word	0x3a4f7f04
 800e710:	3811ef08 	.word	0x3811ef08
 800e714:	3e2aaaab 	.word	0x3e2aaaab
 800e718:	bd241146 	.word	0xbd241146
 800e71c:	3e4e0aa8 	.word	0x3e4e0aa8
 800e720:	bea6b090 	.word	0xbea6b090
 800e724:	3d9dc62e 	.word	0x3d9dc62e
 800e728:	bf303361 	.word	0xbf303361
 800e72c:	4001572d 	.word	0x4001572d
 800e730:	c019d139 	.word	0xc019d139
 800e734:	3f799999 	.word	0x3f799999
 800e738:	333bbd2e 	.word	0x333bbd2e
 800e73c:	3f490fdb 	.word	0x3f490fdb

0800e740 <__ieee754_atan2f>:
 800e740:	ee10 2a90 	vmov	r2, s1
 800e744:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800e748:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e74c:	b510      	push	{r4, lr}
 800e74e:	eef0 7a40 	vmov.f32	s15, s0
 800e752:	dc06      	bgt.n	800e762 <__ieee754_atan2f+0x22>
 800e754:	ee10 0a10 	vmov	r0, s0
 800e758:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e75c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e760:	dd04      	ble.n	800e76c <__ieee754_atan2f+0x2c>
 800e762:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e766:	eeb0 0a67 	vmov.f32	s0, s15
 800e76a:	bd10      	pop	{r4, pc}
 800e76c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800e770:	d103      	bne.n	800e77a <__ieee754_atan2f+0x3a>
 800e772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e776:	f000 b883 	b.w	800e880 <atanf>
 800e77a:	1794      	asrs	r4, r2, #30
 800e77c:	f004 0402 	and.w	r4, r4, #2
 800e780:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e784:	b943      	cbnz	r3, 800e798 <__ieee754_atan2f+0x58>
 800e786:	2c02      	cmp	r4, #2
 800e788:	d05e      	beq.n	800e848 <__ieee754_atan2f+0x108>
 800e78a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800e85c <__ieee754_atan2f+0x11c>
 800e78e:	2c03      	cmp	r4, #3
 800e790:	bf08      	it	eq
 800e792:	eef0 7a47 	vmoveq.f32	s15, s14
 800e796:	e7e6      	b.n	800e766 <__ieee754_atan2f+0x26>
 800e798:	b941      	cbnz	r1, 800e7ac <__ieee754_atan2f+0x6c>
 800e79a:	eddf 7a31 	vldr	s15, [pc, #196]	; 800e860 <__ieee754_atan2f+0x120>
 800e79e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800e864 <__ieee754_atan2f+0x124>
 800e7a2:	2800      	cmp	r0, #0
 800e7a4:	bfb8      	it	lt
 800e7a6:	eef0 7a47 	vmovlt.f32	s15, s14
 800e7aa:	e7dc      	b.n	800e766 <__ieee754_atan2f+0x26>
 800e7ac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e7b0:	d110      	bne.n	800e7d4 <__ieee754_atan2f+0x94>
 800e7b2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e7b6:	f104 34ff 	add.w	r4, r4, #4294967295
 800e7ba:	d107      	bne.n	800e7cc <__ieee754_atan2f+0x8c>
 800e7bc:	2c02      	cmp	r4, #2
 800e7be:	d846      	bhi.n	800e84e <__ieee754_atan2f+0x10e>
 800e7c0:	4b29      	ldr	r3, [pc, #164]	; (800e868 <__ieee754_atan2f+0x128>)
 800e7c2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e7c6:	edd3 7a00 	vldr	s15, [r3]
 800e7ca:	e7cc      	b.n	800e766 <__ieee754_atan2f+0x26>
 800e7cc:	2c02      	cmp	r4, #2
 800e7ce:	d841      	bhi.n	800e854 <__ieee754_atan2f+0x114>
 800e7d0:	4b26      	ldr	r3, [pc, #152]	; (800e86c <__ieee754_atan2f+0x12c>)
 800e7d2:	e7f6      	b.n	800e7c2 <__ieee754_atan2f+0x82>
 800e7d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e7d8:	d0df      	beq.n	800e79a <__ieee754_atan2f+0x5a>
 800e7da:	1a5b      	subs	r3, r3, r1
 800e7dc:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800e7e0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800e7e4:	da1a      	bge.n	800e81c <__ieee754_atan2f+0xdc>
 800e7e6:	2a00      	cmp	r2, #0
 800e7e8:	da01      	bge.n	800e7ee <__ieee754_atan2f+0xae>
 800e7ea:	313c      	adds	r1, #60	; 0x3c
 800e7ec:	db19      	blt.n	800e822 <__ieee754_atan2f+0xe2>
 800e7ee:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800e7f2:	f7ff feb1 	bl	800e558 <fabsf>
 800e7f6:	f000 f843 	bl	800e880 <atanf>
 800e7fa:	eef0 7a40 	vmov.f32	s15, s0
 800e7fe:	2c01      	cmp	r4, #1
 800e800:	d012      	beq.n	800e828 <__ieee754_atan2f+0xe8>
 800e802:	2c02      	cmp	r4, #2
 800e804:	d017      	beq.n	800e836 <__ieee754_atan2f+0xf6>
 800e806:	2c00      	cmp	r4, #0
 800e808:	d0ad      	beq.n	800e766 <__ieee754_atan2f+0x26>
 800e80a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800e870 <__ieee754_atan2f+0x130>
 800e80e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e812:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800e874 <__ieee754_atan2f+0x134>
 800e816:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e81a:	e7a4      	b.n	800e766 <__ieee754_atan2f+0x26>
 800e81c:	eddf 7a10 	vldr	s15, [pc, #64]	; 800e860 <__ieee754_atan2f+0x120>
 800e820:	e7ed      	b.n	800e7fe <__ieee754_atan2f+0xbe>
 800e822:	eddf 7a15 	vldr	s15, [pc, #84]	; 800e878 <__ieee754_atan2f+0x138>
 800e826:	e7ea      	b.n	800e7fe <__ieee754_atan2f+0xbe>
 800e828:	ee17 3a90 	vmov	r3, s15
 800e82c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e830:	ee07 3a90 	vmov	s15, r3
 800e834:	e797      	b.n	800e766 <__ieee754_atan2f+0x26>
 800e836:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800e870 <__ieee754_atan2f+0x130>
 800e83a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e83e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800e874 <__ieee754_atan2f+0x134>
 800e842:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e846:	e78e      	b.n	800e766 <__ieee754_atan2f+0x26>
 800e848:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800e874 <__ieee754_atan2f+0x134>
 800e84c:	e78b      	b.n	800e766 <__ieee754_atan2f+0x26>
 800e84e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800e87c <__ieee754_atan2f+0x13c>
 800e852:	e788      	b.n	800e766 <__ieee754_atan2f+0x26>
 800e854:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e878 <__ieee754_atan2f+0x138>
 800e858:	e785      	b.n	800e766 <__ieee754_atan2f+0x26>
 800e85a:	bf00      	nop
 800e85c:	c0490fdb 	.word	0xc0490fdb
 800e860:	3fc90fdb 	.word	0x3fc90fdb
 800e864:	bfc90fdb 	.word	0xbfc90fdb
 800e868:	0800eda4 	.word	0x0800eda4
 800e86c:	0800edb0 	.word	0x0800edb0
 800e870:	33bbbd2e 	.word	0x33bbbd2e
 800e874:	40490fdb 	.word	0x40490fdb
 800e878:	00000000 	.word	0x00000000
 800e87c:	3f490fdb 	.word	0x3f490fdb

0800e880 <atanf>:
 800e880:	b538      	push	{r3, r4, r5, lr}
 800e882:	ee10 5a10 	vmov	r5, s0
 800e886:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e88a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800e88e:	eef0 7a40 	vmov.f32	s15, s0
 800e892:	db10      	blt.n	800e8b6 <atanf+0x36>
 800e894:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800e898:	dd04      	ble.n	800e8a4 <atanf+0x24>
 800e89a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800e89e:	eeb0 0a67 	vmov.f32	s0, s15
 800e8a2:	bd38      	pop	{r3, r4, r5, pc}
 800e8a4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800e9dc <atanf+0x15c>
 800e8a8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800e9e0 <atanf+0x160>
 800e8ac:	2d00      	cmp	r5, #0
 800e8ae:	bfd8      	it	le
 800e8b0:	eef0 7a47 	vmovle.f32	s15, s14
 800e8b4:	e7f3      	b.n	800e89e <atanf+0x1e>
 800e8b6:	4b4b      	ldr	r3, [pc, #300]	; (800e9e4 <atanf+0x164>)
 800e8b8:	429c      	cmp	r4, r3
 800e8ba:	dc10      	bgt.n	800e8de <atanf+0x5e>
 800e8bc:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800e8c0:	da0a      	bge.n	800e8d8 <atanf+0x58>
 800e8c2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800e9e8 <atanf+0x168>
 800e8c6:	ee30 7a07 	vadd.f32	s14, s0, s14
 800e8ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8ce:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800e8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8d6:	dce2      	bgt.n	800e89e <atanf+0x1e>
 800e8d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8dc:	e013      	b.n	800e906 <atanf+0x86>
 800e8de:	f7ff fe3b 	bl	800e558 <fabsf>
 800e8e2:	4b42      	ldr	r3, [pc, #264]	; (800e9ec <atanf+0x16c>)
 800e8e4:	429c      	cmp	r4, r3
 800e8e6:	dc4f      	bgt.n	800e988 <atanf+0x108>
 800e8e8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800e8ec:	429c      	cmp	r4, r3
 800e8ee:	dc41      	bgt.n	800e974 <atanf+0xf4>
 800e8f0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800e8f4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e8f8:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e902:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e906:	1c5a      	adds	r2, r3, #1
 800e908:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800e90c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800e9f0 <atanf+0x170>
 800e910:	eddf 5a38 	vldr	s11, [pc, #224]	; 800e9f4 <atanf+0x174>
 800e914:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800e9f8 <atanf+0x178>
 800e918:	ee66 6a06 	vmul.f32	s13, s12, s12
 800e91c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800e920:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800e9fc <atanf+0x17c>
 800e924:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e928:	eddf 5a35 	vldr	s11, [pc, #212]	; 800ea00 <atanf+0x180>
 800e92c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e930:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800ea04 <atanf+0x184>
 800e934:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e938:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ea08 <atanf+0x188>
 800e93c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e940:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800ea0c <atanf+0x18c>
 800e944:	eea6 5a87 	vfma.f32	s10, s13, s14
 800e948:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ea10 <atanf+0x190>
 800e94c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e950:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800ea14 <atanf+0x194>
 800e954:	eea7 5a26 	vfma.f32	s10, s14, s13
 800e958:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ea18 <atanf+0x198>
 800e95c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e960:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e964:	eea5 7a86 	vfma.f32	s14, s11, s12
 800e968:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e96c:	d121      	bne.n	800e9b2 <atanf+0x132>
 800e96e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e972:	e794      	b.n	800e89e <atanf+0x1e>
 800e974:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e978:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e97c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e980:	2301      	movs	r3, #1
 800e982:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e986:	e7be      	b.n	800e906 <atanf+0x86>
 800e988:	4b24      	ldr	r3, [pc, #144]	; (800ea1c <atanf+0x19c>)
 800e98a:	429c      	cmp	r4, r3
 800e98c:	dc0b      	bgt.n	800e9a6 <atanf+0x126>
 800e98e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800e992:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e996:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e99a:	2302      	movs	r3, #2
 800e99c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e9a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9a4:	e7af      	b.n	800e906 <atanf+0x86>
 800e9a6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e9aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e9ae:	2303      	movs	r3, #3
 800e9b0:	e7a9      	b.n	800e906 <atanf+0x86>
 800e9b2:	4a1b      	ldr	r2, [pc, #108]	; (800ea20 <atanf+0x1a0>)
 800e9b4:	491b      	ldr	r1, [pc, #108]	; (800ea24 <atanf+0x1a4>)
 800e9b6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e9ba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e9be:	edd3 6a00 	vldr	s13, [r3]
 800e9c2:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e9c6:	2d00      	cmp	r5, #0
 800e9c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e9cc:	edd2 7a00 	vldr	s15, [r2]
 800e9d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e9d4:	bfb8      	it	lt
 800e9d6:	eef1 7a67 	vneglt.f32	s15, s15
 800e9da:	e760      	b.n	800e89e <atanf+0x1e>
 800e9dc:	3fc90fdb 	.word	0x3fc90fdb
 800e9e0:	bfc90fdb 	.word	0xbfc90fdb
 800e9e4:	3edfffff 	.word	0x3edfffff
 800e9e8:	7149f2ca 	.word	0x7149f2ca
 800e9ec:	3f97ffff 	.word	0x3f97ffff
 800e9f0:	3c8569d7 	.word	0x3c8569d7
 800e9f4:	3d4bda59 	.word	0x3d4bda59
 800e9f8:	bd6ef16b 	.word	0xbd6ef16b
 800e9fc:	3d886b35 	.word	0x3d886b35
 800ea00:	3dba2e6e 	.word	0x3dba2e6e
 800ea04:	3e124925 	.word	0x3e124925
 800ea08:	3eaaaaab 	.word	0x3eaaaaab
 800ea0c:	bd15a221 	.word	0xbd15a221
 800ea10:	bd9d8795 	.word	0xbd9d8795
 800ea14:	bde38e38 	.word	0xbde38e38
 800ea18:	be4ccccd 	.word	0xbe4ccccd
 800ea1c:	401bffff 	.word	0x401bffff
 800ea20:	0800edbc 	.word	0x0800edbc
 800ea24:	0800edcc 	.word	0x0800edcc

0800ea28 <__ieee754_sqrtf>:
 800ea28:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ea2c:	4770      	bx	lr
	...

0800ea30 <_init>:
 800ea30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea32:	bf00      	nop
 800ea34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea36:	bc08      	pop	{r3}
 800ea38:	469e      	mov	lr, r3
 800ea3a:	4770      	bx	lr

0800ea3c <_fini>:
 800ea3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea3e:	bf00      	nop
 800ea40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea42:	bc08      	pop	{r3}
 800ea44:	469e      	mov	lr, r3
 800ea46:	4770      	bx	lr
